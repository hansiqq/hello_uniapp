<template>
  <view class="x-input">
    <view class="x-input-item " v-if="!password">
      <text class="x-input-label" v-if="label">{{ label }}</text>
      <input :type="type" @focus="inputFocus" class="x-input-item-input" :style="{width: screenWidth - 145 + 'px'}" :value="inputValue" :placeholder="placeholder" :readonly="readonly" :required="required" :disabled="disabled" :autofocus="autofocus" @input="clearInput" />
      <view class="uni-icon uni-icon-clear" v-if="clearable && showClearIcon" @click="clearIcon" style="display: none;"></view>
    </view>
    <view class="x-input-item " v-if="password">
      <text class="x-input-label" v-if="label" :style="{ color: colorIndex ? 'red' : '' }">{{ label }}</text>
      <input class="x-input-item-input" @focus="inputFocus" :value="inputModel" :style="{width: screenWidth - 145 + 'px'}" :placeholder="placeholder" :readonly="readonly" :password="showPassword" :required="required" :disabled="disabled" :autofocus="autofocus" @input="clearInput" />
      <view class="uni-icon uni-icon-eye" :class="[!showPassword ? 'uni-active' : '']" @click="changePassword"></view>
    </view>
  </view>
</template>
<script>
	import ala from '@/service/ala'
export default {
  props: {
    type: {
      default: 'text'
    },
    label: {
      default: ''
    },
    placeholder: {
      default: '请输入'
    },
    readonly: {
      default: false
    },
    password: {
      default: false
    },
    required: {
      default: false
    },
    disabled: {
      default: false
    },
    autofocus: {
      default: false
    },
    clearable: {
      default: false
    },
    value: {},
    defaultValue: {
      default: ''
    }
  },
  data() {
    return {
      title: 'input',
      inputModel: this.value,
      inputValue: this.value,
      focus: false,
      showClearIcon: false,
      inputClearValue: '',
      changeValue: '',
      showPassword: true,
      colorIndex: false,
	  screenWidth: 0,
	  screenHeight: 0
    }
  },
  mounted() {
    this.init()
  },
  methods: {
    init() {
		this.screenWidth = ala.screenWidth()
		this.screenHeight = ala.screenHeight()
	},
    onKeyInput: function(event) {
      this.inputValue = event.detail.value
    },
    replaceInput: function(event) {
      var value = event.detail.value
      if (value === '11') {
        this.changeValue = '2'
      }
    },
    hideKeyboard: function(event) {
      if (event.detail.value === '123') {
        uni.hideKeyboard()
      }
    },
    clearInput(event) {
      this.inputModel = event.detail.value
      if (this.clearable === true) {
        this.inputClearValue = event.detail.value
        if (event.detail.value.length > 0) {
          this.showClearIcon = true
          this.colorIndex = false
        } else {
          this.showClearIcon = false
          this.colorIndex = true
        }
      }
    },
    clearIcon: function() {
      if (this.clearable) {
        this.inputModel = ''
        this.showClearIcon = false
      }
    },
    changePassword: function() {
      this.showPassword = !this.showPassword
    },
    inputFocus(event) {
      if (event.detail.value && event.detail.value.length > 0) {
        this.colorIndex = false
      } else {
        this.colorIndex = true
      }
    }
  },
  watch: {
    inputModel(val) {
      this.$emit('input', val)
    }
  }
}
</script>

<style lang="scss" scoped>
	.x-input{
		&-item{
			height: 40px;
			flex-direction: row;
			align-items: center;
			&-input{
				font-size: 14px;
			}
		}
		&-label{
			width: 105px;
			font-size: 14px;
		}
	}
</style>
