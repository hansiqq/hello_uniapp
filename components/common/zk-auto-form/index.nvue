<template>
  <view v-if="async" class="zk-auto-form">
    <text class="zk-auto-form-alert-text" v-if="autoForm.tooltip.alertText" :style="{ width: screenWidth - 20 + 'px' }">{{ autoForm.tooltip.alertText }}</text>
    <div class="box-top" v-if="autoForm.tooltip.title">{{ autoForm.tooltip.title }}</div>
    <div v-for="(column, index) in autoForm.columns" :key="index">
      <div v-if="column.type === 'tab'">
        <view class="group-title">
			<text class="group-title-text">{{column.name}}</text>
		</view>
        <div class="box" v-for="(tabColumn, tabColumnIndex) in column.columns" :key="tabColumnIndex">
          <form-item v-model="viewModel[tabColumn.field]" :column="tabColumn" :currentModel="viewModel"></form-item>
        </div>
      </div>
      <div class="box" v-else>
        <form-item v-model="viewModel[column.field]" :column="column" :currentModel="viewModel"></form-item>
      </div>
    </div>
    <view class="zk-exchange-pay" v-if="false">
      <checkbox value="cb" checked="true" />
      <view @click="to('/pages/app/agree')">同意平台服务条款</view>
    </view>
    <view class="zk-auto-form-btn-box">
      <x-button :loading="loading" :btnText="autoForm.tooltip.bottonText" @change="sumbit"></x-button>
    </view>
    <view v-if="autoForm.tooltip.buttomHelpText !== null && autoForm.tooltip.buttomHelpText !== undefined">
      <view class="zk-auto-form-buttom-text">
        <text class="zk-auto-form-buttom-text-text" v-for="(item, index) in autoForm.tooltip.buttomHelpText" :key="index" v-html="index + 1 + '、' + item"></text>
      </view>
    </view>
    <view v-if="autoForm.tooltip.links">
      <view v-for="(item, index) in autoForm.tooltip.viewLinks" :key="index" class="box-bottom" @click="toLink(item)">
        <p>{{ item.name }}</p>
      </view>
    </view>
    <x-msg v-if="isMsg" :message="msgText"></x-msg>
  </view>
</template>

<script>
import ala from '@/service/ala'
import convert from './convert.js'
import formItem from './form-item.nvue'
import service from './service.js'
export default {
  components: {
    formItem
  },
  model: {
    prop: 'dataModel',
    event: 'change'
  },
  props: {
    dataModel: {},
    widget: {},
    afterSave: {
      type: Boolean,
      default: false
    }, // 判断父组件中是否定义保存后执行单独的方法，如果设置为true，在需要定义afterSave事件
    // 示范用法：<zk-auto-form type="RecommendAddUser" @afterSave="afterSave" :afterSave="true"></zk-auto-form>
    type: {} // 如果type不为空的时候，表单从服务器上动态获取
  },
  data() {
    return {
      async: false,
      autoForm: null,
      viewModel: {},
      loading: false,
      phone: null,
      isMsg: false,
      isAgree: false,
      msgText: '',
      screenWidth: ''
    }
  },
  mounted() {
    this.init()
  },
  methods: {
    async init() {
      this.screenWidth = ala.screenWidth()
      var type = this.type
      if (!type) {
        // type = ala.getType(this.widget.route)
      }

      if (!type) {
        type = this.widget.value.form.type
      }
      if (!type) {
        ala.confirm('表单type不存在,请传入')
        ala.back()
      }
      var para = {
        type: type,
        id: 0
        // id: ala.id(this.widget.route)
      }
      var response = await ala.httpGet('api/Auto/Form', para)

      // 暂时性更改，待确定更好方案,处理完善资料的事件
      if (response.fromMessage !== null) {
        this.msgText = response.fromMessage.message
        this.isMsg = true
      }
      var result = convert.toConfig(response)
      this.autoForm = result
      this.viewModel = service.getModel(this.autoForm, this.dataModel)
      this.async = true

      ala.info('auto-from表单结构', this.autoForm, this.viewModel)
    },
    async sumbit() {
      this.loading = true
      ala.info('表单视图', this.viewModel)
      var para = {
        type: this.autoForm.key,
        model: JSON.stringify(this.viewModel)
      }
      var response = await ala.httpPost('api/Auto/Save', para)
      if (response) {
        if (this.afterSave) {
          // 调用父组件中的afterSave方法
          var data = {
            ...response,
            ...this.viewModel
          }

          this.$emit('afterSave', data)
        } else {
          this.isMsg = true
        }
      } else {
        ala.toastWarn(response.message)
      }
      this.loading = false
    },
    to(url) {
      ala.to(url)
    }
  },
  watch: {
    viewModel: {
      deep: true,
      handler(val) {}
    }
  }
}
</script>
<style lang="scss" scoped>
@import './var.scss';
</style>
