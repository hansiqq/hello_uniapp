"use weex:vue";
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 77);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var _package = __webpack_require__(/*! ../package.json */ 2);function _possibleConstructorReturn(self, call) {if (call && (typeof call === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}

var STAT_VERSION = _package.version;
var STAT_URL = 'https://tongji.dcloud.io/uni/stat';
var STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';
var PAGE_PVER_TIME = 1800;
var APP_PVER_TIME = 300;
var OPERATING_TIME = 10;

var UUID_KEY = '__DC_STAT_UUID';
var UUID_VALUE = '__DC_UUID_VALUE';

function getUuid() {
  var uuid = '';
  if (getPlatformName() === 'n') {
    try {
      uuid = plus.runtime.getDCloudId();
    } catch (e) {
      uuid = '';
    }
    return uuid;
  }

  try {
    uuid = uni.getStorageSync(UUID_KEY);
  } catch (e) {
    uuid = UUID_VALUE;
  }

  if (!uuid) {
    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);
    try {
      uni.setStorageSync(UUID_KEY, uuid);
    } catch (e) {
      uni.setStorageSync(UUID_KEY, UUID_VALUE);
    }
  }
  return uuid;
}

var getSgin = function getSgin(statData) {
  var arr = Object.keys(statData);
  var sortArr = arr.sort();
  var sgin = {};
  var sginStr = '';
  for (var i in sortArr) {
    sgin[sortArr[i]] = statData[sortArr[i]];
    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';
  }
  // const options = sginStr.substr(0, sginStr.length - 1)
  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;
  // const si = crypto.createHash('md5').update(sginStr).digest('hex');
  return {
    sign: '',
    options: sginStr.substr(0, sginStr.length - 1) };

};

var getSplicing = function getSplicing(data) {
  var str = '';
  for (var i in data) {
    str += i + '=' + data[i] + '&';
  }
  return str.substr(0, str.length - 1);
};

var getTime = function getTime() {
  return parseInt(new Date().getTime() / 1000);
};

var getPlatformName = function getPlatformName() {
  var platformList = {
    'app-plus': 'n',
    'h5': 'h5',
    'mp-weixin': 'wx',
    'mp-alipay': 'ali',
    'mp-baidu': 'bd',
    'mp-toutiao': 'tt',
    'mp-qq': 'qq' };

  return platformList["app-plus"];
};

var getPackName = function getPackName() {
  var packName = '';
  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {
    // 兼容微信小程序低版本基础库
    if (uni.canIUse('getAccountInfoSync')) {
      packName = uni.getAccountInfoSync().miniProgram.appId || '';
    }
  }
  return packName;
};

var getVersion = function getVersion() {
  return getPlatformName() === 'n' ? plus.runtime.version : '';
};

var getChannel = function getChannel() {
  var platformName = getPlatformName();
  var channel = '';
  if (platformName === 'n') {
    channel = plus.runtime.channel;
  }
  return channel;
};

var getScene = function getScene(options) {
  var platformName = getPlatformName();
  var scene = '';
  if (options) {
    return options;
  }
  if (platformName === 'wx') {
    scene = uni.getLaunchOptionsSync().scene;
  }
  return scene;
};
var First__Visit__Time__KEY = 'First__Visit__Time';
var Last__Visit__Time__KEY = 'Last__Visit__Time';

var getFirstVisitTime = function getFirstVisitTime() {
  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);
  var time = 0;
  if (timeStorge) {
    time = timeStorge;
  } else {
    time = getTime();
    uni.setStorageSync(First__Visit__Time__KEY, time);
    uni.removeStorageSync(Last__Visit__Time__KEY);
  }
  return time;
};

var getLastVisitTime = function getLastVisitTime() {
  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);
  var time = 0;
  if (timeStorge) {
    time = timeStorge;
  } else {
    time = '';
  }
  uni.setStorageSync(Last__Visit__Time__KEY, getTime());
  return time;
};


var PAGE_RESIDENCE_TIME = '__page__residence__time';
var First_Page_residence_time = 0;
var Last_Page_residence_time = 0;


var setPageResidenceTime = function setPageResidenceTime() {
  First_Page_residence_time = getTime();
  if (getPlatformName() === 'n') {
    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());
  }
  return First_Page_residence_time;
};

var getPageResidenceTime = function getPageResidenceTime() {
  Last_Page_residence_time = getTime();
  if (getPlatformName() === 'n') {
    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);
  }
  return Last_Page_residence_time - First_Page_residence_time;
};
var TOTAL__VISIT__COUNT = 'Total__Visit__Count';
var getTotalVisitCount = function getTotalVisitCount() {
  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);
  var count = 1;
  if (timeStorge) {
    count = timeStorge;
    count++;
  }
  uni.setStorageSync(TOTAL__VISIT__COUNT, count);
  return count;
};

var GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {
  var data = {};
  for (var prop in statData) {
    data[prop] = encodeURIComponent(statData[prop]);
  }
  return data;
};

var Set__First__Time = 0;
var Set__Last__Time = 0;

var getFirstTime = function getFirstTime() {
  var time = new Date().getTime();
  Set__First__Time = time;
  Set__Last__Time = 0;
  return time;
};


var getLastTime = function getLastTime() {
  var time = new Date().getTime();
  Set__Last__Time = time;
  return time;
};


var getResidenceTime = function getResidenceTime(type) {
  var residenceTime = 0;
  if (Set__First__Time !== 0) {
    residenceTime = Set__Last__Time - Set__First__Time;
  }

  residenceTime = parseInt(residenceTime / 1000);
  residenceTime = residenceTime < 1 ? 1 : residenceTime;
  if (type === 'app') {
    var overtime = residenceTime > APP_PVER_TIME ? true : false;
    return {
      residenceTime: residenceTime,
      overtime: overtime };

  }
  if (type === 'page') {
    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;
    return {
      residenceTime: residenceTime,
      overtime: _overtime };

  }

  return {
    residenceTime: residenceTime };


};

var getRoute = function getRoute() {
  var pages = getCurrentPages();
  var page = pages[pages.length - 1];
  var _self = page.$vm;

  if (getPlatformName() === 'bd') {
    return _self.$mp && _self.$mp.page.is;
  } else {
    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;
  }
};

var getPageRoute = function getPageRoute(self) {
  var pages = getCurrentPages();
  var page = pages[pages.length - 1];
  var _self = page.$vm;
  var query = self._query;
  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';
  // clear
  self._query = '';
  if (getPlatformName() === 'bd') {
    return _self.$mp && _self.$mp.page.is + str;
  } else {
    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;
  }
};

var getPageTypes = function getPageTypes(self) {
  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {
    return true;
  }
  return false;
};

var calibration = function calibration(eventName, options) {
  //  login 、 share 、pay_success 、pay_fail 、register 、title
  if (!eventName) {
    console.error("uni.report \u7F3A\u5C11 [eventName] \u53C2\u6570");
    return true;
  }
  if (typeof eventName !== 'string') {
    console.error("uni.report [eventName] \u53C2\u6570\u7C7B\u578B\u9519\u8BEF,\u53EA\u80FD\u4E3A String \u7C7B\u578B");
    return true;
  }
  if (eventName.length > 255) {
    console.error("uni.report [eventName] \u53C2\u6570\u957F\u5EA6\u4E0D\u80FD\u5927\u4E8E 255");
    return true;
  }

  if (typeof options !== 'string' && typeof options !== 'object') {
    console.error("uni.report [options] \u53C2\u6570\u7C7B\u578B\u9519\u8BEF,\u53EA\u80FD\u4E3A String \u6216 Object \u7C7B\u578B");
    return true;
  }

  if (typeof options === 'string' && options.length > 255) {
    console.error("uni.report [options] \u53C2\u6570\u957F\u5EA6\u4E0D\u80FD\u5927\u4E8E 255");
    return true;
  }

  if (eventName === 'title' && typeof options !== 'string') {
    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');
    return true;
  }
};

var PagesJson = __webpack_require__(/*! uni-pages?{"type":"style"} */ 3).default;
var statConfig = __webpack_require__(/*! uni-stat-config */ 4).default || __webpack_require__(/*! uni-stat-config */ 4);

var resultOptions = uni.getSystemInfoSync();var

Util = /*#__PURE__*/function () {
  function Util() {_classCallCheck(this, Util);
    this.self = '';
    this._retry = 0;
    this._platform = '';
    this._query = {};
    this._navigationBarTitle = {
      config: '',
      page: '',
      report: '',
      lt: '' };

    this._operatingTime = 0;
    this._reportingRequestData = {
      '1': [],
      '11': [] };

    this.__prevent_triggering = false;

    this.__licationHide = false;
    this.__licationShow = false;
    this._lastPageRoute = '';
    this.statData = {
      uuid: getUuid(),
      ut: getPlatformName(),
      mpn: getPackName(),
      ak: statConfig.appid,
      usv: STAT_VERSION,
      v: getVersion(),
      ch: getChannel(),
      cn: '',
      pn: '',
      ct: '',
      t: getTime(),
      tt: '',
      p: resultOptions.platform === 'android' ? 'a' : 'i',
      brand: resultOptions.brand || '',
      md: resultOptions.model,
      sv: resultOptions.system.replace(/(Android|iOS)\s/, ''),
      mpsdk: resultOptions.SDKVersion || '',
      mpv: resultOptions.version || '',
      lang: resultOptions.language,
      pr: resultOptions.pixelRatio,
      ww: resultOptions.windowWidth,
      wh: resultOptions.windowHeight,
      sw: resultOptions.screenWidth,
      sh: resultOptions.screenHeight };


  }_createClass(Util, [{ key: "_applicationShow", value: function _applicationShow()

    {
      if (this.__licationHide) {
        getLastTime();
        var time = getResidenceTime('app');
        if (time.overtime) {
          var options = {
            path: this._lastPageRoute,
            scene: this.statData.sc };

          this._sendReportRequest(options);
        }
        this.__licationHide = false;
      }
    } }, { key: "_applicationHide", value: function _applicationHide(

    self, type) {

      this.__licationHide = true;
      getLastTime();
      var time = getResidenceTime();
      getFirstTime();
      var route = getPageRoute(this);
      this._sendHideRequest({
        urlref: route,
        urlref_ts: time.residenceTime },
      type);
    } }, { key: "_pageShow", value: function _pageShow()

    {
      var route = getPageRoute(this);
      var routepath = getRoute();
      this._navigationBarTitle.config = PagesJson &&
      PagesJson.pages[routepath] &&
      PagesJson.pages[routepath].titleNView &&
      PagesJson.pages[routepath].titleNView.titleText ||
      PagesJson &&
      PagesJson.pages[routepath] &&
      PagesJson.pages[routepath].navigationBarTitleText || '';

      if (this.__licationShow) {
        getFirstTime();
        this.__licationShow = false;
        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');
        this._lastPageRoute = route;
        return;
      }

      getLastTime();
      this._lastPageRoute = route;
      var time = getResidenceTime('page');
      if (time.overtime) {
        var options = {
          path: this._lastPageRoute,
          scene: this.statData.sc };

        this._sendReportRequest(options);
      }
      getFirstTime();
    } }, { key: "_pageHide", value: function _pageHide()

    {
      if (!this.__licationHide) {
        getLastTime();
        var time = getResidenceTime('page');
        this._sendPageRequest({
          url: this._lastPageRoute,
          urlref: this._lastPageRoute,
          urlref_ts: time.residenceTime });

        this._navigationBarTitle = {
          config: '',
          page: '',
          report: '',
          lt: '' };

        return;
      }
    } }, { key: "_login", value: function _login()

    {
      this._sendEventRequest({
        key: 'login' },
      0);
    } }, { key: "_share", value: function _share()

    {
      this._sendEventRequest({
        key: 'share' },
      0);
    } }, { key: "_payment", value: function _payment(
    key) {
      this._sendEventRequest({
        key: key },
      0);
    } }, { key: "_sendReportRequest", value: function _sendReportRequest(
    options) {

      this._navigationBarTitle.lt = '1';
      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';
      this.statData.lt = '1';
      this.statData.url = options.path + query || '';
      this.statData.t = getTime();
      this.statData.sc = getScene(options.scene);
      this.statData.fvts = getFirstVisitTime();
      this.statData.lvts = getLastVisitTime();
      this.statData.tvc = getTotalVisitCount();
      if (getPlatformName() === 'n') {
        this.getProperty();
      } else {
        this.getNetworkInfo();
      }
    } }, { key: "_sendPageRequest", value: function _sendPageRequest(

    opt) {var

      url =


      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;
      this._navigationBarTitle.lt = '11';
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '11',
        ut: this.statData.ut,
        url: url,
        tt: this.statData.tt,
        urlref: urlref,
        urlref_ts: urlref_ts,
        ch: this.statData.ch,
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options);
    } }, { key: "_sendHideRequest", value: function _sendHideRequest(

    opt, type) {var

      urlref =

      opt.urlref,urlref_ts = opt.urlref_ts;
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '3',
        ut: this.statData.ut,
        urlref: urlref,
        urlref_ts: urlref_ts,
        ch: this.statData.ch,
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options, type);
    } }, { key: "_sendEventRequest", value: function _sendEventRequest()



    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? "" : _ref$value;
      var route = this._lastPageRoute;
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '21',
        ut: this.statData.ut,
        url: route,
        ch: this.statData.ch,
        e_n: key,
        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options);
    } }, { key: "getNetworkInfo", value: function getNetworkInfo()

    {var _this = this;
      uni.getNetworkType({
        success: function success(result) {
          _this.statData.net = result.networkType;
          _this.getLocation();
        } });

    } }, { key: "getProperty", value: function getProperty()

    {var _this2 = this;
      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {
        _this2.statData.v = wgtinfo.version || '';
        _this2.getNetworkInfo();
      });
    } }, { key: "getLocation", value: function getLocation()

    {var _this3 = this;
      if (statConfig.getLocation) {
        uni.getLocation({
          type: 'wgs84',
          geocode: true,
          success: function success(result) {
            if (result.address) {
              _this3.statData.cn = result.address.country;
              _this3.statData.pn = result.address.province;
              _this3.statData.ct = result.address.city;
            }

            _this3.statData.lat = result.latitude;
            _this3.statData.lng = result.longitude;
            _this3.request(_this3.statData);
          } });

      } else {
        this.statData.lat = 0;
        this.statData.lng = 0;
        this.request(this.statData);
      }
    } }, { key: "request", value: function request(

    data, type) {var _this4 = this;
      var time = getTime();
      var title = this._navigationBarTitle;
      data.ttn = title.page;
      data.ttpj = title.config;
      data.ttc = title.report;

      var requestData = this._reportingRequestData;
      if (getPlatformName() === 'n') {
        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};
      }
      if (!requestData[data.lt]) {
        requestData[data.lt] = [];
      }
      requestData[data.lt].push(data);

      if (getPlatformName() === 'n') {
        uni.setStorageSync('__UNI__STAT__DATA', requestData);
      }
      if (getPageResidenceTime() < OPERATING_TIME && !type) {
        return;
      }
      var uniStatData = this._reportingRequestData;
      if (getPlatformName() === 'n') {
        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');
      }
      // 时间超过，重新获取时间戳
      setPageResidenceTime();
      var firstArr = [];
      var contentArr = [];
      var lastArr = [];var _loop = function _loop(

      i) {
        var rd = uniStatData[i];
        rd.forEach(function (elm) {
          var newData = getSplicing(elm);
          if (i === 0) {
            firstArr.push(newData);
          } else if (i === 3) {
            lastArr.push(newData);
          } else {
            contentArr.push(newData);
          }
        });};for (var i in uniStatData) {_loop(i);
      }

      firstArr.push.apply(firstArr, contentArr.concat(lastArr));
      var optionsData = {
        usv: STAT_VERSION, //统计 SDK 版本号
        t: time, //发送请求时的时间戮
        requests: JSON.stringify(firstArr) };


      this._reportingRequestData = {};
      if (getPlatformName() === 'n') {
        uni.removeStorageSync('__UNI__STAT__DATA');
      }

      if (data.ut === 'h5') {
        this.imageRequest(optionsData);
        return;
      }

      if (getPlatformName() === 'n' && this.statData.p === 'a') {
        setTimeout(function () {
          _this4._sendRequest(optionsData);
        }, 200);
        return;
      }
      this._sendRequest(optionsData);
    } }, { key: "_sendRequest", value: function _sendRequest(
    optionsData) {var _this5 = this;
      uni.request({
        url: STAT_URL,
        method: 'POST',
        // header: {
        //   'content-type': 'application/json' // 默认值
        // },
        data: optionsData,
        success: function success() {
          // if (process.env.NODE_ENV === 'development') {
          //   console.log('stat request success');
          // }
        },
        fail: function fail(e) {
          if (++_this5._retry < 3) {
            setTimeout(function () {
              _this5._sendRequest(optionsData);
            }, 1000);
          }
        } });

    }
    /**
       * h5 请求
       */ }, { key: "imageRequest", value: function imageRequest(
    data) {
      var image = new Image();
      var options = getSgin(GetEncodeURIComponentOptions(data)).options;
      image.src = STAT_H5_URL + '?' + options;
    } }, { key: "sendEvent", value: function sendEvent(

    key, value) {
      // 校验 type 参数
      if (calibration(key, value)) return;

      if (key === 'title') {
        this._navigationBarTitle.report = value;
        return;
      }
      this._sendEventRequest({
        key: key,
        value: typeof value === 'object' ? JSON.stringify(value) : value },
      1);
    } }]);return Util;}();var



Stat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: "getInstance", value: function getInstance()
    {
      if (!this.instance) {
        this.instance = new Stat();
      }
      return this.instance;
    } }]);
  function Stat() {var _this6;_classCallCheck(this, Stat);
    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));
    _this6.instance = null;
    // 注册拦截器
    if (typeof uni.addInterceptor === 'function' && "development" !== 'development') {
      _this6.addInterceptorInit();
      _this6.interceptLogin();
      _this6.interceptShare(true);
      _this6.interceptRequestPayment();
    }return _this6;
  }_createClass(Stat, [{ key: "addInterceptorInit", value: function addInterceptorInit()

    {
      var self = this;
      uni.addInterceptor('setNavigationBarTitle', {
        invoke: function invoke(args) {
          self._navigationBarTitle.page = args.title;
        } });

    } }, { key: "interceptLogin", value: function interceptLogin()

    {
      var self = this;
      uni.addInterceptor('login', {
        complete: function complete() {
          self._login();
        } });

    } }, { key: "interceptShare", value: function interceptShare(

    type) {
      var self = this;
      if (!type) {
        self._share();
        return;
      }
      uni.addInterceptor('share', {
        success: function success() {
          self._share();
        },
        fail: function fail() {
          self._share();
        } });

    } }, { key: "interceptRequestPayment", value: function interceptRequestPayment()

    {
      var self = this;
      uni.addInterceptor('requestPayment', {
        success: function success() {
          self._payment('pay_success');
        },
        fail: function fail() {
          self._payment('pay_fail');
        } });

    } }, { key: "report", value: function report(

    options, self) {
      this.self = self;
      // if (process.env.NODE_ENV === 'development') {
      //   console.log('report init');
      // }
      setPageResidenceTime();
      this.__licationShow = true;
      this._sendReportRequest(options, true);
    } }, { key: "load", value: function load(

    options, self) {
      if (!self.$scope && !self.$mp) {
        var page = getCurrentPages();
        self.$scope = page[page.length - 1];
      }
      this.self = self;
      this._query = options;
    } }, { key: "show", value: function show(

    self) {
      this.self = self;
      if (getPageTypes(self)) {
        this._pageShow(self);
      } else {
        this._applicationShow(self);
      }
    } }, { key: "ready", value: function ready(

    self) {
      // this.self = self;
      // if (getPageTypes(self)) {
      //   this._pageShow(self);
      // }
    } }, { key: "hide", value: function hide(
    self) {
      this.self = self;
      if (getPageTypes(self)) {
        this._pageHide(self);
      } else {
        this._applicationHide(self, true);
      }
    } }, { key: "error", value: function error(
    em) {
      if (this._platform === 'devtools') {
        if (true) {
          console.info('当前运行环境为开发者工具，不上报数据。');
        }
        // return;
      }
      var emVal = '';
      if (!em.message) {
        emVal = JSON.stringify(em);
      } else {
        emVal = em.stack;
      }
      var options = {
        ak: this.statData.ak,
        uuid: this.statData.uuid,
        lt: '31',
        ut: this.statData.ut,
        ch: this.statData.ch,
        mpsdk: this.statData.mpsdk,
        mpv: this.statData.mpv,
        v: this.statData.v,
        em: emVal,
        usv: this.statData.usv,
        t: getTime(),
        p: this.statData.p };

      this.request(options);
    } }]);return Stat;}(Util);


var stat = Stat.getInstance();
var isHide = false;
var lifecycle = {
  onLaunch: function onLaunch(options) {
    stat.report(options, this);
  },
  onReady: function onReady() {
    stat.ready(this);
  },
  onLoad: function onLoad(options) {
    stat.load(options, this);
    // 重写分享，获取分享上报事件
    if (this.$scope && this.$scope.onShareAppMessage) {
      var oldShareAppMessage = this.$scope.onShareAppMessage;
      this.$scope.onShareAppMessage = function (options) {
        stat.interceptShare(false);
        return oldShareAppMessage.call(this, options);
      };
    }
  },
  onShow: function onShow() {
    isHide = false;
    stat.show(this);
  },
  onHide: function onHide() {
    isHide = true;
    stat.hide(this);
  },
  onUnload: function onUnload() {
    if (isHide) {
      isHide = false;
      return;
    }
    stat.hide(this);
  },
  onError: function onError(e) {
    stat.error(e);
  } };


function main() {
  if (true) {
    uni.report = function (type, options) {};
  } else { var Vue; }
}

main();

/***/ }),
/* 2 */
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

module.exports = {"_from":"@dcloudio/uni-stat@alpha","_id":"@dcloudio/uni-stat@2.0.0-alpha-25720200116005","_inBundle":false,"_integrity":"sha512-RZFw3WAaS/CZTzzv9JPaWvmoNitojD/06vPdHSzlqZi8GbuE222lFuyochEjrGkG8rPPrWHAnwfoPBuQVtkfdg==","_location":"/@dcloudio/uni-stat","_phantomChildren":{},"_requested":{"type":"tag","registry":true,"raw":"@dcloudio/uni-stat@alpha","name":"@dcloudio/uni-stat","escapedName":"@dcloudio%2funi-stat","scope":"@dcloudio","rawSpec":"alpha","saveSpec":null,"fetchSpec":"alpha"},"_requiredBy":["#USER","/","/@dcloudio/vue-cli-plugin-uni"],"_resolved":"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-alpha-25720200116005.tgz","_shasum":"08bb17aba91c84a981f33d74153aa3dd07b578ad","_spec":"@dcloudio/uni-stat@alpha","_where":"/Users/guoshengqiang/Documents/dcloud-plugins/alpha/uniapp-cli","author":"","bugs":{"url":"https://github.com/dcloudio/uni-app/issues"},"bundleDependencies":false,"deprecated":false,"description":"","devDependencies":{"@babel/core":"^7.5.5","@babel/preset-env":"^7.5.5","eslint":"^6.1.0","rollup":"^1.19.3","rollup-plugin-babel":"^4.3.3","rollup-plugin-clear":"^2.0.7","rollup-plugin-commonjs":"^10.0.2","rollup-plugin-copy":"^3.1.0","rollup-plugin-eslint":"^7.0.0","rollup-plugin-json":"^4.0.0","rollup-plugin-node-resolve":"^5.2.0","rollup-plugin-replace":"^2.2.0","rollup-plugin-uglify":"^6.0.2"},"files":["dist","package.json","LICENSE"],"gitHead":"a129bde60de35f7ef497f43d5a45b4556231995c","homepage":"https://github.com/dcloudio/uni-app#readme","license":"Apache-2.0","main":"dist/index.js","name":"@dcloudio/uni-stat","repository":{"type":"git","url":"git+https://github.com/dcloudio/uni-app.git","directory":"packages/uni-stat"},"scripts":{"build":"NODE_ENV=production rollup -c rollup.config.js","dev":"NODE_ENV=development rollup -w -c rollup.config.js"},"version":"2.0.0-alpha-25720200116005"};

/***/ }),
/* 3 */
/*!*********************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/pages.json?{"type":"style"} ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({"pages":{},"globalStyle":{}});

/***/ }),
/* 4 */
/*!********************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/pages.json?{"type":"stat"} ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({"appid":"__UNI__69B904E"});

/***/ }),
/* 5 */
/*!*********************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/main.js?{"type":"appStyle"} ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

Vue.prototype.__$appStyle__ = {}
Vue.prototype.__merge_style && Vue.prototype.__merge_style(__webpack_require__(/*! ./App.vue?vue&type=style&index=0&lang=scss */ 6).default,Vue.prototype.__$appStyle__)


/***/ }),
/* 6 */
/*!**********************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/App.vue?vue&type=style&index=0&lang=scss ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_1_D_HBuilderX_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_9_oneOf_0_2_D_HBuilderX_plugins_uniapp_cli_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_0_3_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_4_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/@dcloudio/vue-cli-plugin-hbuilderx/packages/webpack-uni-nvue-loader/lib/style.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--9-oneOf-0-1!./node_modules/postcss-loader/src??ref--9-oneOf-0-2!./node_modules/sass-loader/lib/loader.js??ref--9-oneOf-0-3!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--9-oneOf-0-4!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss */ 7);
/* harmony import */ var _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_1_D_HBuilderX_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_9_oneOf_0_2_D_HBuilderX_plugins_uniapp_cli_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_0_3_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_4_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_1_D_HBuilderX_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_9_oneOf_0_2_D_HBuilderX_plugins_uniapp_cli_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_0_3_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_4_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_1_D_HBuilderX_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_9_oneOf_0_2_D_HBuilderX_plugins_uniapp_cli_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_0_3_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_4_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_1_D_HBuilderX_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_9_oneOf_0_2_D_HBuilderX_plugins_uniapp_cli_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_0_3_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_4_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_1_D_HBuilderX_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_9_oneOf_0_2_D_HBuilderX_plugins_uniapp_cli_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_0_3_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_4_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),
/* 7 */
/*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-hbuilderx/packages/webpack-uni-nvue-loader/lib/style.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--9-oneOf-0-1!./node_modules/postcss-loader/src??ref--9-oneOf-0-2!./node_modules/sass-loader/lib/loader.js??ref--9-oneOf-0-3!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--9-oneOf-0-4!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/aa/Desktop/工作/bddweb/src/App.vue?vue&type=style&index=0&lang=scss ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  "brand": {
    "color": "#f42e14"
  },
  "primary": {
    "color": "#5867dd"
  },
  "metal": {
    "color": "#575962"
  },
  "success": {
    "color": "#34bfa3"
  },
  "warning": {
    "color": "#ffb822"
  },
  "info": {
    "color": "#36a3f7"
  },
  "focus": {
    "color": "#9816f4"
  },
  "light": {
    "color": "#ffffff"
  },
  "accent": {
    "color": "#00c5dc"
  },
  "danger": {
    "color": "#f4516c"
  }
}

/***/ }),
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode, /* vue-cli only */
  components, // fixed by xxxxxx auto components
  renderjs // fixed by xxxxxx renderjs
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // fixed by xxxxxx auto components
  if (components) {
    options.components = Object.assign(components, options.components || {})
  }
  // fixed by xxxxxx renderjs
  if (renderjs) {
    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {
      this[renderjs.__module] = this
    });
    (options.mixins || (options.mixins = [])).push(renderjs)
  }

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */
/*!********************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var ala = Object.create(null);

var modules = __webpack_require__(29);
modules.keys().forEach(function (key) {
  Object.assign(ala, modules(key));
});

var modulesApi = __webpack_require__(64);
modulesApi.keys().forEach(function (key) {
  Object.assign(ala, modulesApi(key));
});var _default =

ala;exports.default = _default;

/***/ }),
/* 29 */
/*!****************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala sync \.js$ ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./app.js": 30,
	"./back.js": 34,
	"./base.js": 35,
	"./client.js": 37,
	"./core.js": 38,
	"./crud.js": 39,
	"./http.js": 40,
	"./load.js": 44,
	"./local.js": 45,
	"./log.js": 46,
	"./pay.js": 48,
	"./route.js": 49,
	"./screen.js": 50,
	"./str.js": 54,
	"./tenant.js": 55,
	"./theme.js": 56,
	"./time.js": 57,
	"./to.js": 58,
	"./toast.js": 59,
	"./uni.js": 60,
	"./url.js": 61,
	"./user.js": 62,
	"./vuex.js": 63
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) { // check for number or string
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return id;
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 29;

/***/ }),
/* 30 */
/*!************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/app.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.appIcon = appIcon;exports.appUpdate = appUpdate;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 31));

var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala.js */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}

// 图标加载
function appIcon() {

  var domModule = weex.requireModule('dom');
  domModule.addRule('fontFace', {
    fontFamily: 'iconfont',
    src: "url('../../static/iconfont/font/iconfount-5590604fc6.ttf')" });


}

// App 版本更新，可参考uni-app官方的文章demo来实现
function appUpdate() {

  plus.screen.lockOrientation('portrait-primary');
  var version;
  plus.runtime.getProperty(plus.runtime.appid, /*#__PURE__*/function () {var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(wgtinfo) {var par, response;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
              version = wgtinfo.version;
              par = {
                AppClient: _ala.default.payType(),
                Version: version };_context.next = 4;return (

                _ala.default.httpGet('Api/AppVersion/AppCheckVersion', par));case 4:response = _context.sent;
              if (response) {
                uni.showModal({
                  title: '发现新版本',
                  content: response.note,
                  success: function success(res) {
                    if (res.confirm) {
                      // var url = encodeURI(response.url)
                      // plus.runtime.openURL(url, function (res) {})
                    } else if (res.cancel) {
                    }
                  } });

              }case 6:case "end":return _context.stop();}}}, _callee, this);}));return function (_x) {return _ref.apply(this, arguments);};}());


}

/***/ }),
/* 31 */
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ 32);


/***/ }),
/* 32 */
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() {
  return this || (typeof self === "object" && self);
})() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(/*! ./runtime */ 33);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),
/* 33 */
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() {
    return this || (typeof self === "object" && self);
  })() || Function("return this")()
);


/***/ }),
/* 34 */
/*!*************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/back.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.back = back;exports.backUrl = backUrl;exports.backAdd = backAdd;var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// 返回上一页,通过历史记录查找,找不到上一页时,返回到首页
function back() {
  var url = backUrl();
  var historys = _ala.default.vuexLocalGet('browse_historys');
  _ala.default.to(url);
  historys.splice(0, 1);
  _ala.default.vuexLocalSet('browse_historys', historys);
}

// 上一页URL
function backUrl() {
  var historys = _ala.default.vuexLocalGet('browse_historys');
  var url = '/pages/tabbar/index';
  var currentUrl = historys[0];
  // 登录页面后退
  if (currentUrl.indexOf('user_login') > -1) {
    url = '/pages/tabbar/index';
  }
  if (historys && historys.length > 1) {
    url = historys[1];
  }
  return url;
}

// 添加历史记录
function backAdd(url) {
  if (!url) {
    return;
  }
  var historys = _ala.default.vuexLocalGet('browse_historys');
  if (!historys) {
    historys = [];
  } else {
    historys = historys.filter(function (r) {return r !== url;});
  }
  historys.unshift(url);
  if (historys.length > 10) {
    historys.pop();
  }
  _ala.default.vuexLocalSet('browse_historys', historys);
}

/***/ }),
/* 35 */
/*!*************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/base.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.isBuild = isBuild;exports.baseConfig = baseConfig;exports.getQuery = getQuery;exports.showModal = showModal;exports.host = void 0;var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));
var _config = _interopRequireDefault(__webpack_require__(/*! @/service/config */ 36));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
var host = _config.default.host;

// 判断是生成环境还是开发环境
exports.host = host;function isBuild() {
  if (true) {
    return false;
  } else {}
}

// 返回基本配置列表
function baseConfig() {
  return _config.default;
}

// 获取元素节点
function getQuery(jsThis, type) {
  var selectorQuery = '';




  selectorQuery = uni.createSelectorQuery();

  selectorQuery.selectAll(type).boundingClientRect();
  return selectorQuery.selectViewport().scrollOffset();
}


// 弹窗
function showModal(title, content) {
  return new Promise(function (resolve, reject) {
    uni.showModal({
      title: title,
      content: content,
      success: function success(res) {
        if (res.confirm) {
          resolve(true);
        } else {
          resolve(false);
        }
      } });

  });
}

/***/ }),
/* 36 */
/*!***********************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/config.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // const host = 'http://localhost:1800/'
var host = 'http://b-api.baoduoduo.club/';

var version = '0.0.1010';
var isTenant = false;
var key = 'LUPGHODKYFWYO0YARAWNTKMM8QZQ8L1BA7ZMLEAE53V6NQS7ZWJ1WU';
var projectId = 'C94E355F-79DC-44E8-8EF1-CBF886129EDA';
var themeId = '5e1fd94c983dbf47b0d16ef0';
var privateKey = 'zhonghuarenmingonghegouchenglile';
module.exports = {
  host: host,
  themeId: themeId,
  projectId: projectId,
  key: key,
  isTenant: isTenant,
  privateKey: privateKey,
  version: version };

/***/ }),
/* 37 */
/*!***************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/client.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.client = client;exports.default = clientPayType;exports.clientUploadApi = clientUploadApi;var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
// 终端类型
function client() {


















}

// 支付类型
function clientPayType() {
  if (this.client() === 'WapH5') {
    // 手机Wap
    return 2;
  } else if (this.client() === 'WeChat') {
    // 微信
    return 5;
  } else if (this.client() === 'WeChatLite') {
    // 小程序
    return 6;
  } else if (this.client() === 'AppPlus') {
    return 3;
  } else if (this.client() === 'AppPlus') {
    return 4;
  }
}


// 文件上传地址

function clientUploadApi() {
  var apiUrl = _ala.default.host + 'Api/StorageFile/upload';
  return apiUrl;
}

/***/ }),
/* 38 */
/*!*************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/core.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = to;exports.back = back; // import config from '@/service/config'

// 页面跳转 ,系统页面跳转使用ala.to
function to(url) {
  history.to(url);
}
//
function back() {
  history.back();
}

/***/ }),
/* 39 */
/*!*************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/crud.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.getView = getView;exports.widget = widget;exports.save = save;exports.message = message;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 31));var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}

// 根据Url中的参数Id，获取视图
// 使用动态 动态网址 Api/{{表名}}/ViewById
function getView(_x, _x2) {return _getView.apply(this, arguments);}







// 从widget中获取数据
function _getView() {_getView = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(intance, apiUrl) {var para, response;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:para = { id: intance.$route.query.id !== undefined ? intance.$route.query.id : 0 };_context.next = 3;return _ala.default.httpGet(apiUrl, para);case 3:response = _context.sent;return _context.abrupt("return", response);case 5:case "end":return _context.stop();}}}, _callee, this);}));return _getView.apply(this, arguments);}function widget(_x3, _x4, _x5) {return _widget.apply(this, arguments);}








// 保存
// 动态保存接口： Api/{{表名}}/QuerySave
function _widget() {_widget = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2(intance, type, object) {var para, response;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:para = { type: type, json: JSON.stringify(object) };_context2.next = 3;return _ala.default.httpGet('api/Widget/Get', para);case 3:response = _context2.sent;return _context2.abrupt("return", response);case 5:case "end":return _context2.stop();}}}, _callee2, this);}));return _widget.apply(this, arguments);}function save(_x6, _x7, _x8) {return _save.apply(this, arguments);}







// 提示，成功提示正确信息，获取显示错误信息
function _save() {_save = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee3(intance, apiUrl, viewModel) {var para, response;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:para = _objectSpread({}, viewModel);_context3.next = 3;return _ala.default.httpPost(apiUrl, para);case 3:response = _context3.sent;return _context3.abrupt("return", response);case 5:case "end":return _context3.stop();}}}, _callee3, this);}));return _save.apply(this, arguments);}function message(response) {
  if (response.status === 1) {
    _ala.default.to('/pages/message');
  } else {
    _ala.default.to('/pages/message');
  }
}

/***/ }),
/* 40 */
/*!*************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/http.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.httpGet = httpGet;exports.httpPost = httpPost;exports.httpPut = httpPut;exports.httpDelete = httpDelete;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 31));var _token = _interopRequireDefault(__webpack_require__(/*! @/service/utils/token */ 41));
var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));
var _config = _interopRequireDefault(__webpack_require__(/*! @/service/config */ 36));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}function

request(_x, _x2, _x3) {return _request.apply(this, arguments);}function _request() {_request = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(apiUrl, method, data) {return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:return _context.abrupt("return",
            new Promise(function (resolve, reject) {
              uni.request({
                url: _config.default.host + apiUrl,
                method: method,
                data: _objectSpread({},
                data),

                header: _objectSpread({},
                getHead(apiUrl)),

                complete: function complete(res) {
                  if (res.statusCode === 200) {
                    if (res.data.status === 1) {
                      if (res.data.result !== null && res.data.result !== undefined) {
                        resolve(res.data.result);
                      } else {
                        resolve(res.data);
                      }
                    } else if (res.data) {
                      resolve(null);
                      _ala.default.toastWarn(res.data.message);
                    }
                  } else {
                    reject(res);
                  }
                } });

            }));case 1:case "end":return _context.stop();}}}, _callee, this);}));return _request.apply(this, arguments);}function


httpGet(_x4, _x5) {return _httpGet.apply(this, arguments);}function _httpGet() {_httpGet = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2(apiUrl, data) {var response;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.next = 2;return (
              request(apiUrl, 'GET', data));case 2:response = _context2.sent;return _context2.abrupt("return",
            response);case 4:case "end":return _context2.stop();}}}, _callee2, this);}));return _httpGet.apply(this, arguments);}function


httpPost(_x6, _x7) {return _httpPost.apply(this, arguments);}




//  Put方法：改
function _httpPost() {_httpPost = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee3(apiUrl, data) {var response;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_context3.next = 2;return request(apiUrl, 'POST', data);case 2:response = _context3.sent;return _context3.abrupt("return", response);case 4:case "end":return _context3.stop();}}}, _callee3, this);}));return _httpPost.apply(this, arguments);}function httpPut(_x8, _x9) {return _httpPut.apply(this, arguments);}function _httpPut() {_httpPut = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee4(apiUrl, data) {var response;return _regenerator.default.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:_context4.next = 2;return (
              request(apiUrl, 'PUT', data));case 2:response = _context4.sent;return _context4.abrupt("return",
            response);case 4:case "end":return _context4.stop();}}}, _callee4, this);}));return _httpPut.apply(this, arguments);}function


httpDelete(_x10, _x11) {return _httpDelete.apply(this, arguments);}function _httpDelete() {_httpDelete = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee5(apiUrl, data) {var response;return _regenerator.default.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:_context5.next = 2;return (
              request(apiUrl, 'DELETE', data));case 2:response = _context5.sent;return _context5.abrupt("return",
            response);case 4:case "end":return _context5.stop();}}}, _callee5, this);}));return _httpDelete.apply(this, arguments);}


function getHead(apiUrl) {
  var headObj = {
    'zk-token': _token.default.getToken(apiUrl),
    'zk-user-id': _ala.default.userId(),
    'zk-user-token': _token.default.getUserToken(apiUrl),
    'zk-tenant': _ala.default.tenant(),
    'zk-timestamp': _token.default.timestamp() };

  return headObj;
}

/***/ }),
/* 41 */
/*!****************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/utils/token.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _config = _interopRequireDefault(__webpack_require__(/*! @/service/config */ 36));
var _crypto = _interopRequireDefault(__webpack_require__(/*! @/service/utils/crypto */ 42));
var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var
projectId = _config.default.projectId,key = _config.default.key,privateKey = _config.default.privateKey;var _default =
{
  // 头部传入token机制,算法和后台匹配，管理员可以在后台随时修改
  getToken: function getToken(apiUrl) {
    var index = apiUrl.indexOf('?');
    if (index > 0) {
      apiUrl = apiUrl.substring(0, index);
    }
    apiUrl = apiUrl.
    toLowerCase().
    replace('///', '/').
    replace('//', '/').
    replace('api/', 'api/').
    replace('//', '/');
    var token = apiUrl + this.timestamp() + projectId + key + privateKey;

    token = _crypto.default.md5(token.toLowerCase());
    return token;
  },
  getDiyToken: function getDiyToken(apiUrl) {
    apiUrl = apiUrl.
    toLowerCase().
    replace('///', '/').
    replace('//', '/').
    replace('api/', 'api/').
    replace('//', '/');
    var token = apiUrl + this.timestamp() + 'diyToken';
    token = _crypto.default.md5(token.toLowerCase());
    return token;
  },
  // 时间戳
  timestamp: function timestamp() {
    return Math.round(new Date().getTime() / 1000);
  },
  // 用户登录头部Token
  getUserToken: function getUserToken(apiUrl) {
    var loginUser = _ala.default.user();
    if (loginUser !== null && loginUser !== undefined) {
      var token = this.getToken(apiUrl).substring(2, 10) + loginUser.token;
      token = _crypto.default.md5(token.toLowerCase());
      return token;
    }
    return '';
  } };exports.default = _default;

/***/ }),
/* 42 */
/*!*****************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/utils/crypto.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _config = _interopRequireDefault(__webpack_require__(/*! @/service/config */ 36));
var _cryptoJs = _interopRequireDefault(__webpack_require__(/*! ./crypto-js */ 43));
var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}var

projectId =

_config.default.projectId,key = _config.default.key;var _default =
{
  // md5加密
  md5: function md5(str) {
    return _cryptoJs.default.MD5(str).toString();
  },
  // ace 加密
  encrypt: function encrypt(text, aceKey) {
    var encryptText = _cryptoJs.default.AES.encrypt(text, this.getKey(aceKey)).toString();
    return encryptText;
  },
  // ace 解密
  decrypt: function decrypt(text, aceKey) {
    // Decrypt
    var bytes = _cryptoJs.default.AES.decrypt(text, this.getKey(aceKey));
    var originalText = bytes.toString(_cryptoJs.default.enc.Utf8);
    return originalText;
  },
  userTokenKey: function userTokenKey() {

  },
  // 本地用户缓存信息key,反正被他人负责恶意修改，每个用户不一样
  userKey: function userKey() {
    var token = _ala.default.localGet('user_token');
    if (_ala.default.strIsEmpty(token)) {
      return null;
    }
    var tokenKey = token + token.substring(3, 10) + projectId.substring(1, 4);
    var userKey = _cryptoJs.default.MD5(tokenKey);
    userKey = 'user_' + userKey.toString().substring(4, 24);
    return userKey;
  },
  getKey: function getKey(aceKey) {
    if (aceKey === null || aceKey === undefined) {
      aceKey = '';
    }
    aceKey = aceKey + projectId.substring(1, 4) + key.substring(2, 10);
    return aceKey;
  },
  base64: function base64(text) {
    return _cryptoJs.default.enc.Base64.stringify(_cryptoJs.default.enc.Utf8.parse(text));
  },
  utf8: function utf8(text) {
    return _cryptoJs.default.enc.Base64.parse(text).toString(_cryptoJs.default.enc.Utf8);
  } };exports.default = _default;

/***/ }),
/* 43 */
/*!********************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/utils/crypto-js.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 /* eslint-disable */;
(function (root, factory) {
  if (true) {
    // CommonJS
    module.exports = exports = factory();
  } else {}
})(void 0, function () {
  /**
                         * CryptoJS core components.
                         */
  var CryptoJS = CryptoJS || function (Math, undefined) {
    /*
                                                          * Local polyfil of Object.create
                                                          */
    var create = Object.create || function () {
      function F() {};

      return function (obj) {
        var subtype;

        F.prototype = obj;

        subtype = new F();

        F.prototype = null;

        return subtype;
      };
    }();

    /**
          * CryptoJS namespace.
          */
    var C = {};

    /**
                 * Library namespace.
                 */
    var C_lib = C.lib = {};

    /**
                             * Base object for prototypal inheritance.
                             */
    var Base = C_lib.Base = function () {
      return {
        /**
                * Creates a new object that inherits from this object.
                *
                * @param {Object} overrides Properties to copy into the new object.
                *
                * @return {Object} The new object.
                *
                * @static
                *
                * @example
                *
                *     var MyType = CryptoJS.lib.Base.extend({
                *         field: 'value',
                *
                *         method: function () {
                *         }
                *     });
                */
        extend: function extend(overrides) {
          // Spawn
          var subtype = create(this);

          // Augment
          if (overrides) {
            subtype.mixIn(overrides);
          }

          // Create default initializer
          if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
            subtype.init = function () {
              subtype.$super.init.apply(this, arguments);
            };
          }

          // Initializer's prototype is the subtype object
          subtype.init.prototype = subtype;

          // Reference supertype
          subtype.$super = this;

          return subtype;
        },

        /**
            * Extends this object and runs the init method.
            * Arguments to create() will be passed to init().
            *
            * @return {Object} The new object.
            *
            * @static
            *
            * @example
            *
            *     var instance = MyType.create();
            */
        create: function create() {
          var instance = this.extend();
          instance.init.apply(instance, arguments);

          return instance;
        },

        /**
            * Initializes a newly created object.
            * Override this method to add some logic when your objects are created.
            *
            * @example
            *
            *     var MyType = CryptoJS.lib.Base.extend({
            *         init: function () {
            *             // ...
            *         }
            *     });
            */
        init: function init() {},

        /**
                                   * Copies properties into this object.
                                   *
                                   * @param {Object} properties The properties to mix in.
                                   *
                                   * @example
                                   *
                                   *     MyType.mixIn({
                                   *         field: 'value'
                                   *     });
                                   */
        mixIn: function mixIn(properties) {
          for (var propertyName in properties) {
            if (properties.hasOwnProperty(propertyName)) {
              this[propertyName] = properties[propertyName];
            }
          }

          // IE won't copy toString using the loop above
          if (properties.hasOwnProperty('toString')) {
            this.toString = properties.toString;
          }
        },

        /**
            * Creates a copy of this object.
            *
            * @return {Object} The clone.
            *
            * @example
            *
            *     var clone = instance.clone();
            */
        clone: function clone() {
          return this.init.prototype.extend(this);
        } };

    }();

    /**
          * An array of 32-bit words.
          *
          * @property {Array} words The array of 32-bit words.
          * @property {number} sigBytes The number of significant bytes in this word array.
          */
    var WordArray = C_lib.WordArray = Base.extend({
      /**
                                                     * Initializes a newly created word array.
                                                     *
                                                     * @param {Array} words (Optional) An array of 32-bit words.
                                                     * @param {number} sigBytes (Optional) The number of significant bytes in the words.
                                                     *
                                                     * @example
                                                     *
                                                     *     var wordArray = CryptoJS.lib.WordArray.create();
                                                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
                                                     *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
                                                     */
      init: function init(words, sigBytes) {
        words = this.words = words || [];

        if (sigBytes != undefined) {
          this.sigBytes = sigBytes;
        } else {
          this.sigBytes = words.length * 4;
        }
      },

      /**
          * Converts this word array to a string.
          *
          * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
          *
          * @return {string} The stringified word array.
          *
          * @example
          *
          *     var string = wordArray + '';
          *     var string = wordArray.toString();
          *     var string = wordArray.toString(CryptoJS.enc.Utf8);
          */
      toString: function toString(encoder) {
        return (encoder || Hex).stringify(this);
      },

      /**
          * Concatenates a word array to this word array.
          *
          * @param {WordArray} wordArray The word array to append.
          *
          * @return {WordArray} This word array.
          *
          * @example
          *
          *     wordArray1.concat(wordArray2);
          */
      concat: function concat(wordArray) {
        // Shortcuts
        var thisWords = this.words;
        var thatWords = wordArray.words;
        var thisSigBytes = this.sigBytes;
        var thatSigBytes = wordArray.sigBytes;

        // Clamp excess bits
        this.clamp();

        // Concat
        if (thisSigBytes % 4) {
          // Copy one byte at a time
          for (var i = 0; i < thatSigBytes; i++) {
            var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
            thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
          }
        } else {
          // Copy one word at a time
          for (var i = 0; i < thatSigBytes; i += 4) {
            thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2];
          }
        }
        this.sigBytes += thatSigBytes;

        // Chainable
        return this;
      },

      /**
          * Removes insignificant bits.
          *
          * @example
          *
          *     wordArray.clamp();
          */
      clamp: function clamp() {
        // Shortcuts
        var words = this.words;
        var sigBytes = this.sigBytes;

        // Clamp
        words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
        words.length = Math.ceil(sigBytes / 4);
      },

      /**
          * Creates a copy of this word array.
          *
          * @return {WordArray} The clone.
          *
          * @example
          *
          *     var clone = wordArray.clone();
          */
      clone: function clone() {
        var clone = Base.clone.call(this);
        clone.words = this.words.slice(0);

        return clone;
      },

      /**
          * Creates a word array filled with random bytes.
          *
          * @param {number} nBytes The number of random bytes to generate.
          *
          * @return {WordArray} The random word array.
          *
          * @static
          *
          * @example
          *
          *     var wordArray = CryptoJS.lib.WordArray.random(16);
          */
      random: function random(nBytes) {
        var words = [];

        var r = function r(m_w) {
          var m_w = m_w;
          var m_z = 0x3ade68b1;
          var mask = 0xffffffff;

          return function () {
            m_z = 0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10) & mask;
            m_w = 0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10) & mask;
            var result = (m_z << 0x10) + m_w & mask;
            result /= 0x100000000;
            result += 0.5;
            return result * (Math.random() > 0.5 ? 1 : -1);
          };
        };

        for (var i = 0, rcache; i < nBytes; i += 4) {
          var _r = r((rcache || Math.random()) * 0x100000000);

          rcache = _r() * 0x3ade67b7;
          words.push(_r() * 0x100000000 | 0);
        }

        return new WordArray.init(words, nBytes);
      } });


    /**
             * Encoder namespace.
             */
    var C_enc = C.enc = {};

    /**
                             * Hex encoding strategy.
                             */
    var Hex = C_enc.Hex = {
      /**
                             * Converts a word array to a hex string.
                             *
                             * @param {WordArray} wordArray The word array.
                             *
                             * @return {string} The hex string.
                             *
                             * @static
                             *
                             * @example
                             *
                             *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
                             */
      stringify: function stringify(wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes;

        // Convert
        var hexChars = [];
        for (var i = 0; i < sigBytes; i++) {
          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
          hexChars.push((bite >>> 4).toString(16));
          hexChars.push((bite & 0x0f).toString(16));
        }

        return hexChars.join('');
      },

      /**
          * Converts a hex string to a word array.
          *
          * @param {string} hexStr The hex string.
          *
          * @return {WordArray} The word array.
          *
          * @static
          *
          * @example
          *
          *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
          */
      parse: function parse(hexStr) {
        // Shortcut
        var hexStrLength = hexStr.length;

        // Convert
        var words = [];
        for (var i = 0; i < hexStrLength; i += 2) {
          words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
        }

        return new WordArray.init(words, hexStrLength / 2);
      }


      /**
         * Latin1 encoding strategy.
         */ };
    var Latin1 = C_enc.Latin1 = {
      /**
                                   * Converts a word array to a Latin1 string.
                                   *
                                   * @param {WordArray} wordArray The word array.
                                   *
                                   * @return {string} The Latin1 string.
                                   *
                                   * @static
                                   *
                                   * @example
                                   *
                                   *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
                                   */
      stringify: function stringify(wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes;

        // Convert
        var latin1Chars = [];
        for (var i = 0; i < sigBytes; i++) {
          var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
          latin1Chars.push(String.fromCharCode(bite));
        }

        return latin1Chars.join('');
      },

      /**
          * Converts a Latin1 string to a word array.
          *
          * @param {string} latin1Str The Latin1 string.
          *
          * @return {WordArray} The word array.
          *
          * @static
          *
          * @example
          *
          *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
          */
      parse: function parse(latin1Str) {
        // Shortcut
        var latin1StrLength = latin1Str.length;

        // Convert
        var words = [];
        for (var i = 0; i < latin1StrLength; i++) {
          words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
        }

        return new WordArray.init(words, latin1StrLength);
      }


      /**
         * UTF-8 encoding strategy.
         */ };
    var Utf8 = C_enc.Utf8 = {
      /**
                               * Converts a word array to a UTF-8 string.
                               *
                               * @param {WordArray} wordArray The word array.
                               *
                               * @return {string} The UTF-8 string.
                               *
                               * @static
                               *
                               * @example
                               *
                               *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
                               */
      stringify: function stringify(wordArray) {
        try {
          return decodeURIComponent(escape(Latin1.stringify(wordArray)));
        } catch (e) {
          throw new Error('Malformed UTF-8 data');
        }
      },

      /**
          * Converts a UTF-8 string to a word array.
          *
          * @param {string} utf8Str The UTF-8 string.
          *
          * @return {WordArray} The word array.
          *
          * @static
          *
          * @example
          *
          *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
          */
      parse: function parse(utf8Str) {
        return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
      }


      /**
         * Abstract buffered block algorithm template.
         *
         * The property blockSize must be implemented in a concrete subtype.
         *
         * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
         */ };
    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
      /**
                                                                               * Resets this block algorithm's data buffer to its initial state.
                                                                               *
                                                                               * @example
                                                                               *
                                                                               *     bufferedBlockAlgorithm.reset();
                                                                               */
      reset: function reset() {
        // Initial values
        this._data = new WordArray.init();
        this._nDataBytes = 0;
      },

      /**
          * Adds new data to this block algorithm's buffer.
          *
          * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
          *
          * @example
          *
          *     bufferedBlockAlgorithm._append('data');
          *     bufferedBlockAlgorithm._append(wordArray);
          */
      _append: function _append(data) {
        // Convert string to WordArray, else assume WordArray already
        if (typeof data === 'string') {
          data = Utf8.parse(data);
        }

        // Append
        this._data.concat(data);
        this._nDataBytes += data.sigBytes;
      },

      /**
          * Processes available data blocks.
          *
          * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
          *
          * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
          *
          * @return {WordArray} The processed data.
          *
          * @example
          *
          *     var processedData = bufferedBlockAlgorithm._process();
          *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
          */
      _process: function _process(doFlush) {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;
        var dataSigBytes = data.sigBytes;
        var blockSize = this.blockSize;
        var blockSizeBytes = blockSize * 4;

        // Count blocks ready
        var nBlocksReady = dataSigBytes / blockSizeBytes;
        if (doFlush) {
          // Round up to include partial blocks
          nBlocksReady = Math.ceil(nBlocksReady);
        } else {
          // Round down to include only full blocks,
          // less the number of blocks that must remain in the buffer
          nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);
        }

        // Count words ready
        var nWordsReady = nBlocksReady * blockSize;

        // Count bytes ready
        var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);

        // Process blocks
        if (nWordsReady) {
          for (var offset = 0; offset < nWordsReady; offset += blockSize) {
            // Perform concrete-algorithm logic
            this._doProcessBlock(dataWords, offset);
          }

          // Remove processed words
          var processedWords = dataWords.splice(0, nWordsReady);
          data.sigBytes -= nBytesReady;
        }

        // Return processed words
        return new WordArray.init(processedWords, nBytesReady);
      },

      /**
          * Creates a copy of this object.
          *
          * @return {Object} The clone.
          *
          * @example
          *
          *     var clone = bufferedBlockAlgorithm.clone();
          */
      clone: function clone() {
        var clone = Base.clone.call(this);
        clone._data = this._data.clone();

        return clone;
      },

      _minBufferSize: 0 });


    /**
                             * Abstract hasher template.
                             *
                             * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
                             */
    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
      /**
                                                                 * Configuration options.
                                                                 */
      cfg: Base.extend(),

      /**
                           * Initializes a newly created hasher.
                           *
                           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
                           *
                           * @example
                           *
                           *     var hasher = CryptoJS.algo.SHA256.create();
                           */
      init: function init(cfg) {
        // Apply config defaults
        this.cfg = this.cfg.extend(cfg);

        // Set initial values
        this.reset();
      },

      /**
          * Resets this hasher to its initial state.
          *
          * @example
          *
          *     hasher.reset();
          */
      reset: function reset() {
        // Reset data buffer
        BufferedBlockAlgorithm.reset.call(this);

        // Perform concrete-hasher logic
        this._doReset();
      },

      /**
          * Updates this hasher with a message.
          *
          * @param {WordArray|string} messageUpdate The message to append.
          *
          * @return {Hasher} This hasher.
          *
          * @example
          *
          *     hasher.update('message');
          *     hasher.update(wordArray);
          */
      update: function update(messageUpdate) {
        // Append
        this._append(messageUpdate);

        // Update the hash
        this._process();

        // Chainable
        return this;
      },

      /**
          * Finalizes the hash computation.
          * Note that the finalize operation is effectively a destructive, read-once operation.
          *
          * @param {WordArray|string} messageUpdate (Optional) A final message update.
          *
          * @return {WordArray} The hash.
          *
          * @example
          *
          *     var hash = hasher.finalize();
          *     var hash = hasher.finalize('message');
          *     var hash = hasher.finalize(wordArray);
          */
      finalize: function finalize(messageUpdate) {
        // Final message update
        if (messageUpdate) {
          this._append(messageUpdate);
        }

        // Perform concrete-hasher logic
        var hash = this._doFinalize();

        return hash;
      },

      blockSize: 512 / 32,

      /**
                            * Creates a shortcut function to a hasher's object interface.
                            *
                            * @param {Hasher} hasher The hasher to create a helper for.
                            *
                            * @return {Function} The shortcut function.
                            *
                            * @static
                            *
                            * @example
                            *
                            *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
                            */
      _createHelper: function _createHelper(hasher) {
        return function (message, cfg) {
          return new hasher.init(cfg).finalize(message);
        };
      },

      /**
          * Creates a shortcut function to the HMAC's object interface.
          *
          * @param {Hasher} hasher The hasher to use in this HMAC helper.
          *
          * @return {Function} The shortcut function.
          *
          * @static
          *
          * @example
          *
          *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
          */
      _createHmacHelper: function _createHmacHelper(hasher) {
        return function (message, key) {
          return new C_algo.HMAC.init(hasher, key).finalize(message);
        };
      } });


    /**
             * Algorithm namespace.
             */
    var C_algo = C.algo = {};

    return C;
  }(Math);


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var C_enc = C.enc;

    /**
                        * Base64 encoding strategy.
                        */
    var Base64 = C_enc.Base64 = {
      /**
                                   * Converts a word array to a Base64 string.
                                   *
                                   * @param {WordArray} wordArray The word array.
                                   *
                                   * @return {string} The Base64 string.
                                   *
                                   * @static
                                   *
                                   * @example
                                   *
                                   *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
                                   */
      stringify: function stringify(wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes;
        var map = this._map;

        // Clamp excess bits
        wordArray.clamp();

        // Convert
        var base64Chars = [];
        for (var i = 0; i < sigBytes; i += 3) {
          var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
          var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
          var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;

          var triplet = byte1 << 16 | byte2 << 8 | byte3;

          for (var j = 0;
          j < 4 && i + j * 0.75 < sigBytes; j++) {
            base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
          }
        }

        // Add padding
        var paddingChar = map.charAt(64);
        if (paddingChar) {
          while (base64Chars.length % 4) {
            base64Chars.push(paddingChar);
          }
        }

        return base64Chars.join('');
      },

      /**
          * Converts a Base64 string to a word array.
          *
          * @param {string} base64Str The Base64 string.
          *
          * @return {WordArray} The word array.
          *
          * @static
          *
          * @example
          *
          *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
          */
      parse: function parse(base64Str) {
        // Shortcuts
        var base64StrLength = base64Str.length;
        var map = this._map;
        var reverseMap = this._reverseMap;

        if (!reverseMap) {
          reverseMap = this._reverseMap = [];
          for (var j = 0; j < map.length; j++) {
            reverseMap[map.charCodeAt(j)] = j;
          }
        }

        // Ignore padding
        var paddingChar = map.charAt(64);
        if (paddingChar) {
          var paddingIndex = base64Str.indexOf(paddingChar);
          if (paddingIndex !== -1) {
            base64StrLength = paddingIndex;
          }
        }

        // Convert
        return parseLoop(base64Str, base64StrLength, reverseMap);
      },

      _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=' };


    function parseLoop(base64Str, base64StrLength, reverseMap) {
      var words = [];
      var nBytes = 0;
      for (var i = 0; i < base64StrLength; i++) {
        if (i % 4) {
          var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
          var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
          words[nBytes >>> 2] |= (bits1 | bits2) << 24 - nBytes % 4 * 8;
          nBytes++;
        }
      }
      return WordArray.create(words, nBytes);
    }
  })();


  (function (Math) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var Hasher = C_lib.Hasher;
    var C_algo = C.algo;

    // Constants table
    var T = [];

    // Compute constants
    (function () {
      for (var i = 0; i < 64; i++) {
        T[i] = Math.abs(Math.sin(i + 1)) * 0x100000000 | 0;
      }
    })();

    /**
           * MD5 hash algorithm.
           */
    var MD5 = C_algo.MD5 = Hasher.extend({
      _doReset: function _doReset() {
        this._hash = new WordArray.init([
        0x67452301, 0xefcdab89,
        0x98badcfe, 0x10325476]);

      },

      _doProcessBlock: function _doProcessBlock(M, offset) {
        // Swap endian
        for (var i = 0; i < 16; i++) {
          // Shortcuts
          var offset_i = offset + i;
          var M_offset_i = M[offset_i];

          M[offset_i] =
          (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff |
          (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;

        }

        // Shortcuts
        var H = this._hash.words;

        var M_offset_0 = M[offset + 0];
        var M_offset_1 = M[offset + 1];
        var M_offset_2 = M[offset + 2];
        var M_offset_3 = M[offset + 3];
        var M_offset_4 = M[offset + 4];
        var M_offset_5 = M[offset + 5];
        var M_offset_6 = M[offset + 6];
        var M_offset_7 = M[offset + 7];
        var M_offset_8 = M[offset + 8];
        var M_offset_9 = M[offset + 9];
        var M_offset_10 = M[offset + 10];
        var M_offset_11 = M[offset + 11];
        var M_offset_12 = M[offset + 12];
        var M_offset_13 = M[offset + 13];
        var M_offset_14 = M[offset + 14];
        var M_offset_15 = M[offset + 15];

        // Working varialbes
        var a = H[0];
        var b = H[1];
        var c = H[2];
        var d = H[3];

        // Computation
        a = FF(a, b, c, d, M_offset_0, 7, T[0]);
        d = FF(d, a, b, c, M_offset_1, 12, T[1]);
        c = FF(c, d, a, b, M_offset_2, 17, T[2]);
        b = FF(b, c, d, a, M_offset_3, 22, T[3]);
        a = FF(a, b, c, d, M_offset_4, 7, T[4]);
        d = FF(d, a, b, c, M_offset_5, 12, T[5]);
        c = FF(c, d, a, b, M_offset_6, 17, T[6]);
        b = FF(b, c, d, a, M_offset_7, 22, T[7]);
        a = FF(a, b, c, d, M_offset_8, 7, T[8]);
        d = FF(d, a, b, c, M_offset_9, 12, T[9]);
        c = FF(c, d, a, b, M_offset_10, 17, T[10]);
        b = FF(b, c, d, a, M_offset_11, 22, T[11]);
        a = FF(a, b, c, d, M_offset_12, 7, T[12]);
        d = FF(d, a, b, c, M_offset_13, 12, T[13]);
        c = FF(c, d, a, b, M_offset_14, 17, T[14]);
        b = FF(b, c, d, a, M_offset_15, 22, T[15]);

        a = GG(a, b, c, d, M_offset_1, 5, T[16]);
        d = GG(d, a, b, c, M_offset_6, 9, T[17]);
        c = GG(c, d, a, b, M_offset_11, 14, T[18]);
        b = GG(b, c, d, a, M_offset_0, 20, T[19]);
        a = GG(a, b, c, d, M_offset_5, 5, T[20]);
        d = GG(d, a, b, c, M_offset_10, 9, T[21]);
        c = GG(c, d, a, b, M_offset_15, 14, T[22]);
        b = GG(b, c, d, a, M_offset_4, 20, T[23]);
        a = GG(a, b, c, d, M_offset_9, 5, T[24]);
        d = GG(d, a, b, c, M_offset_14, 9, T[25]);
        c = GG(c, d, a, b, M_offset_3, 14, T[26]);
        b = GG(b, c, d, a, M_offset_8, 20, T[27]);
        a = GG(a, b, c, d, M_offset_13, 5, T[28]);
        d = GG(d, a, b, c, M_offset_2, 9, T[29]);
        c = GG(c, d, a, b, M_offset_7, 14, T[30]);
        b = GG(b, c, d, a, M_offset_12, 20, T[31]);

        a = HH(a, b, c, d, M_offset_5, 4, T[32]);
        d = HH(d, a, b, c, M_offset_8, 11, T[33]);
        c = HH(c, d, a, b, M_offset_11, 16, T[34]);
        b = HH(b, c, d, a, M_offset_14, 23, T[35]);
        a = HH(a, b, c, d, M_offset_1, 4, T[36]);
        d = HH(d, a, b, c, M_offset_4, 11, T[37]);
        c = HH(c, d, a, b, M_offset_7, 16, T[38]);
        b = HH(b, c, d, a, M_offset_10, 23, T[39]);
        a = HH(a, b, c, d, M_offset_13, 4, T[40]);
        d = HH(d, a, b, c, M_offset_0, 11, T[41]);
        c = HH(c, d, a, b, M_offset_3, 16, T[42]);
        b = HH(b, c, d, a, M_offset_6, 23, T[43]);
        a = HH(a, b, c, d, M_offset_9, 4, T[44]);
        d = HH(d, a, b, c, M_offset_12, 11, T[45]);
        c = HH(c, d, a, b, M_offset_15, 16, T[46]);
        b = HH(b, c, d, a, M_offset_2, 23, T[47]);

        a = II(a, b, c, d, M_offset_0, 6, T[48]);
        d = II(d, a, b, c, M_offset_7, 10, T[49]);
        c = II(c, d, a, b, M_offset_14, 15, T[50]);
        b = II(b, c, d, a, M_offset_5, 21, T[51]);
        a = II(a, b, c, d, M_offset_12, 6, T[52]);
        d = II(d, a, b, c, M_offset_3, 10, T[53]);
        c = II(c, d, a, b, M_offset_10, 15, T[54]);
        b = II(b, c, d, a, M_offset_1, 21, T[55]);
        a = II(a, b, c, d, M_offset_8, 6, T[56]);
        d = II(d, a, b, c, M_offset_15, 10, T[57]);
        c = II(c, d, a, b, M_offset_6, 15, T[58]);
        b = II(b, c, d, a, M_offset_13, 21, T[59]);
        a = II(a, b, c, d, M_offset_4, 6, T[60]);
        d = II(d, a, b, c, M_offset_11, 10, T[61]);
        c = II(c, d, a, b, M_offset_2, 15, T[62]);
        b = II(b, c, d, a, M_offset_9, 21, T[63]);

        // Intermediate hash value
        H[0] = H[0] + a | 0;
        H[1] = H[1] + b | 0;
        H[2] = H[2] + c | 0;
        H[3] = H[3] + d | 0;
      },

      _doFinalize: function _doFinalize() {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;

        var nBitsTotal = this._nDataBytes * 8;
        var nBitsLeft = data.sigBytes * 8;

        // Add padding
        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;

        var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);
        var nBitsTotalL = nBitsTotal;
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] =
        (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 0x00ff00ff |
        (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 0xff00ff00;

        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] =
        (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 0x00ff00ff |
        (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 0xff00ff00;


        data.sigBytes = (dataWords.length + 1) * 4;

        // Hash final blocks
        this._process();

        // Shortcuts
        var hash = this._hash;
        var H = hash.words;

        // Swap endian
        for (var i = 0; i < 4; i++) {
          // Shortcut
          var H_i = H[i];

          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff |
          (H_i << 24 | H_i >>> 8) & 0xff00ff00;
        }

        // Return final computed hash
        return hash;
      },

      clone: function clone() {
        var clone = Hasher.clone.call(this);
        clone._hash = this._hash.clone();

        return clone;
      } });


    function FF(a, b, c, d, x, s, t) {
      var n = a + (b & c | ~b & d) + x + t;
      return (n << s | n >>> 32 - s) + b;
    }

    function GG(a, b, c, d, x, s, t) {
      var n = a + (b & d | c & ~d) + x + t;
      return (n << s | n >>> 32 - s) + b;
    }

    function HH(a, b, c, d, x, s, t) {
      var n = a + (b ^ c ^ d) + x + t;
      return (n << s | n >>> 32 - s) + b;
    }

    function II(a, b, c, d, x, s, t) {
      var n = a + (c ^ (b | ~d)) + x + t;
      return (n << s | n >>> 32 - s) + b;
    }

    /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.MD5('message');
       *     var hash = CryptoJS.MD5(wordArray);
       */
    C.MD5 = Hasher._createHelper(MD5);

    /**
                                        * Shortcut function to the HMAC's object interface.
                                        *
                                        * @param {WordArray|string} message The message to hash.
                                        * @param {WordArray|string} key The secret key.
                                        *
                                        * @return {WordArray} The HMAC.
                                        *
                                        * @static
                                        *
                                        * @example
                                        *
                                        *     var hmac = CryptoJS.HmacMD5(message, key);
                                        */
    C.HmacMD5 = Hasher._createHmacHelper(MD5);
  })(Math);


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var Hasher = C_lib.Hasher;
    var C_algo = C.algo;

    // Reusable object
    var W = [];

    /**
                 * SHA-1 hash algorithm.
                 */
    var SHA1 = C_algo.SHA1 = Hasher.extend({
      _doReset: function _doReset() {
        this._hash = new WordArray.init([
        0x67452301, 0xefcdab89,
        0x98badcfe, 0x10325476,
        0xc3d2e1f0]);

      },

      _doProcessBlock: function _doProcessBlock(M, offset) {
        // Shortcut
        var H = this._hash.words;

        // Working variables
        var a = H[0];
        var b = H[1];
        var c = H[2];
        var d = H[3];
        var e = H[4];

        // Computation
        for (var i = 0; i < 80; i++) {
          if (i < 16) {
            W[i] = M[offset + i] | 0;
          } else {
            var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = n << 1 | n >>> 31;
          }

          var t = (a << 5 | a >>> 27) + e + W[i];
          if (i < 20) {
            t += (b & c | ~b & d) + 0x5a827999;
          } else if (i < 40) {
            t += (b ^ c ^ d) + 0x6ed9eba1;
          } else if (i < 60) {
            t += (b & c | b & d | c & d) - 0x70e44324;
          } else /* if (i < 80) */{
              t += (b ^ c ^ d) - 0x359d3e2a;
            }

          e = d;
          d = c;
          c = b << 30 | b >>> 2;
          b = a;
          a = t;
        }

        // Intermediate hash value
        H[0] = H[0] + a | 0;
        H[1] = H[1] + b | 0;
        H[2] = H[2] + c | 0;
        H[3] = H[3] + d | 0;
        H[4] = H[4] + e | 0;
      },

      _doFinalize: function _doFinalize() {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;

        var nBitsTotal = this._nDataBytes * 8;
        var nBitsLeft = data.sigBytes * 8;

        // Add padding
        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
        data.sigBytes = dataWords.length * 4;

        // Hash final blocks
        this._process();

        // Return final computed hash
        return this._hash;
      },

      clone: function clone() {
        var clone = Hasher.clone.call(this);
        clone._hash = this._hash.clone();

        return clone;
      } });


    /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.SHA1('message');
             *     var hash = CryptoJS.SHA1(wordArray);
             */
    C.SHA1 = Hasher._createHelper(SHA1);

    /**
                                          * Shortcut function to the HMAC's object interface.
                                          *
                                          * @param {WordArray|string} message The message to hash.
                                          * @param {WordArray|string} key The secret key.
                                          *
                                          * @return {WordArray} The HMAC.
                                          *
                                          * @static
                                          *
                                          * @example
                                          *
                                          *     var hmac = CryptoJS.HmacSHA1(message, key);
                                          */
    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
  })();


  (function (Math) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var Hasher = C_lib.Hasher;
    var C_algo = C.algo;

    // Initialization and round constants tables
    var H = [];
    var K = [];

    // Compute constants
    (function () {
      function isPrime(n) {
        var sqrtN = Math.sqrt(n);
        for (var factor = 2; factor <= sqrtN; factor++) {
          if (!(n % factor)) {
            return false;
          }
        }

        return true;
      }

      function getFractionalBits(n) {
        return (n - (n | 0)) * 0x100000000 | 0;
      }

      var n = 2;
      var nPrime = 0;
      while (nPrime < 64) {
        if (isPrime(n)) {
          if (nPrime < 8) {
            H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));
          }
          K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));

          nPrime++;
        }

        n++;
      }
    })();

    // Reusable object
    var W = [];

    /**
                 * SHA-256 hash algorithm.
                 */
    var SHA256 = C_algo.SHA256 = Hasher.extend({
      _doReset: function _doReset() {
        this._hash = new WordArray.init(H.slice(0));
      },

      _doProcessBlock: function _doProcessBlock(M, offset) {
        // Shortcut
        var H = this._hash.words;

        // Working variables
        var a = H[0];
        var b = H[1];
        var c = H[2];
        var d = H[3];
        var e = H[4];
        var f = H[5];
        var g = H[6];
        var h = H[7];

        // Computation
        for (var i = 0; i < 64; i++) {
          if (i < 16) {
            W[i] = M[offset + i] | 0;
          } else {
            var gamma0x = W[i - 15];
            var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (
            gamma0x << 14 | gamma0x >>> 18) ^
            gamma0x >>> 3;

            var gamma1x = W[i - 2];
            var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (
            gamma1x << 13 | gamma1x >>> 19) ^
            gamma1x >>> 10;

            W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
          }

          var ch = e & f ^ ~e & g;
          var maj = a & b ^ a & c ^ b & c;

          var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
          var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);

          var t1 = h + sigma1 + ch + K[i] + W[i];
          var t2 = sigma0 + maj;

          h = g;
          g = f;
          f = e;
          e = d + t1 | 0;
          d = c;
          c = b;
          b = a;
          a = t1 + t2 | 0;
        }

        // Intermediate hash value
        H[0] = H[0] + a | 0;
        H[1] = H[1] + b | 0;
        H[2] = H[2] + c | 0;
        H[3] = H[3] + d | 0;
        H[4] = H[4] + e | 0;
        H[5] = H[5] + f | 0;
        H[6] = H[6] + g | 0;
        H[7] = H[7] + h | 0;
      },

      _doFinalize: function _doFinalize() {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;

        var nBitsTotal = this._nDataBytes * 8;
        var nBitsLeft = data.sigBytes * 8;

        // Add padding
        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
        data.sigBytes = dataWords.length * 4;

        // Hash final blocks
        this._process();

        // Return final computed hash
        return this._hash;
      },

      clone: function clone() {
        var clone = Hasher.clone.call(this);
        clone._hash = this._hash.clone();

        return clone;
      } });


    /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.SHA256('message');
             *     var hash = CryptoJS.SHA256(wordArray);
             */
    C.SHA256 = Hasher._createHelper(SHA256);

    /**
                                              * Shortcut function to the HMAC's object interface.
                                              *
                                              * @param {WordArray|string} message The message to hash.
                                              * @param {WordArray|string} key The secret key.
                                              *
                                              * @return {WordArray} The HMAC.
                                              *
                                              * @static
                                              *
                                              * @example
                                              *
                                              *     var hmac = CryptoJS.HmacSHA256(message, key);
                                              */
    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
  })(Math);


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var C_enc = C.enc;

    /**
                        * UTF-16 BE encoding strategy.
                        */
    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
      /**
                                                   * Converts a word array to a UTF-16 BE string.
                                                   *
                                                   * @param {WordArray} wordArray The word array.
                                                   *
                                                   * @return {string} The UTF-16 BE string.
                                                   *
                                                   * @static
                                                   *
                                                   * @example
                                                   *
                                                   *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
                                                   */
      stringify: function stringify(wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes;

        // Convert
        var utf16Chars = [];
        for (var i = 0; i < sigBytes; i += 2) {
          var codePoint = words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff;
          utf16Chars.push(String.fromCharCode(codePoint));
        }

        return utf16Chars.join('');
      },

      /**
          * Converts a UTF-16 BE string to a word array.
          *
          * @param {string} utf16Str The UTF-16 BE string.
          *
          * @return {WordArray} The word array.
          *
          * @static
          *
          * @example
          *
          *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
          */
      parse: function parse(utf16Str) {
        // Shortcut
        var utf16StrLength = utf16Str.length;

        // Convert
        var words = [];
        for (var i = 0; i < utf16StrLength; i++) {
          words[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
        }

        return WordArray.create(words, utf16StrLength * 2);
      }


      /**
         * UTF-16 LE encoding strategy.
         */ };
    C_enc.Utf16LE = {
      /**
                       * Converts a word array to a UTF-16 LE string.
                       *
                       * @param {WordArray} wordArray The word array.
                       *
                       * @return {string} The UTF-16 LE string.
                       *
                       * @static
                       *
                       * @example
                       *
                       *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
                       */
      stringify: function stringify(wordArray) {
        // Shortcuts
        var words = wordArray.words;
        var sigBytes = wordArray.sigBytes;

        // Convert
        var utf16Chars = [];
        for (var i = 0; i < sigBytes; i += 2) {
          var codePoint = swapEndian(words[i >>> 2] >>> 16 - i % 4 * 8 & 0xffff);
          utf16Chars.push(String.fromCharCode(codePoint));
        }

        return utf16Chars.join('');
      },

      /**
          * Converts a UTF-16 LE string to a word array.
          *
          * @param {string} utf16Str The UTF-16 LE string.
          *
          * @return {WordArray} The word array.
          *
          * @static
          *
          * @example
          *
          *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
          */
      parse: function parse(utf16Str) {
        // Shortcut
        var utf16StrLength = utf16Str.length;

        // Convert
        var words = [];
        for (var i = 0; i < utf16StrLength; i++) {
          words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
        }

        return WordArray.create(words, utf16StrLength * 2);
      } };


    function swapEndian(word) {
      return word << 8 & 0xff00ff00 | word >>> 8 & 0x00ff00ff;
    }
  })();


  (function () {
    // Check if typed arrays are supported
    if (typeof ArrayBuffer !== 'function') {
      return;
    }

    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;

    // Reference original init
    var superInit = WordArray.init;

    // Augment WordArray.init to handle typed arrays
    var subInit = WordArray.init = function (typedArray) {
      // Convert buffers to uint8
      if (typedArray instanceof ArrayBuffer) {
        typedArray = new Uint8Array(typedArray);
      }

      // Convert other array views to uint8
      if (
      typedArray instanceof Int8Array ||
      typeof Uint8ClampedArray !== 'undefined' && typedArray instanceof Uint8ClampedArray ||
      typedArray instanceof Int16Array ||
      typedArray instanceof Uint16Array ||
      typedArray instanceof Int32Array ||
      typedArray instanceof Uint32Array ||
      typedArray instanceof Float32Array ||
      typedArray instanceof Float64Array)
      {
        typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
      }

      // Handle Uint8Array
      if (typedArray instanceof Uint8Array) {
        // Shortcut
        var typedArrayByteLength = typedArray.byteLength;

        // Extract bytes
        var words = [];
        for (var i = 0; i < typedArrayByteLength; i++) {
          words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
        }

        // Initialize this word array
        superInit.call(this, words, typedArrayByteLength);
      } else {
        // Else call normal init
        superInit.apply(this, arguments);
      }
    };

    subInit.prototype = WordArray;
  })();


  /** @preserve
        (c) 2012 by Cédric Mesnil. All rights reserved.
          Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
              - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
            - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
          THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        */




  (function (Math) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var Hasher = C_lib.Hasher;
    var C_algo = C.algo;

    // Constants table
    var _zl = WordArray.create([
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
    7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
    3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
    1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
    4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]);

    var _zr = WordArray.create([
    5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
    6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
    15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
    8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
    12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]);

    var _sl = WordArray.create([
    11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
    7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
    11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
    11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
    9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]);

    var _sr = WordArray.create([
    8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
    9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
    9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
    15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
    8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]);


    var _hl = WordArray.create([0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);
    var _hr = WordArray.create([0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);

    /**
                                                                                               * RIPEMD160 hash algorithm.
                                                                                               */
    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
      _doReset: function _doReset() {
        this._hash = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);
      },

      _doProcessBlock: function _doProcessBlock(M, offset) {
        // Swap endian
        for (var i = 0; i < 16; i++) {
          // Shortcuts
          var offset_i = offset + i;
          var M_offset_i = M[offset_i];

          // Swap
          M[offset_i] =
          (M_offset_i << 8 | M_offset_i >>> 24) & 0x00ff00ff |
          (M_offset_i << 24 | M_offset_i >>> 8) & 0xff00ff00;

        }
        // Shortcut
        var H = this._hash.words;
        var hl = _hl.words;
        var hr = _hr.words;
        var zl = _zl.words;
        var zr = _zr.words;
        var sl = _sl.words;
        var sr = _sr.words;

        // Working variables
        var al, bl, cl, dl, el;
        var ar, br, cr, dr, er;

        ar = al = H[0];
        br = bl = H[1];
        cr = cl = H[2];
        dr = dl = H[3];
        er = el = H[4];
        // Computation
        var t;
        for (var i = 0; i < 80; i += 1) {
          t = al + M[offset + zl[i]] | 0;
          if (i < 16) {
            t += f1(bl, cl, dl) + hl[0];
          } else if (i < 32) {
            t += f2(bl, cl, dl) + hl[1];
          } else if (i < 48) {
            t += f3(bl, cl, dl) + hl[2];
          } else if (i < 64) {
            t += f4(bl, cl, dl) + hl[3];
          } else {// if (i<80) {
            t += f5(bl, cl, dl) + hl[4];
          }
          t = t | 0;
          t = rotl(t, sl[i]);
          t = t + el | 0;
          al = el;
          el = dl;
          dl = rotl(cl, 10);
          cl = bl;
          bl = t;

          t = ar + M[offset + zr[i]] | 0;
          if (i < 16) {
            t += f5(br, cr, dr) + hr[0];
          } else if (i < 32) {
            t += f4(br, cr, dr) + hr[1];
          } else if (i < 48) {
            t += f3(br, cr, dr) + hr[2];
          } else if (i < 64) {
            t += f2(br, cr, dr) + hr[3];
          } else {// if (i<80) {
            t += f1(br, cr, dr) + hr[4];
          }
          t = t | 0;
          t = rotl(t, sr[i]);
          t = t + er | 0;
          ar = er;
          er = dr;
          dr = rotl(cr, 10);
          cr = br;
          br = t;
        }
        // Intermediate hash value
        t = H[1] + cl + dr | 0;
        H[1] = H[2] + dl + er | 0;
        H[2] = H[3] + el + ar | 0;
        H[3] = H[4] + al + br | 0;
        H[4] = H[0] + bl + cr | 0;
        H[0] = t;
      },

      _doFinalize: function _doFinalize() {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;

        var nBitsTotal = this._nDataBytes * 8;
        var nBitsLeft = data.sigBytes * 8;

        // Add padding
        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
        dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] =
        (nBitsTotal << 8 | nBitsTotal >>> 24) & 0x00ff00ff |
        (nBitsTotal << 24 | nBitsTotal >>> 8) & 0xff00ff00;

        data.sigBytes = (dataWords.length + 1) * 4;

        // Hash final blocks
        this._process();

        // Shortcuts
        var hash = this._hash;
        var H = hash.words;

        // Swap endian
        for (var i = 0; i < 5; i++) {
          // Shortcut
          var H_i = H[i];

          // Swap
          H[i] = (H_i << 8 | H_i >>> 24) & 0x00ff00ff |
          (H_i << 24 | H_i >>> 8) & 0xff00ff00;
        }

        // Return final computed hash
        return hash;
      },

      clone: function clone() {
        var clone = Hasher.clone.call(this);
        clone._hash = this._hash.clone();

        return clone;
      } });



    function f1(x, y, z) {
      return x ^ y ^ z;
    }

    function f2(x, y, z) {
      return x & y | ~x & z;
    }

    function f3(x, y, z) {
      return (x | ~y) ^ z;
    }

    function f4(x, y, z) {
      return x & z | y & ~z;
    }

    function f5(x, y, z) {
      return x ^ (y | ~z);
    }

    function rotl(x, n) {
      return x << n | x >>> 32 - n;
    }


    /**
       * Shortcut function to the hasher's object interface.
       *
       * @param {WordArray|string} message The message to hash.
       *
       * @return {WordArray} The hash.
       *
       * @static
       *
       * @example
       *
       *     var hash = CryptoJS.RIPEMD160('message');
       *     var hash = CryptoJS.RIPEMD160(wordArray);
       */
    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);

    /**
                                                    * Shortcut function to the HMAC's object interface.
                                                    *
                                                    * @param {WordArray|string} message The message to hash.
                                                    * @param {WordArray|string} key The secret key.
                                                    *
                                                    * @return {WordArray} The HMAC.
                                                    *
                                                    * @static
                                                    *
                                                    * @example
                                                    *
                                                    *     var hmac = CryptoJS.HmacRIPEMD160(message, key);
                                                    */
    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
  })(Math);


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var C_enc = C.enc;
    var Utf8 = C_enc.Utf8;
    var C_algo = C.algo;

    /**
                          * HMAC algorithm.
                          */
    var HMAC = C_algo.HMAC = Base.extend({
      /**
                                            * Initializes a newly created HMAC.
                                            *
                                            * @param {Hasher} hasher The hash algorithm to use.
                                            * @param {WordArray|string} key The secret key.
                                            *
                                            * @example
                                            *
                                            *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
                                            */
      init: function init(hasher, key) {
        // Init hasher
        hasher = this._hasher = new hasher.init();

        // Convert string to WordArray, else assume WordArray already
        if (typeof key === 'string') {
          key = Utf8.parse(key);
        }

        // Shortcuts
        var hasherBlockSize = hasher.blockSize;
        var hasherBlockSizeBytes = hasherBlockSize * 4;

        // Allow arbitrary length keys
        if (key.sigBytes > hasherBlockSizeBytes) {
          key = hasher.finalize(key);
        }

        // Clamp excess bits
        key.clamp();

        // Clone key for inner and outer pads
        var oKey = this._oKey = key.clone();
        var iKey = this._iKey = key.clone();

        // Shortcuts
        var oKeyWords = oKey.words;
        var iKeyWords = iKey.words;

        // XOR keys with pad constants
        for (var i = 0; i < hasherBlockSize; i++) {
          oKeyWords[i] ^= 0x5c5c5c5c;
          iKeyWords[i] ^= 0x36363636;
        }
        oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;

        // Set initial values
        this.reset();
      },

      /**
          * Resets this HMAC to its initial state.
          *
          * @example
          *
          *     hmacHasher.reset();
          */
      reset: function reset() {
        // Shortcut
        var hasher = this._hasher;

        // Reset
        hasher.reset();
        hasher.update(this._iKey);
      },

      /**
          * Updates this HMAC with a message.
          *
          * @param {WordArray|string} messageUpdate The message to append.
          *
          * @return {HMAC} This HMAC instance.
          *
          * @example
          *
          *     hmacHasher.update('message');
          *     hmacHasher.update(wordArray);
          */
      update: function update(messageUpdate) {
        this._hasher.update(messageUpdate);

        // Chainable
        return this;
      },

      /**
          * Finalizes the HMAC computation.
          * Note that the finalize operation is effectively a destructive, read-once operation.
          *
          * @param {WordArray|string} messageUpdate (Optional) A final message update.
          *
          * @return {WordArray} The HMAC.
          *
          * @example
          *
          *     var hmac = hmacHasher.finalize();
          *     var hmac = hmacHasher.finalize('message');
          *     var hmac = hmacHasher.finalize(wordArray);
          */
      finalize: function finalize(messageUpdate) {
        // Shortcut
        var hasher = this._hasher;

        // Compute HMAC
        var innerHash = hasher.finalize(messageUpdate);
        hasher.reset();
        var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));

        return hmac;
      } });

  })();


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var WordArray = C_lib.WordArray;
    var C_algo = C.algo;
    var SHA1 = C_algo.SHA1;
    var HMAC = C_algo.HMAC;

    /**
                             * Password-Based Key Derivation Function 2 algorithm.
                             */
    var PBKDF2 = C_algo.PBKDF2 = Base.extend({
      /**
                                                * Configuration options.
                                                *
                                                * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
                                                * @property {Hasher} hasher The hasher to use. Default: SHA1
                                                * @property {number} iterations The number of iterations to perform. Default: 1
                                                */
      cfg: Base.extend({
        keySize: 128 / 32,
        hasher: SHA1,
        iterations: 1 }),


      /**
                           * Initializes a newly created key derivation function.
                           *
                           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
                           *
                           * @example
                           *
                           *     var kdf = CryptoJS.algo.PBKDF2.create();
                           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
                           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
                           */
      init: function init(cfg) {
        this.cfg = this.cfg.extend(cfg);
      },

      /**
          * Computes the Password-Based Key Derivation Function 2.
          *
          * @param {WordArray|string} password The password.
          * @param {WordArray|string} salt A salt.
          *
          * @return {WordArray} The derived key.
          *
          * @example
          *
          *     var key = kdf.compute(password, salt);
          */
      compute: function compute(password, salt) {
        // Shortcut
        var cfg = this.cfg;

        // Init HMAC
        var hmac = HMAC.create(cfg.hasher, password);

        // Initial values
        var derivedKey = WordArray.create();
        var blockIndex = WordArray.create([0x00000001]);

        // Shortcuts
        var derivedKeyWords = derivedKey.words;
        var blockIndexWords = blockIndex.words;
        var keySize = cfg.keySize;
        var iterations = cfg.iterations;

        // Generate key
        while (derivedKeyWords.length < keySize) {
          var block = hmac.update(salt).finalize(blockIndex);
          hmac.reset();

          // Shortcuts
          var blockWords = block.words;
          var blockWordsLength = blockWords.length;

          // Iterations
          var intermediate = block;
          for (var i = 1; i < iterations; i++) {
            intermediate = hmac.finalize(intermediate);
            hmac.reset();

            // Shortcut
            var intermediateWords = intermediate.words;

            // XOR intermediate with block
            for (var j = 0; j < blockWordsLength; j++) {
              blockWords[j] ^= intermediateWords[j];
            }
          }

          derivedKey.concat(block);
          blockIndexWords[0]++;
        }
        derivedKey.sigBytes = keySize * 4;

        return derivedKey;
      } });


    /**
             * Computes the Password-Based Key Derivation Function 2.
             *
             * @param {WordArray|string} password The password.
             * @param {WordArray|string} salt A salt.
             * @param {Object} cfg (Optional) The configuration options to use for this computation.
             *
             * @return {WordArray} The derived key.
             *
             * @static
             *
             * @example
             *
             *     var key = CryptoJS.PBKDF2(password, salt);
             *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });
             *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });
             */
    C.PBKDF2 = function (password, salt, cfg) {
      return PBKDF2.create(cfg).compute(password, salt);
    };
  })();


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var WordArray = C_lib.WordArray;
    var C_algo = C.algo;
    var MD5 = C_algo.MD5;

    /**
                           * This key derivation function is meant to conform with EVP_BytesToKey.
                           * www.openssl.org/docs/crypto/EVP_BytesToKey.html
                           */
    var EvpKDF = C_algo.EvpKDF = Base.extend({
      /**
                                                * Configuration options.
                                                *
                                                * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
                                                * @property {Hasher} hasher The hash algorithm to use. Default: MD5
                                                * @property {number} iterations The number of iterations to perform. Default: 1
                                                */
      cfg: Base.extend({
        keySize: 128 / 32,
        hasher: MD5,
        iterations: 1 }),


      /**
                           * Initializes a newly created key derivation function.
                           *
                           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
                           *
                           * @example
                           *
                           *     var kdf = CryptoJS.algo.EvpKDF.create();
                           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
                           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
                           */
      init: function init(cfg) {
        this.cfg = this.cfg.extend(cfg);
      },

      /**
          * Derives a key from a password.
          *
          * @param {WordArray|string} password The password.
          * @param {WordArray|string} salt A salt.
          *
          * @return {WordArray} The derived key.
          *
          * @example
          *
          *     var key = kdf.compute(password, salt);
          */
      compute: function compute(password, salt) {
        // Shortcut
        var cfg = this.cfg;

        // Init hasher
        var hasher = cfg.hasher.create();

        // Initial values
        var derivedKey = WordArray.create();

        // Shortcuts
        var derivedKeyWords = derivedKey.words;
        var keySize = cfg.keySize;
        var iterations = cfg.iterations;

        // Generate key
        while (derivedKeyWords.length < keySize) {
          if (block) {
            hasher.update(block);
          }
          var block = hasher.update(password).finalize(salt);
          hasher.reset();

          // Iterations
          for (var i = 1; i < iterations; i++) {
            block = hasher.finalize(block);
            hasher.reset();
          }

          derivedKey.concat(block);
        }
        derivedKey.sigBytes = keySize * 4;

        return derivedKey;
      } });


    /**
             * Derives a key from a password.
             *
             * @param {WordArray|string} password The password.
             * @param {WordArray|string} salt A salt.
             * @param {Object} cfg (Optional) The configuration options to use for this computation.
             *
             * @return {WordArray} The derived key.
             *
             * @static
             *
             * @example
             *
             *     var key = CryptoJS.EvpKDF(password, salt);
             *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });
             *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });
             */
    C.EvpKDF = function (password, salt, cfg) {
      return EvpKDF.create(cfg).compute(password, salt);
    };
  })();


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var C_algo = C.algo;
    var SHA256 = C_algo.SHA256;

    /**
                                 * SHA-224 hash algorithm.
                                 */
    var SHA224 = C_algo.SHA224 = SHA256.extend({
      _doReset: function _doReset() {
        this._hash = new WordArray.init([
        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4]);

      },

      _doFinalize: function _doFinalize() {
        var hash = SHA256._doFinalize.call(this);

        hash.sigBytes -= 4;

        return hash;
      } });


    /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.SHA224('message');
             *     var hash = CryptoJS.SHA224(wordArray);
             */
    C.SHA224 = SHA256._createHelper(SHA224);

    /**
                                              * Shortcut function to the HMAC's object interface.
                                              *
                                              * @param {WordArray|string} message The message to hash.
                                              * @param {WordArray|string} key The secret key.
                                              *
                                              * @return {WordArray} The HMAC.
                                              *
                                              * @static
                                              *
                                              * @example
                                              *
                                              *     var hmac = CryptoJS.HmacSHA224(message, key);
                                              */
    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
  })();


  (function (undefined) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var X32WordArray = C_lib.WordArray;

    /**
                                         * x64 namespace.
                                         */
    var C_x64 = C.x64 = {};

    /**
                             * A 64-bit word.
                             */
    var X64Word = C_x64.Word = Base.extend({
      /**
                                              * Initializes a newly created 64-bit word.
                                              *
                                              * @param {number} high The high 32 bits.
                                              * @param {number} low The low 32 bits.
                                              *
                                              * @example
                                              *
                                              *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
                                              */
      init: function init(high, low) {
        this.high = high;
        this.low = low;
      }

      /**
         * Bitwise NOTs this word.
         *
         * @return {X64Word} A new x64-Word object after negating.
         *
         * @example
         *
         *     var negated = x64Word.not();
         */
      // not: function () {
      // var high = ~this.high;
      // var low = ~this.low;

      // return X64Word.create(high, low);
      // },

      /**
       * Bitwise ANDs this word with the passed word.
       *
       * @param {X64Word} word The x64-Word to AND with this word.
       *
       * @return {X64Word} A new x64-Word object after ANDing.
       *
       * @example
       *
       *     var anded = x64Word.and(anotherX64Word);
       */
      // and: function (word) {
      // var high = this.high & word.high;
      // var low = this.low & word.low;

      // return X64Word.create(high, low);
      // },

      /**
       * Bitwise ORs this word with the passed word.
       *
       * @param {X64Word} word The x64-Word to OR with this word.
       *
       * @return {X64Word} A new x64-Word object after ORing.
       *
       * @example
       *
       *     var ored = x64Word.or(anotherX64Word);
       */
      // or: function (word) {
      // var high = this.high | word.high;
      // var low = this.low | word.low;

      // return X64Word.create(high, low);
      // },

      /**
       * Bitwise XORs this word with the passed word.
       *
       * @param {X64Word} word The x64-Word to XOR with this word.
       *
       * @return {X64Word} A new x64-Word object after XORing.
       *
       * @example
       *
       *     var xored = x64Word.xor(anotherX64Word);
       */
      // xor: function (word) {
      // var high = this.high ^ word.high;
      // var low = this.low ^ word.low;

      // return X64Word.create(high, low);
      // },

      /**
       * Shifts this word n bits to the left.
       *
       * @param {number} n The number of bits to shift.
       *
       * @return {X64Word} A new x64-Word object after shifting.
       *
       * @example
       *
       *     var shifted = x64Word.shiftL(25);
       */
      // shiftL: function (n) {
      // if (n < 32) {
      // var high = (this.high << n) | (this.low >>> (32 - n));
      // var low = this.low << n;
      // } else {
      // var high = this.low << (n - 32);
      // var low = 0;
      // }

      // return X64Word.create(high, low);
      // },

      /**
       * Shifts this word n bits to the right.
       *
       * @param {number} n The number of bits to shift.
       *
       * @return {X64Word} A new x64-Word object after shifting.
       *
       * @example
       *
       *     var shifted = x64Word.shiftR(7);
       */
      // shiftR: function (n) {
      // if (n < 32) {
      // var low = (this.low >>> n) | (this.high << (32 - n));
      // var high = this.high >>> n;
      // } else {
      // var low = this.high >>> (n - 32);
      // var high = 0;
      // }

      // return X64Word.create(high, low);
      // },

      /**
       * Rotates this word n bits to the left.
       *
       * @param {number} n The number of bits to rotate.
       *
       * @return {X64Word} A new x64-Word object after rotating.
       *
       * @example
       *
       *     var rotated = x64Word.rotL(25);
       */
      // rotL: function (n) {
      // return this.shiftL(n).or(this.shiftR(64 - n));
      // },

      /**
       * Rotates this word n bits to the right.
       *
       * @param {number} n The number of bits to rotate.
       *
       * @return {X64Word} A new x64-Word object after rotating.
       *
       * @example
       *
       *     var rotated = x64Word.rotR(7);
       */
      // rotR: function (n) {
      // return this.shiftR(n).or(this.shiftL(64 - n));
      // },

      /**
       * Adds this word with the passed word.
       *
       * @param {X64Word} word The x64-Word to add with this word.
       *
       * @return {X64Word} A new x64-Word object after adding.
       *
       * @example
       *
       *     var added = x64Word.add(anotherX64Word);
       */
      // add: function (word) {
      // var low = (this.low + word.low) | 0;
      // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
      // var high = (this.high + word.high + carry) | 0;

      // return X64Word.create(high, low);
      // }
    });

    /**
         * An array of 64-bit words.
         *
         * @property {Array} words The array of CryptoJS.x64.Word objects.
         * @property {number} sigBytes The number of significant bytes in this word array.
         */
    var X64WordArray = C_x64.WordArray = Base.extend({
      /**
                                                        * Initializes a newly created word array.
                                                        *
                                                        * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
                                                        * @param {number} sigBytes (Optional) The number of significant bytes in the words.
                                                        *
                                                        * @example
                                                        *
                                                        *     var wordArray = CryptoJS.x64.WordArray.create();
                                                        *
                                                        *     var wordArray = CryptoJS.x64.WordArray.create([
                                                        *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
                                                        *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
                                                        *     ]);
                                                        *
                                                        *     var wordArray = CryptoJS.x64.WordArray.create([
                                                        *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
                                                        *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
                                                        *     ], 10);
                                                        */
      init: function init(words, sigBytes) {
        words = this.words = words || [];

        if (sigBytes != undefined) {
          this.sigBytes = sigBytes;
        } else {
          this.sigBytes = words.length * 8;
        }
      },

      /**
          * Converts this 64-bit word array to a 32-bit word array.
          *
          * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
          *
          * @example
          *
          *     var x32WordArray = x64WordArray.toX32();
          */
      toX32: function toX32() {
        // Shortcuts
        var x64Words = this.words;
        var x64WordsLength = x64Words.length;

        // Convert
        var x32Words = [];
        for (var i = 0; i < x64WordsLength; i++) {
          var x64Word = x64Words[i];
          x32Words.push(x64Word.high);
          x32Words.push(x64Word.low);
        }

        return X32WordArray.create(x32Words, this.sigBytes);
      },

      /**
          * Creates a copy of this word array.
          *
          * @return {X64WordArray} The clone.
          *
          * @example
          *
          *     var clone = x64WordArray.clone();
          */
      clone: function clone() {
        var clone = Base.clone.call(this);

        // Clone "words" array
        var words = clone.words = this.words.slice(0);

        // Clone each X64Word object
        var wordsLength = words.length;
        for (var i = 0; i < wordsLength; i++) {
          words[i] = words[i].clone();
        }

        return clone;
      } });

  })();


  (function (Math) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var Hasher = C_lib.Hasher;
    var C_x64 = C.x64;
    var X64Word = C_x64.Word;
    var C_algo = C.algo;

    // Constants tables
    var RHO_OFFSETS = [];
    var PI_INDEXES = [];
    var ROUND_CONSTANTS = [];

    // Compute Constants
    (function () {
      // Compute rho offset constants
      var x = 1,
      y = 0;
      for (var t = 0; t < 24; t++) {
        RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;

        var newX = y % 5;
        var newY = (2 * x + 3 * y) % 5;
        x = newX;
        y = newY;
      }

      // Compute pi index constants
      for (var x = 0; x < 5; x++) {
        for (var y = 0; y < 5; y++) {
          PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
        }
      }

      // Compute round constants
      var LFSR = 0x01;
      for (var i = 0; i < 24; i++) {
        var roundConstantMsw = 0;
        var roundConstantLsw = 0;

        for (var j = 0; j < 7; j++) {
          if (LFSR & 0x01) {
            var bitPosition = (1 << j) - 1;
            if (bitPosition < 32) {
              roundConstantLsw ^= 1 << bitPosition;
            } else /* if (bitPosition >= 32) */{
                roundConstantMsw ^= 1 << bitPosition - 32;
              }
          }

          // Compute next LFSR
          if (LFSR & 0x80) {
            // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1
            LFSR = LFSR << 1 ^ 0x71;
          } else {
            LFSR <<= 1;
          }
        }

        ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
      }
    })();

    // Reusable objects for temporary values
    var T = [];
    (function () {
      for (var i = 0; i < 25; i++) {
        T[i] = X64Word.create();
      }
    })();

    /**
           * SHA-3 hash algorithm.
           */
    var SHA3 = C_algo.SHA3 = Hasher.extend({
      /**
                                              * Configuration options.
                                              *
                                              * @property {number} outputLength
                                              *   The desired number of bits in the output hash.
                                              *   Only values permitted are: 224, 256, 384, 512.
                                              *   Default: 512
                                              */
      cfg: Hasher.cfg.extend({
        outputLength: 512 }),


      _doReset: function _doReset() {
        var state = this._state = [];
        for (var i = 0; i < 25; i++) {
          state[i] = new X64Word.init();
        }

        this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
      },

      _doProcessBlock: function _doProcessBlock(M, offset) {
        // Shortcuts
        var state = this._state;
        var nBlockSizeLanes = this.blockSize / 2;

        // Absorb
        for (var i = 0; i < nBlockSizeLanes; i++) {
          // Shortcuts
          var M2i = M[offset + 2 * i];
          var M2i1 = M[offset + 2 * i + 1];

          // Swap endian
          M2i =
          (M2i << 8 | M2i >>> 24) & 0x00ff00ff |
          (M2i << 24 | M2i >>> 8) & 0xff00ff00;

          M2i1 =
          (M2i1 << 8 | M2i1 >>> 24) & 0x00ff00ff |
          (M2i1 << 24 | M2i1 >>> 8) & 0xff00ff00;


          // Absorb message into state
          var lane = state[i];
          lane.high ^= M2i1;
          lane.low ^= M2i;
        }

        // Rounds
        for (var round = 0; round < 24; round++) {
          // Theta
          for (var x = 0; x < 5; x++) {
            // Mix column lanes
            var tMsw = 0,
            tLsw = 0;
            for (var y = 0; y < 5; y++) {
              var lane = state[x + 5 * y];
              tMsw ^= lane.high;
              tLsw ^= lane.low;
            }

            // Temporary values
            var Tx = T[x];
            Tx.high = tMsw;
            Tx.low = tLsw;
          }
          for (var x = 0; x < 5; x++) {
            // Shortcuts
            var Tx4 = T[(x + 4) % 5];
            var Tx1 = T[(x + 1) % 5];
            var Tx1Msw = Tx1.high;
            var Tx1Lsw = Tx1.low;

            // Mix surrounding columns
            var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
            var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
            for (var y = 0; y < 5; y++) {
              var lane = state[x + 5 * y];
              lane.high ^= tMsw;
              lane.low ^= tLsw;
            }
          }

          // Rho Pi
          for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
            // Shortcuts
            var lane = state[laneIndex];
            var laneMsw = lane.high;
            var laneLsw = lane.low;
            var rhoOffset = RHO_OFFSETS[laneIndex];

            // Rotate lanes
            if (rhoOffset < 32) {
              var tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
              var tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
            } else /* if (rhoOffset >= 32) */{
                var tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                var tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
              }

            // Transpose lanes
            var TPiLane = T[PI_INDEXES[laneIndex]];
            TPiLane.high = tMsw;
            TPiLane.low = tLsw;
          }

          // Rho pi at x = y = 0
          var T0 = T[0];
          var state0 = state[0];
          T0.high = state0.high;
          T0.low = state0.low;

          // Chi
          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              // Shortcuts
              var laneIndex = x + 5 * y;
              var lane = state[laneIndex];
              var TLane = T[laneIndex];
              var Tx1Lane = T[(x + 1) % 5 + 5 * y];
              var Tx2Lane = T[(x + 2) % 5 + 5 * y];

              // Mix rows
              lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
              lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
            }
          }

          // Iota
          var lane = state[0];
          var roundConstant = ROUND_CONSTANTS[round];
          lane.high ^= roundConstant.high;
          lane.low ^= roundConstant.low;
        }
      },

      _doFinalize: function _doFinalize() {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;
        var nBitsTotal = this._nDataBytes * 8;
        var nBitsLeft = data.sigBytes * 8;
        var blockSizeBits = this.blockSize * 32;

        // Add padding
        dataWords[nBitsLeft >>> 5] |= 0x1 << 24 - nBitsLeft % 32;
        dataWords[(Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 0x80;
        data.sigBytes = dataWords.length * 4;

        // Hash final blocks
        this._process();

        // Shortcuts
        var state = this._state;
        var outputLengthBytes = this.cfg.outputLength / 8;
        var outputLengthLanes = outputLengthBytes / 8;

        // Squeeze
        var hashWords = [];
        for (var i = 0; i < outputLengthLanes; i++) {
          // Shortcuts
          var lane = state[i];
          var laneMsw = lane.high;
          var laneLsw = lane.low;

          // Swap endian
          laneMsw =
          (laneMsw << 8 | laneMsw >>> 24) & 0x00ff00ff |
          (laneMsw << 24 | laneMsw >>> 8) & 0xff00ff00;

          laneLsw =
          (laneLsw << 8 | laneLsw >>> 24) & 0x00ff00ff |
          (laneLsw << 24 | laneLsw >>> 8) & 0xff00ff00;


          // Squeeze state to retrieve hash
          hashWords.push(laneLsw);
          hashWords.push(laneMsw);
        }

        // Return final computed hash
        return new WordArray.init(hashWords, outputLengthBytes);
      },

      clone: function clone() {
        var clone = Hasher.clone.call(this);

        var state = clone._state = this._state.slice(0);
        for (var i = 0; i < 25; i++) {
          state[i] = state[i].clone();
        }

        return clone;
      } });


    /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.SHA3('message');
             *     var hash = CryptoJS.SHA3(wordArray);
             */
    C.SHA3 = Hasher._createHelper(SHA3);

    /**
                                          * Shortcut function to the HMAC's object interface.
                                          *
                                          * @param {WordArray|string} message The message to hash.
                                          * @param {WordArray|string} key The secret key.
                                          *
                                          * @return {WordArray} The HMAC.
                                          *
                                          * @static
                                          *
                                          * @example
                                          *
                                          *     var hmac = CryptoJS.HmacSHA3(message, key);
                                          */
    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
  })(Math);


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Hasher = C_lib.Hasher;
    var C_x64 = C.x64;
    var X64Word = C_x64.Word;
    var X64WordArray = C_x64.WordArray;
    var C_algo = C.algo;

    function X64Word_create() {
      return X64Word.create.apply(X64Word, arguments);
    }

    // Constants
    var K = [
    X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),
    X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),
    X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),
    X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),
    X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),
    X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),
    X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),
    X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),
    X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),
    X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),
    X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),
    X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),
    X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),
    X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),
    X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),
    X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),
    X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),
    X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),
    X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),
    X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),
    X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),
    X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),
    X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),
    X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),
    X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),
    X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),
    X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),
    X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),
    X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),
    X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),
    X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),
    X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),
    X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),
    X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),
    X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),
    X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),
    X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),
    X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),
    X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),
    X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)];


    // Reusable objects
    var W = [];
    (function () {
      for (var i = 0; i < 80; i++) {
        W[i] = X64Word_create();
      }
    })();

    /**
           * SHA-512 hash algorithm.
           */
    var SHA512 = C_algo.SHA512 = Hasher.extend({
      _doReset: function _doReset() {
        this._hash = new X64WordArray.init([
        new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),
        new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),
        new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),
        new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)]);

      },

      _doProcessBlock: function _doProcessBlock(M, offset) {
        // Shortcuts
        var H = this._hash.words;

        var H0 = H[0];
        var H1 = H[1];
        var H2 = H[2];
        var H3 = H[3];
        var H4 = H[4];
        var H5 = H[5];
        var H6 = H[6];
        var H7 = H[7];

        var H0h = H0.high;
        var H0l = H0.low;
        var H1h = H1.high;
        var H1l = H1.low;
        var H2h = H2.high;
        var H2l = H2.low;
        var H3h = H3.high;
        var H3l = H3.low;
        var H4h = H4.high;
        var H4l = H4.low;
        var H5h = H5.high;
        var H5l = H5.low;
        var H6h = H6.high;
        var H6l = H6.low;
        var H7h = H7.high;
        var H7l = H7.low;

        // Working variables
        var ah = H0h;
        var al = H0l;
        var bh = H1h;
        var bl = H1l;
        var ch = H2h;
        var cl = H2l;
        var dh = H3h;
        var dl = H3l;
        var eh = H4h;
        var el = H4l;
        var fh = H5h;
        var fl = H5l;
        var gh = H6h;
        var gl = H6l;
        var hh = H7h;
        var hl = H7l;

        // Rounds
        for (var i = 0; i < 80; i++) {
          // Shortcut
          var Wi = W[i];

          // Extend message
          if (i < 16) {
            var Wih = Wi.high = M[offset + i * 2] | 0;
            var Wil = Wi.low = M[offset + i * 2 + 1] | 0;
          } else {
            // Gamma0
            var gamma0x = W[i - 15];
            var gamma0xh = gamma0x.high;
            var gamma0xl = gamma0x.low;
            var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
            var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);

            // Gamma1
            var gamma1x = W[i - 2];
            var gamma1xh = gamma1x.high;
            var gamma1xl = gamma1x.low;
            var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
            var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);

            // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
            var Wi7 = W[i - 7];
            var Wi7h = Wi7.high;
            var Wi7l = Wi7.low;

            var Wi16 = W[i - 16];
            var Wi16h = Wi16.high;
            var Wi16l = Wi16.low;

            var Wil = gamma0l + Wi7l;
            var Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
            var Wil = Wil + gamma1l;
            var Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
            var Wil = Wil + Wi16l;
            var Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);

            Wi.high = Wih;
            Wi.low = Wil;
          }

          var chh = eh & fh ^ ~eh & gh;
          var chl = el & fl ^ ~el & gl;
          var majh = ah & bh ^ ah & ch ^ bh & ch;
          var majl = al & bl ^ al & cl ^ bl & cl;

          var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
          var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
          var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
          var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);

          // t1 = h + sigma1 + ch + K[i] + W[i]
          var Ki = K[i];
          var Kih = Ki.high;
          var Kil = Ki.low;

          var t1l = hl + sigma1l;
          var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
          var t1l = t1l + chl;
          var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
          var t1l = t1l + Kil;
          var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
          var t1l = t1l + Wil;
          var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);

          // t2 = sigma0 + maj
          var t2l = sigma0l + majl;
          var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);

          // Update working variables
          hh = gh;
          hl = gl;
          gh = fh;
          gl = fl;
          fh = eh;
          fl = el;
          el = dl + t1l | 0;
          eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
          dh = ch;
          dl = cl;
          ch = bh;
          cl = bl;
          bh = ah;
          bl = al;
          al = t1l + t2l | 0;
          ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
        }

        // Intermediate hash value
        H0l = H0.low = H0l + al;
        H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
        H1l = H1.low = H1l + bl;
        H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
        H2l = H2.low = H2l + cl;
        H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
        H3l = H3.low = H3l + dl;
        H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
        H4l = H4.low = H4l + el;
        H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
        H5l = H5.low = H5l + fl;
        H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
        H6l = H6.low = H6l + gl;
        H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
        H7l = H7.low = H7l + hl;
        H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
      },

      _doFinalize: function _doFinalize() {
        // Shortcuts
        var data = this._data;
        var dataWords = data.words;

        var nBitsTotal = this._nDataBytes * 8;
        var nBitsLeft = data.sigBytes * 8;

        // Add padding
        dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);
        dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
        data.sigBytes = dataWords.length * 4;

        // Hash final blocks
        this._process();

        // Convert hash to 32-bit word array before returning
        var hash = this._hash.toX32();

        // Return final computed hash
        return hash;
      },

      clone: function clone() {
        var clone = Hasher.clone.call(this);
        clone._hash = this._hash.clone();

        return clone;
      },

      blockSize: 1024 / 32 });


    /**
                                * Shortcut function to the hasher's object interface.
                                *
                                * @param {WordArray|string} message The message to hash.
                                *
                                * @return {WordArray} The hash.
                                *
                                * @static
                                *
                                * @example
                                *
                                *     var hash = CryptoJS.SHA512('message');
                                *     var hash = CryptoJS.SHA512(wordArray);
                                */
    C.SHA512 = Hasher._createHelper(SHA512);

    /**
                                              * Shortcut function to the HMAC's object interface.
                                              *
                                              * @param {WordArray|string} message The message to hash.
                                              * @param {WordArray|string} key The secret key.
                                              *
                                              * @return {WordArray} The HMAC.
                                              *
                                              * @static
                                              *
                                              * @example
                                              *
                                              *     var hmac = CryptoJS.HmacSHA512(message, key);
                                              */
    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
  })();


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_x64 = C.x64;
    var X64Word = C_x64.Word;
    var X64WordArray = C_x64.WordArray;
    var C_algo = C.algo;
    var SHA512 = C_algo.SHA512;

    /**
                                 * SHA-384 hash algorithm.
                                 */
    var SHA384 = C_algo.SHA384 = SHA512.extend({
      _doReset: function _doReset() {
        this._hash = new X64WordArray.init([
        new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),
        new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),
        new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),
        new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)]);

      },

      _doFinalize: function _doFinalize() {
        var hash = SHA512._doFinalize.call(this);

        hash.sigBytes -= 16;

        return hash;
      } });


    /**
             * Shortcut function to the hasher's object interface.
             *
             * @param {WordArray|string} message The message to hash.
             *
             * @return {WordArray} The hash.
             *
             * @static
             *
             * @example
             *
             *     var hash = CryptoJS.SHA384('message');
             *     var hash = CryptoJS.SHA384(wordArray);
             */
    C.SHA384 = SHA512._createHelper(SHA384);

    /**
                                              * Shortcut function to the HMAC's object interface.
                                              *
                                              * @param {WordArray|string} message The message to hash.
                                              * @param {WordArray|string} key The secret key.
                                              *
                                              * @return {WordArray} The HMAC.
                                              *
                                              * @static
                                              *
                                              * @example
                                              *
                                              *     var hmac = CryptoJS.HmacSHA384(message, key);
                                              */
    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
  })();


  /**
         * Cipher core components.
         */
  CryptoJS.lib.Cipher || function (undefined) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var Base = C_lib.Base;
    var WordArray = C_lib.WordArray;
    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
    var C_enc = C.enc;
    var Utf8 = C_enc.Utf8;
    var Base64 = C_enc.Base64;
    var C_algo = C.algo;
    var EvpKDF = C_algo.EvpKDF;

    /**
                                 * Abstract base cipher template.
                                 *
                                 * @property {number} keySize This cipher's key size. Default: 4 (128 bits)
                                 * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)
                                 * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.
                                 * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.
                                 */
    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
      /**
                                                                 * Configuration options.
                                                                 *
                                                                 * @property {WordArray} iv The IV to use for this operation.
                                                                 */
      cfg: Base.extend(),

      /**
                           * Creates this cipher in encryption mode.
                           *
                           * @param {WordArray} key The key.
                           * @param {Object} cfg (Optional) The configuration options to use for this operation.
                           *
                           * @return {Cipher} A cipher instance.
                           *
                           * @static
                           *
                           * @example
                           *
                           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
                           */
      createEncryptor: function createEncryptor(key, cfg) {
        return this.create(this._ENC_XFORM_MODE, key, cfg);
      },

      /**
          * Creates this cipher in decryption mode.
          *
          * @param {WordArray} key The key.
          * @param {Object} cfg (Optional) The configuration options to use for this operation.
          *
          * @return {Cipher} A cipher instance.
          *
          * @static
          *
          * @example
          *
          *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
          */
      createDecryptor: function createDecryptor(key, cfg) {
        return this.create(this._DEC_XFORM_MODE, key, cfg);
      },

      /**
          * Initializes a newly created cipher.
          *
          * @param {number} xformMode Either the encryption or decryption transormation mode constant.
          * @param {WordArray} key The key.
          * @param {Object} cfg (Optional) The configuration options to use for this operation.
          *
          * @example
          *
          *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
          */
      init: function init(xformMode, key, cfg) {
        // Apply config defaults
        this.cfg = this.cfg.extend(cfg);

        // Store transform mode and key
        this._xformMode = xformMode;
        this._key = key;

        // Set initial values
        this.reset();
      },

      /**
          * Resets this cipher to its initial state.
          *
          * @example
          *
          *     cipher.reset();
          */
      reset: function reset() {
        // Reset data buffer
        BufferedBlockAlgorithm.reset.call(this);

        // Perform concrete-cipher logic
        this._doReset();
      },

      /**
          * Adds data to be encrypted or decrypted.
          *
          * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
          *
          * @return {WordArray} The data after processing.
          *
          * @example
          *
          *     var encrypted = cipher.process('data');
          *     var encrypted = cipher.process(wordArray);
          */
      process: function process(dataUpdate) {
        // Append
        this._append(dataUpdate);

        // Process available blocks
        return this._process();
      },

      /**
          * Finalizes the encryption or decryption process.
          * Note that the finalize operation is effectively a destructive, read-once operation.
          *
          * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
          *
          * @return {WordArray} The data after final processing.
          *
          * @example
          *
          *     var encrypted = cipher.finalize();
          *     var encrypted = cipher.finalize('data');
          *     var encrypted = cipher.finalize(wordArray);
          */
      finalize: function finalize(dataUpdate) {
        // Final data update
        if (dataUpdate) {
          this._append(dataUpdate);
        }

        // Perform concrete-cipher logic
        var finalProcessedData = this._doFinalize();

        return finalProcessedData;
      },

      keySize: 128 / 32,

      ivSize: 128 / 32,

      _ENC_XFORM_MODE: 1,

      _DEC_XFORM_MODE: 2,

      /**
                           * Creates shortcut functions to a cipher's object interface.
                           *
                           * @param {Cipher} cipher The cipher to create a helper for.
                           *
                           * @return {Object} An object with encrypt and decrypt shortcut functions.
                           *
                           * @static
                           *
                           * @example
                           *
                           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
                           */
      _createHelper: function () {
        function selectCipherStrategy(key) {
          if (typeof key === 'string') {
            return PasswordBasedCipher;
          } else {
            return SerializableCipher;
          }
        }

        return function (cipher) {
          return {
            encrypt: function encrypt(message, key, cfg) {
              return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);
            },

            decrypt: function decrypt(ciphertext, key, cfg) {
              return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
            } };

        };
      }() });


    /**
               * Abstract base stream cipher template.
               *
               * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)
               */
    var StreamCipher = C_lib.StreamCipher = Cipher.extend({
      _doFinalize: function _doFinalize() {
        // Process partial blocks
        var finalProcessedBlocks = this._process(!!'flush');

        return finalProcessedBlocks;
      },

      blockSize: 1 });


    /**
                        * Mode namespace.
                        */
    var C_mode = C.mode = {};

    /**
                               * Abstract base block cipher mode template.
                               */
    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
      /**
                                                                 * Creates this mode for encryption.
                                                                 *
                                                                 * @param {Cipher} cipher A block cipher instance.
                                                                 * @param {Array} iv The IV words.
                                                                 *
                                                                 * @static
                                                                 *
                                                                 * @example
                                                                 *
                                                                 *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
                                                                 */
      createEncryptor: function createEncryptor(cipher, iv) {
        return this.Encryptor.create(cipher, iv);
      },

      /**
          * Creates this mode for decryption.
          *
          * @param {Cipher} cipher A block cipher instance.
          * @param {Array} iv The IV words.
          *
          * @static
          *
          * @example
          *
          *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
          */
      createDecryptor: function createDecryptor(cipher, iv) {
        return this.Decryptor.create(cipher, iv);
      },

      /**
          * Initializes a newly created mode.
          *
          * @param {Cipher} cipher A block cipher instance.
          * @param {Array} iv The IV words.
          *
          * @example
          *
          *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
          */
      init: function init(cipher, iv) {
        this._cipher = cipher;
        this._iv = iv;
      } });


    /**
             * Cipher Block Chaining mode.
             */
    var CBC = C_mode.CBC = function () {
      /**
                                         * Abstract base CBC mode.
                                         */
      var CBC = BlockCipherMode.extend();

      /**
                                           * CBC encryptor.
                                           */
      CBC.Encryptor = CBC.extend({
        /**
                                    * Processes the data block at offset.
                                    *
                                    * @param {Array} words The data words to operate on.
                                    * @param {number} offset The offset where the block starts.
                                    *
                                    * @example
                                    *
                                    *     mode.processBlock(data.words, offset);
                                    */
        processBlock: function processBlock(words, offset) {
          // Shortcuts
          var cipher = this._cipher;
          var blockSize = cipher.blockSize;

          // XOR and encrypt
          xorBlock.call(this, words, offset, blockSize);
          cipher.encryptBlock(words, offset);

          // Remember this block to use with next block
          this._prevBlock = words.slice(offset, offset + blockSize);
        } });


      /**
               * CBC decryptor.
               */
      CBC.Decryptor = CBC.extend({
        /**
                                    * Processes the data block at offset.
                                    *
                                    * @param {Array} words The data words to operate on.
                                    * @param {number} offset The offset where the block starts.
                                    *
                                    * @example
                                    *
                                    *     mode.processBlock(data.words, offset);
                                    */
        processBlock: function processBlock(words, offset) {
          // Shortcuts
          var cipher = this._cipher;
          var blockSize = cipher.blockSize;

          // Remember this block to use with next block
          var thisBlock = words.slice(offset, offset + blockSize);

          // Decrypt and XOR
          cipher.decryptBlock(words, offset);
          xorBlock.call(this, words, offset, blockSize);

          // This block becomes the previous block
          this._prevBlock = thisBlock;
        } });


      function xorBlock(words, offset, blockSize) {
        // Shortcut
        var iv = this._iv;

        // Choose mixing block
        if (iv) {
          var block = iv;

          // Remove IV for subsequent blocks
          this._iv = undefined;
        } else {
          var block = this._prevBlock;
        }

        // XOR blocks
        for (var i = 0; i < blockSize; i++) {
          words[offset + i] ^= block[i];
        }
      }

      return CBC;
    }();

    /**
          * Padding namespace.
          */
    var C_pad = C.pad = {};

    /**
                             * PKCS #5/7 padding strategy.
                             */
    var Pkcs7 = C_pad.Pkcs7 = {
      /**
                                 * Pads data using the algorithm defined in PKCS #5/7.
                                 *
                                 * @param {WordArray} data The data to pad.
                                 * @param {number} blockSize The multiple that the data should be padded to.
                                 *
                                 * @static
                                 *
                                 * @example
                                 *
                                 *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
                                 */
      pad: function pad(data, blockSize) {
        // Shortcut
        var blockSizeBytes = blockSize * 4;

        // Count padding bytes
        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

        // Create padding word
        var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;

        // Create padding
        var paddingWords = [];
        for (var i = 0; i < nPaddingBytes; i += 4) {
          paddingWords.push(paddingWord);
        }
        var padding = WordArray.create(paddingWords, nPaddingBytes);

        // Add padding
        data.concat(padding);
      },

      /**
          * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
          *
          * @param {WordArray} data The data to unpad.
          *
          * @static
          *
          * @example
          *
          *     CryptoJS.pad.Pkcs7.unpad(wordArray);
          */
      unpad: function unpad(data) {
        // Get number of padding bytes from last byte
        var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

        // Remove padding
        data.sigBytes -= nPaddingBytes;
      }


      /**
         * Abstract base block cipher template.
         *
         * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)
         */ };
    var BlockCipher = C_lib.BlockCipher = Cipher.extend({
      /**
                                                           * Configuration options.
                                                           *
                                                           * @property {Mode} mode The block mode to use. Default: CBC
                                                           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
                                                           */
      cfg: Cipher.cfg.extend({
        mode: CBC,
        padding: Pkcs7 }),


      reset: function reset() {
        // Reset cipher
        Cipher.reset.call(this);

        // Shortcuts
        var cfg = this.cfg;
        var iv = cfg.iv;
        var mode = cfg.mode;

        // Reset block mode
        if (this._xformMode == this._ENC_XFORM_MODE) {
          var modeCreator = mode.createEncryptor;
        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
            var modeCreator = mode.createDecryptor;
            // Keep at least one block in the buffer for unpadding
            this._minBufferSize = 1;
          }

        if (this._mode && this._mode.__creator == modeCreator) {
          this._mode.init(this, iv && iv.words);
        } else {
          this._mode = modeCreator.call(mode, this, iv && iv.words);
          this._mode.__creator = modeCreator;
        }
      },

      _doProcessBlock: function _doProcessBlock(words, offset) {
        this._mode.processBlock(words, offset);
      },

      _doFinalize: function _doFinalize() {
        // Shortcut
        var padding = this.cfg.padding;

        // Finalize
        if (this._xformMode == this._ENC_XFORM_MODE) {
          // Pad data
          padding.pad(this._data, this.blockSize);

          // Process final blocks
          var finalProcessedBlocks = this._process(!!'flush');
        } else /* if (this._xformMode == this._DEC_XFORM_MODE) */{
            // Process final blocks
            var finalProcessedBlocks = this._process(!!'flush');

            // Unpad data
            padding.unpad(finalProcessedBlocks);
          }

        return finalProcessedBlocks;
      },

      blockSize: 128 / 32 });


    /**
                               * A collection of cipher parameters.
                               *
                               * @property {WordArray} ciphertext The raw ciphertext.
                               * @property {WordArray} key The key to this ciphertext.
                               * @property {WordArray} iv The IV used in the ciphering operation.
                               * @property {WordArray} salt The salt used with a key derivation function.
                               * @property {Cipher} algorithm The cipher algorithm.
                               * @property {Mode} mode The block mode used in the ciphering operation.
                               * @property {Padding} padding The padding scheme used in the ciphering operation.
                               * @property {number} blockSize The block size of the cipher.
                               * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.
                               */
    var CipherParams = C_lib.CipherParams = Base.extend({
      /**
                                                           * Initializes a newly created cipher params object.
                                                           *
                                                           * @param {Object} cipherParams An object with any of the possible cipher parameters.
                                                           *
                                                           * @example
                                                           *
                                                           *     var cipherParams = CryptoJS.lib.CipherParams.create({
                                                           *         ciphertext: ciphertextWordArray,
                                                           *         key: keyWordArray,
                                                           *         iv: ivWordArray,
                                                           *         salt: saltWordArray,
                                                           *         algorithm: CryptoJS.algo.AES,
                                                           *         mode: CryptoJS.mode.CBC,
                                                           *         padding: CryptoJS.pad.PKCS7,
                                                           *         blockSize: 4,
                                                           *         formatter: CryptoJS.format.OpenSSL
                                                           *     });
                                                           */
      init: function init(cipherParams) {
        this.mixIn(cipherParams);
      },

      /**
          * Converts this cipher params object to a string.
          *
          * @param {Format} formatter (Optional) The formatting strategy to use.
          *
          * @return {string} The stringified cipher params.
          *
          * @throws Error If neither the formatter nor the default formatter is set.
          *
          * @example
          *
          *     var string = cipherParams + '';
          *     var string = cipherParams.toString();
          *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
          */
      toString: function toString(formatter) {
        return (formatter || this.formatter).stringify(this);
      } });


    /**
             * Format namespace.
             */
    var C_format = C.format = {};

    /**
                                   * OpenSSL formatting strategy.
                                   */
    var OpenSSLFormatter = C_format.OpenSSL = {
      /**
                                                 * Converts a cipher params object to an OpenSSL-compatible string.
                                                 *
                                                 * @param {CipherParams} cipherParams The cipher params object.
                                                 *
                                                 * @return {string} The OpenSSL-compatible string.
                                                 *
                                                 * @static
                                                 *
                                                 * @example
                                                 *
                                                 *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
                                                 */
      stringify: function stringify(cipherParams) {
        // Shortcuts
        var ciphertext = cipherParams.ciphertext;
        var salt = cipherParams.salt;

        // Format
        if (salt) {
          var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);
        } else {
          var wordArray = ciphertext;
        }

        return wordArray.toString(Base64);
      },

      /**
          * Converts an OpenSSL-compatible string to a cipher params object.
          *
          * @param {string} openSSLStr The OpenSSL-compatible string.
          *
          * @return {CipherParams} The cipher params object.
          *
          * @static
          *
          * @example
          *
          *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
          */
      parse: function parse(openSSLStr) {
        // Parse base64
        var ciphertext = Base64.parse(openSSLStr);

        // Shortcut
        var ciphertextWords = ciphertext.words;

        // Test for salt
        if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {
          // Extract salt
          var salt = WordArray.create(ciphertextWords.slice(2, 4));

          // Remove salt from ciphertext
          ciphertextWords.splice(0, 4);
          ciphertext.sigBytes -= 16;
        }

        return CipherParams.create({
          ciphertext: ciphertext,
          salt: salt });

      }


      /**
         * A cipher wrapper that returns ciphertext as a serializable cipher params object.
         */ };
    var SerializableCipher = C_lib.SerializableCipher = Base.extend({
      /**
                                                                       * Configuration options.
                                                                       *
                                                                       * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
                                                                       */
      cfg: Base.extend({
        format: OpenSSLFormatter }),


      /**
                                      * Encrypts a message.
                                      *
                                      * @param {Cipher} cipher The cipher algorithm to use.
                                      * @param {WordArray|string} message The message to encrypt.
                                      * @param {WordArray} key The key.
                                      * @param {Object} cfg (Optional) The configuration options to use for this operation.
                                      *
                                      * @return {CipherParams} A cipher params object.
                                      *
                                      * @static
                                      *
                                      * @example
                                      *
                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
                                      *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
                                      */
      encrypt: function encrypt(cipher, message, key, cfg) {
        // Apply config defaults
        cfg = this.cfg.extend(cfg);

        // Encrypt
        var encryptor = cipher.createEncryptor(key, cfg);
        var ciphertext = encryptor.finalize(message);

        // Shortcut
        var cipherCfg = encryptor.cfg;

        // Create and return serializable cipher params
        return CipherParams.create({
          ciphertext: ciphertext,
          key: key,
          iv: cipherCfg.iv,
          algorithm: cipher,
          mode: cipherCfg.mode,
          padding: cipherCfg.padding,
          blockSize: cipher.blockSize,
          formatter: cfg.format });

      },

      /**
          * Decrypts serialized ciphertext.
          *
          * @param {Cipher} cipher The cipher algorithm to use.
          * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
          * @param {WordArray} key The key.
          * @param {Object} cfg (Optional) The configuration options to use for this operation.
          *
          * @return {WordArray} The plaintext.
          *
          * @static
          *
          * @example
          *
          *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
          *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
          */
      decrypt: function decrypt(cipher, ciphertext, key, cfg) {
        // Apply config defaults
        cfg = this.cfg.extend(cfg);

        // Convert string to CipherParams
        ciphertext = this._parse(ciphertext, cfg.format);

        // Decrypt
        var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);

        return plaintext;
      },

      /**
          * Converts serialized ciphertext to CipherParams,
          * else assumed CipherParams already and returns ciphertext unchanged.
          *
          * @param {CipherParams|string} ciphertext The ciphertext.
          * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
          *
          * @return {CipherParams} The unserialized ciphertext.
          *
          * @static
          *
          * @example
          *
          *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
          */
      _parse: function _parse(ciphertext, format) {
        if (typeof ciphertext === 'string') {
          return format.parse(ciphertext, this);
        } else {
          return ciphertext;
        }
      } });


    /**
             * Key derivation function namespace.
             */
    var C_kdf = C.kdf = {};

    /**
                             * OpenSSL key derivation function.
                             */
    var OpenSSLKdf = C_kdf.OpenSSL = {
      /**
                                        * Derives a key and IV from a password.
                                        *
                                        * @param {string} password The password to derive from.
                                        * @param {number} keySize The size in words of the key to generate.
                                        * @param {number} ivSize The size in words of the IV to generate.
                                        * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
                                        *
                                        * @return {CipherParams} A cipher params object with the key, IV, and salt.
                                        *
                                        * @static
                                        *
                                        * @example
                                        *
                                        *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
                                        *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
                                        */
      execute: function execute(password, keySize, ivSize, salt) {
        // Generate random salt
        if (!salt) {
          salt = WordArray.random(64 / 8);
        }

        // Derive key and IV
        var key = EvpKDF.create({
          keySize: keySize + ivSize }).
        compute(password, salt);

        // Separate key and IV
        var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
        key.sigBytes = keySize * 4;

        // Return params
        return CipherParams.create({
          key: key,
          iv: iv,
          salt: salt });

      }


      /**
         * A serializable cipher wrapper that derives the key from a password,
         * and returns ciphertext as a serializable cipher params object.
         */ };
    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
      /**
                                                                                       * Configuration options.
                                                                                       *
                                                                                       * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
                                                                                       */
      cfg: SerializableCipher.cfg.extend({
        kdf: OpenSSLKdf }),


      /**
                             * Encrypts a message using a password.
                             *
                             * @param {Cipher} cipher The cipher algorithm to use.
                             * @param {WordArray|string} message The message to encrypt.
                             * @param {string} password The password.
                             * @param {Object} cfg (Optional) The configuration options to use for this operation.
                             *
                             * @return {CipherParams} A cipher params object.
                             *
                             * @static
                             *
                             * @example
                             *
                             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
                             *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
                             */
      encrypt: function encrypt(cipher, message, password, cfg) {
        // Apply config defaults
        cfg = this.cfg.extend(cfg);

        // Derive key and other params
        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);

        // Add IV to config
        cfg.iv = derivedParams.iv;

        // Encrypt
        var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);

        // Mix in derived params
        ciphertext.mixIn(derivedParams);

        return ciphertext;
      },

      /**
          * Decrypts serialized ciphertext using a password.
          *
          * @param {Cipher} cipher The cipher algorithm to use.
          * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
          * @param {string} password The password.
          * @param {Object} cfg (Optional) The configuration options to use for this operation.
          *
          * @return {WordArray} The plaintext.
          *
          * @static
          *
          * @example
          *
          *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
          *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
          */
      decrypt: function decrypt(cipher, ciphertext, password, cfg) {
        // Apply config defaults
        cfg = this.cfg.extend(cfg);

        // Convert string to CipherParams
        ciphertext = this._parse(ciphertext, cfg.format);

        // Derive key and other params
        var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);

        // Add IV to config
        cfg.iv = derivedParams.iv;

        // Decrypt
        var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);

        return plaintext;
      } });

  }();


  /**
        * Cipher Feedback block mode.
        */
  CryptoJS.mode.CFB = function () {
    var CFB = CryptoJS.lib.BlockCipherMode.extend();

    CFB.Encryptor = CFB.extend({
      processBlock: function processBlock(words, offset) {
        // Shortcuts
        var cipher = this._cipher;
        var blockSize = cipher.blockSize;

        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

        // Remember this block to use with next block
        this._prevBlock = words.slice(offset, offset + blockSize);
      } });


    CFB.Decryptor = CFB.extend({
      processBlock: function processBlock(words, offset) {
        // Shortcuts
        var cipher = this._cipher;
        var blockSize = cipher.blockSize;

        // Remember this block to use with next block
        var thisBlock = words.slice(offset, offset + blockSize);

        generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);

        // This block becomes the previous block
        this._prevBlock = thisBlock;
      } });


    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {
      // Shortcut
      var iv = this._iv;

      // Generate keystream
      if (iv) {
        var keystream = iv.slice(0);

        // Remove IV for subsequent blocks
        this._iv = undefined;
      } else {
        var keystream = this._prevBlock;
      }
      cipher.encryptBlock(keystream, 0);

      // Encrypt
      for (var i = 0; i < blockSize; i++) {
        words[offset + i] ^= keystream[i];
      }
    }

    return CFB;
  }();


  /**
        * Electronic Codebook block mode.
        */
  CryptoJS.mode.ECB = function () {
    var ECB = CryptoJS.lib.BlockCipherMode.extend();

    ECB.Encryptor = ECB.extend({
      processBlock: function processBlock(words, offset) {
        this._cipher.encryptBlock(words, offset);
      } });


    ECB.Decryptor = ECB.extend({
      processBlock: function processBlock(words, offset) {
        this._cipher.decryptBlock(words, offset);
      } });


    return ECB;
  }();


  /**
        * ANSI X.923 padding strategy.
        */
  CryptoJS.pad.AnsiX923 = {
    pad: function pad(data, blockSize) {
      // Shortcuts
      var dataSigBytes = data.sigBytes;
      var blockSizeBytes = blockSize * 4;

      // Count padding bytes
      var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;

      // Compute last byte position
      var lastBytePos = dataSigBytes + nPaddingBytes - 1;

      // Pad
      data.clamp();
      data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
      data.sigBytes += nPaddingBytes;
    },

    unpad: function unpad(data) {
      // Get number of padding bytes from last byte
      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

      // Remove padding
      data.sigBytes -= nPaddingBytes;
    }



    /**
       * ISO 10126 padding strategy.
       */ };
  CryptoJS.pad.Iso10126 = {
    pad: function pad(data, blockSize) {
      // Shortcut
      var blockSizeBytes = blockSize * 4;

      // Count padding bytes
      var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;

      // Pad
      data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).
      concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));
    },

    unpad: function unpad(data) {
      // Get number of padding bytes from last byte
      var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 0xff;

      // Remove padding
      data.sigBytes -= nPaddingBytes;
    }



    /**
       * ISO/IEC 9797-1 Padding Method 2.
       */ };
  CryptoJS.pad.Iso97971 = {
    pad: function pad(data, blockSize) {
      // Add 0x80 byte
      data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));

      // Zero pad the rest
      CryptoJS.pad.ZeroPadding.pad(data, blockSize);
    },

    unpad: function unpad(data) {
      // Remove zero padding
      CryptoJS.pad.ZeroPadding.unpad(data);

      // Remove one more byte -- the 0x80 byte
      data.sigBytes--;
    }



    /**
       * Output Feedback block mode.
       */ };
  CryptoJS.mode.OFB = function () {
    var OFB = CryptoJS.lib.BlockCipherMode.extend();

    var Encryptor = OFB.Encryptor = OFB.extend({
      processBlock: function processBlock(words, offset) {
        // Shortcuts
        var cipher = this._cipher;
        var blockSize = cipher.blockSize;
        var iv = this._iv;
        var keystream = this._keystream;

        // Generate keystream
        if (iv) {
          keystream = this._keystream = iv.slice(0);

          // Remove IV for subsequent blocks
          this._iv = undefined;
        }
        cipher.encryptBlock(keystream, 0);

        // Encrypt
        for (var i = 0; i < blockSize; i++) {
          words[offset + i] ^= keystream[i];
        }
      } });


    OFB.Decryptor = Encryptor;

    return OFB;
  }();


  /**
        * A noop padding strategy.
        */
  CryptoJS.pad.NoPadding = {
    pad: function pad() {},

    unpad: function unpad() {} };



  (function (undefined) {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var CipherParams = C_lib.CipherParams;
    var C_enc = C.enc;
    var Hex = C_enc.Hex;
    var C_format = C.format;

    var HexFormatter = C_format.Hex = {
      /**
                                         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
                                         *
                                         * @param {CipherParams} cipherParams The cipher params object.
                                         *
                                         * @return {string} The hexadecimally encoded string.
                                         *
                                         * @static
                                         *
                                         * @example
                                         *
                                         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
                                         */
      stringify: function stringify(cipherParams) {
        return cipherParams.ciphertext.toString(Hex);
      },

      /**
          * Converts a hexadecimally encoded ciphertext string to a cipher params object.
          *
          * @param {string} input The hexadecimally encoded string.
          *
          * @return {CipherParams} The cipher params object.
          *
          * @static
          *
          * @example
          *
          *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
          */
      parse: function parse(input) {
        var ciphertext = Hex.parse(input);
        return CipherParams.create({
          ciphertext: ciphertext });

      } };

  })();


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var BlockCipher = C_lib.BlockCipher;
    var C_algo = C.algo;

    // Lookup tables
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX_0 = [];
    var SUB_MIX_1 = [];
    var SUB_MIX_2 = [];
    var SUB_MIX_3 = [];
    var INV_SUB_MIX_0 = [];
    var INV_SUB_MIX_1 = [];
    var INV_SUB_MIX_2 = [];
    var INV_SUB_MIX_3 = [];

    // Compute lookup tables
    (function () {
      // Compute double table
      var d = [];
      for (var i = 0; i < 256; i++) {
        if (i < 128) {
          d[i] = i << 1;
        } else {
          d[i] = i << 1 ^ 0x11b;
        }
      }

      // Walk GF(2^8)
      var x = 0;
      var xi = 0;
      for (var i = 0; i < 256; i++) {
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 0xff ^ 0x63;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;

        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];

        // Compute sub bytes, mix columns tables
        var t = d[sx] * 0x101 ^ sx * 0x1010100;
        SUB_MIX_0[x] = t << 24 | t >>> 8;
        SUB_MIX_1[x] = t << 16 | t >>> 16;
        SUB_MIX_2[x] = t << 8 | t >>> 24;
        SUB_MIX_3[x] = t;

        // Compute inv sub bytes, inv mix columns tables
        var t = x8 * 0x1010101 ^ x4 * 0x10001 ^ x2 * 0x101 ^ x * 0x1010100;
        INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
        INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
        INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
        INV_SUB_MIX_3[sx] = t;

        // Compute next counter
        if (!x) {
          x = xi = 1;
        } else {
          x = x2 ^ d[d[d[x8 ^ x2]]];
          xi ^= d[d[xi]];
        }
      }
    })();

    // Precomputed Rcon lookup
    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];

    /**
                                                                                    * AES block cipher algorithm.
                                                                                    */
    var AES = C_algo.AES = BlockCipher.extend({
      _doReset: function _doReset() {
        // Skip reset of nRounds has been set before and key did not change
        if (this._nRounds && this._keyPriorReset === this._key) {
          return;
        }

        // Shortcuts
        var key = this._keyPriorReset = this._key;
        var keyWords = key.words;
        var keySize = key.sigBytes / 4;

        // Compute number of rounds
        var nRounds = this._nRounds = keySize + 6;

        // Compute number of key schedule rows
        var ksRows = (nRounds + 1) * 4;

        // Compute key schedule
        var keySchedule = this._keySchedule = [];
        for (var ksRow = 0; ksRow < ksRows; ksRow++) {
          if (ksRow < keySize) {
            keySchedule[ksRow] = keyWords[ksRow];
          } else {
            var t = keySchedule[ksRow - 1];

            if (!(ksRow % keySize)) {
              // Rot word
              t = t << 8 | t >>> 24;

              // Sub word
              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];

              // Mix Rcon
              t ^= RCON[ksRow / keySize | 0] << 24;
            } else if (keySize > 6 && ksRow % keySize == 4) {
              // Sub word
              t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 0xff] << 16 | SBOX[t >>> 8 & 0xff] << 8 | SBOX[t & 0xff];
            }

            keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
          }
        }

        // Compute inv key schedule
        var invKeySchedule = this._invKeySchedule = [];
        for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
          var ksRow = ksRows - invKsRow;

          if (invKsRow % 4) {
            var t = keySchedule[ksRow];
          } else {
            var t = keySchedule[ksRow - 4];
          }

          if (invKsRow < 4 || ksRow <= 4) {
            invKeySchedule[invKsRow] = t;
          } else {
            invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 0xff]] ^
            INV_SUB_MIX_2[SBOX[t >>> 8 & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];
          }
        }
      },

      encryptBlock: function encryptBlock(M, offset) {
        this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
      },

      decryptBlock: function decryptBlock(M, offset) {
        // Swap 2nd and 4th rows
        var t = M[offset + 1];
        M[offset + 1] = M[offset + 3];
        M[offset + 3] = t;

        this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);

        // Inv swap 2nd and 4th rows
        var t = M[offset + 1];
        M[offset + 1] = M[offset + 3];
        M[offset + 3] = t;
      },

      _doCryptBlock: function _doCryptBlock(M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {
        // Shortcut
        var nRounds = this._nRounds;

        // Get input, add round key
        var s0 = M[offset] ^ keySchedule[0];
        var s1 = M[offset + 1] ^ keySchedule[1];
        var s2 = M[offset + 2] ^ keySchedule[2];
        var s3 = M[offset + 3] ^ keySchedule[3];

        // Key schedule row counter
        var ksRow = 4;

        // Rounds
        for (var round = 1; round < nRounds; round++) {
          // Shift rows, sub bytes, mix columns, add round key
          var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[s1 >>> 16 & 0xff] ^ SUB_MIX_2[s2 >>> 8 & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];
          var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[s2 >>> 16 & 0xff] ^ SUB_MIX_2[s3 >>> 8 & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];
          var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[s3 >>> 16 & 0xff] ^ SUB_MIX_2[s0 >>> 8 & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];
          var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[s0 >>> 16 & 0xff] ^ SUB_MIX_2[s1 >>> 8 & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];

          // Update state
          s0 = t0;
          s1 = t1;
          s2 = t2;
          s3 = t3;
        }

        // Shift rows, sub bytes, add round key
        var t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 0xff] << 16 | SBOX[s2 >>> 8 & 0xff] << 8 | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];
        var t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 0xff] << 16 | SBOX[s3 >>> 8 & 0xff] << 8 | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];
        var t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 0xff] << 16 | SBOX[s0 >>> 8 & 0xff] << 8 | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];
        var t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 0xff] << 16 | SBOX[s1 >>> 8 & 0xff] << 8 | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];

        // Set output
        M[offset] = t0;
        M[offset + 1] = t1;
        M[offset + 2] = t2;
        M[offset + 3] = t3;
      },

      keySize: 256 / 32 });


    /**
                             * Shortcut functions to the cipher's object interface.
                             *
                             * @example
                             *
                             *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);
                             *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);
                             */
    C.AES = BlockCipher._createHelper(AES);
  })();


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var WordArray = C_lib.WordArray;
    var BlockCipher = C_lib.BlockCipher;
    var C_algo = C.algo;

    // Permuted Choice 1 constants
    var PC1 = [
    57, 49, 41, 33, 25, 17, 9, 1,
    58, 50, 42, 34, 26, 18, 10, 2,
    59, 51, 43, 35, 27, 19, 11, 3,
    60, 52, 44, 36, 63, 55, 47, 39,
    31, 23, 15, 7, 62, 54, 46, 38,
    30, 22, 14, 6, 61, 53, 45, 37,
    29, 21, 13, 5, 28, 20, 12, 4];


    // Permuted Choice 2 constants
    var PC2 = [
    14, 17, 11, 24, 1, 5,
    3, 28, 15, 6, 21, 10,
    23, 19, 12, 4, 26, 8,
    16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55,
    30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53,
    46, 42, 50, 36, 29, 32];


    // Cumulative bit shift constants
    var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];

    // SBOXes and round permutation constants
    var SBOX_P = [{
      0x0: 0x808200,
      0x10000000: 0x8000,
      0x20000000: 0x808002,
      0x30000000: 0x2,
      0x40000000: 0x200,
      0x50000000: 0x808202,
      0x60000000: 0x800202,
      0x70000000: 0x800000,
      0x80000000: 0x202,
      0x90000000: 0x800200,
      0xa0000000: 0x8200,
      0xb0000000: 0x808000,
      0xc0000000: 0x8002,
      0xd0000000: 0x800002,
      0xe0000000: 0x0,
      0xf0000000: 0x8202,
      0x8000000: 0x0,
      0x18000000: 0x808202,
      0x28000000: 0x8202,
      0x38000000: 0x8000,
      0x48000000: 0x808200,
      0x58000000: 0x200,
      0x68000000: 0x808002,
      0x78000000: 0x2,
      0x88000000: 0x800200,
      0x98000000: 0x8200,
      0xa8000000: 0x808000,
      0xb8000000: 0x800202,
      0xc8000000: 0x800002,
      0xd8000000: 0x8002,
      0xe8000000: 0x202,
      0xf8000000: 0x800000,
      0x1: 0x8000,
      0x10000001: 0x2,
      0x20000001: 0x808200,
      0x30000001: 0x800000,
      0x40000001: 0x808002,
      0x50000001: 0x8200,
      0x60000001: 0x200,
      0x70000001: 0x800202,
      0x80000001: 0x808202,
      0x90000001: 0x808000,
      0xa0000001: 0x800002,
      0xb0000001: 0x8202,
      0xc0000001: 0x202,
      0xd0000001: 0x800200,
      0xe0000001: 0x8002,
      0xf0000001: 0x0,
      0x8000001: 0x808202,
      0x18000001: 0x808000,
      0x28000001: 0x800000,
      0x38000001: 0x200,
      0x48000001: 0x8000,
      0x58000001: 0x800002,
      0x68000001: 0x2,
      0x78000001: 0x8202,
      0x88000001: 0x8002,
      0x98000001: 0x800202,
      0xa8000001: 0x202,
      0xb8000001: 0x808200,
      0xc8000001: 0x800200,
      0xd8000001: 0x0,
      0xe8000001: 0x8200,
      0xf8000001: 0x808002 },

    {
      0x0: 0x40084010,
      0x1000000: 0x4000,
      0x2000000: 0x80000,
      0x3000000: 0x40080010,
      0x4000000: 0x40000010,
      0x5000000: 0x40084000,
      0x6000000: 0x40004000,
      0x7000000: 0x10,
      0x8000000: 0x84000,
      0x9000000: 0x40004010,
      0xa000000: 0x40000000,
      0xb000000: 0x84010,
      0xc000000: 0x80010,
      0xd000000: 0x0,
      0xe000000: 0x4010,
      0xf000000: 0x40080000,
      0x800000: 0x40004000,
      0x1800000: 0x84010,
      0x2800000: 0x10,
      0x3800000: 0x40004010,
      0x4800000: 0x40084010,
      0x5800000: 0x40000000,
      0x6800000: 0x80000,
      0x7800000: 0x40080010,
      0x8800000: 0x80010,
      0x9800000: 0x0,
      0xa800000: 0x4000,
      0xb800000: 0x40080000,
      0xc800000: 0x40000010,
      0xd800000: 0x84000,
      0xe800000: 0x40084000,
      0xf800000: 0x4010,
      0x10000000: 0x0,
      0x11000000: 0x40080010,
      0x12000000: 0x40004010,
      0x13000000: 0x40084000,
      0x14000000: 0x40080000,
      0x15000000: 0x10,
      0x16000000: 0x84010,
      0x17000000: 0x4000,
      0x18000000: 0x4010,
      0x19000000: 0x80000,
      0x1a000000: 0x80010,
      0x1b000000: 0x40000010,
      0x1c000000: 0x84000,
      0x1d000000: 0x40004000,
      0x1e000000: 0x40000000,
      0x1f000000: 0x40084010,
      0x10800000: 0x84010,
      0x11800000: 0x80000,
      0x12800000: 0x40080000,
      0x13800000: 0x4000,
      0x14800000: 0x40004000,
      0x15800000: 0x40084010,
      0x16800000: 0x10,
      0x17800000: 0x40000000,
      0x18800000: 0x40084000,
      0x19800000: 0x40000010,
      0x1a800000: 0x40004010,
      0x1b800000: 0x80010,
      0x1c800000: 0x0,
      0x1d800000: 0x4010,
      0x1e800000: 0x40080010,
      0x1f800000: 0x84000 },

    {
      0x0: 0x104,
      0x100000: 0x0,
      0x200000: 0x4000100,
      0x300000: 0x10104,
      0x400000: 0x10004,
      0x500000: 0x4000004,
      0x600000: 0x4010104,
      0x700000: 0x4010000,
      0x800000: 0x4000000,
      0x900000: 0x4010100,
      0xa00000: 0x10100,
      0xb00000: 0x4010004,
      0xc00000: 0x4000104,
      0xd00000: 0x10000,
      0xe00000: 0x4,
      0xf00000: 0x100,
      0x80000: 0x4010100,
      0x180000: 0x4010004,
      0x280000: 0x0,
      0x380000: 0x4000100,
      0x480000: 0x4000004,
      0x580000: 0x10000,
      0x680000: 0x10004,
      0x780000: 0x104,
      0x880000: 0x4,
      0x980000: 0x100,
      0xa80000: 0x4010000,
      0xb80000: 0x10104,
      0xc80000: 0x10100,
      0xd80000: 0x4000104,
      0xe80000: 0x4010104,
      0xf80000: 0x4000000,
      0x1000000: 0x4010100,
      0x1100000: 0x10004,
      0x1200000: 0x10000,
      0x1300000: 0x4000100,
      0x1400000: 0x100,
      0x1500000: 0x4010104,
      0x1600000: 0x4000004,
      0x1700000: 0x0,
      0x1800000: 0x4000104,
      0x1900000: 0x4000000,
      0x1a00000: 0x4,
      0x1b00000: 0x10100,
      0x1c00000: 0x4010000,
      0x1d00000: 0x104,
      0x1e00000: 0x10104,
      0x1f00000: 0x4010004,
      0x1080000: 0x4000000,
      0x1180000: 0x104,
      0x1280000: 0x4010100,
      0x1380000: 0x0,
      0x1480000: 0x10004,
      0x1580000: 0x4000100,
      0x1680000: 0x100,
      0x1780000: 0x4010004,
      0x1880000: 0x10000,
      0x1980000: 0x4010104,
      0x1a80000: 0x10104,
      0x1b80000: 0x4000004,
      0x1c80000: 0x4000104,
      0x1d80000: 0x4010000,
      0x1e80000: 0x4,
      0x1f80000: 0x10100 },

    {
      0x0: 0x80401000,
      0x10000: 0x80001040,
      0x20000: 0x401040,
      0x30000: 0x80400000,
      0x40000: 0x0,
      0x50000: 0x401000,
      0x60000: 0x80000040,
      0x70000: 0x400040,
      0x80000: 0x80000000,
      0x90000: 0x400000,
      0xa0000: 0x40,
      0xb0000: 0x80001000,
      0xc0000: 0x80400040,
      0xd0000: 0x1040,
      0xe0000: 0x1000,
      0xf0000: 0x80401040,
      0x8000: 0x80001040,
      0x18000: 0x40,
      0x28000: 0x80400040,
      0x38000: 0x80001000,
      0x48000: 0x401000,
      0x58000: 0x80401040,
      0x68000: 0x0,
      0x78000: 0x80400000,
      0x88000: 0x1000,
      0x98000: 0x80401000,
      0xa8000: 0x400000,
      0xb8000: 0x1040,
      0xc8000: 0x80000000,
      0xd8000: 0x400040,
      0xe8000: 0x401040,
      0xf8000: 0x80000040,
      0x100000: 0x400040,
      0x110000: 0x401000,
      0x120000: 0x80000040,
      0x130000: 0x0,
      0x140000: 0x1040,
      0x150000: 0x80400040,
      0x160000: 0x80401000,
      0x170000: 0x80001040,
      0x180000: 0x80401040,
      0x190000: 0x80000000,
      0x1a0000: 0x80400000,
      0x1b0000: 0x401040,
      0x1c0000: 0x80001000,
      0x1d0000: 0x400000,
      0x1e0000: 0x40,
      0x1f0000: 0x1000,
      0x108000: 0x80400000,
      0x118000: 0x80401040,
      0x128000: 0x0,
      0x138000: 0x401000,
      0x148000: 0x400040,
      0x158000: 0x80000000,
      0x168000: 0x80001040,
      0x178000: 0x40,
      0x188000: 0x80000040,
      0x198000: 0x1000,
      0x1a8000: 0x80001000,
      0x1b8000: 0x80400040,
      0x1c8000: 0x1040,
      0x1d8000: 0x80401000,
      0x1e8000: 0x400000,
      0x1f8000: 0x401040 },

    {
      0x0: 0x80,
      0x1000: 0x1040000,
      0x2000: 0x40000,
      0x3000: 0x20000000,
      0x4000: 0x20040080,
      0x5000: 0x1000080,
      0x6000: 0x21000080,
      0x7000: 0x40080,
      0x8000: 0x1000000,
      0x9000: 0x20040000,
      0xa000: 0x20000080,
      0xb000: 0x21040080,
      0xc000: 0x21040000,
      0xd000: 0x0,
      0xe000: 0x1040080,
      0xf000: 0x21000000,
      0x800: 0x1040080,
      0x1800: 0x21000080,
      0x2800: 0x80,
      0x3800: 0x1040000,
      0x4800: 0x40000,
      0x5800: 0x20040080,
      0x6800: 0x21040000,
      0x7800: 0x20000000,
      0x8800: 0x20040000,
      0x9800: 0x0,
      0xa800: 0x21040080,
      0xb800: 0x1000080,
      0xc800: 0x20000080,
      0xd800: 0x21000000,
      0xe800: 0x1000000,
      0xf800: 0x40080,
      0x10000: 0x40000,
      0x11000: 0x80,
      0x12000: 0x20000000,
      0x13000: 0x21000080,
      0x14000: 0x1000080,
      0x15000: 0x21040000,
      0x16000: 0x20040080,
      0x17000: 0x1000000,
      0x18000: 0x21040080,
      0x19000: 0x21000000,
      0x1a000: 0x1040000,
      0x1b000: 0x20040000,
      0x1c000: 0x40080,
      0x1d000: 0x20000080,
      0x1e000: 0x0,
      0x1f000: 0x1040080,
      0x10800: 0x21000080,
      0x11800: 0x1000000,
      0x12800: 0x1040000,
      0x13800: 0x20040080,
      0x14800: 0x20000000,
      0x15800: 0x1040080,
      0x16800: 0x80,
      0x17800: 0x21040000,
      0x18800: 0x40080,
      0x19800: 0x21040080,
      0x1a800: 0x0,
      0x1b800: 0x21000000,
      0x1c800: 0x1000080,
      0x1d800: 0x40000,
      0x1e800: 0x20040000,
      0x1f800: 0x20000080 },

    {
      0x0: 0x10000008,
      0x100: 0x2000,
      0x200: 0x10200000,
      0x300: 0x10202008,
      0x400: 0x10002000,
      0x500: 0x200000,
      0x600: 0x200008,
      0x700: 0x10000000,
      0x800: 0x0,
      0x900: 0x10002008,
      0xa00: 0x202000,
      0xb00: 0x8,
      0xc00: 0x10200008,
      0xd00: 0x202008,
      0xe00: 0x2008,
      0xf00: 0x10202000,
      0x80: 0x10200000,
      0x180: 0x10202008,
      0x280: 0x8,
      0x380: 0x200000,
      0x480: 0x202008,
      0x580: 0x10000008,
      0x680: 0x10002000,
      0x780: 0x2008,
      0x880: 0x200008,
      0x980: 0x2000,
      0xa80: 0x10002008,
      0xb80: 0x10200008,
      0xc80: 0x0,
      0xd80: 0x10202000,
      0xe80: 0x202000,
      0xf80: 0x10000000,
      0x1000: 0x10002000,
      0x1100: 0x10200008,
      0x1200: 0x10202008,
      0x1300: 0x2008,
      0x1400: 0x200000,
      0x1500: 0x10000000,
      0x1600: 0x10000008,
      0x1700: 0x202000,
      0x1800: 0x202008,
      0x1900: 0x0,
      0x1a00: 0x8,
      0x1b00: 0x10200000,
      0x1c00: 0x2000,
      0x1d00: 0x10002008,
      0x1e00: 0x10202000,
      0x1f00: 0x200008,
      0x1080: 0x8,
      0x1180: 0x202000,
      0x1280: 0x200000,
      0x1380: 0x10000008,
      0x1480: 0x10002000,
      0x1580: 0x2008,
      0x1680: 0x10202008,
      0x1780: 0x10200000,
      0x1880: 0x10202000,
      0x1980: 0x10200008,
      0x1a80: 0x2000,
      0x1b80: 0x202008,
      0x1c80: 0x200008,
      0x1d80: 0x0,
      0x1e80: 0x10000000,
      0x1f80: 0x10002008 },

    {
      0x0: 0x100000,
      0x10: 0x2000401,
      0x20: 0x400,
      0x30: 0x100401,
      0x40: 0x2100401,
      0x50: 0x0,
      0x60: 0x1,
      0x70: 0x2100001,
      0x80: 0x2000400,
      0x90: 0x100001,
      0xa0: 0x2000001,
      0xb0: 0x2100400,
      0xc0: 0x2100000,
      0xd0: 0x401,
      0xe0: 0x100400,
      0xf0: 0x2000000,
      0x8: 0x2100001,
      0x18: 0x0,
      0x28: 0x2000401,
      0x38: 0x2100400,
      0x48: 0x100000,
      0x58: 0x2000001,
      0x68: 0x2000000,
      0x78: 0x401,
      0x88: 0x100401,
      0x98: 0x2000400,
      0xa8: 0x2100000,
      0xb8: 0x100001,
      0xc8: 0x400,
      0xd8: 0x2100401,
      0xe8: 0x1,
      0xf8: 0x100400,
      0x100: 0x2000000,
      0x110: 0x100000,
      0x120: 0x2000401,
      0x130: 0x2100001,
      0x140: 0x100001,
      0x150: 0x2000400,
      0x160: 0x2100400,
      0x170: 0x100401,
      0x180: 0x401,
      0x190: 0x2100401,
      0x1a0: 0x100400,
      0x1b0: 0x1,
      0x1c0: 0x0,
      0x1d0: 0x2100000,
      0x1e0: 0x2000001,
      0x1f0: 0x400,
      0x108: 0x100400,
      0x118: 0x2000401,
      0x128: 0x2100001,
      0x138: 0x1,
      0x148: 0x2000000,
      0x158: 0x100000,
      0x168: 0x401,
      0x178: 0x2100400,
      0x188: 0x2000001,
      0x198: 0x2100000,
      0x1a8: 0x0,
      0x1b8: 0x2100401,
      0x1c8: 0x100401,
      0x1d8: 0x400,
      0x1e8: 0x2000400,
      0x1f8: 0x100001 },

    {
      0x0: 0x8000820,
      0x1: 0x20000,
      0x2: 0x8000000,
      0x3: 0x20,
      0x4: 0x20020,
      0x5: 0x8020820,
      0x6: 0x8020800,
      0x7: 0x800,
      0x8: 0x8020000,
      0x9: 0x8000800,
      0xa: 0x20800,
      0xb: 0x8020020,
      0xc: 0x820,
      0xd: 0x0,
      0xe: 0x8000020,
      0xf: 0x20820,
      0x80000000: 0x800,
      0x80000001: 0x8020820,
      0x80000002: 0x8000820,
      0x80000003: 0x8000000,
      0x80000004: 0x8020000,
      0x80000005: 0x20800,
      0x80000006: 0x20820,
      0x80000007: 0x20,
      0x80000008: 0x8000020,
      0x80000009: 0x820,
      0x8000000a: 0x20020,
      0x8000000b: 0x8020800,
      0x8000000c: 0x0,
      0x8000000d: 0x8020020,
      0x8000000e: 0x8000800,
      0x8000000f: 0x20000,
      0x10: 0x20820,
      0x11: 0x8020800,
      0x12: 0x20,
      0x13: 0x800,
      0x14: 0x8000800,
      0x15: 0x8000020,
      0x16: 0x8020020,
      0x17: 0x20000,
      0x18: 0x0,
      0x19: 0x20020,
      0x1a: 0x8020000,
      0x1b: 0x8000820,
      0x1c: 0x8020820,
      0x1d: 0x20800,
      0x1e: 0x820,
      0x1f: 0x8000000,
      0x80000010: 0x20000,
      0x80000011: 0x800,
      0x80000012: 0x8020020,
      0x80000013: 0x20820,
      0x80000014: 0x20,
      0x80000015: 0x8020000,
      0x80000016: 0x8000000,
      0x80000017: 0x8000820,
      0x80000018: 0x8020820,
      0x80000019: 0x8000020,
      0x8000001a: 0x8000800,
      0x8000001b: 0x0,
      0x8000001c: 0x20800,
      0x8000001d: 0x820,
      0x8000001e: 0x20020,
      0x8000001f: 0x8020800 }];



    // Masks that select the SBOX input
    var SBOX_MASK = [
    0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,
    0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f];


    /**
                                                      * DES block cipher algorithm.
                                                      */
    var DES = C_algo.DES = BlockCipher.extend({
      _doReset: function _doReset() {
        // Shortcuts
        var key = this._key;
        var keyWords = key.words;

        // Select 56 bits according to PC1
        var keyBits = [];
        for (var i = 0; i < 56; i++) {
          var keyBitPos = PC1[i] - 1;
          keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
        }

        // Assemble 16 subkeys
        var subKeys = this._subKeys = [];
        for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
          // Create subkey
          var subKey = subKeys[nSubKey] = [];

          // Shortcut
          var bitShift = BIT_SHIFTS[nSubKey];

          // Select 48 bits according to PC2
          for (var i = 0; i < 24; i++) {
            // Select from the left 28 key bits
            subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;

            // Select from the right 28 key bits
            subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
          }

          // Since each subkey is applied to an expanded 32-bit input,
          // the subkey can be broken into 8 values scaled to 32-bits,
          // which allows the key to be used without expansion
          subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
          for (var i = 1; i < 7; i++) {
            subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
          }
          subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
        }

        // Compute inverse subkeys
        var invSubKeys = this._invSubKeys = [];
        for (var i = 0; i < 16; i++) {
          invSubKeys[i] = subKeys[15 - i];
        }
      },

      encryptBlock: function encryptBlock(M, offset) {
        this._doCryptBlock(M, offset, this._subKeys);
      },

      decryptBlock: function decryptBlock(M, offset) {
        this._doCryptBlock(M, offset, this._invSubKeys);
      },

      _doCryptBlock: function _doCryptBlock(M, offset, subKeys) {
        // Get input
        this._lBlock = M[offset];
        this._rBlock = M[offset + 1];

        // Initial permutation
        exchangeLR.call(this, 4, 0x0f0f0f0f);
        exchangeLR.call(this, 16, 0x0000ffff);
        exchangeRL.call(this, 2, 0x33333333);
        exchangeRL.call(this, 8, 0x00ff00ff);
        exchangeLR.call(this, 1, 0x55555555);

        // Rounds
        for (var round = 0; round < 16; round++) {
          // Shortcuts
          var subKey = subKeys[round];
          var lBlock = this._lBlock;
          var rBlock = this._rBlock;

          // Feistel function
          var f = 0;
          for (var i = 0; i < 8; i++) {
            f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
          }
          this._lBlock = rBlock;
          this._rBlock = lBlock ^ f;
        }

        // Undo swap from last round
        var t = this._lBlock;
        this._lBlock = this._rBlock;
        this._rBlock = t;

        // Final permutation
        exchangeLR.call(this, 1, 0x55555555);
        exchangeRL.call(this, 8, 0x00ff00ff);
        exchangeRL.call(this, 2, 0x33333333);
        exchangeLR.call(this, 16, 0x0000ffff);
        exchangeLR.call(this, 4, 0x0f0f0f0f);

        // Set output
        M[offset] = this._lBlock;
        M[offset + 1] = this._rBlock;
      },

      keySize: 64 / 32,

      ivSize: 64 / 32,

      blockSize: 64 / 32 });


    // Swap bits across the left and right words
    function exchangeLR(offset, mask) {
      var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
      this._rBlock ^= t;
      this._lBlock ^= t << offset;
    }

    function exchangeRL(offset, mask) {
      var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
      this._lBlock ^= t;
      this._rBlock ^= t << offset;
    }

    /**
       * Shortcut functions to the cipher's object interface.
       *
       * @example
       *
       *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);
       *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);
       */
    C.DES = BlockCipher._createHelper(DES);

    /**
                                             * Triple-DES block cipher algorithm.
                                             */
    var TripleDES = C_algo.TripleDES = BlockCipher.extend({
      _doReset: function _doReset() {
        // Shortcuts
        var key = this._key;
        var keyWords = key.words;

        // Create DES instances
        this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));
        this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));
        this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));
      },

      encryptBlock: function encryptBlock(M, offset) {
        this._des1.encryptBlock(M, offset);
        this._des2.decryptBlock(M, offset);
        this._des3.encryptBlock(M, offset);
      },

      decryptBlock: function decryptBlock(M, offset) {
        this._des3.decryptBlock(M, offset);
        this._des2.encryptBlock(M, offset);
        this._des1.decryptBlock(M, offset);
      },

      keySize: 192 / 32,

      ivSize: 64 / 32,

      blockSize: 64 / 32 });


    /**
                              * Shortcut functions to the cipher's object interface.
                              *
                              * @example
                              *
                              *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);
                              *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);
                              */
    C.TripleDES = BlockCipher._createHelper(TripleDES);
  })();


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var StreamCipher = C_lib.StreamCipher;
    var C_algo = C.algo;

    /**
                          * RC4 stream cipher algorithm.
                          */
    var RC4 = C_algo.RC4 = StreamCipher.extend({
      _doReset: function _doReset() {
        // Shortcuts
        var key = this._key;
        var keyWords = key.words;
        var keySigBytes = key.sigBytes;

        // Init sbox
        var S = this._S = [];
        for (var i = 0; i < 256; i++) {
          S[i] = i;
        }

        // Key setup
        for (var i = 0, j = 0; i < 256; i++) {
          var keyByteIndex = i % keySigBytes;
          var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 0xff;

          j = (j + S[i] + keyByte) % 256;

          // Swap
          var t = S[i];
          S[i] = S[j];
          S[j] = t;
        }

        // Counters
        this._i = this._j = 0;
      },

      _doProcessBlock: function _doProcessBlock(M, offset) {
        M[offset] ^= generateKeystreamWord.call(this);
      },

      keySize: 256 / 32,

      ivSize: 0 });


    function generateKeystreamWord() {
      // Shortcuts
      var S = this._S;
      var i = this._i;
      var j = this._j;

      // Generate keystream word
      var keystreamWord = 0;
      for (var n = 0; n < 4; n++) {
        i = (i + 1) % 256;
        j = (j + S[i]) % 256;

        // Swap
        var t = S[i];
        S[i] = S[j];
        S[j] = t;

        keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
      }

      // Update counters
      this._i = i;
      this._j = j;

      return keystreamWord;
    }

    /**
       * Shortcut functions to the cipher's object interface.
       *
       * @example
       *
       *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);
       *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);
       */
    C.RC4 = StreamCipher._createHelper(RC4);

    /**
                                              * Modified RC4 stream cipher algorithm.
                                              */
    var RC4Drop = C_algo.RC4Drop = RC4.extend({
      /**
                                                 * Configuration options.
                                                 *
                                                 * @property {number} drop The number of keystream words to drop. Default 192
                                                 */
      cfg: RC4.cfg.extend({
        drop: 192 }),


      _doReset: function _doReset() {
        RC4._doReset.call(this);

        // Drop
        for (var i = this.cfg.drop; i > 0; i--) {
          generateKeystreamWord.call(this);
        }
      } });


    /**
             * Shortcut functions to the cipher's object interface.
             *
             * @example
             *
             *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);
             *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);
             */
    C.RC4Drop = StreamCipher._createHelper(RC4Drop);
  })();


  /** @preserve
         * Counter block mode compatible with  Dr Brian Gladman fileenc.c
         * derived from CryptoJS.mode.CTR
         * Jan Hruby jhruby.web@gmail.com
         */
  CryptoJS.mode.CTRGladman = function () {
    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();

    function incWord(word) {
      if ((word >> 24 & 0xff) === 0xff) {// overflow
        var b1 = word >> 16 & 0xff;
        var b2 = word >> 8 & 0xff;
        var b3 = word & 0xff;

        if (b1 === 0xff) // overflow b1
          {
            b1 = 0;
            if (b2 === 0xff) {
              b2 = 0;
              if (b3 === 0xff) {
                b3 = 0;
              } else {
                ++b3;
              }
            } else {
              ++b2;
            }
          } else {
          ++b1;
        }

        word = 0;
        word += b1 << 16;
        word += b2 << 8;
        word += b3;
      } else {
        word += 0x01 << 24;
      }
      return word;
    }

    function incCounter(counter) {
      if ((counter[0] = incWord(counter[0])) === 0) {
        // encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8
        counter[1] = incWord(counter[1]);
      }
      return counter;
    }

    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
      processBlock: function processBlock(words, offset) {
        // Shortcuts
        var cipher = this._cipher;
        var blockSize = cipher.blockSize;
        var iv = this._iv;
        var counter = this._counter;

        // Generate keystream
        if (iv) {
          counter = this._counter = iv.slice(0);

          // Remove IV for subsequent blocks
          this._iv = undefined;
        }

        incCounter(counter);

        var keystream = counter.slice(0);
        cipher.encryptBlock(keystream, 0);

        // Encrypt
        for (var i = 0; i < blockSize; i++) {
          words[offset + i] ^= keystream[i];
        }
      } });


    CTRGladman.Decryptor = Encryptor;

    return CTRGladman;
  }();




  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var StreamCipher = C_lib.StreamCipher;
    var C_algo = C.algo;

    // Reusable objects
    var S = [];
    var C_ = [];
    var G = [];

    /**
                 * Rabbit stream cipher algorithm
                 */
    var Rabbit = C_algo.Rabbit = StreamCipher.extend({
      _doReset: function _doReset() {
        // Shortcuts
        var K = this._key.words;
        var iv = this.cfg.iv;

        // Swap endian
        for (var i = 0; i < 4; i++) {
          K[i] = (K[i] << 8 | K[i] >>> 24) & 0x00ff00ff |
          (K[i] << 24 | K[i] >>> 8) & 0xff00ff00;
        }

        // Generate initial state values
        var X = this._X = [
        K[0], K[3] << 16 | K[2] >>> 16,
        K[1], K[0] << 16 | K[3] >>> 16,
        K[2], K[1] << 16 | K[0] >>> 16,
        K[3], K[2] << 16 | K[1] >>> 16];


        // Generate initial counter values
        var C = this._C = [
        K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff,
        K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff,
        K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff,
        K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];


        // Carry bit
        this._b = 0;

        // Iterate the system four times
        for (var i = 0; i < 4; i++) {
          nextState.call(this);
        }

        // Modify the counters
        for (var i = 0; i < 8; i++) {
          C[i] ^= X[i + 4 & 7];
        }

        // IV setup
        if (iv) {
          // Shortcuts
          var IV = iv.words;
          var IV_0 = IV[0];
          var IV_1 = IV[1];

          // Generate four subvectors
          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
          var i1 = i0 >>> 16 | i2 & 0xffff0000;
          var i3 = i2 << 16 | i0 & 0x0000ffff;

          // Modify counter values
          C[0] ^= i0;
          C[1] ^= i1;
          C[2] ^= i2;
          C[3] ^= i3;
          C[4] ^= i0;
          C[5] ^= i1;
          C[6] ^= i2;
          C[7] ^= i3;

          // Iterate the system four times
          for (var i = 0; i < 4; i++) {
            nextState.call(this);
          }
        }
      },

      _doProcessBlock: function _doProcessBlock(M, offset) {
        // Shortcut
        var X = this._X;

        // Iterate the system
        nextState.call(this);

        // Generate four keystream words
        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;

        for (var i = 0; i < 4; i++) {
          // Swap endian
          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff |
          (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;

          // Encrypt
          M[offset + i] ^= S[i];
        }
      },

      blockSize: 128 / 32,

      ivSize: 64 / 32 });


    function nextState() {
      // Shortcuts
      var X = this._X;
      var C = this._C;

      // Save old counter values
      for (var i = 0; i < 8; i++) {
        C_[i] = C[i];
      }

      // Calculate new counter values
      C[0] = C[0] + 0x4d34d34d + this._b | 0;
      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;

      // Calculate the g-values
      for (var i = 0; i < 8; i++) {
        var gx = X[i] + C[i];

        // Construct high and low argument for squaring
        var ga = gx & 0xffff;
        var gb = gx >>> 16;

        // Calculate high and low result of squaring
        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);

        // High XOR low
        G[i] = gh ^ gl;
      }

      // Calculate new state values
      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
    }

    /**
       * Shortcut functions to the cipher's object interface.
       *
       * @example
       *
       *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);
       *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);
       */
    C.Rabbit = StreamCipher._createHelper(Rabbit);
  })();


  /**
         * Counter block mode.
         */
  CryptoJS.mode.CTR = function () {
    var CTR = CryptoJS.lib.BlockCipherMode.extend();

    var Encryptor = CTR.Encryptor = CTR.extend({
      processBlock: function processBlock(words, offset) {
        // Shortcuts
        var cipher = this._cipher;
        var blockSize = cipher.blockSize;
        var iv = this._iv;
        var counter = this._counter;

        // Generate keystream
        if (iv) {
          counter = this._counter = iv.slice(0);

          // Remove IV for subsequent blocks
          this._iv = undefined;
        }
        var keystream = counter.slice(0);
        cipher.encryptBlock(keystream, 0);

        // Increment counter
        counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;

        // Encrypt
        for (var i = 0; i < blockSize; i++) {
          words[offset + i] ^= keystream[i];
        }
      } });


    CTR.Decryptor = Encryptor;

    return CTR;
  }();


  (function () {
    // Shortcuts
    var C = CryptoJS;
    var C_lib = C.lib;
    var StreamCipher = C_lib.StreamCipher;
    var C_algo = C.algo;

    // Reusable objects
    var S = [];
    var C_ = [];
    var G = [];

    /**
                 * Rabbit stream cipher algorithm.
                 *
                 * This is a legacy version that neglected to convert the key to little-endian.
                 * This error doesn't affect the cipher's security,
                 * but it does affect its compatibility with other implementations.
                 */
    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
      _doReset: function _doReset() {
        // Shortcuts
        var K = this._key.words;
        var iv = this.cfg.iv;

        // Generate initial state values
        var X = this._X = [
        K[0], K[3] << 16 | K[2] >>> 16,
        K[1], K[0] << 16 | K[3] >>> 16,
        K[2], K[1] << 16 | K[0] >>> 16,
        K[3], K[2] << 16 | K[1] >>> 16];


        // Generate initial counter values
        var C = this._C = [
        K[2] << 16 | K[2] >>> 16, K[0] & 0xffff0000 | K[1] & 0x0000ffff,
        K[3] << 16 | K[3] >>> 16, K[1] & 0xffff0000 | K[2] & 0x0000ffff,
        K[0] << 16 | K[0] >>> 16, K[2] & 0xffff0000 | K[3] & 0x0000ffff,
        K[1] << 16 | K[1] >>> 16, K[3] & 0xffff0000 | K[0] & 0x0000ffff];


        // Carry bit
        this._b = 0;

        // Iterate the system four times
        for (var i = 0; i < 4; i++) {
          nextState.call(this);
        }

        // Modify the counters
        for (var i = 0; i < 8; i++) {
          C[i] ^= X[i + 4 & 7];
        }

        // IV setup
        if (iv) {
          // Shortcuts
          var IV = iv.words;
          var IV_0 = IV[0];
          var IV_1 = IV[1];

          // Generate four subvectors
          var i0 = (IV_0 << 8 | IV_0 >>> 24) & 0x00ff00ff | (IV_0 << 24 | IV_0 >>> 8) & 0xff00ff00;
          var i2 = (IV_1 << 8 | IV_1 >>> 24) & 0x00ff00ff | (IV_1 << 24 | IV_1 >>> 8) & 0xff00ff00;
          var i1 = i0 >>> 16 | i2 & 0xffff0000;
          var i3 = i2 << 16 | i0 & 0x0000ffff;

          // Modify counter values
          C[0] ^= i0;
          C[1] ^= i1;
          C[2] ^= i2;
          C[3] ^= i3;
          C[4] ^= i0;
          C[5] ^= i1;
          C[6] ^= i2;
          C[7] ^= i3;

          // Iterate the system four times
          for (var i = 0; i < 4; i++) {
            nextState.call(this);
          }
        }
      },

      _doProcessBlock: function _doProcessBlock(M, offset) {
        // Shortcut
        var X = this._X;

        // Iterate the system
        nextState.call(this);

        // Generate four keystream words
        S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
        S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
        S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
        S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;

        for (var i = 0; i < 4; i++) {
          // Swap endian
          S[i] = (S[i] << 8 | S[i] >>> 24) & 0x00ff00ff |
          (S[i] << 24 | S[i] >>> 8) & 0xff00ff00;

          // Encrypt
          M[offset + i] ^= S[i];
        }
      },

      blockSize: 128 / 32,

      ivSize: 64 / 32 });


    function nextState() {
      // Shortcuts
      var X = this._X;
      var C = this._C;

      // Save old counter values
      for (var i = 0; i < 8; i++) {
        C_[i] = C[i];
      }

      // Calculate new counter values
      C[0] = C[0] + 0x4d34d34d + this._b | 0;
      C[1] = C[1] + 0xd34d34d3 + (C[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
      C[2] = C[2] + 0x34d34d34 + (C[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
      C[3] = C[3] + 0x4d34d34d + (C[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
      C[4] = C[4] + 0xd34d34d3 + (C[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
      C[5] = C[5] + 0x34d34d34 + (C[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
      C[6] = C[6] + 0x4d34d34d + (C[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
      C[7] = C[7] + 0xd34d34d3 + (C[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
      this._b = C[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;

      // Calculate the g-values
      for (var i = 0; i < 8; i++) {
        var gx = X[i] + C[i];

        // Construct high and low argument for squaring
        var ga = gx & 0xffff;
        var gb = gx >>> 16;

        // Calculate high and low result of squaring
        var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
        var gl = ((gx & 0xffff0000) * gx | 0) + ((gx & 0x0000ffff) * gx | 0);

        // High XOR low
        G[i] = gh ^ gl;
      }

      // Calculate new state values
      X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
      X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
      X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
      X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
      X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
      X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
      X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
      X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
    }

    /**
       * Shortcut functions to the cipher's object interface.
       *
       * @example
       *
       *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);
       *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);
       */
    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
  })();


  /**
         * Zero padding strategy.
         */
  CryptoJS.pad.ZeroPadding = {
    pad: function pad(data, blockSize) {
      // Shortcut
      var blockSizeBytes = blockSize * 4;

      // Pad
      data.clamp();
      data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
    },

    unpad: function unpad(data) {
      // Shortcut
      var dataWords = data.words;

      // Unpad
      var i = data.sigBytes - 1;
      while (!(dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff)) {
        i--;
      }
      data.sigBytes = i + 1;
    } };



  return CryptoJS;
});

/***/ }),
/* 44 */
/*!*************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/load.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.loadOpen = loadOpen;exports.loadClose = loadClose;function loadOpen() {var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  return setTimeout(function () {
    uni.showLoading({
      title: '加载中..' });


    setTimeout(function () {
      uni.hideLoading();
    }, time);
  }, time);
}

function loadClose(timer) {
  uni.hideToast();
  uni.hideLoading();
  clearTimeout(timer);
}

/***/ }),
/* 45 */
/*!**************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/local.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.localSet = localSet;exports.localHttp = localHttp;exports.localGet = localGet;exports.localRemove = localRemove;exports.localClear = localClear;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 31));var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}
var allKeys = 'localStorage_allKeys';

// 设置本地缓存
function localSet(name, data) {
  if (!data || !name) {
    return;
  }
  uni.setStorageSync(name, data);
  setKeys(name);
}

/*
   * 先从缓存中请求数据，如果没有则从api中请求\
   *  @param name 缓存名称，必须唯一
   *  @param apiUrl api请求接口
   */function
localHttp(_x, _x2) {return _localHttp.apply(this, arguments);}














// 获取本地缓存数据
function _localHttp() {_localHttp = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(name, apiUrl) {var data, result;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:if (!(!name || !apiUrl)) {_context.next = 2;break;}return _context.abrupt("return");case 2:data = _ala.default.vuexLocalGet(name);if (!data) {_context.next = 5;break;}return _context.abrupt("return", data);case 5:if (data) {_context.next = 11;break;}_context.next = 8;return _ala.default.httpGet(apiUrl);case 8:result = _context.sent;_ala.default.vuexLocalSet(name, result);return _context.abrupt("return", result);case 11:case "end":return _context.stop();}}}, _callee, this);}));return _localHttp.apply(this, arguments);}function localGet(name) {
  if (!name) return;
  var data = uni.getStorageSync(name);
  var data;
  if (data) {
    if (data !== undefined && data !== 'undefined') {
      return data;
    }
  }
  return undefined;
}

// 删除本地缓存
function localRemove(name) {
  if (!name) return;
  uni.removeStorageSync(name);
}

// 本地缓存所有键
function localClear() {
  uni.showModal({
    title: '清空缓存',
    content: '您是否确定要清空缓存?',
    success: function success(res) {
      if (res.confirm) {
        var keys = localGet(allKeys);
        if (keys) {
          keys.forEach(function (element) {
            localRemove(element);
          });
        }
        localRemove(allKeys);
        _ala.default.toastSuccess('缓存清理成功');
      }
    } });

}

// 保存所有的Keys
function setKeys(name) {
  if (name === 'tenant' || name.toLowerCase().indexOf('user_') === 0) {
    // 租户标识不能删除,和登陆用户不删除
    return;
  }
  var keys = localGet(allKeys);
  if (keys === undefined || keys === null) {
    keys = [];
  }
  if (keys.indexOf(name) < 0) {
    keys.push(name);
    uni.setStorageSync(allKeys, keys);
  }
}

/***/ }),
/* 46 */
/*!************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/log.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, "__esModule", { value: true });exports.log = log;exports.info = info;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 31));var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}
// 添加日志
function log() {return _log.apply(this, arguments);}function _log() {_log = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee() {var para,_args = arguments;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
            para = {
              message: JSON.stringify(_args) };_context.next = 3;return (

              _ala.default.httpPost('api/logs/add', para));case 3:case "end":return _context.stop();}}}, _callee, this);}));return _log.apply(this, arguments);}


function info() {
  if (true) {
    /* eslint-disable */
    __f__("info", arguments, " at service\\ala\\log.js:13");
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 47)["default"]))

/***/ }),
/* 47 */
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = formatLog;function typof(v) {
  var s = Object.prototype.toString.call(v);
  return s.substring(8, s.length - 1);
}

function isDebugMode() {
  /* eslint-disable no-undef */
  return typeof __channelId__ === 'string' && __channelId__;
}

function formatLog() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var type = args.shift();
  if (isDebugMode()) {
    args.push(args.pop().replace('at ', 'uni-app:///'));
    return console[type]['apply'](console, args);
  }

  var msgs = args.map(function (v) {
    var type = Object.prototype.toString.call(v);

    if (type.toLowerCase() === '[object object]') {
      try {
        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';
      } catch (e) {
        v = '[object object]';
      }
    } else {
      if (v === null) {
        v = '---NULL---';
      } else if (v === undefined) {
        v = '---UNDEFINED---';
      } else {
        var vType = typof(v).toUpperCase();

        if (vType === 'NUMBER' || vType === 'BOOLEAN') {
          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';
        } else {
          v = String(v);
        }
      }
    }

    return v;
  });
  var msg = '';

  if (msgs.length > 1) {
    var lastMsg = msgs.pop();
    msg = msgs.join('---COMMA---');

    if (lastMsg.indexOf(' at ') === 0) {
      msg += lastMsg;
    } else {
      msg += '---COMMA---' + lastMsg;
    }
  } else {
    msg = msgs[0];
  }

  console[type](msg);
}

/***/ }),
/* 48 */
/*!************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/pay.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.payType = payType;var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
// 支付类型
// export function payType() {
//     if (ala.client() === 'WapH5') {
//       // 手机Wap
//       return 2
//     } else if (ala.client() === 'WeChat') {
//       // 微信
//       return 5
//     } else if (ala.client() === 'WeChatLite') {
//       // 小程序
//       return 6
//     } else if (
//       ala.client() === 'AppPlus' &&
//       ala.getSystemInfoSync().platform === 'ios'
//     ) {
//       return 3
//     } else if (
//       ala.client() === 'AppPlus' &&
//       ala.getSystemInfoSync().platform === 'android'
//     ) {
//       return 4
//     }
//   }

function payType() {
  var terminal;










  if (_ala.default.getSystemInfoSync().platform === 'ios') {
    terminal = 3;
  } else {
    return 4;
  }

  return terminal;
}

/***/ }),
/* 49 */
/*!**************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/route.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.routeFullPath = routeFullPath;exports.routePath = routePath;var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// 完整路径
function routeFullPath() {
  var pages = getCurrentPages();
  var fullPath;
  if (_ala.default.client() === 'WeChatLite') {
    fullPath = pages[pages.length - 1].route;
    var path = parseParams(pages[pages.length - 1].options);
    if (path) {
      fullPath = "".concat(pages[pages.length - 1].route, "?").concat(path);
    }
  } else {
    fullPath = pages[0].$route.fullPath;
  }
  return fullPath;
}

// 实际页面路径
function routePath(option) {
  var path = '/index';
  if (!option) {
    return path;
  }
  if (Array.isArray(option) === true) {
    path = option[0].path;
  } else {
    path = option.path;
  }
  if (!path) {
    path = '/index';
  }

  path = path.replace('_', '/').replace('_', '/');
  if (path.substr(0, 1) !== '/') {
    path = '/' + path;
  }
  if (path === '/') {
    path = '/index';
  }

  path = path.
  replace('pages/', '').
  replace('/pages', '').
  replace('/views', '').
  replace('views/', '');
  var index = path.indexOf('?');
  if (index > 0) {
    path = path.substr(0, index);
  }
  return path;
}

// 获取元素节点
function getQuery(jsThis, type) {
  var selectorQuery;
  if (_ala.default.client() !== 'WapH5') {
    selectorQuery = uni.createSelectorQuery();
  } else {
    selectorQuery = uni.createSelectorQuery().in(jsThis);
  }
  selectorQuery.selectAll(type).boundingClientRect();
  return selectorQuery.selectViewport().scrollOffset();
}

// 处理路由拼接
function parseParams(data) {
  try {
    var tempArr = [];
    for (var i in data) {
      var key = encodeURIComponent(i);
      var value = encodeURIComponent(data[i]);
      tempArr.push(key + '=' + value);
    }
    var urlParamsStr = tempArr.join('&');
    return urlParamsStr;
  } catch (err) {
    return null;
  }
}

/***/ }),
/* 50 */
/*!***************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/screen.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.screenHeight = screenHeight;exports.screenWidth = screenWidth;exports.statusHeight = statusHeight;exports.screenInfo = screenInfo;var _store = _interopRequireDefault(__webpack_require__(/*! @/service/store */ 51));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// 屏幕高度
function screenHeight() {
  return this.screenInfo().windowHeight;
}
// 屏幕宽度
function screenWidth() {
  var windowWidth = this.screenInfo().windowWidth;

  windowWidth = windowWidth + 1;

  return windowWidth;
}
// 手机遮屏高度
function statusHeight() {
  return this.screenInfo().statusBarHeight;
}

// 当前获取系统信息
function screenInfo() {
  if (_store.default.state.getSystemInfoSync === null) {
    _store.default.state.getSystemInfoSync = uni.getSystemInfoSync();
    return _store.default.state.getSystemInfoSync;
  } else {
    return _store.default.state.getSystemInfoSync;
  }
}

/***/ }),
/* 51 */
/*!****************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/store/index.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 52));
var _vuex = _interopRequireDefault(__webpack_require__(/*! vuex */ 53));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

_vue.default.use(_vuex.default);

var store = new _vuex.default.Store({
  state: {
    hasLogin: false,
    user: '',
    phoneVerification: null,
    showPrice: false,
    getSystemInfoSync: null,
    inDefault: 0 },

  mutations: {
    login: function login(state, user) {
      state.user = user;
      state.hasLogin = true;
    },
    logout: function logout(state) {
      state.user = '';
      state.hasLogin = false;
    } } });var _default =



store;exports.default = _default;

/***/ }),
/* 52 */
/*!**********************!*\
  !*** external "Vue" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = Vue;

/***/ }),
/* 53 */
/*!************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/node_modules/vuex/dist/vuex.esm.js ***!
  \************************************************************************/
/*! exports provided: default, Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Store", function() { return Store; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "install", function() { return install; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapState", function() { return mapState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapMutations", function() { return mapMutations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapGetters", function() { return mapGetters; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapActions", function() { return mapActions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNamespacedHelpers", function() { return createNamespacedHelpers; });
/**
 * vuex v3.1.2
 * (c) 2019 Evan You
 * @license MIT
 */
function applyMixin (Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({ beforeCreate: vuexInit });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;
    Vue.prototype._init = function (options) {
      if ( options === void 0 ) options = {};

      options.init = options.init
        ? [vuexInit].concat(options.init)
        : vuexInit;
      _init.call(this, options);
    };
  }

  /**
   * Vuex init hook, injected into each instances init hooks list.
   */

  function vuexInit () {
    var options = this.$options;
    // store injection
    if (options.store) {
      this.$store = typeof options.store === 'function'
        ? options.store()
        : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
}

var target = typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
    ? global
    : {};
var devtoolHook = target.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin (store) {
  if (!devtoolHook) { return }

  store._devtoolHook = devtoolHook;

  devtoolHook.emit('vuex:init', store);

  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });

  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  });
}

/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */

/**
 * forEach for object
 */
function forEachValue (obj, fn) {
  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });
}

function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

function isPromise (val) {
  return val && typeof val.then === 'function'
}

function assert (condition, msg) {
  if (!condition) { throw new Error(("[vuex] " + msg)) }
}

function partial (fn, arg) {
  return function () {
    return fn(arg)
  }
}

// Base data struct for store's module, package with some attribute and method
var Module = function Module (rawModule, runtime) {
  this.runtime = runtime;
  // Store some children item
  this._children = Object.create(null);
  // Store the origin module object which passed by programmer
  this._rawModule = rawModule;
  var rawState = rawModule.state;

  // Store the origin module's state
  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors = { namespaced: { configurable: true } };

prototypeAccessors.namespaced.get = function () {
  return !!this._rawModule.namespaced
};

Module.prototype.addChild = function addChild (key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild (key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild (key) {
  return this._children[key]
};

Module.prototype.update = function update (rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;
  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }
  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }
  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild (fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter (fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction (fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation (fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties( Module.prototype, prototypeAccessors );

var ModuleCollection = function ModuleCollection (rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get (path) {
  return path.reduce(function (module, key) {
    return module.getChild(key)
  }, this.root)
};

ModuleCollection.prototype.getNamespace = function getNamespace (path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '')
  }, '')
};

ModuleCollection.prototype.update = function update$1 (rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register (path, rawModule, runtime) {
    var this$1 = this;
    if ( runtime === void 0 ) runtime = true;

  if (true) {
    assertRawModule(path, rawModule);
  }

  var newModule = new Module(rawModule, runtime);
  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  }

  // register nested modules
  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister (path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];
  if (!parent.getChild(key).runtime) { return }

  parent.removeChild(key);
};

function update (path, targetModule, newModule) {
  if (true) {
    assertRawModule(path, newModule);
  }

  // update target module
  targetModule.update(newModule);

  // update nested modules
  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if (true) {
          console.warn(
            "[vuex] trying to add a new module '" + key + "' on hot reloading, " +
            'manual reload is needed'
          );
        }
        return
      }
      update(
        path.concat(key),
        targetModule.getChild(key),
        newModule.modules[key]
      );
    }
  }
}

var functionAssert = {
  assert: function (value) { return typeof value === 'function'; },
  expected: 'function'
};

var objectAssert = {
  assert: function (value) { return typeof value === 'function' ||
    (typeof value === 'object' && typeof value.handler === 'function'); },
  expected: 'function or object with "handler" function'
};

var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert
};

function assertRawModule (path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) { return }

    var assertOptions = assertTypes[key];

    forEachValue(rawModule[key], function (value, type) {
      assert(
        assertOptions.assert(value),
        makeAssertionMessage(path, key, type, value, assertOptions.expected)
      );
    });
  });
}

function makeAssertionMessage (path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";
  if (path.length > 0) {
    buf += " in module \"" + (path.join('.')) + "\"";
  }
  buf += " is " + (JSON.stringify(value)) + ".";
  return buf
}

var Vue; // bind on install

var Store = function Store (options) {
  var this$1 = this;
  if ( options === void 0 ) options = {};

  // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731
  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if (true) {
    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "store must be called with the new operator.");
  }

  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];
  var strict = options.strict; if ( strict === void 0 ) strict = false;

  // store internal state
  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue();
  this._makeLocalGettersCache = Object.create(null);

  // bind commit and dispatch to self
  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;
  this.dispatch = function boundDispatch (type, payload) {
    return dispatch.call(store, type, payload)
  };
  this.commit = function boundCommit (type, payload, options) {
    return commit.call(store, type, payload, options)
  };

  // strict mode
  this.strict = strict;

  var state = this._modules.root.state;

  // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters
  installModule(this, state, [], this._modules.root);

  // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)
  resetStoreVM(this, state);

  // apply plugins
  plugins.forEach(function (plugin) { return plugin(this$1); });

  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;
  if (useDevtools) {
    devtoolPlugin(this);
  }
};

var prototypeAccessors$1 = { state: { configurable: true } };

prototypeAccessors$1.state.get = function () {
  return this._vm._data.$$state
};

prototypeAccessors$1.state.set = function (v) {
  if (true) {
    assert(false, "use store.replaceState() to explicit replace store state.");
  }
};

Store.prototype.commit = function commit (_type, _payload, _options) {
    var this$1 = this;

  // check object-style commit
  var ref = unifyObjectStyle(_type, _payload, _options);
    var type = ref.type;
    var payload = ref.payload;
    var options = ref.options;

  var mutation = { type: type, payload: payload };
  var entry = this._mutations[type];
  if (!entry) {
    if (true) {
      console.error(("[vuex] unknown mutation type: " + type));
    }
    return
  }
  this._withCommit(function () {
    entry.forEach(function commitIterator (handler) {
      handler(payload);
    });
  });
  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });

  if (
     true &&
    options && options.silent
  ) {
    console.warn(
      "[vuex] mutation type: " + type + ". Silent option has been removed. " +
      'Use the filter functionality in the vue-devtools'
    );
  }
};

Store.prototype.dispatch = function dispatch (_type, _payload) {
    var this$1 = this;

  // check object-style dispatch
  var ref = unifyObjectStyle(_type, _payload);
    var type = ref.type;
    var payload = ref.payload;

  var action = { type: type, payload: payload };
  var entry = this._actions[type];
  if (!entry) {
    if (true) {
      console.error(("[vuex] unknown action type: " + type));
    }
    return
  }

  try {
    this._actionSubscribers
      .filter(function (sub) { return sub.before; })
      .forEach(function (sub) { return sub.before(action, this$1.state); });
  } catch (e) {
    if (true) {
      console.warn("[vuex] error in before action subscribers: ");
      console.error(e);
    }
  }

  var result = entry.length > 1
    ? Promise.all(entry.map(function (handler) { return handler(payload); }))
    : entry[0](payload);

  return result.then(function (res) {
    try {
      this$1._actionSubscribers
        .filter(function (sub) { return sub.after; })
        .forEach(function (sub) { return sub.after(action, this$1.state); });
    } catch (e) {
      if (true) {
        console.warn("[vuex] error in after action subscribers: ");
        console.error(e);
      }
    }
    return res
  })
};

Store.prototype.subscribe = function subscribe (fn) {
  return genericSubscribe(fn, this._subscribers)
};

Store.prototype.subscribeAction = function subscribeAction (fn) {
  var subs = typeof fn === 'function' ? { before: fn } : fn;
  return genericSubscribe(subs, this._actionSubscribers)
};

Store.prototype.watch = function watch (getter, cb, options) {
    var this$1 = this;

  if (true) {
    assert(typeof getter === 'function', "store.watch only accepts a function.");
  }
  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)
};

Store.prototype.replaceState = function replaceState (state) {
    var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule (path, rawModule, options) {
    if ( options === void 0 ) options = {};

  if (typeof path === 'string') { path = [path]; }

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
  }

  this._modules.register(path, rawModule);
  installModule(this, this.state, path, this._modules.get(path), options.preserveState);
  // reset store to update getters...
  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule (path) {
    var this$1 = this;

  if (typeof path === 'string') { path = [path]; }

  if (true) {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  this._modules.unregister(path);
  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue.delete(parentState, path[path.length - 1]);
  });
  resetStore(this);
};

Store.prototype.hotUpdate = function hotUpdate (newOptions) {
  this._modules.update(newOptions);
  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit (fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties( Store.prototype, prototypeAccessors$1 );

function genericSubscribe (fn, subs) {
  if (subs.indexOf(fn) < 0) {
    subs.push(fn);
  }
  return function () {
    var i = subs.indexOf(fn);
    if (i > -1) {
      subs.splice(i, 1);
    }
  }
}

function resetStore (store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state;
  // init all modules
  installModule(store, state, [], store._modules.root, true);
  // reset vm
  resetStoreVM(store, state, hot);
}

function resetStoreVM (store, state, hot) {
  var oldVm = store._vm;

  // bind store public getters
  store.getters = {};
  // reset local getters cache
  store._makeLocalGettersCache = Object.create(null);
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    // direct inline function use will lead to closure preserving oldVm.
    // using partial to return function with only arguments preserved in closure environment.
    computed[key] = partial(fn, store);
    Object.defineProperty(store.getters, key, {
      get: function () { return store._vm[key]; },
      enumerable: true // for local getters
    });
  });

  // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins
  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent;

  // enable strict mode for new vm
  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }
    Vue.nextTick(function () { return oldVm.$destroy(); });
  }
}

function installModule (store, rootState, path, module, hot) {
  var isRoot = !path.length;
  var namespace = store._modules.getNamespace(path);

  // register in namespace map
  if (module.namespaced) {
    if (store._modulesNamespaceMap[namespace] && "development" !== 'production') {
      console.error(("[vuex] duplicate namespace " + namespace + " for the namespaced module " + (path.join('/'))));
    }
    store._modulesNamespaceMap[namespace] = module;
  }

  // set state
  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];
    store._withCommit(function () {
      if (true) {
        if (moduleName in parentState) {
          console.warn(
            ("[vuex] state field \"" + moduleName + "\" was overridden by a module with the same name at \"" + (path.join('.')) + "\"")
          );
        }
      }
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);

  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });

  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });

  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });

  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}

/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */
function makeLocalContext (store, namespace, path) {
  var noNamespace = namespace === '';

  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if ( true && !store._actions[type]) {
          console.error(("[vuex] unknown local action type: " + (args.type) + ", global type: " + type));
          return
        }
      }

      return store.dispatch(type, payload)
    },

    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;
        if ( true && !store._mutations[type]) {
          console.error(("[vuex] unknown local mutation type: " + (args.type) + ", global type: " + type));
          return
        }
      }

      store.commit(type, payload, options);
    }
  };

  // getters and state object must be gotten lazily
  // because they will be changed by vm update
  Object.defineProperties(local, {
    getters: {
      get: noNamespace
        ? function () { return store.getters; }
        : function () { return makeLocalGetters(store, namespace); }
    },
    state: {
      get: function () { return getNestedState(store.state, path); }
    }
  });

  return local
}

function makeLocalGetters (store, namespace) {
  if (!store._makeLocalGettersCache[namespace]) {
    var gettersProxy = {};
    var splitPos = namespace.length;
    Object.keys(store.getters).forEach(function (type) {
      // skip if the target getter is not match this namespace
      if (type.slice(0, splitPos) !== namespace) { return }

      // extract local getter type
      var localType = type.slice(splitPos);

      // Add a port to the getters proxy.
      // Define as getter property because
      // we do not want to evaluate the getters in this time.
      Object.defineProperty(gettersProxy, localType, {
        get: function () { return store.getters[type]; },
        enumerable: true
      });
    });
    store._makeLocalGettersCache[namespace] = gettersProxy;
  }

  return store._makeLocalGettersCache[namespace]
}

function registerMutation (store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler (payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction (store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler (payload) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload);
    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }
    if (store._devtoolHook) {
      return res.catch(function (err) {
        store._devtoolHook.emit('vuex:error', err);
        throw err
      })
    } else {
      return res
    }
  });
}

function registerGetter (store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if (true) {
      console.error(("[vuex] duplicate getter key: " + type));
    }
    return
  }
  store._wrappedGetters[type] = function wrappedGetter (store) {
    return rawGetter(
      local.state, // local state
      local.getters, // local getters
      store.state, // root state
      store.getters // root getters
    )
  };
}

function enableStrictMode (store) {
  store._vm.$watch(function () { return this._data.$$state }, function () {
    if (true) {
      assert(store._committing, "do not mutate vuex store state outside mutation handlers.");
    }
  }, { deep: true, sync: true });
}

function getNestedState (state, path) {
  return path.length
    ? path.reduce(function (state, key) { return state[key]; }, state)
    : state
}

function unifyObjectStyle (type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if (true) {
    assert(typeof type === 'string', ("expects string as the type, but found " + (typeof type) + "."));
  }

  return { type: type, payload: payload, options: options }
}

function install (_Vue) {
  if (Vue && _Vue === Vue) {
    if (true) {
      console.error(
        '[vuex] already installed. Vue.use(Vuex) should be called only once.'
      );
    }
    return
  }
  Vue = _Vue;
  applyMixin(Vue);
}

/**
 * Reduce the code which written in Vue.js for getting the state.
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * @param {Object}
 */
var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  if ( true && !isValidMap(states)) {
    console.error('[vuex] mapState: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState () {
      var state = this.$store.state;
      var getters = this.$store.getters;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);
        if (!module) {
          return
        }
        state = module.context.state;
        getters = module.context.getters;
      }
      return typeof val === 'function'
        ? val.call(this, state, getters)
        : state[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for committing the mutation
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept anthor params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */
var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  if ( true && !isValidMap(mutations)) {
    console.error('[vuex] mapMutations: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      // Get the commit method from store
      var commit = this.$store.commit;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);
        if (!module) {
          return
        }
        commit = module.context.commit;
      }
      return typeof val === 'function'
        ? val.apply(this, [commit].concat(args))
        : commit.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for getting the getters
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} getters
 * @return {Object}
 */
var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  if ( true && !isValidMap(getters)) {
    console.error('[vuex] mapGetters: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    // The namespace has been mutated by normalizeNamespace
    val = namespace + val;
    res[key] = function mappedGetter () {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return
      }
      if ( true && !(val in this.$store.getters)) {
        console.error(("[vuex] unknown getter: " + val));
        return
      }
      return this.$store.getters[val]
    };
    // mark vuex getter for devtools
    res[key].vuex = true;
  });
  return res
});

/**
 * Reduce the code which written in Vue.js for dispatch the action
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */
var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  if ( true && !isValidMap(actions)) {
    console.error('[vuex] mapActions: mapper parameter must be either an Array or an Object');
  }
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      // get dispatch function from store
      var dispatch = this.$store.dispatch;
      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);
        if (!module) {
          return
        }
        dispatch = module.context.dispatch;
      }
      return typeof val === 'function'
        ? val.apply(this, [dispatch].concat(args))
        : dispatch.apply(this.$store, [val].concat(args))
    };
  });
  return res
});

/**
 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
 * @param {String} namespace
 * @return {Object}
 */
var createNamespacedHelpers = function (namespace) { return ({
  mapState: mapState.bind(null, namespace),
  mapGetters: mapGetters.bind(null, namespace),
  mapMutations: mapMutations.bind(null, namespace),
  mapActions: mapActions.bind(null, namespace)
}); };

/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
 * @param {Array|Object} map
 * @return {Object}
 */
function normalizeMap (map) {
  if (!isValidMap(map)) {
    return []
  }
  return Array.isArray(map)
    ? map.map(function (key) { return ({ key: key, val: key }); })
    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })
}

/**
 * Validate whether given map is valid or not
 * @param {*} map
 * @return {Boolean}
 */
function isValidMap (map) {
  return Array.isArray(map) || isObject(map)
}

/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
 * @param {Function} fn
 * @return {Function}
 */
function normalizeNamespace (fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }
    return fn(namespace, map)
  }
}

/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * @param {Object} store
 * @param {String} helper
 * @param {String} namespace
 * @return {Object}
 */
function getModuleByNamespace (store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];
  if ( true && !module) {
    console.error(("[vuex] module namespace not found in " + helper + "(): " + namespace));
  }
  return module
}

var index_esm = {
  Store: Store,
  install: install,
  version: '3.1.2',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers
};

/* harmony default export */ __webpack_exports__["default"] = (index_esm);



/***/ }),
/* 54 */
/*!************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/str.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.strToLower = strToLower;exports.strToUpper = strToUpper;exports.strSubStart = strSubStart;exports.strIsEmpty = strIsEmpty;exports.strFirstLower = strFirstLower;exports.strLength = strLength; /*
                                                                                                                                                                                                                                                                                   * 转换为小写
                                                                                                                                                                                                                                                                                   *  @param str 字符串
                                                                                                                                                                                                                                                                                   */

function strToLower(str) {
  if (str) {
    return str.toLowerCase();
  }
  return str;
}

/*
   * 转换为大写
   *  @param str 字符串
   */

function strToUpper(str) {
  if (str) {
    return str.toUpperCase();
  }
  return str;
}

/*
   * 根据开始字符串截取子字符串
   *  @param str 字符串
   * @param startStr 开始字符串，必须唯一
   */

function strSubStart(str, stratStr) {
  if (str && stratStr) {
    var start = str.indexOf(stratStr);
    if (start > -1) {
      var result = str.substring(0, start);
      return result;
    }
  }
  return str;
}

/*
   * 判断字符串是否为空或null,undefined
   */
function strIsEmpty(str) {
  if (!str) {
    return true;
  }
  if (str === 'null' || str === 'undefined' || str === '') {
    return true;
  }
  return false;
}

/*
   * 首字母小写
   */
function strFirstLower(str) {
  var strTemp = ''; // 新字符串
  for (var i = 0; i < str.length; i++) {
    if (i === 0) {
      strTemp += str[i].toLowerCase(); // 第一个
      continue;
    }
    if (str[i] === ' ' && i < str.length - 1) {
      // 空格后
      strTemp += ' ';
      strTemp += str[i + 1].toLowerCase();
      i++;
      continue;
    }
    strTemp += str[i];
  }
  return strTemp;
}

// 判断字符串长度
function strLength(str) {
  if (this.strIsEmpty(str)) {
    return 0;
  }
  var len = str.length;
  return len;
}

/***/ }),
/* 55 */
/*!***************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/tenant.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.tenant = tenant;var _config = _interopRequireDefault(__webpack_require__(/*! @/service/config */ 36));
var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

// 当前租户
function tenant() {
  if (_config.default.isTenant === true) {
    var tenant = this.vuexLocalGet('tenant');
    return tenant;
  } else {
    return '';
  }
}

/***/ }),
/* 56 */
/*!**************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/theme.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.themePage = themePage;exports.themeWidget = themeWidget;exports.themeAllPage = themeAllPage;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 31));var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}

// 获取当前页面信息
function themePage(_x, _x2) {return _themePage.apply(this, arguments);}

















// 模块信息
function _themePage() {_themePage = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(option, allPages) {var path, pageInfo, widgets, i, widgetItem;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:path = _ala.default.routePath(option);_context.next = 3;return getPageInfo(path, allPages);case 3:pageInfo = _context.sent;widgets = [];if (pageInfo !== undefined && pageInfo !== null && pageInfo.widgets) {for (i = 0; i < pageInfo.widgets.length; i++) {widgetItem = pageInfo.widgets[i];widgetItem.route = option;widgetItem.client = _ala.default.client();widgets.push(widgetItem);}pageInfo.widgets = widgets;}pageInfo = filerPageInfo(pageInfo);return _context.abrupt("return", pageInfo);case 8:case "end":return _context.stop();}}}, _callee, this);}));return _themePage.apply(this, arguments);}function themeWidget(_x3) {return _themeWidget.apply(this, arguments);}











// 过滤页面信息
function _themeWidget() {_themeWidget = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2(widget) {var parameter;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:parameter = { apiUrl: '', value: null };if (widget !== null && widget !== undefined) {parameter.apiUrl = widget.apiUrl;parameter.value = widget.value;}return _context2.abrupt("return", parameter);case 3:case "end":return _context2.stop();}}}, _callee2, this);}));return _themeWidget.apply(this, arguments);}function filerPageInfo(pageInfo) {
  if (pageInfo) {
    pageInfo.widgets = filterWidgets(pageInfo.widgets);
    var setting = pageInfo.setting;
    // 登录信息判断
    if (setting.isLogin !== false) {
      if (!_ala.default.userIsLogin()) {
        _ala.default.userCheckLogin();
        return false;
      } else {
        _ala.default.userCheckLogin();
      }
    }
  }
  return pageInfo;
}

// 处理widgets
function filterWidgets(widgets) {var _this = this;
  if (widgets === null) {
    return null;
  }
  widgets.forEach(function (element) {
    element.border = null;
    element.borderClass = null;
    if (!_ala.default.strIsEmpty(element.style)) {
      if (!_ala.default.strIsEmpty(element.style.border)) {
        var styleBorder = JSON.parse(element.style.border);
        element.border = styleBorder;
        // element.borderClass = 'widget_border ' + styleBorder.name + ' '
        element.borderClass = styleBorder.class;
        if (!_ala.default.strIsEmpty(styleBorder.colorName)) {
          element.borderClass += styleBorder.colorName + ' ';
        }
      }
    }
    if (_ala.default.strIsEmpty(element.layout)) {
      element.layout = null;
    } else {
      if (!_ala.default.strIsEmpty(element.value)) {
        var layout = JSON.parse(element.value);
        if (!_ala.default.strIsEmpty(layout.options)) {
          element.options = JSON.parse(layout.options);
        }
        element.options = JSON.parse(layout.options);
        element.columns = layout.columns;
        if (!_ala.default.strIsEmpty(element.columns)) {
          element.columns.forEach(function (col) {
            col.option = JSON.parse(col.option);
            col.widgets = _this.filterWidgets(col.widgets);
          });
        } else {
          element.columns = [];
        }
        element.value = null;
      }
    }
    if (element.value !== null) {
      try {
        element.value = JSON.parse(element.value);
      } catch (err) {}
    }
  });
  return widgets;
}

// 当前访问的页面
function getPageInfo(_x4, _x5) {return _getPageInfo.apply(this, arguments);}















// 所有页面
function _getPageInfo() {_getPageInfo = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee3(path, allPageInfo) {var findPageInfo, i, element;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:if (allPageInfo) {_context3.next = 4;break;}_context3.next = 3;return themeAllPage();case 3:allPageInfo = _context3.sent;case 4:findPageInfo = null;if (!(allPageInfo !== undefined && allPageInfo != null)) {_context3.next = 15;break;}i = 0;case 7:if (!(i < allPageInfo.pageList.length)) {_context3.next = 15;break;}element = allPageInfo.pageList[i];if (!(element.path === path)) {_context3.next = 12;break;}findPageInfo = element;return _context3.abrupt("break", 15);case 12:i++;_context3.next = 7;break;case 15:return _context3.abrupt("return", findPageInfo);case 16:case "end":return _context3.stop();}}}, _callee3, this);}));return _getPageInfo.apply(this, arguments);}function themeAllPage() {return _themeAllPage.apply(this, arguments);}function _themeAllPage() {_themeAllPage = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee4() {var para, allPageCacheKey, allPageInfo, isRequest, timestamp;return _regenerator.default.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:
            para = {
              clientType: 'WapH5',
              path: '/index' };

            if (_ala.default.baseConfig().themeId) {
              para = _objectSpread({},
              para, {
                themeId: _ala.default.baseConfig().themeId });

            }
            allPageCacheKey = 'init_allPageInfo_' + _ala.default.baseConfig().version;
            allPageInfo = _ala.default.localGet(allPageCacheKey);
            isRequest = true; // 是否请求
            if (allPageInfo) {
              timestamp = Math.round(new Date().getTime() / 1000);
              if (allPageInfo.lastUpdate > timestamp) {
                isRequest = false;
              }
            }if (!
            isRequest) {_context4.next = 12;break;}_context4.next = 9;return (
              _ala.default.httpGet('Api/Theme/GetAllClientPages', para));case 9:allPageInfo = _context4.sent;
            _ala.default.vuexSet(allPageCacheKey, allPageInfo);
            _ala.default.localSet(allPageCacheKey, allPageInfo);case 12:return _context4.abrupt("return",

            allPageInfo);case 13:case "end":return _context4.stop();}}}, _callee4, this);}));return _themeAllPage.apply(this, arguments);}

/***/ }),
/* 57 */
/*!*************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/time.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.timeAgo = timeAgo; /*
                                                                                                       * 时间为刚刚、几分钟前、几小时前、几天前
                                                                                                       */
function timeAgo(timeDate) {
  var dateTimeStamp = toTimeSpan(timeDate);
  var minute = 1000 * 60;
  var hour = minute * 60;
  var day = hour * 24;
  var now = new Date().getTime();
  var diffValue = now - dateTimeStamp;
  if (diffValue < 0) {
    return timeDate;
  }
  var minC = diffValue / minute;
  var hourC = diffValue / hour;
  var dayC = diffValue / day;
  if (dayC >= 1 && dayC <= 6) {
    return ' ' + parseInt(dayC) + '天前';
  } else if (hourC >= 1 && hourC <= 23) {
    return ' ' + parseInt(hourC) + '小时前';
  } else if (minC >= 1 && minC <= 59) {
    return ' ' + parseInt(minC) + '分钟前';
  } else if (diffValue >= 0 && diffValue <= minute) {
    return '刚刚';
  } else {
    return timeDate;
  }
}

// 将时间转为时间戳
function toTimeSpan(timeDate) {
  var time = new Date(timeDate).getTime();
  return time;
}

/***/ }),
/* 58 */
/*!***********************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/to.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.to = to;exports.toHome = toHome;var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
/*
                                                                                                                                                                                                                                                                              * 页面路由跳转
                                                                                                                                                                                                                                                                              */
function to(url) {
  if (url === '/' || url === '/index' || url === 'index') {
    toHome();
  } else {
    url = convertUrl(url);
    if (url.indexOf('pages/tabbar') > -1) {
      uni.switchTab({
        url: url });

    } else {
      uni.navigateTo({
        url: url });

    }
  }
}

/*
   *  跳转到首页
   */
function toHome() {
  uni.switchTab({
    url: '/pages/tabbar/index' });

}

// url在不同的终端转换
function convertUrl(url) {
  // 查找实际页面
  var regPages = realPages();
  var path = _ala.default.strSubStart(url, '?');
  if (path) {
    for (var i = 0; i < regPages.length; i++) {
      var element = regPages[i];
      if (element.indexOf(path) > -1) {
        if (url.indexOf('pages/') === -1) {
          url = '/pages' + url;
        }
        return url;
      }
    }
  }
  if (url.indexOf('/pages/') > -1) {
    return url;
  }
  if (url.indexOf('pages/') > -1) {
    return '/' + url;
  }
  if (url.indexOf('/tabbar') > -1 || url.indexOf('/pages/index') > -1) {
    return url;
  } else {
    var showSplit;
    var toPagesUrl = url;
    if (url.indexOf('?') > -1) {
      toPagesUrl = url.split('?')[0];
      showSplit = url.split('?')[1];
    }
    var linkSplit = toPagesUrl.split('/');
    url = '/pages/index?path=';
    if (linkSplit.length === 2) {
      url += linkSplit[1];
    } else if (linkSplit.length === 3) {
      url += linkSplit[1] + '_' + linkSplit[2];
    } else if (linkSplit.length === 4) {
      url += linkSplit[1] + '_' + linkSplit[2] + '_' + linkSplit[3];
    }
    if (showSplit) {
      url += "&".concat(showSplit);
    }
    return url;
  }
}

/*
   * 实际存在的页面,在pages中有注册,需要手动维护
   */

function realPages() {
  var pages = ['/pages/user/login', '/pages/user/reg', '/pages/product/show', '/pages/address/index'];
  return pages;
}

/***/ }),
/* 59 */
/*!**************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/toast.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.toast = toast;exports.toastSuccess = toastSuccess;exports.toastWarn = toastWarn;exports.toastBotton = toastBotton;exports.toastCenter = toastCenter;function toast(message) {
  uni.showToast({
    title: message,
    duration: 4000 });

}



function toastSuccess(message) {
  uni.showToast({
    title: message,
    duration: 4000 });

}
function toastWarn(message) {
  uni.showToast({
    title: message,
    icon: 'none',
    duration: 4000 });

}
function toastBotton(message) {
  uni.showToast({
    title: message,
    duration: 4000 });

}
function toastCenter(message) {
  uni.showToast({
    title: message,
    duration: 4000 });

}

/***/ }),
/* 60 */
/*!************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/uni.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.uniSubNVue = uniSubNVue;exports.test = test; /*
                                                                                                                                 * 根据Id获取subNvue,在底层进行封装，减少条件编译代码
                                                                                                                                 * 只支持app
                                                                                                                                 * 功能和 uni.getSubNVueById一样
                                                                                                                                 */

function uniSubNVue(id) {

  return uni.getSubNVueById(id);

}

function test() {
  var test = {
    name: 'test',
    id: 'sss' };

  return test;
}

/***/ }),
/* 61 */
/*!************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/url.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = urlQuery;exports.urlId = urlId;exports.urlType = urlType;exports.urlImage = urlImage;exports.urlToParams = urlToParams;exports.urlToObject = urlToObject;var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
// 获取URL中的参数

function urlQuery(name) {
  var reg = new RegExp('(^|&)' + name + '=([^&]*)(&|$)', 'i');
  var r = window.location.search.substr(1).match(reg);
  if (r != null) {
    return unescape(r[2]);
  } else {
    return '';
  }
}

// 获取URL中的ID
function urlId(route) {
  if (route !== undefined && route.id !== undefined) {
    return route.id;
  } else {
    return 0;
  }
}

// 获取URL中的类
function urlType(route) {
  if (route) {
    if (route.Type !== undefined) {
      return route.Type;
    }
    if (route.type !== undefined) {
      return route.type;
    }
  }
}

// 图片地址处理
function urlImage(src) {
  if (src) {
    if (src.indexOf('://') === -1) {
      src = _ala.default.host + src;
      src = src.replace('//wwwroot', '/wwwroot');
    } else {
      src = src.replace('//wwwroot', '/wwwroot');
    }
  }
  return src;
}

// 将URL转换成对象 结果格式：test=22&wewe=qqw
function urlToParams(data) {
  if (!data || !data.query) {
    return;
  }
  var tempArr = [];
  for (var i in data.query) {
    var key = i;
    var value = data.query[i];
    // encodeURIComponent(data.query[i])
    tempArr.push(key + '=' + value);
  }
  var urlParamsStr = tempArr.join('&');
  if (urlParamsStr) {
    urlParamsStr = '?' + urlParamsStr;
  }
  return urlParamsStr;
}

// 将url参数解析为一个对象
function urlToObject(route) {
  if (_ala.default.client() === 'WapH5' || _ala.default.client() === 'WeChat') {
    var str = route.fullPath;
    var index = str.indexOf('?', 0);
    str = str.substring(index + 1, str.length);
    var result = {};
    var temp = str.split('&');
    for (var i = 0; i < temp.length; i++) {
      var temp2 = temp[i].split('=');
      result[temp2[0]] = temp2[1];
    }
  } else {
    var result = {};
    for (var i in route) {
      result[i] = route[i];
    }
  }
  return result;
}

/***/ }),
/* 62 */
/*!*************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/user.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.user = user;exports.userLogin = userLogin;exports.userReg = userReg;exports.userLogout = userLogout;exports.userIsLogin = userIsLogin;exports.userId = userId;exports.userName = userName;exports.userToLoginPage = userToLoginPage;exports.userLoginAfterTo = userLoginAfterTo;exports.userCheckLogin = userCheckLogin;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 31));var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));
var _crypto = _interopRequireDefault(__webpack_require__(/*! @/service/utils/crypto */ 42));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}

// 登陆用户
function user() {
  return userInfo();
}

// 登录
function userLogin(_x) {return _userLogin.apply(this, arguments);}























































// 注册
function _userLogin() {_userLogin = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(model) {var response, userInfo, openId;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:if (!(model.username === '' || model.username === undefined)) {_context.next = 3;break;}uni.showToast({ icon: 'none', title: '账号不能为空' });return _context.abrupt("return");case 3:if (!(model.password === '' || model.password === undefined)) {_context.next = 6;break;}uni.showToast({ icon: 'none', title: '密码不能为空' });return _context.abrupt("return");case 6:if (!(model.username.length < 3)) {_context.next = 9;break;}uni.showToast({ icon: 'none', title: '账号最短为 3 个字符' });return _context.abrupt("return");case 9:if (!(model.password.length < 6)) {_context.next = 12;break;}uni.showToast({ icon: 'none', title: '密码最短为六位数' });return _context.abrupt("return");case 12:_ala.default.localRemove(userKey());if (_ala.default.localGet('wechat_openId') !== undefined) {model.openId = _ala.default.localGet('wechat_openId');}_context.next = 16;return _ala.default.httpPost('Api/Member/Login', model);case 16:response = _context.sent;if (response) {userInfo = _crypto.default.encrypt(JSON.stringify({ userName: model.username, password: model.password }));_ala.default.localSet('user_info', userInfo);if (response) {setUser(response);_ala.default.toastSuccess('登录成功');openId = response.openId;if (_ala.default.strLength(openId) >= 12) {_ala.default.localSet('wechat_openId', openId);}userLoginAfterTo();}} else {_ala.default.toastWarn(response.message);}_ala.default.localRemove('wechat_logincount');case 19:case "end":return _context.stop();}}}, _callee, this);}));return _userLogin.apply(this, arguments);}function
userReg(_x2) {return _userReg.apply(this, arguments);}























// 退出登录
function _userReg() {_userReg = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2(model) {var response;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:if (!_ala.default.strIsEmpty(model.password) && model.password.length < 6) {uni.showToast({ icon: 'none', title: '密码最短为六位数' });}if (_ala.default.localGet('wechat_openId') !== undefined) {model.openId = _ala.default.localGet('wechat_openId');}uni.showLoading({ title: '加载中..' });_context2.next = 5;return _ala.default.httpPost('api/Member/Reg', model);case 5:response = _context2.sent;if (response) {_ala.default.toastSuccess('注册成功');setUser(response);uni.hideLoading();_ala.default.to('/');} else {_ala.default.toastWarn(response.message);}case 7:case "end":return _context2.stop();}}}, _callee2, this);}));return _userReg.apply(this, arguments);}function userLogout() {return _userLogout.apply(this, arguments);}

















// 是否登录
function _userLogout() {_userLogout = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee3() {return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:uni.showModal({ title: '退出登录', showCancel: true, content: '您确定要确认退出登录?', success: function success(res) {if (res.confirm) {_ala.default.localRemove(userKey());_ala.default.localRemove('user_info');_ala.default.localRemove('user_token');_ala.default.localRemove('shop_order_select_address');_ala.default.vuexSet('loginUser', null);_ala.default.to('/pages/tabbar/index');}} });case 1:case "end":return _context3.stop();}}}, _callee3, this);}));return _userLogout.apply(this, arguments);}function userIsLogin() {
  var user = userInfo();
  if (!user) {
    return false;
  } else {
    return true;
  }
}
// 用户Id
function userId() {
  var loginUser = user();
  if (loginUser === undefined || loginUser === null) {
    return 0;
  }
  return loginUser.id;
}
// 用户名
function userName() {
  if (userInfo() === null) {
    return '';
  }
  return userInfo().userName;
}
// 当前登录用户

// 将用户信息写入缓存
function setUser(user) {
  if (_ala.default.strIsEmpty(user)) {
    _ala.default.toastWarn('用户登录失败');
    return null;
  }
  if (_ala.default.strIsEmpty(user.token)) {
    _ala.default.toastWarn('用户登录失败');
    return null;
  }
  if (user.token < 12) {
    _ala.default.toastWarn('用户登录失败');
    return null;
  }
  var userToken;
  userToken = user.token;
  uni.setStorageSync('user_token', user.token);
  _ala.default.vuexSet('loginUser', user);
  var userText = _crypto.default.encrypt(JSON.stringify(user), userToken);
  uni.setStorageSync(userKey(), userText);
}

function userKey() {
  return _crypto.default.userKey();
}

// 跳转到登录页面
function userToLoginPage() {
  _ala.default.toastWarn('请先登录');
  _ala.default.to('/user/login');
}

// 登录成功后跳转
function userLoginAfterTo() {
  var userIndex = '/pages/tabbar/user';
  if (userIsLogin()) {
    _ala.default.to(userIndex);
    // // 跳转到上一级页面
    // if (getCurrentPages().length === 1) {
    // 	// 如果直接进入登录页面，跳转到会员中心
    // 	ala.to(userIndex)
    // } else {
    // 	ala.back()
    // }
  }
}
// 检查是否需要登录，如果需要登录则跳转到登录页面，登录成功以后，返回到上一级页面
function userCheckLogin(option) {
  if (!userIsLogin()) {
    if (option) {
      var usercode = option.usercode;
      if (!_ala.default.strIsEmpty(usercode)) {
        // url 包含推荐码时跳转
        _ala.default.to('/user/reg');
      }
    }
    uni.showModal({
      title: '未登录',
      content: '请先登录',
      success: function success(res) {
        if (res.confirm) {
          _ala.default.to('/user/login');
        } else if (res.cancel) {
          uni.reLaunch({
            url: '/pages/tabbar/index' });

        }
      } });

  }
  return true;
}

function userInfo() {
  var user = _ala.default.vuexLocalGet('loginUser');
  if (user) {
    return user;
  } else {
    var user = _ala.default.localGet(userKey());
    if (user) {
      var loginUser = JSON.parse(_crypto.default.decrypt(user, _ala.default.localGet('user_token')));
      _ala.default.vuexSet('loginUser', loginUser);
    } else {
      return;
    }
  }
  if (user) {
    // 对加密数据进行base64处理,
    // 将数据先base64还原，再转为utf8数据,再解密数据
    return JSON.parse(_crypto.default.decrypt(_crypto.default.utf8(_crypto.default.base64(user)), _ala.default.localGet('user_token')));
  }
  if (!user) {
    return null;
  }
  return user;
}
// 微信公众号登录
function weixinPublogin(data) {
  if (data !== undefined) {
    var session = data.session;
    if (session !== undefined) {
      var openId = data.session.openid;
      if (openId !== undefined) {
        _ala.default.localSet('wechat_openId', openId);
        // 登录
        if (data.user !== undefined) {
          // setUser(data.user)
          //  ala.toastSuccess('登录成功')
          // ala.log(data.user.username + '通过微信公众号号登录成功,openId' + openId)
        }
      }
    }
  }
}

/***/ }),
/* 63 */
/*!*************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/ala/vuex.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.vuexSet = vuexSet;exports.vuexGet = vuexGet;exports.vuexLocalGet = vuexLocalGet;exports.vuexLocalSet = vuexLocalSet;var _store = _interopRequireDefault(__webpack_require__(/*! @/service/store */ 51));
var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function vuexSet(name, value) {
  _store.default.state[name] = value;
}
function vuexGet(name) {
  return _store.default.state[name];
}
function vuexLocalGet(name) {
  var data = vuexGet(name);
  if (data) {
    return data;
  } else {
    data = _ala.default.localGet(name);
    vuexSet(name, data);
    return data;
  }
}
function vuexLocalSet(name, value) {
  vuexSet(name, value);
  _ala.default.localSet(name, value);
}

/***/ }),
/* 64 */
/*!*************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/api/tool sync \.api.js$ ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./comment.api.js": 65,
	"./favorite.api.js": 66,
	"./qrcode.api.js": 67,
	"./share.api.js": 71,
	"./thumbsUp.api.js": 72
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) { // check for number or string
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return id;
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 64;

/***/ }),
/* 65 */
/*!*************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/api/tool/comment.api.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.comment = comment;exports.commentReply = commentReply;exports.commentUp = commentUp;exports.commentReplyUp = commentReplyUp;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 31));var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala.js */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}

/* 评论 某个实体
type:类型 比如produt, order等
content: 评论内容
id: 当前实体的Id，比如商品Id，素材Id等
function
comment(_x, _x2, _x3) {return _comment.apply(this, arguments);}













/*
                                                                 *评论回复
                                                                 *commentid:评论id
                                                                 *content:回复内容
                                                                 */function _comment() {_comment = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(type, id, content) {var para, result;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:para = { entityId: id, type: type, content: content, user: _ala.default.user() };if (!para.user) {_ala.default.userToLoginPage();}_context.next = 4;return _ala.default.httpPost('Api/Comments/Comment', para);case 4:result = _context.sent;return _context.abrupt("return", result);case 6:case "end":return _context.stop();}}}, _callee, this);}));return _comment.apply(this, arguments);}function
commentReply(_x4, _x5, _x6) {return _commentReply.apply(this, arguments);}












/*
                                                                            *id:点赞的评论id
                                                                            * isup:true 点赞,false 取消点赞
                                                                            */function _commentReply() {_commentReply = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2(type, commentid, content) {var para, response;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:para = { commentId: commentid, content: content, user: _ala.default.user() };if (!para.user) {_ala.default.userToLoginPage();}_context2.next = 4;return _ala.default.httpPost('Api/Comments/CommentReply', para);case 4:response = _context2.sent;return _context2.abrupt("return", response);case 6:case "end":return _context2.stop();}}}, _callee2, this);}));return _commentReply.apply(this, arguments);}function
commentUp(_x7, _x8, _x9) {return _commentUp.apply(this, arguments);}












/**
                                                                      * id:点赞的回复id
                                                                      * isup:true 点赞 false 取消点赞
                                                                      */function _commentUp() {_commentUp = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee3(type, id, isup) {var para, response;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:para = { entity: id, isUp: isup, user: _ala.default.user() };if (!para.user()) {_ala.default.userToLoginPage();}_context3.next = 4;return _ala.default.httpPost('Api/Comments/CommentUp', para);case 4:response = _context3.sent;return _context3.abrupt("return", response);case 6:case "end":return _context3.stop();}}}, _callee3, this);}));return _commentUp.apply(this, arguments);}function
commentReplyUp(_x10, _x11, _x12) {return _commentReplyUp.apply(this, arguments);}function _commentReplyUp() {_commentReplyUp = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee4(type, id, isup) {var para, response;return _regenerator.default.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:
            para = {
              entity: type,
              id: id,
              isUp: isup,
              user: _ala.default.user() };

            if (!para.user) {
              _ala.default.userToLoginPage();
            }_context4.next = 4;return (
              _ala.default.httpPost('Api/Comments/CommentReplyUp', para));case 4:response = _context4.sent;return _context4.abrupt("return",
            response);case 6:case "end":return _context4.stop();}}}, _callee4, this);}));return _commentReplyUp.apply(this, arguments);}

/***/ }),
/* 66 */
/*!**************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/api/tool/favorite.api.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.favoriteStatus = favoriteStatus;exports.favoriteAdd = favoriteAdd;exports.favoriteCancel = favoriteCancel;var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala.js */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

/*
                                                                                                                                                                                                                                                                                                                                                           * 收藏状态，已经收藏返回true，没有收藏返回false
                                                                                                                                                                                                                                                                                                                                                           * 用来判断收藏按钮的收藏转态
                                                                                                                                                                                                                                                                                                                                                           * @para type：实体类型：比如商品Product,订单:Order,用户:User
                                                                                                                                                                                                                                                                                                                                                           * @para id 实体Id：比如商品Id，订单Id等
                                                                                                                                                                                                                                                                                                                                                           */
function favoriteStatus(type, id) {
  var para = {
    key: type,
    entityId: id,
    user: _ala.default.user() };

  if (!para.user) {
    _ala.default.userToLoginPage();
  }

  var result = _ala.default.httpGet('Api/Favorite/Status', para);
  return result;
}

/*
   * 添加收藏
   * @para type：实体类型：比如商品Product,订单:Order,用户:User
   * @para id 实体Id：比如商品Id，订单Id等
   */
function favoriteAdd(type, id) {
  var para = {
    key: type,
    entityId: id,
    user: _ala.default.user() };

  if (!para.user) {
    _ala.default.userToLoginPage();
  }
  var result = _ala.default.httpPost('Api/Favorite/Add', para);
  return result;
}

/*
   * 取消收藏
   * @para type：实体类型：比如商品Product,订单:Order,用户:User
   * @para id 实体Id：比如商品Id，订单Id等
   */
function favoriteCancel(type, id) {
  var para = {
    key: type,
    entityId: id,
    user: _ala.default.user() };

  if (!para.user) {
    _ala.default.userToLoginPage();
  }
  var result = _ala.default.httpPost('Api/Favorite/Cancel', para);
  return result;
}

/***/ }),
/* 67 */
/*!************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/api/tool/qrcode.api.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.qrcode = qrcode;exports.createQrCode = createQrCode;exports.getCanvas = getCanvas;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 31));var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));
var _QSSharePoster = _interopRequireDefault(__webpack_require__(/*! ./qrcode/QS-SharePoster.js */ 68));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}
/*
根据二维码设置Id和实体对象id生成会员专属二维码
id: 二维码设置Id
entityId: 实体对象id,比如商品Id，会员Id，视频Id，教程ID，文章ID
function
qrcode(_x, _x2) {return _qrcode.apply(this, arguments);}










/*
                                                          * 根据服务设置信息生成二维码
                                                          */function _qrcode() {_qrcode = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2(id, entityId) {var para, result;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:para = { id: id, entityId: entityId };_context2.next = 3;return _ala.default.httpPost('Api/QrCode/Get', para);case 3:result = _context2.sent;return _context2.abrupt("return", result);case 5:case "end":return _context2.stop();}}}, _callee2, this);}));return _qrcode.apply(this, arguments);}function
createQrCode(_x3, _x4) {return _createQrCode.apply(this, arguments);}

















/*
                                                                       * 根据设置画二维码
                                                                       */function _createQrCode() {_createQrCode = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee3(jsThis, data) {var list, para, response;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:list = [];data.qrcodeList.forEach(function (element) {if (element.Type === 1) {list.push(drawQrCode(element));}if (element.Type === 2) {list.push(drawQrText(element));}if (element.Type === 3) {drawQrImage(element);}});para = getCanvas(jsThis, list, data);_context3.next = 5;return _QSSharePoster.default.getSharePoster(para);case 5:response = _context3.sent;return _context3.abrupt("return", response);case 7:case "end":return _context3.stop();}}}, _callee3, this);}));return _createQrCode.apply(this, arguments);}
function drawQrCode(setting) {
  return {
    type: 'qrcode',
    text: setting.Text,
    alpha: 1,
    dx: setting.X,
    dy: setting.Y,
    size: setting.Size };

}

/*
   * 根据设置画图片
   */
function drawQrImage(setting) {
  return {
    type: 'image',
    url: setting.Path, // 图片位置
    alpha: 1,
    dx: setting.X,
    dy: setting.Y,
    infoCallBack: function infoCallBack(imageInfo) {
      return {
        dWidth: setting.Width,
        dHeight: setting.Height };

    } };

}

/*
   * 根据设置画文字
   */
function drawQrText(setting) {
  return {
    type: 'text', // 文本类型
    text: setting.Text, // 文本内容
    alpha: 1, // 设置透明度
    fontStyle: 'italic', // 字体类型
    size: setting.Size, // 字体大小
    color: setting.Color, // 字体颜色
    textAlign: 'left', // 文字显示位置
    textBaseline: 'middle', // 大小设置
    dx: setting.X, // 位置信息
    dy: setting.Y // 位置信息
  };
}

/*
   * 创建画布实例
   */
// eslint-disable-next-line
/* eslint-disable */
function getCanvas(jsThis, list, data) {
  return {
    _this: jsThis,
    type: 'testShareType',
    posterCanvasId: 'default_PosterCanvasId',
    delayTimeScale: 20,
    backgroundImage: data.backgroundUrl,
    drawArray: function () {var _drawArray = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(_ref) {var bgObj, type, bgScale;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:bgObj = _ref.bgObj, type = _ref.type, bgScale = _ref.bgScale;return _context.abrupt("return",
                new Promise(function (rs, rj) {
                  rs(_toConsumableArray(list));
                }));case 2:case "end":return _context.stop();}}}, _callee, this);}));function drawArray(_x5) {return _drawArray.apply(this, arguments);}return drawArray;}(),

    setCanvasWH: function setCanvasWH(_ref2) {var bgObj = _ref2.bgObj,type = _ref2.type,bgScale = _ref2.bgScale;
      jsThis.poster = bgObj;
    } };

}

// {
//          	type: 'qrcode',
//          	text: '您好，我是取舍',
//          	size: bgObj.width * 0.3,
//          	dx: 10,
//          	dy: 10
//          }

/***/ }),
/* 68 */
/*!***********************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/api/tool/qrcode/QS-SharePoster.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 31));


var _app2 = _interopRequireDefault(__webpack_require__(/*! ./app.js */ 69));
var _QRCodeAlg = _interopRequireDefault(__webpack_require__(/*! ./QRCodeAlg.js */ 70));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError("Invalid attempt to spread non-iterable instance");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}
var ShreUserPosterBackgroundKey = 'ShrePosterBackground_'; // 背景图片缓存名称前缀
var idKey = 'QSSHAREPOSTER_IDKEY'; // drawArray自动生成的idkey
var isMp = false;




function getSharePoster(obj) {
  return new Promise( /*#__PURE__*/function () {var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee(resolve, reject) {var result1, result2;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.prev = 0;_context.next = 3;return (

                returnPromise(obj));case 3:result1 = _context.sent;
              resolve(result1);_context.next = 21;break;case 7:_context.prev = 7;_context.t0 = _context["catch"](0);

              removePosterStorage(obj.type);_context.prev = 10;

              _app2.default.log('------------清除缓存后, 开始第二次尝试------------');_context.next = 14;return (
                returnPromise(obj));case 14:result2 = _context.sent;
              resolve(result2);_context.next = 21;break;case 18:_context.prev = 18;_context.t1 = _context["catch"](10);

              reject(_context.t1);case 21:case "end":return _context.stop();}}}, _callee, this, [[0, 7], [10, 18]]);}));return function (_x, _x2) {return _ref.apply(this, arguments);};}());



}

function returnPromise(obj) {var
  type = obj.type,formData = obj.formData,background = obj.background,posterCanvasId = obj.posterCanvasId,backgroundImage = obj.backgroundImage,reserve = obj.reserve,textArray = obj.textArray,drawArray = obj.drawArray,qrCodeArray = obj.qrCodeArray,imagesArray = obj.imagesArray,setCanvasWH = obj.setCanvasWH,setCanvasToTempFilePath = obj.setCanvasToTempFilePath,setDraw = obj.setDraw,bgScale = obj.bgScale,Context = obj.Context,_this = obj._this,delayTimeScale = obj.delayTimeScale,drawDelayTime = obj.drawDelayTime;
  return new Promise( /*#__PURE__*/function () {var _ref2 = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee2(rs, rj) {var bgObj, params, i, hasAllInfoCallback, _i, drawArrayItem, newData, drawArray_copy, _i2, item, _newData, item_idKey, poster;return _regenerator.default.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:_context2.prev = 0;

              _app2.default.showLoading('正在准备海报数据');
              if (!Context) {
                _app2.default.log('没有画布对象,创建画布对象');
                Context = uni.createCanvasContext(posterCanvasId, _this || null);
              }if (!(

              background && background.width && background.height)) {_context2.next = 7;break;}
              bgObj = background;_context2.next = 10;break;case 7:_context2.next = 9;return (

                getShreUserPosterBackground({
                  backgroundImage: backgroundImage,
                  type: type,
                  formData: formData }));case 9:bgObj = _context2.sent;case 10:


              // 为了ios 缩放一些
              bgScale = bgScale || 0.75;
              bgObj.width = bgObj.width * bgScale;
              bgObj.height = bgObj.height * bgScale;

              _app2.default.log('获取背景图信息对象成功:' + JSON.stringify(bgObj));
              params = {
                bgObj: bgObj,
                type: type,
                bgScale: bgScale };

              if (setCanvasWH && typeof setCanvasWH === 'function') setCanvasWH(params);if (!
              imagesArray) {_context2.next = 24;break;}
              if (typeof imagesArray === 'function') {
                imagesArray = imagesArray(params);
              }
              _app2.default.showLoading('正在生成需绘制图片的临时路径');
              _app2.default.log('准备设置图片');_context2.next = 22;return (
                setImage(imagesArray));case 22:imagesArray = _context2.sent;
              _app2.default.hideLoading();case 24:

              if (textArray) {
                if (typeof textArray === 'function') {
                  textArray = textArray(params);
                }
                textArray = setText(Context, textArray);
              }if (!
              qrCodeArray) {_context2.next = 39;break;}
              if (typeof qrCodeArray === 'function') {
                qrCodeArray = qrCodeArray(params);
              }
              _app2.default.showLoading('正在生成需绘制图片的临时路径');
              i = 0;case 29:if (!(i < qrCodeArray.length)) {_context2.next = 38;break;}
              _app2.default.log(i);if (!
              qrCodeArray[i].image) {_context2.next = 35;break;}_context2.next = 34;return (
                _app2.default.downloadFile_PromiseFc(qrCodeArray[i].image));case 34:qrCodeArray[i].image = _context2.sent;case 35:i++;_context2.next = 29;break;case 38:


              _app2.default.hideLoading();case 39:if (!

              drawArray) {_context2.next = 93;break;}
              if (typeof drawArray === 'function') {
                drawArray = drawArray(params);
              }if (!
              _app2.default.isPromise(drawArray)) {_context2.next = 45;break;}_context2.next = 44;return (
                drawArray);case 44:drawArray = _context2.sent;case 45:if (!(


              _app2.default.isArray(drawArray) && drawArray.length > 0)) {_context2.next = 93;break;}
              hasAllInfoCallback = false;
              _i = 0;case 48:if (!(_i < drawArray.length)) {_context2.next = 75;break;}
              drawArrayItem = drawArray[_i];
              if (_app2.default.isFn(drawArrayItem.allInfoCallback) && !hasAllInfoCallback) hasAllInfoCallback = true;
              drawArrayItem[idKey] = _i;
              newData = void 0;_context2.t0 =
              drawArrayItem.type;_context2.next = _context2.t0 ===
              'image' ? 56 : _context2.t0 ===


              'text' ? 60 : _context2.t0 ===


              'qrcode' ? 62 : _context2.t0 ===






              'custom' ? 68 : 69;break;case 56:_context2.next = 58;return setImage(drawArrayItem);case 58:newData = _context2.sent;return _context2.abrupt("break", 71);case 60:newData = setText(Context, drawArrayItem);return _context2.abrupt("break", 71);case 62:if (!drawArrayItem.image) {_context2.next = 67;break;}_context2.next = 65;return _app2.default.downloadFile_PromiseFc(drawArrayItem.image);case 65:_context2.t1 = _context2.sent;newData = { image: _context2.t1 };case 67:return _context2.abrupt("break", 71);case 68:return _context2.abrupt("break", 71);case 69:


              _app2.default.log('未识别的类型');return _context2.abrupt("break", 71);case 71:


              if (newData && _app2.default.isObject(newData)) {
                drawArray[_i] = _objectSpread({}, drawArrayItem, newData);
              }case 72:_i++;_context2.next = 48;break;case 75:if (!


              hasAllInfoCallback) {_context2.next = 93;break;}
              _app2.default.log('----------------hasAllInfoCallback----------------');
              drawArray_copy = _toConsumableArray(drawArray);
              drawArray_copy.sort(function (a, b) {
                var a_serialNum = !_app2.default.isUndef(a.serialNum) && !_app2.default.isNull(a.serialNum) ? Number(a.serialNum) : Number.NEGATIVE_INFINITY;
                var b_serialNum = !_app2.default.isUndef(b.serialNum) && !_app2.default.isNull(b.serialNum) ? Number(b.serialNum) : Number.NEGATIVE_INFINITY;
                return a_serialNum - b_serialNum;
              });

              _i2 = 0;case 80:if (!(_i2 < drawArray_copy.length)) {_context2.next = 93;break;}
              item = _objectSpread({}, drawArray_copy[_i2]);if (!
              _app2.default.isFn(item.allInfoCallback)) {_context2.next = 90;break;}
              _newData = item.allInfoCallback({
                drawArray: drawArray_copy });if (!

              _app2.default.isPromise(_newData)) {_context2.next = 88;break;}_context2.next = 87;return _newData;case 87:_newData = _context2.sent;case 88:
              item_idKey = item[idKey];
              if (!_app2.default.isUndef(item_idKey)) {
                drawArray[item[idKey]] = _objectSpread({}, item, _newData);
              } else {
              }case 90:_i2++;_context2.next = 80;break;case 93:_context2.next = 95;return (





                drawShareImage({
                  Context: Context,
                  type: type,
                  posterCanvasId: posterCanvasId,
                  reserve: reserve,
                  drawArray: drawArray,
                  textArray: textArray,
                  imagesArray: imagesArray,
                  bgObj: bgObj,
                  qrCodeArray: qrCodeArray,
                  setCanvasToTempFilePath: setCanvasToTempFilePath,
                  setDraw: setDraw,
                  bgScale: bgScale,
                  _this: _this,
                  delayTimeScale: delayTimeScale,
                  drawDelayTime: drawDelayTime }));case 95:poster = _context2.sent;

              _app2.default.hideLoading();
              rs({
                bgObj: bgObj,
                poster: poster,
                type: type });_context2.next = 103;break;case 100:_context2.prev = 100;_context2.t2 = _context2["catch"](0);


              // TODO handle the exception
              rj(_context2.t2);case 103:case "end":return _context2.stop();}}}, _callee2, this, [[0, 100]]);}));return function (_x3, _x4) {return _ref2.apply(this, arguments);};}());


}

function drawShareImage(obj) {
  // 绘制海报方法
  var Context = obj.Context,type = obj.type,posterCanvasId = obj.posterCanvasId,reserve = obj.reserve,bgObj = obj.bgObj,drawArray = obj.drawArray,textArray = obj.textArray,qrCodeArray = obj.qrCodeArray,imagesArray = obj.imagesArray,setCanvasToTempFilePath = obj.setCanvasToTempFilePath,setDraw = obj.setDraw,bgScale = obj.bgScale,_this = obj._this,delayTimeScale = obj.delayTimeScale,drawDelayTime = obj.drawDelayTime;
  var params = {
    Context: Context,
    bgObj: bgObj,
    type: type,
    bgScale: bgScale };

  delayTimeScale = delayTimeScale !== undefined ? delayTimeScale : 15;
  drawDelayTime = drawDelayTime !== undefined ? drawDelayTime : 100;
  return new Promise(function (rs, rj) {
    try {
      // _app.showLoading('正在绘制海报')
      _app2.default.log('背景对象:' + JSON.stringify(bgObj));
      if (bgObj && bgObj.path) {
        // _app.log('背景有图片路径')
        Context.drawImage(bgObj.path, 0, 0, bgObj.width, bgObj.height);
      } else {
        // _app.log('背景没有图片路径')
        if (bgObj.backgroundColor) {
          // _app.log('背景有背景颜色:' + bgObj.backgroundColor)
          Context.setFillStyle(bgObj.backgroundColor);
          Context.fillRect(0, 0, bgObj.width, bgObj.height);
        } else {
          // _app.log('背景没有背景颜色')
        }
      }

      // _app.showLoading('绘制图片')
      if (imagesArray && imagesArray.length > 0) {
        drawImage(Context, imagesArray);
      }

      // _app.showLoading('绘制自定义内容')
      if (setDraw && typeof setDraw === 'function') setDraw(params);

      // _app.showLoading('绘制文本')
      if (textArray && textArray.length > 0) {
        drawText(Context, textArray, bgObj);
      }

      // _app.showLoading('绘制二维码')
      if (qrCodeArray && qrCodeArray.length > 0) {
        for (var i = 0; i < qrCodeArray.length; i++) {
          drawQrCode(Context, qrCodeArray[i]);
        }
      }

      // _app.showLoading('绘制可控层级序列')
      if (drawArray && drawArray.length > 0) {
        for (var _i3 = 0; _i3 < drawArray.length; _i3++) {
          var drawArrayItem = drawArray[_i3];
          // _app.log('绘制可控层级序列, drawArrayItem:' + JSON.stringify(drawArrayItem))
          switch (drawArrayItem.type) {
            case 'image':
              // _app.log('绘制可控层级序列, 绘制图片')
              drawImage(Context, drawArrayItem);
              break;
            case 'text':
              // _app.log('绘制可控层级序列, 绘制文本')
              drawText(Context, drawArrayItem, bgObj);
              break;
            case 'qrcode':
              // _app.log('绘制可控层级序列, 绘制二维码')
              drawQrCode(Context, drawArrayItem);
              break;
            case 'custom':
              // _app.log('绘制可控层级序列, 绘制自定义内容')
              if (drawArrayItem.setDraw && typeof drawArrayItem.setDraw === 'function') {
                drawArrayItem.setDraw(Context);
              }
              break;
            default:
              // _app.log('未识别的类型')
              break;}

        }
      }
      _app2.default.showLoading('绘制中');
      setTimeout(function () {
        Context.draw(typeof reserve === 'boolean' ? reserve : false, function () {
          var setObj = setCanvasToTempFilePath || {};
          if (setObj && typeof setObj === 'function') {
            setObj = setCanvasToTempFilePath(bgObj, type);
          }
          var canvasToTempFilePathFn;









          var data = _objectSpread({
            x: 0,
            y: 0,
            width: bgObj.width,
            height: bgObj.height,
            destWidth: bgObj.width * 2, // 若H5使用这里请不要乘以二
            destHeight: bgObj.height * 2, // 若H5使用这里请不要乘以二
            quality: 0.8,
            fileType: 'jpg' },
          setObj);

          // _app.log('canvasToTempFilePath的data对象:' + JSON.stringify(data))
          canvasToTempFilePathFn = function canvasToTempFilePathFn() {
            var toTempFilePathObj = _objectSpread({},

            data, {
              canvasId: posterCanvasId,
              success: function success(res) {
                _app2.default.hideLoading();
                rs(res);
              },
              fail: function fail(err) {
                _app2.default.hideLoading();
                // _app.log('输出图片失败:' + JSON.stringify(err))
                rj('输出图片失败:' + JSON.stringify(err));
              } });

            uni.canvasToTempFilePath(toTempFilePathObj, _this || null);
          };

          var delayTime = 0;
          if (qrCodeArray) {
            qrCodeArray.forEach(function (item) {
              if (item.text) {
                delayTime += Number(item.text.length);
              }
            });
          }
          if (imagesArray) {
            imagesArray.forEach(function () {
              delayTime += delayTimeScale;
            });
          }
          if (textArray) {
            textArray.forEach(function () {
              delayTime += delayTimeScale;
            });
          }
          if (drawArray) {
            drawArray.forEach(function (item) {
              switch (item.type) {
                case 'text':
                  if (item.text) {
                    delayTime += item.text.length;
                  }
                  break;
                default:
                  delayTime += delayTimeScale;
                  break;}

            });
          }
          // _app.log('延时系数:' + delayTimeScale)
          // _app.log('总计延时:' + delayTime)
          setTimeout(canvasToTempFilePathFn, delayTime);
        });
      }, drawDelayTime);
    } catch (e) {
      // TODO handle the exception
      _app2.default.hideLoading();
      rj(e);
    }
  });
}

// export
function setText(Context, texts) {
  // 设置文本数据
  // _app.log('进入设置文字方法, texts:' + JSON.stringify(texts))
  if (texts && _app2.default.isArray(texts)) {
    // _app.log('texts是数组')
    if (texts.length > 0) {
      for (var i = 0; i < texts.length; i++) {
        // _app.log('字符串信息-初始化之前:' + JSON.stringify(texts[i]))
        texts[i] = setTextFn(Context, texts[i]);
      }
    }
  } else {
    // _app.log('texts是对象')
    texts = setTextFn(Context, texts);
  }
  // _app.log('返回texts:' + JSON.stringify(texts))
  return texts;
}

function setTextFn(Context, textItem) {
  // _app.log('进入设置文字方法, textItem:' + JSON.stringify(textItem))
  if (_app2.default.isNotNull_string(textItem.text)) {
    textItem.text = String(textItem.text);
    textItem.alpha = textItem.alpha !== undefined ? textItem.alpha : 1;
    textItem.color = textItem.color || 'black';
    textItem.size = textItem.size !== undefined ? textItem.size : 10;
    textItem.textAlign = textItem.textAlign || 'left';
    textItem.textBaseline = textItem.textBaseline || 'middle';
    textItem.dx = textItem.dx || 0;
    textItem.dy = textItem.dy || 0;
    textItem.size = Math.ceil(Number(textItem.size));
    // _app.log('字符串信息-初始化默认值后:' + JSON.stringify(textItem))
    var textLength = countTextLength(Context, {
      text: textItem.text,
      size: textItem.size });

    // _app.log('字符串信息-初始化时的文本长度:' + textLength)
    var infoCallBackObj = {};
    if (textItem.infoCallBack && typeof textItem.infoCallBack === 'function') {
      infoCallBackObj = textItem.infoCallBack(textLength);
    }
    textItem = _objectSpread({},
    textItem, {
      textLength: textLength },
    infoCallBackObj);

    // _app.log('字符串信息-infoCallBack后:' + JSON.stringify(textItem))
  }
  return textItem;
}

function countTextLength(Context, obj) {
  // _app.log('计算文字长度, obj:' + JSON.stringify(obj))
  var text = obj.text,size = obj.size;
  Context.setFontSize(size);
  var textLength;
  /* try{
                  textLength = Context.measureText(text); // 官方文档说 App端自定义组件编译模式暂时不可用measureText方法
                  }catch(e){
                  //TODO handle the exception
                  textLength = {};
                  } */
  textLength = {};
  // _app.log('measureText计算文字长度, textLength:' + JSON.stringify(textLength))
  textLength = textLength && textLength.width ? textLength.width : 0;
  if (!textLength) {
    var l = 0;
    for (var j = 0; j < text.length; j++) {
      var t = text.substr(j, 1);
      var countL = countStrLength(t);
      // _app.log('计算文字宽度系数:' + countL)
      l += countL;
    }
    // _app.log('文字宽度总系数:' + l)
    textLength = l * size;
  }
  return textLength;
}

// 计算字符长度系数
function countStrLength(t) {
  var l;
  if (/a/.test(t)) {
    l = 0.552734375;
  } else if (/b/.test(t)) {
    l = 0.638671875;
  } else if (/c/.test(t)) {
    l = 0.50146484375;
  } else if (/d/.test(t)) {
    l = 0.6396484375;
  } else if (/e/.test(t)) {
    l = 0.5673828125;
  } else if (/f/.test(t)) {
    l = 0.3466796875;
  } else if (/g/.test(t)) {
    l = 0.6396484375;
  } else if (/h/.test(t)) {
    l = 0.61572265625;
  } else if (/i/.test(t)) {
    l = 0.26611328125;
  } else if (/j/.test(t)) {
    l = 0.26708984375;
  } else if (/k/.test(t)) {
    l = 0.54443359375;
  } else if (/l/.test(t)) {
    l = 0.26611328125;
  } else if (/m/.test(t)) {
    l = 0.93701171875;
  } else if (/n/.test(t)) {
    l = 0.6162109375;
  } else if (/o/.test(t)) {
    l = 0.6357421875;
  } else if (/p/.test(t)) {
    l = 0.638671875;
  } else if (/q/.test(t)) {
    l = 0.6396484375;
  } else if (/r/.test(t)) {
    l = 0.3818359375;
  } else if (/s/.test(t)) {
    l = 0.462890625;
  } else if (/t/.test(t)) {
    l = 0.37255859375;
  } else if (/u/.test(t)) {
    l = 0.6162109375;
  } else if (/v/.test(t)) {
    l = 0.52490234375;
  } else if (/w/.test(t)) {
    l = 0.78955078125;
  } else if (/x/.test(t)) {
    l = 0.5068359375;
  } else if (/y/.test(t)) {
    l = 0.529296875;
  } else if (/z/.test(t)) {
    l = 0.49169921875;
  } else if (/A/.test(t)) {
    l = 0.70361328125;
  } else if (/B/.test(t)) {
    l = 0.62744140625;
  } else if (/C/.test(t)) {
    l = 0.6689453125;
  } else if (/D/.test(t)) {
    l = 0.76171875;
  } else if (/E/.test(t)) {
    l = 0.5498046875;
  } else if (/F/.test(t)) {
    l = 0.53125;
  } else if (/G/.test(t)) {
    l = 0.74365234375;
  } else if (/H/.test(t)) {
    l = 0.7734375;
  } else if (/I/.test(t)) {
    l = 0.2939453125;
  } else if (/J/.test(t)) {
    l = 0.39599609375;
  } else if (/K/.test(t)) {
    l = 0.634765625;
  } else if (/L/.test(t)) {
    l = 0.51318359375;
  } else if (/M/.test(t)) {
    l = 0.97705078125;
  } else if (/N/.test(t)) {
    l = 0.81298828125;
  } else if (/O/.test(t)) {
    l = 0.81494140625;
  } else if (/P/.test(t)) {
    l = 0.61181640625;
  } else if (/Q/.test(t)) {
    l = 0.81494140625;
  } else if (/R/.test(t)) {
    l = 0.65283203125;
  } else if (/S/.test(t)) {
    l = 0.5771484375;
  } else if (/T/.test(t)) {
    l = 0.5732421875;
  } else if (/U/.test(t)) {
    l = 0.74658203125;
  } else if (/V/.test(t)) {
    l = 0.67626953125;
  } else if (/W/.test(t)) {
    l = 1.017578125;
  } else if (/X/.test(t)) {
    l = 0.64501953125;
  } else if (/Y/.test(t)) {
    l = 0.603515625;
  } else if (/Z/.test(t)) {
    l = 0.6201171875;
  } else if (/[0-9]/.test(t)) {
    l = 0.58642578125;
  } else if (/[\u4e00-\u9fa5]/.test(t)) {
    l = 1;
  } else if (/ /.test(t)) {
    l = 0.2958984375;
  } else if (/\`/.test(t)) {
    l = 0.294921875;
  } else if (/\~/.test(t)) {
    l = 0.74169921875;
  } else if (/\!/.test(t)) {
    l = 0.3125;
  } else if (/\@/.test(t)) {
    l = 1.03125;
  } else if (/\#/.test(t)) {
    l = 0.63818359375;
  } else if (/\$/.test(t)) {
    l = 0.58642578125;
  } else if (/\%/.test(t)) {
    l = 0.8896484375;
  } else if (/\^/.test(t)) {
    l = 0.74169921875;
  } else if (/\&/.test(t)) {
    l = 0.8701171875;
  } else if (/\*/.test(t)) {
    l = 0.455078125;
  } else if (/\(/.test(t)) {
    l = 0.333984375;
  } else if (/\)/.test(t)) {
    l = 0.333984375;
  } else if (/\_/.test(t)) {
    l = 0.4482421875;
  } else if (/\-/.test(t)) {
    l = 0.4326171875;
  } else if (/\+/.test(t)) {
    l = 0.74169921875;
  } else if (/\=/.test(t)) {
    l = 0.74169921875;
  } else if (/\|/.test(t)) {
    l = 0.26904296875;
  } else if (/\\/.test(t)) {
    l = 0.416015625;
  } else if (/\[/.test(t)) {
    l = 0.333984375;
  } else if (/\]/.test(t)) {
    l = 0.333984375;
  } else if (/\;/.test(t)) {
    l = 0.24072265625;
  } else if (/\'/.test(t)) {
    l = 0.25634765625;
  } else if (/\,/.test(t)) {
    l = 0.24072265625;
  } else if (/\./.test(t)) {
    l = 0.24072265625;
  } else if (/\//.test(t)) {
    l = 0.42724609375;
  } else if (/\{/.test(t)) {
    l = 0.333984375;
  } else if (/\}/.test(t)) {
    l = 0.333984375;
  } else if (/\:/.test(t)) {
    l = 0.24072265625;
  } else if (/\"/.test(t)) {
    l = 0.435546875;
  } else if (/\</.test(t)) {
    l = 0.74169921875;
  } else if (/\>/.test(t)) {
    l = 0.74169921875;
  } else if (/\?/.test(t)) {
    l = 0.48291015625;
  } else {
    l = 1;
  }
  return l;
}

// export
function setImage(images) {
  // 设置图片数据
  _app2.default.log('进入设置图片数据方法');
  return new Promise( /*#__PURE__*/function () {var _ref3 = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee3(resolve, rejcet) {var i;return _regenerator.default.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:_context3.prev = 0;if (!(

              images && _app2.default.isArray(images))) {_context3.next = 14;break;}
              _app2.default.log('images是一个数组');
              i = 0;case 4:if (!(i < images.length)) {_context3.next = 12;break;}
              _app2.default.log('设置图片数据循环中:' + i);_context3.next = 8;return (
                setImageFn(images[i]));case 8:images[i] = _context3.sent;case 9:i++;_context3.next = 4;break;case 12:_context3.next = 18;break;case 14:


              _app2.default.log('images是一个对象');_context3.next = 17;return (
                setImageFn(images));case 17:images = _context3.sent;case 18:

              resolve(images);_context3.next = 24;break;case 21:_context3.prev = 21;_context3.t0 = _context3["catch"](0);

              // TODO handle the exception
              rejcet(_context3.t0);case 24:case "end":return _context3.stop();}}}, _callee3, this, [[0, 21]]);}));return function (_x5, _x6) {return _ref3.apply(this, arguments);};}());


}

function setImageFn(image) {
  return new Promise( /*#__PURE__*/function () {var _ref4 = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee4(resolve, reject) {var imgUrl, hasinfoCallBack, imageInfo;return _regenerator.default.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:if (!
              image.url) {_context4.next = 17;break;}
              imgUrl = image.url;_context4.next = 4;return (
                _app2.default.downloadFile_PromiseFc(imgUrl));case 4:imgUrl = _context4.sent;
              image.url = imgUrl;
              hasinfoCallBack = image.infoCallBack && typeof image.infoCallBack === 'function';
              imageInfo = {};_context4.next = 10;return (
                _app2.default.getImageInfo_PromiseFc(imgUrl));case 10:imageInfo = _context4.sent;
              if (hasinfoCallBack) {
                image = _objectSpread({},
                image,
                image.infoCallBack(imageInfo));

              }
              image.dx = image.dx || 0;
              image.dy = image.dy || 0;
              image.dWidth = image.dWidth || imageInfo.width;
              image.dHeight = image.dHeight || imageInfo.height;
              image = _objectSpread({},
              image, {
                imageInfo: imageInfo });case 17:


              resolve(image);case 18:case "end":return _context4.stop();}}}, _callee4, this);}));return function (_x7, _x8) {return _ref4.apply(this, arguments);};}());

}

// export
function drawText(Context, textArray, bgObj) {
  // 先遍历换行再绘制
  if (!_app2.default.isArray(textArray)) {
    _app2.default.log('遍历文本方法, 不是数组');
    textArray = [textArray];
  } else {
    _app2.default.log('遍历文本方法, 是数组');
  }
  _app2.default.log('遍历文本方法, textArray:' + JSON.stringify(textArray));
  var newArr = [];
  if (textArray && textArray.length > 0) {
    for (var j = 0; j < textArray.length; j++) {
      var textItem = textArray[j];
      if (textItem.text && textItem.lineFeed) {
        var lineNum = -1,
        maxWidth = bgObj.width,
        lineHeight = textItem.size,
        dx = textItem.dx;
        if (_app2.default.isObject(textItem.lineFeed)) {
          var lineFeed = textItem.lineFeed;
          lineNum = lineFeed.lineNum !== undefined && typeof lineFeed.lineNum === 'number' && lineFeed.lineNum >= 0 ? lineFeed.lineNum : lineNum;
          maxWidth = lineFeed.maxWidth !== undefined && typeof lineFeed.maxWidth === 'number' ? lineFeed.maxWidth : maxWidth;
          lineHeight = lineFeed.lineHeight !== undefined && typeof lineFeed.lineHeight === 'number' ? lineFeed.lineHeight : lineHeight;
          dx = lineFeed.dx !== undefined && typeof lineFeed.dx === 'number' ? lineFeed.dx : dx;
        }
        var chr = textItem.text.split('');
        var temp = '';
        var row = [];
        // 循环出几行文字组成数组
        for (var a = 0, len = chr.length; a < len; a++) {
          if (
          countTextLength(Context, {
            text: temp,
            size: textItem.size }) <=
          maxWidth &&
          countTextLength(Context, {
            text: temp + chr[a],
            size: textItem.size }) <=
          maxWidth)
          {
            temp += chr[a];
            if (a == chr.length - 1) {
              row.push(temp);
            }
          } else {
            row.push(temp);
            temp = chr[a];
          }
        }
        _app2.default.log('循环出的文本数组:' + JSON.stringify(row));
        // 只显示几行 变量间距lineHeight  变量行数lineNum
        var allNum = lineNum >= 0 && lineNum < row.length ? lineNum : row.length;

        for (var i = 0; i < allNum; i++) {
          var str = row[i];
          if (i == allNum - 1 && allNum < row.length) {
            str = str.substring(0, str.length - 1) + '...';
          }
          var obj = _objectSpread({},
          textItem, {
            text: str,
            dx: i === 0 ? textItem.dx : dx >= 0 ? dx : textItem.dx,
            dy: textItem.dy + i * lineHeight,
            textLength: countTextLength(Context, {
              text: str,
              size: textItem.size }) });


          _app2.default.log('重新组成的文本对象:' + JSON.stringify(obj));
          newArr.push(obj);
        }
      } else {
        newArr.push(textItem);
      }
    }
  }
  _app2.default.log('绘制文本新数组:' + JSON.stringify(newArr));
  drawTexts(Context, newArr);
}

function setFont() {var textItem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  if (textItem.font && typeof textItem.font === 'string') {
    _app2.default.log(textItem.font);
    return textItem.font;
  } else {
    var fontStyle = 'normal';
    var fontVariant = 'normal';
    var fontWeight = 'normal';
    var fontSize = textItem.size || 10;
    var fontFamily = 'sans-serif';
    fontSize = Math.ceil(Number(fontSize));
    if (textItem.fontStyle && typeof textItem.fontStyle === 'string') {
      fontStyle = textItem.fontStyle.trim();
    }
    if (textItem.fontVariant && typeof textItem.fontVariant === 'string') {
      fontVariant = textItem.fontVariant.trim();
    }
    if (textItem.fontWeight && (typeof textItem.fontWeight === 'string' || typeof textItem.fontWeight === 'number')) {
      fontWeight = textItem.fontWeight.trim();
    }
    if (textItem.fontFamily && typeof textItem.fontFamily === 'string') {
      fontFamily = textItem.fontFamily.trim();
    }
    return fontStyle + ' ' + fontVariant + ' ' + fontWeight + ' ' + fontSize + 'px' + ' ' + fontFamily;
  }
}

function drawTexts(Context, texts) {
  // 绘制文本
  _app2.default.log('准备绘制文本方法, texts:' + JSON.stringify(texts));
  if (texts && _app2.default.isArray(texts)) {
    _app2.default.log('准备绘制文本方法, 是数组');
    if (texts.length > 0) {
      for (var i = 0; i < texts.length; i++) {
        drawTextFn(Context, texts[i]);
      }
    }
  } else {
    _app2.default.log('准备绘制文本方法, 不是数组');
    drawTextFn(Context, texts);
  }
}

function drawTextFn(Context, textItem) {
  _app2.default.log('进入绘制文本方法, textItem:' + JSON.stringify(textItem));
  if (textItem && _app2.default.isObject(textItem) && textItem.text) {
    Context.font = setFont(textItem);
    Context.setFillStyle(textItem.color);
    Context.setGlobalAlpha(textItem.alpha);
    Context.setTextAlign(textItem.textAlign);
    Context.setTextBaseline(textItem.textBaseline);
    Context.fillText(textItem.text, textItem.dx, textItem.dy);
    if (textItem.lineThrough && _app2.default.isObject(textItem.lineThrough)) {
      _app2.default.log('有删除线');
      var lineThrough = textItem.lineThrough;
      lineThrough.alpha = lineThrough.alpha !== undefined ? lineThrough.alpha : textItem.alpha;
      lineThrough.style = lineThrough.style || textItem.color;
      lineThrough.width = lineThrough.width !== undefined ? lineThrough.width : textItem.size / 10;
      lineThrough.cap = lineThrough.cap !== undefined ? lineThrough.cap : 'butt';
      _app2.default.log('删除线对象:' + JSON.stringify(lineThrough));
      Context.setGlobalAlpha(lineThrough.alpha);
      Context.setStrokeStyle(lineThrough.style);
      Context.setLineWidth(lineThrough.width);
      Context.setLineCap(lineThrough.cap);
      var mx, my;
      switch (textItem.textAlign) {
        case 'left':
          mx = textItem.dx;
          break;
        case 'center':
          mx = textItem.dx - textItem.textLength / 2;
          break;
        default:
          mx = textItem.dx - textItem.textLength;
          break;}

      switch (textItem.textBaseline) {
        case 'top':
          my = textItem.dy + textItem.size * 0.5;
          break;
        case 'middle':
          my = textItem.dy;
          break;
        default:
          my = textItem.dy - textItem.size * 0.5;
          break;}

      Context.beginPath();
      Context.moveTo(mx, my);
      Context.lineTo(mx + textItem.textLength, my);
      Context.stroke();
      Context.closePath();
      _app2.default.log('删除线完毕');
    }
    Context.setGlobalAlpha(1);
    Context.font = '10px sans-serif';
  }
}
// export
function drawImage(Context, images) {
  // 绘制图片
  _app2.default.log('判断图片数据类型:' + JSON.stringify(images));
  if (images && _app2.default.isArray(images)) {
    if (images.length > 0) {
      for (var i = 0; i < images.length; i++) {
        readyDrawImageFn(Context, images[i]);
      }
    }
  } else {
    readyDrawImageFn(Context, images);
  }
}

function readyDrawImageFn(Context, img) {
  _app2.default.log('判断绘制图片形状, img:' + JSON.stringify(img));
  if (img.url) {
    if (img.circleSet) {
      drawCircleImage(Context, img);
    } else if (img.roundRectSet) {
      drawRoundRectImage(Context, img);
    } else {
      drawImageFn(Context, img);
    }
  }
}

function drawImageFn(Context, img) {
  _app2.default.log('进入绘制默认图片方法, img:' + JSON.stringify(img));
  if (img.url) {
    var hasAlpha = !_app2.default.isUndef(img.alpha);
    img.alpha = Number(!_app2.default.isUndef(img.alpha) ? img.alpha : 1);
    Context.setGlobalAlpha(img.alpha);
    _app2.default.log('绘制默认图片方法, 有url');
    if (img.dWidth && img.dHeight && img.sx && img.sy && img.sWidth && img.sHeight) {
      _app2.default.log('绘制默认图片方法, 绘制第一种方案');
      Context.drawImage(img.url, img.dx || 0, img.dy || 0, img.dWidth || false, img.dHeight || false, img.sx || false, img.sy || false, img.sWidth || false, img.sHeight || false);
    } else if (img.dWidth && img.dHeight) {
      _app2.default.log('绘制默认图片方法, 绘制第二种方案');
      Context.drawImage(img.url, img.dx || 0, img.dy || 0, img.dWidth || false, img.dHeight || false);
    } else {
      _app2.default.log('绘制默认图片方法, 绘制第三种方案');
      Context.drawImage(img.url, img.dx || 0, img.dy || 0);
    }
    if (hasAlpha) {
      Context.setGlobalAlpha(1);
    }
  }
  _app2.default.log('绘制默认图片方法, 绘制完毕');
}

function drawCircleImage(Context, obj) {
  _app2.default.log('进入绘制圆形图片方法, obj:' + JSON.stringify(obj));var
  dx = obj.dx,dy = obj.dy,dWidth = obj.dWidth,dHeight = obj.dHeight,circleSet = obj.circleSet,imageInfo = obj.imageInfo;
  var x, y, r;
  if (typeof circleSet === 'object') {
    x = circleSet.x;
    y = circleSet.y;
    r = circleSet.r;
  }
  if (!r) {
    var d;
    d = dWidth > dHeight ? dHeight : dWidth;
    r = d / 2;
  }

  x = x ? dx + x : (dx || 0) + r;
  y = y ? dy + y : (dy || 0) + r;
  Context.save();
  Context.beginPath();
  Context.arc(x, y, r, 0, 2 * Math.PI, false);
  Context.closePath();
  Context.setGlobalAlpha(0);
  Context.fillStyle = '#FFFFFF';
  Context.fill();
  Context.setGlobalAlpha(1);
  Context.clip();
  drawImageFn(Context, obj);
  _app2.default.log('默认图片绘制完毕');
  Context.restore();
}

function drawRoundRectImage(Context, obj) {
  // 绘制矩形
  _app2.default.log('进入绘制矩形图片方法, obj:' + JSON.stringify(obj));
  Context.save();var
  dx = obj.dx,dy = obj.dy,dWidth = obj.dWidth,dHeight = obj.dHeight,roundRectSet = obj.roundRectSet,imageInfo = obj.imageInfo;
  var r;
  if (typeof roundRectSet === 'object') {
    r = roundRectSet.r;
  }
  r = r || dWidth * 0.1;

  if (dWidth < 2 * r) {
    r = dWidth / 2;
  }
  if (dHeight < 2 * r) {
    r = dHeight / 2;
  }
  Context.beginPath();
  Context.moveTo(dx + r, dy);
  Context.arcTo(dx + dWidth, dy, dx + dWidth, dy + dHeight, r);
  Context.arcTo(dx + dWidth, dy + dHeight, dx, dy + dHeight, r);
  Context.arcTo(dx, dy + dHeight, dx, dy, r);
  Context.arcTo(dx, dy, dx + dWidth, dy, r);
  Context.closePath();
  Context.setGlobalAlpha(0);
  Context.fillStyle = '#FFFFFF';
  Context.fill();
  Context.setGlobalAlpha(1);
  Context.clip();
  drawImageFn(Context, obj);
  Context.restore();
  _app2.default.log('进入绘制矩形图片方法, 绘制完毕');
}

// export
function drawQrCode(Context, qrCodeObj) {
  // 生成二维码方法， 参考了 诗小柒 的二维码生成器代码
  _app2.default.log('进入绘制二维码方法');
  _app2.default.showLoading('正在生成二维码');
  var qrcodeAlgObjCache = [];
  var options = {
    text: String(qrCodeObj.text || '') || '', // 生成内容
    size: Number(qrCodeObj.size || 0) || 200, // 二维码大小
    background: String(qrCodeObj.background || '') || '#ffffff', // 背景色
    foreground: String(qrCodeObj.foreground || '') || '#000000', // 前景色
    pdground: String(qrCodeObj.pdground || '') || '#000000', // 定位角点颜色
    correctLevel: Number(qrCodeObj.correctLevel || 0) || 3, // 容错级别
    image: String(qrCodeObj.image || '') || '', // 二维码图标
    imageSize: Number(qrCodeObj.imageSize || 0) || 40, // 二维码图标大小
    dx: Number(qrCodeObj.dx || 0) || 0, // x轴距离
    dy: Number(qrCodeObj.dy || 0) || 0 // y轴距离
  };
  var qrCodeAlg = null;
  var d = 0;
  for (var i = 0, l = qrcodeAlgObjCache.length; i < l; i++) {
    d = i;
    if (qrcodeAlgObjCache[i].text == options.text && qrcodeAlgObjCache[i].text.correctLevel == options.correctLevel) {
      qrCodeAlg = qrcodeAlgObjCache[i].obj;
      break;
    }
  }
  if (d == l) {
    qrCodeAlg = new _QRCodeAlg.default(options.text, options.correctLevel);
    qrcodeAlgObjCache.push({
      text: options.text,
      correctLevel: options.correctLevel,
      obj: qrCodeAlg });

  }
  var getForeGround = function getForeGround(config) {
    var options = config.options;
    if (options.pdground && (config.row > 1 && config.row < 5 && config.col > 1 && config.col < 5 || config.row > config.count - 6 && config.row < config.count - 2 && config.col > 1 && config.col < 5 || config.row > 1 && config.row < 5 && config.col > config.count - 6 && config.col < config.count - 2)) {
      return options.pdground;
    }
    return options.foreground;
  };
  var count = qrCodeAlg.getModuleCount();
  var ratioSize = options.size;
  var ratioImgSize = options.imageSize;
  // 计算每个点的长宽
  var tileW = (ratioSize / count).toPrecision(4);
  var tileH = (ratioSize / count).toPrecision(4);
  // 绘制
  for (var row = 0; row < count; row++) {
    for (var col = 0; col < count; col++) {
      var w = Math.ceil((col + 1) * tileW) - Math.floor(col * tileW);
      var h = Math.ceil((row + 1) * tileW) - Math.floor(row * tileW);
      var foreground = getForeGround({
        row: row,
        col: col,
        count: count,
        options: options });

      Context.setFillStyle(qrCodeAlg.modules[row][col] ? foreground : options.background);
      Context.fillRect(options.dx + Math.round(col * tileW), options.dy + Math.round(row * tileH), w, h);
    }
  }
  if (options.image) {




    // 画圆角矩形
    var drawRoundedRect = function drawRoundedRect(ctxi, x, y, width, height, r, lineWidth, fill, stroke) {
      ctxi.setLineWidth(lineWidth);
      ctxi.setFillStyle(options.background);
      ctxi.setStrokeStyle(options.background);
      ctxi.beginPath(); // draw top and top right corner
      ctxi.moveTo(x + r, y);
      ctxi.arcTo(x + width, y, x + width, y + r, r); // draw right side and bottom right corner
      ctxi.arcTo(x + width, y + height, x + width - r, y + height, r); // draw bottom and bottom left corner
      ctxi.arcTo(x, y + height, x, y + height - r, r); // draw left and top left corner
      ctxi.arcTo(x, y, x + r, y, r);
      ctxi.closePath();
      if (fill) {
        ctxi.fill();
      }
      if (stroke) {
        ctxi.stroke();
      }
    };var x = options.dx + Number(((ratioSize - ratioImgSize) / 2).toFixed(2));var y = options.dy + Number(((ratioSize - ratioImgSize) / 2).toFixed(2));drawRoundedRect(Context, x, y, ratioImgSize, ratioImgSize, 2, 6, true, true);Context.drawImage(options.image, x, y, ratioImgSize, ratioImgSize);
  }
  _app2.default.hideLoading();
}

function getShreUserPosterBackground(objs) {
  // 检查背景图是否存在于本地， 若存在直接返回， 否则调用getShreUserPosterBackgroundFc方法
  var backgroundImage = objs.backgroundImage,type = objs.type;
  return new Promise( /*#__PURE__*/function () {var _ref5 = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee5(resolve, reject) {var pbg, image, index, imageObj, obj, savedFilePath, _savedFilePath, _savedFilePath2, _savedFilePath3;return _regenerator.default.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:_context5.prev = 0;

              _app2.default.showLoading('正在获取海报背景图');


              pbg = getPosterStorage(type);




              _app2.default.log('获取的缓存:' + JSON.stringify(pbg));if (!(
              pbg && pbg.path && pbg.name)) {_context5.next = 53;break;}
              _app2.default.log('海报有缓存, 准备获取后端背景图进行对比');_context5.next = 8;return (
                _app2.default.getPosterUrl(objs));case 8:image = _context5.sent;
              _app2.default.log('准备对比name是否相同');if (!(
              pbg.name === _app2.default.fileNameInPath(image))) {_context5.next = 45;break;}
              _app2.default.log('name相同, 判断该背景图是否存在于本地');_context5.next = 14;return (
                _app2.default.checkFile_PromiseFc(pbg.path));case 14:index = _context5.sent;if (!(
              index >= 0)) {_context5.next = 37;break;}
              _app2.default.log('海报save路径存在, 对比宽高信息, 存储并输出');_context5.next = 19;return (
                _app2.default.getImageInfo_PromiseFc(pbg.path));case 19:imageObj = _context5.sent;
              obj = _objectSpread({}, pbg);if (!(
              !pbg.width || !pbg.height || pbg.width !== imageObj.width || pbg.height !== imageObj.height)) {_context5.next = 30;break;}
              _app2.default.log('宽高对比不通过， 重新获取');_context5.next = 25;return (
                getShreUserPosterBackgroundFc(objs, image));case 25:savedFilePath = _context5.sent;
              _app2.default.hideLoading();
              resolve(savedFilePath);_context5.next = 35;break;case 30:

              _app2.default.log('宽高对比通过, 再次存储, 并返回路径');
              obj = _objectSpread({},
              pbg, {
                width: imageObj.width,
                height: imageObj.height });


              setPosterStorage(type, _objectSpread({}, obj));

              _app2.default.hideLoading();
              resolve(obj);case 35:_context5.next = 43;break;case 37:


              _app2.default.log('海报save路径不存在, 重新获取海报');_context5.next = 40;return (
                getShreUserPosterBackgroundFc(objs, image));case 40:_savedFilePath = _context5.sent;
              _app2.default.hideLoading();
              resolve(_savedFilePath);case 43:_context5.next = 51;break;case 45:


              _app2.default.log('name不相同, 重新获取海报');_context5.next = 48;return (
                getShreUserPosterBackgroundFc(objs, image));case 48:_savedFilePath2 = _context5.sent;
              _app2.default.hideLoading();
              resolve(_savedFilePath2);case 51:_context5.next = 59;break;case 53:


              _app2.default.log('海报背景图没有缓存, 准备获取海报背景图');_context5.next = 56;return (
                getShreUserPosterBackgroundFc(objs));case 56:_savedFilePath3 = _context5.sent;
              _app2.default.hideLoading();
              resolve(_savedFilePath3);case 59:_context5.next = 67;break;case 61:_context5.prev = 61;_context5.t0 = _context5["catch"](0);


              _app2.default.hideLoading();
              _app2.default.showToast('获取分享用户背景图失败:' + JSON.stringify(_context5.t0));
              _app2.default.log(JSON.stringify(_context5.t0));
              reject(_context5.t0);case 67:case "end":return _context5.stop();}}}, _callee5, this, [[0, 61]]);}));return function (_x9, _x10) {return _ref5.apply(this, arguments);};}());


}

function getPosterStorage(type) {
  return _app2.default.getStorageSync(getStorageKey(type));
}

function removePosterStorage(type) {
  var ShreUserPosterBackgroundKey = getStorageKey(type);
  var pbg = _app2.default.getStorageSync(ShreUserPosterBackgroundKey);
  if (pbg && pbg.path) {
    _app2.default.removeSavedFile(pbg.path);
    _app2.default.removeStorageSync(ShreUserPosterBackgroundKey);
  }
}

function setPosterStorage(type, data) {
  _app2.default.setStorage(getStorageKey(type), data);
}

function getStorageKey(type) {
  return ShreUserPosterBackgroundKey + (type || 'default');
}

function getShreUserPosterBackgroundFc(objs, upimage) {
  // 下载并保存背景图方法
  var backgroundImage = objs.backgroundImage,type = objs.type;
  _app2.default.log('获取分享背景图, 尝试清空本地数据');
  removePosterStorage(type);
  return new Promise( /*#__PURE__*/function () {var _ref6 = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee6(resolve, reject) {var name, savedFilePath, imageObj, returnObj, image, _savedFilePath4, _imageObj, _returnObj;return _regenerator.default.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:_context6.prev = 0;

              _app2.default.showLoading('正在下载海报背景图');if (!
              upimage) {_context6.next = 24;break;}
              _app2.default.log('有从后端获取的背景图片路径');
              _app2.default.log('尝试下载并保存背景图');
              name = _app2.default.fileNameInPath(upimage);_context6.next = 8;return (
                _app2.default.downLoadAndSaveFile_PromiseFc(upimage));case 8:savedFilePath = _context6.sent;if (!
              savedFilePath) {_context6.next = 20;break;}
              _app2.default.log('下载并保存背景图成功:' + savedFilePath);_context6.next = 13;return (
                _app2.default.getImageInfo_PromiseFc(savedFilePath));case 13:imageObj = _context6.sent;
              returnObj = {
                path: savedFilePath,
                width: imageObj.width,
                height: imageObj.height,
                name: name };


              setPosterStorage(type, _objectSpread({}, returnObj));

              _app2.default.hideLoading();
              resolve(returnObj);_context6.next = 22;break;case 20:

              _app2.default.hideLoading();
              reject('not find savedFilePath');case 22:_context6.next = 48;break;case 24:


              _app2.default.log('没有从后端获取的背景图片路径, 尝试从后端获取背景图片路径');_context6.next = 27;return (
                _app2.default.getPosterUrl(objs));case 27:image = _context6.sent;
              _app2.default.log('尝试下载并保存背景图:' + image);_context6.next = 31;return (
                _app2.default.downLoadAndSaveFile_PromiseFc(image));case 31:_savedFilePath4 = _context6.sent;if (!
              _savedFilePath4) {_context6.next = 46;break;}
              _app2.default.log('下载并保存背景图成功:' + _savedFilePath4);_context6.next = 36;return (
                _app2.default.getImageInfo_PromiseFc(_savedFilePath4));case 36:_imageObj = _context6.sent;
              _app2.default.log('获取图片信息成功');
              _returnObj = {
                path: _savedFilePath4,
                width: _imageObj.width,
                height: _imageObj.height,
                name: _app2.default.fileNameInPath(image) };

              _app2.default.log('拼接背景图信息对象成功:' + JSON.stringify(_returnObj));


              setPosterStorage(type, _objectSpread({}, _returnObj));


              _app2.default.hideLoading();
              _app2.default.log('返回背景图信息对象');
              resolve(_objectSpread({}, _returnObj));_context6.next = 48;break;case 46:

              _app2.default.hideLoading();
              reject('not find savedFilePath');case 48:_context6.next = 53;break;case 50:_context6.prev = 50;_context6.t0 = _context6["catch"](0);



              // TODO handle the exception
              reject(_context6.t0);case 53:case "end":return _context6.stop();}}}, _callee6, this, [[0, 50]]);}));return function (_x11, _x12) {return _ref6.apply(this, arguments);};}());


}var _default =

{
  getSharePoster: getSharePoster,
  setText: setText,
  setImage: setImage,
  drawText: drawText,
  drawImage: drawImage,
  drawQrCode: drawQrCode

  // module.exports = {
  //   getSharePoster,
  //   setText,
  //   setImage,
  //   drawText,
  //   drawImage,
  //   drawQrCode
  // }
};exports.default = _default;

/***/ }),
/* 69 */
/*!************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/api/tool/qrcode/app.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // eslint-disable-next-line
/* eslint-disable */
var _log = console.log;

var _app = {
  log: function log(t) {
    _log(t);
  },
  showLoading: function showLoading(msg, ifmask) {
    uni.showLoading({
      title: msg,
      mask: ifmask || false });

  },
  hideLoading: function hideLoading() {
    uni.hideLoading();
  },
  showToast: function showToast(msg, icon) {
    uni.showToast({
      title: msg,
      icon: icon || 'none' });

  },
  // 重点保护对下那个
  getPosterUrl: function getPosterUrl(objs) {
    // 后端获取背景图的url路径方法
    var backgroundImage = objs.backgroundImage,type = objs.type,formData = objs.formData;
    return new Promise(function (rs, rj) {
      var image;
      if (backgroundImage) {
        image = backgroundImage;
      } else {
        switch (
        type // 根据type获取背景图, 一般要改成request获取
        ) {
          case 1:
            image = '';
            break;
          default:
            image = 'http://b-api.baoduoduo.club/wwwroot/uploads/api/242-873-583/2020-02-18/5e4ba878ae57ae1358e0e3dd.jpg';
            break;}

      }
      if (image) {
        rs(image); // resolve图片的路径
      } else {
        rj('背景图片路径不存在');
      }
    });
  },

  isArray: function isArray(arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
  },
  isObject: function isObject(arg) {
    return Object.prototype.toString.call(arg) === '[object Object]';
  },
  isPromise: function isPromise(obj) {
    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
  },
  isNull: function isNull(arg) {
    return arg === null;
  },
  isUndefined: function isUndefined(arg) {
    return arg === undefined;
  },
  isUndef: function isUndef(arg) {
    return arg === undefined;
  },
  isNotNull_string: function isNotNull_string(arg) {
    return arg !== null && arg !== undefined && arg !== '';
  },
  isFn: function isFn(fn) {
    return fn && typeof fn === 'function';
  },
  getStorage: function getStorage(key, scb, fcb) {
    uni.getStorage({
      key: key,
      success: function success(res) {
        if (res.data && res.data != '') {
          if (scb) scb(res.data);
        } else {
          if (fcb) fcb();
        }
      },
      fail: function fail() {
        if (fcb) fcb();
      } });

  },
  setStorage: function setStorage(key, data) {
    uni.setStorage({
      key: key,
      data: data });

  },
  setStorageSync: function setStorageSync(key, data) {
    uni.setStorageSync(key, data);
  },
  getStorageSync: function getStorageSync(key) {
    return uni.getStorageSync(key);
  },
  clearStorageSync: function clearStorageSync() {
    uni.clearStorageSync();
  },
  removeStorageSync: function removeStorageSync(key) {
    uni.removeStorageSync(key);
  },
  getImageInfo: function getImageInfo(url, cb, fcb) {
    url = checkMPUrl(url);
    uni.getImageInfo({
      src: url,
      success: function success(res) {
        if (cb && typeof cb === 'function') cb(res);
      },
      fail: function fail(err) {
        if (fcb && typeof fcb === 'function') fcb(err);
      } });

  },
  // 下载文件
  downloadFile: function downloadFile(url, cb) {
    url = checkMPUrl(url);
    uni.downloadFile({
      url: url,
      success: function success(res) {
        if (cb && typeof cb === 'function') cb(res);
      } });

  },
  downloadFile_PromiseFc: function downloadFile_PromiseFc(url) {
    return new Promise(function (rs, rj) {
      if (url.substring(0, 4) !== 'http') {
        rs(url);
      } else {
        url = checkMPUrl(url);
        uni.downloadFile({
          url: url,
          success: function success(res) {
            if (res && res.tempFilePath) {
              rs(res.tempFilePath);
            } else {
              rj('not find tempFilePath');
            }
          },
          fail: function fail(err) {
            rj(err);
          } });

      }
    });
  },

  // 保存
  saveFile: function saveFile(url) {
    uni.saveFile({
      tempFilePath: url,
      success: function success(res) {
      } });

  },
  downLoadAndSaveFile_PromiseFc: function downLoadAndSaveFile_PromiseFc(url) {
    return new Promise(function (rs, rj) {
      if (url.substring(0, 4) === 'http') {
        url = checkMPUrl(url);
        uni.downloadFile({
          url: url,
          success: function success(d_res) {
            if (d_res && d_res.tempFilePath) {





              uni.saveFile({
                tempFilePath: d_res.tempFilePath,
                success: function success(s_res) {
                  if (s_res && s_res.savedFilePath) {
                    rs(s_res.savedFilePath);
                  } else {
                    rs(d_res.tempFilePath);
                  }
                },
                fail: function fail(err) {
                  rs(d_res.tempFilePath);
                } });


            } else {
              rj('not find tempFilePath');
            }
          },
          fail: function fail(err) {
            rj(err);
          } });

      } else {
        rs(url);
      }
    });
  },
  checkFile_PromiseFc: function checkFile_PromiseFc(url) {
    return new Promise(function (rs, rj) {
      uni.getSavedFileList({
        success: function success(res) {
          var d = res.fileList;
          var index = d.findIndex(function (item) {
            return item.filePath === url;
          });
          rs(index);
        },
        fail: function fail(err) {
          rj(err);
        } });

    });
  },
  removeSavedFile: function removeSavedFile(path) {
    uni.getSavedFileList({
      success: function success(res) {
        var d = res.fileList;
        var index = d.findIndex(function (item) {
          return item.filePath === path;
        });
        if (index >= 0) {
          uni.removeSavedFile({
            filePath: path });

        }
      } });

  },
  fileNameInPath: function fileNameInPath(path) {
    var s = path.split('/');
    return s[s.length - 1];
  },

  getImageInfo_PromiseFc: function getImageInfo_PromiseFc(imgPath) {
    return new Promise(function (rs, rj) {
      imgPath = checkMPUrl(imgPath);
      uni.getImageInfo({
        src: imgPath,
        success: function success(res) {
          rs(res);
        },
        fail: function fail(err) {
          rj(err);
        } });

    });
  },
  previewImage: function previewImage(urls) {
    if (typeof urls === 'string') {
      urls = [urls];
    }
    uni.previewImage({
      urls: urls });

  } };


function checkMPUrl(url) {





  return url;
}

module.exports = _app;

/***/ }),
/* 70 */
/*!******************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/api/tool/qrcode/QRCodeAlg.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = QRCodeAlg; // eslint-disable-next-line
/* eslint-disable */

/**
                         * 获取单个字符的utf8编码
                         * unicode BMP平面约65535个字符
                         * @param {num} code
                         * return {array}
                         */
function unicodeFormat8(code) {
  // 1 byte
  var c0, c1, c2;
  if (code < 128) {
    return [code];
    // 2 bytes
  } else if (code < 2048) {
    c0 = 192 + (code >> 6);
    c1 = 128 + (code & 63);
    return [c0, c1];
    // 3 bytes
  } else {
    c0 = 224 + (code >> 12);
    c1 = 128 + (code >> 6 & 63);
    c2 = 128 + (code & 63);
    return [c0, c1, c2];
  }
}
/**
   * 获取字符串的utf8编码字节串
   * @param {string} string
   * @return {array}
   */
function getUTF8Bytes(string) {
  var utf8codes = [];
  for (var i = 0; i < string.length; i++) {
    var code = string.charCodeAt(i);
    var utf8 = unicodeFormat8(code);
    for (var j = 0; j < utf8.length; j++) {
      utf8codes.push(utf8[j]);
    }
  }
  return utf8codes;
}
/**
   * 二维码算法实现
   * @param {string} data              要编码的信息字符串
   * @param {num} errorCorrectLevel 纠错等级
   */
function QRCodeAlg(data, errorCorrectLevel) {
  this.typeNumber = -1; // 版本
  this.errorCorrectLevel = errorCorrectLevel;
  this.modules = null; // 二维矩阵，存放最终结果
  this.moduleCount = 0; // 矩阵大小
  this.dataCache = null; // 数据缓存
  this.rsBlocks = null; // 版本数据信息
  this.totalDataCount = -1; // 可使用的数据量
  this.data = data;
  this.utf8bytes = getUTF8Bytes(data);
  this.make();
}
QRCodeAlg.prototype = {
  constructor: QRCodeAlg,
  /**
                           * 获取二维码矩阵大小
                           * @return {num} 矩阵大小
                           */
  getModuleCount: function getModuleCount() {
    return this.moduleCount;
  },
  /**
      * 编码
      */
  make: function make() {
    this.getRightType();
    this.dataCache = this.createData();
    this.createQrcode();
  },
  /**
      * 设置二位矩阵功能图形
      * @param  {bool} test 表示是否在寻找最好掩膜阶段
      * @param  {num} maskPattern 掩膜的版本
      */
  makeImpl: function makeImpl(maskPattern) {
    this.moduleCount = this.typeNumber * 4 + 17;
    this.modules = new Array(this.moduleCount);
    for (var row = 0; row < this.moduleCount; row++) {
      this.modules[row] = new Array(this.moduleCount);
    }
    this.setupPositionProbePattern(0, 0);
    this.setupPositionProbePattern(this.moduleCount - 7, 0);
    this.setupPositionProbePattern(0, this.moduleCount - 7);
    this.setupPositionAdjustPattern();
    this.setupTimingPattern();
    this.setupTypeInfo(true, maskPattern);
    if (this.typeNumber >= 7) {
      this.setupTypeNumber(true);
    }
    this.mapData(this.dataCache, maskPattern);
  },
  /**
      * 设置二维码的位置探测图形
      * @param  {num} row 探测图形的中心横坐标
      * @param  {num} col 探测图形的中心纵坐标
      */
  setupPositionProbePattern: function setupPositionProbePattern(row, col) {
    for (var r = -1; r <= 7; r++) {
      if (row + r <= -1 || this.moduleCount <= row + r) continue;
      for (var c = -1; c <= 7; c++) {
        if (col + c <= -1 || this.moduleCount <= col + c) continue;
        if (r >= 0 && r <= 6 && (c == 0 || c == 6) || c >= 0 && c <= 6 && (r == 0 || r == 6) || r >= 2 && r <= 4 && c >= 2 && c <= 4) {
          this.modules[row + r][col + c] = true;
        } else {
          this.modules[row + r][col + c] = false;
        }
      }
    }
  },
  /**
      * 创建二维码
      * @return {[type]} [description]
      */
  createQrcode: function createQrcode() {
    var minLostPoint = 0;
    var pattern = 0;
    var bestModules = null;
    for (var i = 0; i < 8; i++) {
      this.makeImpl(i);
      var lostPoint = QRUtil.getLostPoint(this);
      if (i == 0 || minLostPoint > lostPoint) {
        minLostPoint = lostPoint;
        pattern = i;
        bestModules = this.modules;
      }
    }
    this.modules = bestModules;
    this.setupTypeInfo(false, pattern);
    if (this.typeNumber >= 7) {
      this.setupTypeNumber(false);
    }
  },
  /**
      * 设置定位图形
      * @return {[type]} [description]
      */
  setupTimingPattern: function setupTimingPattern() {
    for (var r = 8; r < this.moduleCount - 8; r++) {
      if (this.modules[r][6] != null) {
        continue;
      }
      this.modules[r][6] = r % 2 == 0;
      if (this.modules[6][r] != null) {
        continue;
      }
      this.modules[6][r] = r % 2 == 0;
    }
  },
  /**
      * 设置矫正图形
      * @return {[type]} [description]
      */
  setupPositionAdjustPattern: function setupPositionAdjustPattern() {
    var pos = QRUtil.getPatternPosition(this.typeNumber);
    for (var i = 0; i < pos.length; i++) {
      for (var j = 0; j < pos.length; j++) {
        var row = pos[i];
        var col = pos[j];
        if (this.modules[row][col] != null) {
          continue;
        }
        for (var r = -2; r <= 2; r++) {
          for (var c = -2; c <= 2; c++) {
            if (r == -2 || r == 2 || c == -2 || c == 2 || r == 0 && c == 0) {
              this.modules[row + r][col + c] = true;
            } else {
              this.modules[row + r][col + c] = false;
            }
          }
        }
      }
    }
  },
  /**
      * 设置版本信息（7以上版本才有）
      * @param  {bool} test 是否处于判断最佳掩膜阶段
      * @return {[type]}      [description]
      */
  setupTypeNumber: function setupTypeNumber(test) {
    var bits = QRUtil.getBCHTypeNumber(this.typeNumber);
    for (var i = 0; i < 18; i++) {
      var mod = !test && (bits >> i & 1) == 1;
      this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
      this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;
    }
  },
  /**
      * 设置格式信息（纠错等级和掩膜版本）
      * @param  {bool} test
      * @param  {num} maskPattern 掩膜版本
      * @return {}
      */
  setupTypeInfo: function setupTypeInfo(test, maskPattern) {
    var data = QRErrorCorrectLevel[this.errorCorrectLevel] << 3 | maskPattern;
    var bits = QRUtil.getBCHTypeInfo(data);
    // vertical
    for (var i = 0; i < 15; i++) {
      var mod = !test && (bits >> i & 1) == 1;
      if (i < 6) {
        this.modules[i][8] = mod;
      } else if (i < 8) {
        this.modules[i + 1][8] = mod;
      } else {
        this.modules[this.moduleCount - 15 + i][8] = mod;
      }
      // horizontal
      var mod = !test && (bits >> i & 1) == 1;
      if (i < 8) {
        this.modules[8][this.moduleCount - i - 1] = mod;
      } else if (i < 9) {
        this.modules[8][15 - i - 1 + 1] = mod;
      } else {
        this.modules[8][15 - i - 1] = mod;
      }
    }
    // fixed module
    this.modules[this.moduleCount - 8][8] = !test;
  },
  /**
      * 数据编码
      * @return {[type]} [description]
      */
  createData: function createData() {
    var buffer = new QRBitBuffer();
    var lengthBits = this.typeNumber > 9 ? 16 : 8;
    buffer.put(4, 4); // 添加模式
    buffer.put(this.utf8bytes.length, lengthBits);
    for (var i = 0, l = this.utf8bytes.length; i < l; i++) {
      buffer.put(this.utf8bytes[i], 8);
    }
    if (buffer.length + 4 <= this.totalDataCount * 8) {
      buffer.put(0, 4);
    }
    // padding
    while (buffer.length % 8 != 0) {
      buffer.putBit(false);
    }
    // padding
    while (true) {
      if (buffer.length >= this.totalDataCount * 8) {
        break;
      }
      buffer.put(QRCodeAlg.PAD0, 8);
      if (buffer.length >= this.totalDataCount * 8) {
        break;
      }
      buffer.put(QRCodeAlg.PAD1, 8);
    }
    return this.createBytes(buffer);
  },
  /**
      * 纠错码编码
      * @param  {buffer} buffer 数据编码
      * @return {[type]}
      */
  createBytes: function createBytes(buffer) {
    var offset = 0;
    var maxDcCount = 0;
    var maxEcCount = 0;
    var length = this.rsBlock.length / 3;
    var rsBlocks = new Array();
    for (var i = 0; i < length; i++) {
      var count = this.rsBlock[i * 3 + 0];
      var totalCount = this.rsBlock[i * 3 + 1];
      var dataCount = this.rsBlock[i * 3 + 2];
      for (var j = 0; j < count; j++) {
        rsBlocks.push([dataCount, totalCount]);
      }
    }
    var dcdata = new Array(rsBlocks.length);
    var ecdata = new Array(rsBlocks.length);
    for (var r = 0; r < rsBlocks.length; r++) {
      var dcCount = rsBlocks[r][0];
      var ecCount = rsBlocks[r][1] - dcCount;
      maxDcCount = Math.max(maxDcCount, dcCount);
      maxEcCount = Math.max(maxEcCount, ecCount);
      dcdata[r] = new Array(dcCount);
      for (var i = 0; i < dcdata[r].length; i++) {
        dcdata[r][i] = 0xff & buffer.buffer[i + offset];
      }
      offset += dcCount;
      var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
      var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);
      var modPoly = rawPoly.mod(rsPoly);
      ecdata[r] = new Array(rsPoly.getLength() - 1);
      for (var i = 0; i < ecdata[r].length; i++) {
        var modIndex = i + modPoly.getLength() - ecdata[r].length;
        ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;
      }
    }
    var data = new Array(this.totalDataCount);
    var index = 0;
    for (var i = 0; i < maxDcCount; i++) {
      for (var r = 0; r < rsBlocks.length; r++) {
        if (i < dcdata[r].length) {
          data[index++] = dcdata[r][i];
        }
      }
    }
    for (var i = 0; i < maxEcCount; i++) {
      for (var r = 0; r < rsBlocks.length; r++) {
        if (i < ecdata[r].length) {
          data[index++] = ecdata[r][i];
        }
      }
    }
    return data;
  },
  /**
      * 布置模块，构建最终信息
      * @param  {} data
      * @param  {} maskPattern
      * @return {}
      */
  mapData: function mapData(data, maskPattern) {
    var inc = -1;
    var row = this.moduleCount - 1;
    var bitIndex = 7;
    var byteIndex = 0;
    for (var col = this.moduleCount - 1; col > 0; col -= 2) {
      if (col == 6) col--;
      while (true) {
        for (var c = 0; c < 2; c++) {
          if (this.modules[row][col - c] == null) {
            var dark = false;
            if (byteIndex < data.length) {
              dark = (data[byteIndex] >>> bitIndex & 1) == 1;
            }
            var mask = QRUtil.getMask(maskPattern, row, col - c);
            if (mask) {
              dark = !dark;
            }
            this.modules[row][col - c] = dark;
            bitIndex--;
            if (bitIndex == -1) {
              byteIndex++;
              bitIndex = 7;
            }
          }
        }
        row += inc;
        if (row < 0 || this.moduleCount <= row) {
          row -= inc;
          inc = -inc;
          break;
        }
      }
    }
  }

  /**
     * 填充字段
     */ };
QRCodeAlg.PAD0 = 0xEC;
QRCodeAlg.PAD1 = 0x11;
// ---------------------------------------------------------------------
// 纠错等级对应的编码
// ---------------------------------------------------------------------
var QRErrorCorrectLevel = [1, 0, 3, 2];
// ---------------------------------------------------------------------
// 掩膜版本
// ---------------------------------------------------------------------
var QRMaskPattern = {
  PATTERN000: 0,
  PATTERN001: 1,
  PATTERN010: 2,
  PATTERN011: 3,
  PATTERN100: 4,
  PATTERN101: 5,
  PATTERN110: 6,
  PATTERN111: 7

  // ---------------------------------------------------------------------
  // 工具类
  // ---------------------------------------------------------------------
};var QRUtil = {
  /*
                 每个版本矫正图形的位置
                  */
  PATTERN_POSITION_TABLE: [
  [],
  [6, 18],
  [6, 22],
  [6, 26],
  [6, 30],
  [6, 34],
  [6, 22, 38],
  [6, 24, 42],
  [6, 26, 46],
  [6, 28, 50],
  [6, 30, 54],
  [6, 32, 58],
  [6, 34, 62],
  [6, 26, 46, 66],
  [6, 26, 48, 70],
  [6, 26, 50, 74],
  [6, 30, 54, 78],
  [6, 30, 56, 82],
  [6, 30, 58, 86],
  [6, 34, 62, 90],
  [6, 28, 50, 72, 94],
  [6, 26, 50, 74, 98],
  [6, 30, 54, 78, 102],
  [6, 28, 54, 80, 106],
  [6, 32, 58, 84, 110],
  [6, 30, 58, 86, 114],
  [6, 34, 62, 90, 118],
  [6, 26, 50, 74, 98, 122],
  [6, 30, 54, 78, 102, 126],
  [6, 26, 52, 78, 104, 130],
  [6, 30, 56, 82, 108, 134],
  [6, 34, 60, 86, 112, 138],
  [6, 30, 58, 86, 114, 142],
  [6, 34, 62, 90, 118, 146],
  [6, 30, 54, 78, 102, 126, 150],
  [6, 24, 50, 76, 102, 128, 154],
  [6, 28, 54, 80, 106, 132, 158],
  [6, 32, 58, 84, 110, 136, 162],
  [6, 26, 54, 82, 110, 138, 166],
  [6, 30, 58, 86, 114, 142, 170]],

  G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,
  G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,
  G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,
  /*
                                                           BCH编码格式信息
                                                            */
  getBCHTypeInfo: function getBCHTypeInfo(data) {
    var d = data << 10;
    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
      d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);
    }
    return (data << 10 | d) ^ QRUtil.G15_MASK;
  },
  /*
     BCH编码版本信息
      */
  getBCHTypeNumber: function getBCHTypeNumber(data) {
    var d = data << 12;
    while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
      d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);
    }
    return data << 12 | d;
  },
  /*
     获取BCH位信息
      */
  getBCHDigit: function getBCHDigit(data) {
    var digit = 0;
    while (data != 0) {
      digit++;
      data >>>= 1;
    }
    return digit;
  },
  /*
     获取版本对应的矫正图形位置
      */
  getPatternPosition: function getPatternPosition(typeNumber) {
    return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
  },
  /*
     掩膜算法
      */
  getMask: function getMask(maskPattern, i, j) {
    switch (maskPattern) {
      case QRMaskPattern.PATTERN000:
        return (i + j) % 2 == 0;
      case QRMaskPattern.PATTERN001:
        return i % 2 == 0;
      case QRMaskPattern.PATTERN010:
        return j % 3 == 0;
      case QRMaskPattern.PATTERN011:
        return (i + j) % 3 == 0;
      case QRMaskPattern.PATTERN100:
        return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;
      case QRMaskPattern.PATTERN101:
        return i * j % 2 + i * j % 3 == 0;
      case QRMaskPattern.PATTERN110:
        return (i * j % 2 + i * j % 3) % 2 == 0;
      case QRMaskPattern.PATTERN111:
        return (i * j % 3 + (i + j) % 2) % 2 == 0;
      default:
        throw new Error('bad maskPattern:' + maskPattern);}

  },
  /*
     获取RS的纠错多项式
      */
  getErrorCorrectPolynomial: function getErrorCorrectPolynomial(errorCorrectLength) {
    var a = new QRPolynomial([1], 0);
    for (var i = 0; i < errorCorrectLength; i++) {
      a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));
    }
    return a;
  },
  /*
     获取评价
      */
  getLostPoint: function getLostPoint(qrCode) {
    var moduleCount = qrCode.getModuleCount(),
    lostPoint = 0,
    darkCount = 0;
    for (var row = 0; row < moduleCount; row++) {
      var sameCount = 0;
      var head = qrCode.modules[row][0];
      for (var col = 0; col < moduleCount; col++) {
        var current = qrCode.modules[row][col];
        // level 3 评价
        if (col < moduleCount - 6) {
          if (current && !qrCode.modules[row][col + 1] && qrCode.modules[row][col + 2] && qrCode.modules[row][col + 3] && qrCode.modules[row][col + 4] && !qrCode.modules[row][col + 5] && qrCode.modules[row][col + 6]) {
            if (col < moduleCount - 10) {
              if (qrCode.modules[row][col + 7] && qrCode.modules[row][col + 8] && qrCode.modules[row][col + 9] && qrCode.modules[row][col + 10]) {
                lostPoint += 40;
              }
            } else if (col > 3) {
              if (qrCode.modules[row][col - 1] && qrCode.modules[row][col - 2] && qrCode.modules[row][col - 3] && qrCode.modules[row][col - 4]) {
                lostPoint += 40;
              }
            }
          }
        }
        // level 2 评价
        if (row < moduleCount - 1 && col < moduleCount - 1) {
          var count = 0;
          if (current) count++;
          if (qrCode.modules[row + 1][col]) count++;
          if (qrCode.modules[row][col + 1]) count++;
          if (qrCode.modules[row + 1][col + 1]) count++;
          if (count == 0 || count == 4) {
            lostPoint += 3;
          }
        }
        // level 1 评价
        if (head ^ current) {
          sameCount++;
        } else {
          head = current;
          if (sameCount >= 5) {
            lostPoint += 3 + sameCount - 5;
          }
          sameCount = 1;
        }
        // level 4 评价
        if (current) {
          darkCount++;
        }
      }
    }
    for (var col = 0; col < moduleCount; col++) {
      var sameCount = 0;
      var head = qrCode.modules[0][col];
      for (var row = 0; row < moduleCount; row++) {
        var current = qrCode.modules[row][col];
        // level 3 评价
        if (row < moduleCount - 6) {
          if (current && !qrCode.modules[row + 1][col] && qrCode.modules[row + 2][col] && qrCode.modules[row + 3][col] && qrCode.modules[row + 4][col] && !qrCode.modules[row + 5][col] && qrCode.modules[row + 6][col]) {
            if (row < moduleCount - 10) {
              if (qrCode.modules[row + 7][col] && qrCode.modules[row + 8][col] && qrCode.modules[row + 9][col] && qrCode.modules[row + 10][col]) {
                lostPoint += 40;
              }
            } else if (row > 3) {
              if (qrCode.modules[row - 1][col] && qrCode.modules[row - 2][col] && qrCode.modules[row - 3][col] && qrCode.modules[row - 4][col]) {
                lostPoint += 40;
              }
            }
          }
        }
        // level 1 评价
        if (head ^ current) {
          sameCount++;
        } else {
          head = current;
          if (sameCount >= 5) {
            lostPoint += 3 + sameCount - 5;
          }
          sameCount = 1;
        }
      }
    }
    // LEVEL4
    var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
    lostPoint += ratio * 10;
    return lostPoint;
  }


  // ---------------------------------------------------------------------
  // QRMath使用的数学工具
  // ---------------------------------------------------------------------
};var QRMath = {
  /*
                 将n转化为a^m
                  */
  glog: function glog(n) {
    if (n < 1) {
      throw new Error('glog(' + n + ')');
    }
    return QRMath.LOG_TABLE[n];
  },
  /*
     将a^m转化为n
      */
  gexp: function gexp(n) {
    while (n < 0) {
      n += 255;
    }
    while (n >= 256) {
      n -= 255;
    }
    return QRMath.EXP_TABLE[n];
  },
  EXP_TABLE: new Array(256),
  LOG_TABLE: new Array(256) };


for (var i = 0; i < 8; i++) {
  QRMath.EXP_TABLE[i] = 1 << i;
}
for (var i = 8; i < 256; i++) {
  QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];
}
for (var i = 0; i < 255; i++) {
  QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;
}
// ---------------------------------------------------------------------
// QRPolynomial 多项式
// ---------------------------------------------------------------------
/**
 * 多项式类
 * @param {Array} num   系数
 * @param {num} shift a^shift
 */
function QRPolynomial(num, shift) {
  if (num.length == undefined) {
    throw new Error(num.length + '/' + shift);
  }
  var offset = 0;
  while (offset < num.length && num[offset] == 0) {
    offset++;
  }
  this.num = new Array(num.length - offset + shift);
  for (var i = 0; i < num.length - offset; i++) {
    this.num[i] = num[i + offset];
  }
}
QRPolynomial.prototype = {
  get: function get(index) {
    return this.num[index];
  },
  getLength: function getLength() {
    return this.num.length;
  },
  /**
      * 多项式乘法
      * @param  {QRPolynomial} e 被乘多项式
      * @return {[type]}   [description]
      */
  multiply: function multiply(e) {
    var num = new Array(this.getLength() + e.getLength() - 1);
    for (var i = 0; i < this.getLength(); i++) {
      for (var j = 0; j < e.getLength(); j++) {
        num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));
      }
    }
    return new QRPolynomial(num, 0);
  },
  /**
      * 多项式模运算
      * @param  {QRPolynomial} e 模多项式
      * @return {}
      */
  mod: function mod(e) {
    var tl = this.getLength(),
    el = e.getLength();
    if (tl - el < 0) {
      return this;
    }
    var num = new Array(tl);
    for (var i = 0; i < tl; i++) {
      num[i] = this.get(i);
    }
    while (num.length >= el) {
      var ratio = QRMath.glog(num[0]) - QRMath.glog(e.get(0));

      for (var i = 0; i < e.getLength(); i++) {
        num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);
      }
      while (num[0] == 0) {
        num.shift();
      }
    }
    return new QRPolynomial(num, 0);
  }


  // ---------------------------------------------------------------------
  // RS_BLOCK_TABLE
  // ---------------------------------------------------------------------
  /*
  二维码各个版本信息[块数, 每块中的数据块数, 每块中的信息块数]
   */ };
var RS_BLOCK_TABLE = [
// L
// M
// Q
// H
// 1
[1, 26, 19],
[1, 26, 16],
[1, 26, 13],
[1, 26, 9],

// 2
[1, 44, 34],
[1, 44, 28],
[1, 44, 22],
[1, 44, 16],

// 3
[1, 70, 55],
[1, 70, 44],
[2, 35, 17],
[2, 35, 13],

// 4
[1, 100, 80],
[2, 50, 32],
[2, 50, 24],
[4, 25, 9],

// 5
[1, 134, 108],
[2, 67, 43],
[2, 33, 15, 2, 34, 16],
[2, 33, 11, 2, 34, 12],

// 6
[2, 86, 68],
[4, 43, 27],
[4, 43, 19],
[4, 43, 15],

// 7
[2, 98, 78],
[4, 49, 31],
[2, 32, 14, 4, 33, 15],
[4, 39, 13, 1, 40, 14],

// 8
[2, 121, 97],
[2, 60, 38, 2, 61, 39],
[4, 40, 18, 2, 41, 19],
[4, 40, 14, 2, 41, 15],

// 9
[2, 146, 116],
[3, 58, 36, 2, 59, 37],
[4, 36, 16, 4, 37, 17],
[4, 36, 12, 4, 37, 13],

// 10
[2, 86, 68, 2, 87, 69],
[4, 69, 43, 1, 70, 44],
[6, 43, 19, 2, 44, 20],
[6, 43, 15, 2, 44, 16],

// 11
[4, 101, 81],
[1, 80, 50, 4, 81, 51],
[4, 50, 22, 4, 51, 23],
[3, 36, 12, 8, 37, 13],

// 12
[2, 116, 92, 2, 117, 93],
[6, 58, 36, 2, 59, 37],
[4, 46, 20, 6, 47, 21],
[7, 42, 14, 4, 43, 15],

// 13
[4, 133, 107],
[8, 59, 37, 1, 60, 38],
[8, 44, 20, 4, 45, 21],
[12, 33, 11, 4, 34, 12],

// 14
[3, 145, 115, 1, 146, 116],
[4, 64, 40, 5, 65, 41],
[11, 36, 16, 5, 37, 17],
[11, 36, 12, 5, 37, 13],

// 15
[5, 109, 87, 1, 110, 88],
[5, 65, 41, 5, 66, 42],
[5, 54, 24, 7, 55, 25],
[11, 36, 12],

// 16
[5, 122, 98, 1, 123, 99],
[7, 73, 45, 3, 74, 46],
[15, 43, 19, 2, 44, 20],
[3, 45, 15, 13, 46, 16],

// 17
[1, 135, 107, 5, 136, 108],
[10, 74, 46, 1, 75, 47],
[1, 50, 22, 15, 51, 23],
[2, 42, 14, 17, 43, 15],

// 18
[5, 150, 120, 1, 151, 121],
[9, 69, 43, 4, 70, 44],
[17, 50, 22, 1, 51, 23],
[2, 42, 14, 19, 43, 15],

// 19
[3, 141, 113, 4, 142, 114],
[3, 70, 44, 11, 71, 45],
[17, 47, 21, 4, 48, 22],
[9, 39, 13, 16, 40, 14],

// 20
[3, 135, 107, 5, 136, 108],
[3, 67, 41, 13, 68, 42],
[15, 54, 24, 5, 55, 25],
[15, 43, 15, 10, 44, 16],

// 21
[4, 144, 116, 4, 145, 117],
[17, 68, 42],
[17, 50, 22, 6, 51, 23],
[19, 46, 16, 6, 47, 17],

// 22
[2, 139, 111, 7, 140, 112],
[17, 74, 46],
[7, 54, 24, 16, 55, 25],
[34, 37, 13],

// 23
[4, 151, 121, 5, 152, 122],
[4, 75, 47, 14, 76, 48],
[11, 54, 24, 14, 55, 25],
[16, 45, 15, 14, 46, 16],

// 24
[6, 147, 117, 4, 148, 118],
[6, 73, 45, 14, 74, 46],
[11, 54, 24, 16, 55, 25],
[30, 46, 16, 2, 47, 17],

// 25
[8, 132, 106, 4, 133, 107],
[8, 75, 47, 13, 76, 48],
[7, 54, 24, 22, 55, 25],
[22, 45, 15, 13, 46, 16],

// 26
[10, 142, 114, 2, 143, 115],
[19, 74, 46, 4, 75, 47],
[28, 50, 22, 6, 51, 23],
[33, 46, 16, 4, 47, 17],

// 27
[8, 152, 122, 4, 153, 123],
[22, 73, 45, 3, 74, 46],
[8, 53, 23, 26, 54, 24],
[12, 45, 15, 28, 46, 16],

// 28
[3, 147, 117, 10, 148, 118],
[3, 73, 45, 23, 74, 46],
[4, 54, 24, 31, 55, 25],
[11, 45, 15, 31, 46, 16],

// 29
[7, 146, 116, 7, 147, 117],
[21, 73, 45, 7, 74, 46],
[1, 53, 23, 37, 54, 24],
[19, 45, 15, 26, 46, 16],

// 30
[5, 145, 115, 10, 146, 116],
[19, 75, 47, 10, 76, 48],
[15, 54, 24, 25, 55, 25],
[23, 45, 15, 25, 46, 16],

// 31
[13, 145, 115, 3, 146, 116],
[2, 74, 46, 29, 75, 47],
[42, 54, 24, 1, 55, 25],
[23, 45, 15, 28, 46, 16],

// 32
[17, 145, 115],
[10, 74, 46, 23, 75, 47],
[10, 54, 24, 35, 55, 25],
[19, 45, 15, 35, 46, 16],

// 33
[17, 145, 115, 1, 146, 116],
[14, 74, 46, 21, 75, 47],
[29, 54, 24, 19, 55, 25],
[11, 45, 15, 46, 46, 16],

// 34
[13, 145, 115, 6, 146, 116],
[14, 74, 46, 23, 75, 47],
[44, 54, 24, 7, 55, 25],
[59, 46, 16, 1, 47, 17],

// 35
[12, 151, 121, 7, 152, 122],
[12, 75, 47, 26, 76, 48],
[39, 54, 24, 14, 55, 25],
[22, 45, 15, 41, 46, 16],

// 36
[6, 151, 121, 14, 152, 122],
[6, 75, 47, 34, 76, 48],
[46, 54, 24, 10, 55, 25],
[2, 45, 15, 64, 46, 16],

// 37
[17, 152, 122, 4, 153, 123],
[29, 74, 46, 14, 75, 47],
[49, 54, 24, 10, 55, 25],
[24, 45, 15, 46, 46, 16],

// 38
[4, 152, 122, 18, 153, 123],
[13, 74, 46, 32, 75, 47],
[48, 54, 24, 14, 55, 25],
[42, 45, 15, 32, 46, 16],

// 39
[20, 147, 117, 4, 148, 118],
[40, 75, 47, 7, 76, 48],
[43, 54, 24, 22, 55, 25],
[10, 45, 15, 67, 46, 16],

// 40
[19, 148, 118, 6, 149, 119],
[18, 75, 47, 31, 76, 48],
[34, 54, 24, 34, 55, 25],
[20, 45, 15, 61, 46, 16]];


/**
                            * 根据数据获取对应版本
                            * @return {[type]} [description]
                            */
QRCodeAlg.prototype.getRightType = function () {
  for (var typeNumber = 1; typeNumber < 41; typeNumber++) {
    var rsBlock = RS_BLOCK_TABLE[(typeNumber - 1) * 4 + this.errorCorrectLevel];
    if (rsBlock == undefined) {
      throw new Error('bad rs block @ typeNumber:' + typeNumber + '/errorCorrectLevel:' + this.errorCorrectLevel);
    }
    var length = rsBlock.length / 3;
    var totalDataCount = 0;
    for (var i = 0; i < length; i++) {
      var count = rsBlock[i * 3 + 0];
      var dataCount = rsBlock[i * 3 + 2];
      totalDataCount += dataCount * count;
    }
    var lengthBytes = typeNumber > 9 ? 2 : 1;
    if (this.utf8bytes.length + lengthBytes < totalDataCount || typeNumber == 40) {
      this.typeNumber = typeNumber;
      this.rsBlock = rsBlock;
      this.totalDataCount = totalDataCount;
      break;
    }
  }
};

// ---------------------------------------------------------------------
// QRBitBuffer
// ---------------------------------------------------------------------
function QRBitBuffer() {
  this.buffer = new Array();
  this.length = 0;
}
QRBitBuffer.prototype = {
  get: function get(index) {
    var bufIndex = Math.floor(index / 8);
    return this.buffer[bufIndex] >>> 7 - index % 8 & 1;
  },
  put: function put(num, length) {
    for (var i = 0; i < length; i++) {
      this.putBit(num >>> length - i - 1 & 1);
    }
  },
  putBit: function putBit(bit) {
    var bufIndex = Math.floor(this.length / 8);
    if (this.buffer.length <= bufIndex) {
      this.buffer.push(0);
    }
    if (bit) {
      this.buffer[bufIndex] |= 0x80 >>> this.length % 8;
    }
    this.length++;
  } };

/***/ }),
/* 71 */
/*!***********************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/api/tool/share.api.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.share = share;exports.shareText = shareText;exports.shareImage = shareImage;exports.shareCopy = shareCopy;exports.shareDown = shareDown;exports.shareScene2 = void 0;var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
/*  分享图文
                                                                                                                                                                                                                                                                                                                                                                                                                   *  scene:场景传入 shareScene中的值:weixin、wexinFriend、qq、weibo、copy、save、等
                                                                                                                                                                                                                                                                                                                                                                                                                   *  title: 标题
                                                                                                                                                                                                                                                                                                                                                                                                                   *  summary: 简介
                                                                                                                                                                                                                                                                                                                                                                                                                   *  url:图片地址、音频地址、视频地址
                                                                                                                                                                                                                                                                                                                                                                                                                   *  href: 分享链接
                                                                                                                                                                                                                                                                                                                                                                                                                   */
function share(data, title, summary, url, href) {
  uni.share({
    provider: data.provider,
    scene: data.scene,
    type: 0,
    href: href,
    title: title,
    summary: summary,
    imageUrl: url });

}

/*  分享文字
   *  scene:场景传入 shareScene中的值:weixin、wexinFriend、qq、weibo等
   *  text: 文本文字
   */
function shareText(data, text) {
  uni.share({
    provider: data.provider,
    scene: data.scene,
    type: 1,
    summary: text,
    success: function success(res) {},
    fail: function fail(err) {
      _ala.default.toast(err);
    } });

}

/*  分享图片
   *  scene:场景传入 shareScene中的值:weixin、wexinFriend、qq、weibo等
   *  imageUrl: 图片地址，可以是远程地址
   */
function shareImage(data, imageUrl) {
  uni.share({
    provider: data.provider,
    scene: data.scene,
    type: 2,
    imageUrl: imageUrl,
    success: function success(res) {},
    fail: function fail(err) {
      _ala.default.toast(err);
    } });

}

/*
   * 获取分享产场景
   */
function getScene(scene) {
  var shareScene = shareScene2[scene];
  // var shareScene = 'weixin'
  if (!shareScene) {
    _ala.default.toast('请输入正确分享场景,场景值：weixin、wexinFriend、qq、weibo等');
  }
  return shareScene;
}

/*
   * 分享复制
   *
   */
function shareCopy(text) {
  uni.setClipboardData({
    data: text,
    complete: function complete() {
      uni.showToast({
        title: '已复制到剪贴板' });

    } });

}


/**
   * 下载图片到本地
   * 
   * */
function shareDown(url) {
  uni.downloadFile({
    url: url,
    success: function success(res) {
      if (res.statusCode === 200) {
        uni.saveImageToPhotosAlbum({
          filePath: res.tempFilePath,
          success: function success(res) {
            uni.showToast({
              title: '保存图片成功' });

          } });

      }
    } });

}

/*
   * 分享更多
   *
   */
function shareMore() {}
// 分享场景
var shareScene2 = {
  weixin: {
    name: '微信好友',
    provider: 'weixin',
    scene: 'WXSceneSession',
    icon: 'icon-weixin' },

  weixinFriend: {
    name: '微信朋友圈',
    provider: 'weixin',
    scene: 'WXSenceTimeline',
    icon: 'icon-weixin-friend' },

  qq: {
    name: 'QQ好友',
    provider: 'qq',
    scene: 'qq',
    icon: 'icon-qq' },

  weibo: {
    name: '微博',
    provider: 'sinaweibo',
    scene: 'sinaweibo',
    icon: 'icon-weibo' },

  save: {
    name: '保存下载',
    provider: 'save',
    scene: 'save',
    icon: 'icon-save' },

  copy: {
    name: '复制',
    provider: 'copy',
    scene: 'copy',
    icon: 'icon-copy' },

  more: {
    name: '更多',
    provider: 'more',
    scene: 'more',
    icon: 'icon-more' } };exports.shareScene2 = shareScene2;

/***/ }),
/* 72 */
/*!**************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/service/api/tool/thumbsUp.api.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.thumbsUpStatus = thumbsUpStatus;exports.thumbsUpAdd = thumbsUpAdd;exports.thumbsUpCancel = thumbsUpCancel;var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala.js */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

/*
                                                                                                                                                                                                                                                                                                                                                           * 点赞状态，已经点赞返回true，没有点赞返回false
                                                                                                                                                                                                                                                                                                                                                           * 用来判断点赞按钮的点赞转态
                                                                                                                                                                                                                                                                                                                                                           * @para type：实体类型：比如商品Product,订单:Order,用户:User
                                                                                                                                                                                                                                                                                                                                                           * @para id 实体Id：比如商品Id，订单Id等
                                                                                                                                                                                                                                                                                                                                                           */
function thumbsUpStatus(type, id) {
  var para = {
    type: type,
    entityId: id };

  var result = _ala.default.httpGet('Api/thumbsUp/Status', para);
  return result;
}

/*
   * 添加点赞
   * @para type：实体类型：比如商品Product,订单:Order,用户:User
   * @para id 实体Id：比如商品Id，订单Id等
   */
function thumbsUpAdd(type, id) {
  var para = {
    type: type,
    entityId: id };

  var result = _ala.default.httpPost('Api/thumbsUp/Add', para);
  return result;
}

/*
   * 添加点赞
   * @para type：实体类型：比如商品Product,订单:Order,用户:User
   * @para id 实体Id：比如商品Id，订单Id等
   */
function thumbsUpCancel(type, id) {
  var para = {
    type: type,
    entityId: id };

  var result = _ala.default.httpPost('Api/thumbsUp/Cancel', para);
  return result;
}

/***/ }),
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */
/*!*******************************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/main.js?{"page":"pages%2Fsubnvue%2Fmanage%2Ftop"} ***!
  \*******************************************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _dcloudio_uni_stat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @dcloudio/uni-stat */ 1);
/* harmony import */ var _dcloudio_uni_stat__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_dcloudio_uni_stat__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var uni_app_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! uni-app-style */ 5);
/* harmony import */ var uni_app_style__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(uni_app_style__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _pages_subnvue_manage_top_nvue_mpType_page__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./pages/subnvue/manage/top.nvue?mpType=page */ 78);

        
        
        
        _pages_subnvue_manage_top_nvue_mpType_page__WEBPACK_IMPORTED_MODULE_2__["default"].mpType = 'page'
        _pages_subnvue_manage_top_nvue_mpType_page__WEBPACK_IMPORTED_MODULE_2__["default"].route = 'pages/subnvue/manage/top'
        _pages_subnvue_manage_top_nvue_mpType_page__WEBPACK_IMPORTED_MODULE_2__["default"].el = '#root'
        new Vue(_pages_subnvue_manage_top_nvue_mpType_page__WEBPACK_IMPORTED_MODULE_2__["default"])
        

/***/ }),
/* 78 */
/*!***********************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/pages/subnvue/manage/top.nvue?mpType=page ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _top_nvue_vue_type_template_id_0c1b8e40_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./top.nvue?vue&type=template&id=0c1b8e40&mpType=page */ 79);
/* harmony import */ var _top_nvue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./top.nvue?vue&type=script&lang=js&mpType=page */ 81);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _top_nvue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _top_nvue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 16);

var renderjs


function injectStyles (context) {
  
  if(!this.options.style){
          this.options.style = {}
      }
      if(Vue.prototype.__merge_style && Vue.prototype.__$appStyle__){
        Vue.prototype.__merge_style(Vue.prototype.__$appStyle__, this.options.style)
      }
      if(Vue.prototype.__merge_style){
                Vue.prototype.__merge_style(__webpack_require__(/*! ./top.nvue?vue&type=style&index=0&lang=scss&mpType=page */ 83).default, this.options.style)
            }else{
                Object.assign(this.options.style,__webpack_require__(/*! ./top.nvue?vue&type=style&index=0&lang=scss&mpType=page */ 83).default)
            }

}

/* normalize component */

var component = Object(_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
  _top_nvue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__["default"],
  _top_nvue_vue_type_template_id_0c1b8e40_mpType_page__WEBPACK_IMPORTED_MODULE_0__["render"],
  _top_nvue_vue_type_template_id_0c1b8e40_mpType_page__WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
  false,
  null,
  null,
  "312a0e20",
  false,
  _top_nvue_vue_type_template_id_0c1b8e40_mpType_page__WEBPACK_IMPORTED_MODULE_0__["components"],
  renderjs
)

injectStyles.call(component)
component.options.__file = "C:/Users/aa/Desktop/工作/bddweb/src/pages/subnvue/manage/top.nvue"
/* harmony default export */ __webpack_exports__["default"] = (component.exports);

/***/ }),
/* 79 */
/*!*****************************************************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/pages/subnvue/manage/top.nvue?vue&type=template&id=0c1b8e40&mpType=page ***!
  \*****************************************************************************************************************/
/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_template_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_7_0_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_template_id_0c1b8e40_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-hbuilderx/packages/webpack-uni-nvue-loader/lib/template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--7-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./top.nvue?vue&type=template&id=0c1b8e40&mpType=page */ 80);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_template_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_7_0_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_template_id_0c1b8e40_mpType_page__WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_template_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_7_0_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_template_id_0c1b8e40_mpType_page__WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_template_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_7_0_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_template_id_0c1b8e40_mpType_page__WEBPACK_IMPORTED_MODULE_0__["recyclableRender"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "components", function() { return _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_template_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_7_0_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_template_id_0c1b8e40_mpType_page__WEBPACK_IMPORTED_MODULE_0__["components"]; });



/***/ }),
/* 80 */
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-hbuilderx/packages/webpack-uni-nvue-loader/lib/template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--7-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/aa/Desktop/工作/bddweb/src/pages/subnvue/manage/top.nvue?vue&type=template&id=0c1b8e40&mpType=page ***!

/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return recyclableRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "components", function() { return components; });
var components
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("view", { staticClass: ["index-bg"] }, [
    _c(
      "view",
      {
        staticClass: ["index-bg-show"],
        style: {
          width: _vm.screenWidth + "px",
          height: 45 + _vm.statusHeight + "px"
        }
      },
      [
        _c("u-image", {
          style: {
            width: _vm.screenWidth + "px",
            height: 45 + _vm.statusHeight + "px"
          },
          attrs: { src: "/static/image/home/index_nav_bg.png" }
        })
      ],
      1
    ),
    _c(
      "view",
      {
        staticClass: ["index-nav"],
        style: {
          width: _vm.screenWidth + "px",
          marginTop: _vm.statusHeight + "px"
        }
      },
      [
        _c(
          "view",
          { staticClass: ["index-nav-left"] },
          [
            _c("u-image", {
              staticClass: ["index-nav-left-icon"],
              attrs: { src: "/static/image/home/address.png" }
            }),
            _c(
              "u-text",
              {
                staticClass: ["index-nav-left-text"],
                on: { click: _vm.addressClick }
              },
              [_vm._v(_vm._s(_vm.address))]
            ),
            _c(
              "u-text",
              {
                staticClass: ["index-nav-left-content"],
                style: { width: _vm.screenWidth - 205 + "px" }
              },
              [_vm._v("店铺管理")]
            )
          ],
          1
        ),
        _c(
          "view",
          { staticClass: ["index-nav-right"] },
          [
            _c("u-image", {
              staticClass: ["index-nav-right-left"],
              attrs: { src: "/static/image/home/hongbao.png" }
            }),
            _c("u-image", {
              staticClass: ["index-nav-right-right"],
              attrs: { src: "/static/image/home/msg.png" }
            })
          ],
          1
        )
      ]
    )
  ])
}
var recyclableRender = false
var staticRenderFns = []
render._withStripped = true



/***/ }),
/* 81 */
/*!***********************************************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/pages/subnvue/manage/top.nvue?vue&type=script&lang=js&mpType=page ***!
  \***********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _D_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_ref_4_0_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_4_1_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/babel-loader/lib??ref--4-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--4-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./top.nvue?vue&type=script&lang=js&mpType=page */ 82);
/* harmony import */ var _D_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_ref_4_0_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_4_1_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_D_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_ref_4_0_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_4_1_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _D_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_ref_4_0_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_4_1_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _D_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_ref_4_0_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_4_1_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_D_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_ref_4_0_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_4_1_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),
/* 82 */
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--4-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/aa/Desktop/工作/bddweb/src/pages/subnvue/manage/top.nvue?vue&type=script&lang=js&mpType=page ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _regenerator = _interopRequireDefault(__webpack_require__(/*! ./node_modules/@babel/runtime/regenerator */ 31));



















var _ala = _interopRequireDefault(__webpack_require__(/*! @/service/ala */ 28));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}var _default =
{
  data: function data() {
    return {
      screenWidth: 0,
      statusHeight: 0,
      list: ['推荐', '招商', '直播', '体验', '培训', '采集'],
      tabIndex: 0,
      address: '' };

  },
  mounted: function mounted() {
    this.init();
  },
  methods: {
    init: function () {var _init = _asyncToGenerator( /*#__PURE__*/_regenerator.default.mark(function _callee() {var _this = this;return _regenerator.default.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
                this.screenWidth = _ala.default.screenWidth();
                this.statusHeight = _ala.default.statusHeight();
                uni.$on('imtRecentCity', function () {
                  _this.address = _ala.default.localGet('imtRecentCity');
                });
                this.address = _ala.default.localGet('imtRecentCity');
                this.address = '番禺区';_context.next = 7;return (

                  _ala.default.addressLocation());case 7:this.address = _context.sent;case 8:case "end":return _context.stop();}}}, _callee, this);}));function init() {return _init.apply(this, arguments);}return init;}(),


    addressClick: function addressClick() {
      _ala.default.to('/pages/address/index');
    },
    tabClick: function tabClick(item, index) {
      this.tabIndex = index;
    } } };exports.default = _default;

/***/ }),
/* 83 */
/*!********************************************************************************************************************!*\
  !*** C:/Users/aa/Desktop/工作/bddweb/src/pages/subnvue/manage/top.nvue?vue&type=style&index=0&lang=scss&mpType=page ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_1_D_HBuilderX_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_9_oneOf_0_2_D_HBuilderX_plugins_uniapp_cli_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_0_3_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_4_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_style_index_0_lang_scss_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!./node_modules/@dcloudio/vue-cli-plugin-hbuilderx/packages/webpack-uni-nvue-loader/lib/style.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--9-oneOf-0-1!./node_modules/postcss-loader/src??ref--9-oneOf-0-2!./node_modules/sass-loader/lib/loader.js??ref--9-oneOf-0-3!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--9-oneOf-0-4!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./top.nvue?vue&type=style&index=0&lang=scss&mpType=page */ 84);
/* harmony import */ var _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_1_D_HBuilderX_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_9_oneOf_0_2_D_HBuilderX_plugins_uniapp_cli_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_0_3_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_4_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_style_index_0_lang_scss_mpType_page__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_1_D_HBuilderX_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_9_oneOf_0_2_D_HBuilderX_plugins_uniapp_cli_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_0_3_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_4_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_style_index_0_lang_scss_mpType_page__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_1_D_HBuilderX_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_9_oneOf_0_2_D_HBuilderX_plugins_uniapp_cli_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_0_3_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_4_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_style_index_0_lang_scss_mpType_page__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_1_D_HBuilderX_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_9_oneOf_0_2_D_HBuilderX_plugins_uniapp_cli_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_0_3_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_4_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_style_index_0_lang_scss_mpType_page__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
 /* harmony default export */ __webpack_exports__["default"] = (_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_hbuilderx_packages_webpack_uni_nvue_loader_lib_style_js_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_1_D_HBuilderX_plugins_uniapp_cli_node_modules_postcss_loader_src_index_js_ref_9_oneOf_0_2_D_HBuilderX_plugins_uniapp_cli_node_modules_sass_loader_lib_loader_js_ref_9_oneOf_0_3_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_9_oneOf_0_4_D_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_top_nvue_vue_type_style_index_0_lang_scss_mpType_page__WEBPACK_IMPORTED_MODULE_0___default.a); 

/***/ }),
/* 84 */

  !*** ./node_modules/@dcloudio/vue-cli-plugin-hbuilderx/packages/webpack-uni-nvue-loader/lib/style.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--9-oneOf-0-1!./node_modules/postcss-loader/src??ref--9-oneOf-0-2!./node_modules/sass-loader/lib/loader.js??ref--9-oneOf-0-3!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--9-oneOf-0-4!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/aa/Desktop/工作/bddweb/src/pages/subnvue/manage/top.nvue?vue&type=style&index=0&lang=scss&mpType=page ***!

/*! no static exports found */
/***/ (function(module, exports) {

module.exports = {
  "index-nav": {
    "height": "45",
    "paddingTop": 0,
    "paddingRight": "14",
    "paddingBottom": 0,
    "paddingLeft": "14",
    "flexDirection": "row",
    "alignItems": "center",
    "justifyContent": "space-between"
  },
  "index-nav-left": {
    "flexDirection": "row",
    "justifyContent": "flex-start",
    "alignItems": "center"
  },
  "index-nav-left-icon": {
    "width": "18",
    "height": "18"
  },
  "index-nav-left-text": {
    "width": "50",
    "height": "20",
    "lineHeight": "20",
    "fontSize": "13",
    "fontWeight": "600",
    "color": "#ffffff",
    "overflow": "hidden",
    "textOverflow": "ellipsis",
    "lines": 1
  },
  "index-nav-left-content": {
    "height": "25",
    "color": "#FFFFFF",
    "textAlign": "center",
    "fontSize": "16",
    "fontWeight": "bold"
  },
  "index-nav-left-search": {
    "width": "20",
    "height": "20"
  },
  "index-nav-left-search-text": {
    "fontSize": "12",
    "marginLeft": "5",
    "color": "#a3a3a3"
  },
  "index-nav-right": {
    "flex": 1,
    "flexDirection": "row",
    "alignItems": "center",
    "justifyContent": "space-between"
  },
  "index-nav-right-left": {
    "height": "30",
    "width": "27",
    "marginLeft": "15"
  },
  "index-nav-right-right": {
    "height": "20",
    "width": "20",
    "marginTop": 0,
    "marginRight": "4",
    "marginBottom": 0,
    "marginLeft": "4"
  },
  "index-nav-right-icon": {
    "width": "25",
    "height": "25"
  },
  "index-bg": {
    "position": "relative"
  },
  "index-bg-show": {
    "position": "absolute",
    "top": 0,
    "left": 0
  }
}

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXA/N2Y4MCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3VuaS1zdGF0L2Rpc3QvaW5kZXguanM/OTIxYiIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYWEvRGVza3RvcC/lt6XkvZwvYmRkd2ViL3NyYy9wYWdlcy5qc29uP2NhMzgiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2FhL0Rlc2t0b3Av5bel5L2cL2JkZHdlYi9zcmMvcGFnZXMuanNvbj84ZDRmIiwid2VicGFjazovLy9DOi9Vc2Vycy9hYS9EZXNrdG9wL+W3peS9nC9iZGR3ZWIvc3JjL21haW4uanM/YmNiNCIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYWEvRGVza3RvcC/lt6XkvZwvYmRkd2ViL3NyYy9BcHAudnVlP2Q1NDciLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2FhL0Rlc2t0b3Av5bel5L2cL2JkZHdlYi9zcmMvQXBwLnZ1ZT9hZjk1Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcz9mMGM1IiwidW5pLWFwcDovLy9zZXJ2aWNlL2FsYS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYWEvRGVza3RvcC/lt6XkvZwvYmRkd2ViL3NyYy9zZXJ2aWNlL2FsYSBzeW5jIFxcLmpzJD9lZTY4IiwidW5pLWFwcDovLy9zZXJ2aWNlL2FsYS9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzP2EzNGEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS1tb2R1bGUuanM/YmJkZCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzPzk2Y2YiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYWxhL2JhY2suanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYWxhL2Jhc2UuanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvY29uZmlnLmpzIiwidW5pLWFwcDovLy9zZXJ2aWNlL2FsYS9jbGllbnQuanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYWxhL2NvcmUuanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYWxhL2NydWQuanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYWxhL2h0dHAuanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvdXRpbHMvdG9rZW4uanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvdXRpbHMvY3J5cHRvLmpzIiwidW5pLWFwcDovLy9zZXJ2aWNlL3V0aWxzL2NyeXB0by1qcy5qcyIsInVuaS1hcHA6Ly8vc2VydmljZS9hbGEvbG9hZC5qcyIsInVuaS1hcHA6Ly8vc2VydmljZS9hbGEvbG9jYWwuanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYWxhL2xvZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9saWIvZm9ybWF0LWxvZy5qcz8wZGU5IiwidW5pLWFwcDovLy9zZXJ2aWNlL2FsYS9wYXkuanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYWxhL3JvdXRlLmpzIiwidW5pLWFwcDovLy9zZXJ2aWNlL2FsYS9zY3JlZW4uanMiLCJ1bmktYXBwOi8vL3NlcnZpY2Uvc3RvcmUvaW5kZXguanMiLG51bGwsIndlYnBhY2s6Ly8vQzovVXNlcnMvYWEvRGVza3RvcC/lt6XkvZwvYmRkd2ViL25vZGVfbW9kdWxlcy92dWV4L2Rpc3QvdnVleC5lc20uanM/MjQxYiIsInVuaS1hcHA6Ly8vc2VydmljZS9hbGEvc3RyLmpzIiwidW5pLWFwcDovLy9zZXJ2aWNlL2FsYS90ZW5hbnQuanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYWxhL3RoZW1lLmpzIiwidW5pLWFwcDovLy9zZXJ2aWNlL2FsYS90aW1lLmpzIiwidW5pLWFwcDovLy9zZXJ2aWNlL2FsYS90by5qcyIsInVuaS1hcHA6Ly8vc2VydmljZS9hbGEvdG9hc3QuanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYWxhL3VuaS5qcyIsInVuaS1hcHA6Ly8vc2VydmljZS9hbGEvdXJsLmpzIiwidW5pLWFwcDovLy9zZXJ2aWNlL2FsYS91c2VyLmpzIiwidW5pLWFwcDovLy9zZXJ2aWNlL2FsYS92dWV4LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9hYS9EZXNrdG9wL+W3peS9nC9iZGR3ZWIvc3JjL3NlcnZpY2UvYXBpL3Rvb2wgc3luYyBcXC5hcGkuanMkP2FkMGEiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYXBpL3Rvb2wvY29tbWVudC5hcGkuanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYXBpL3Rvb2wvZmF2b3JpdGUuYXBpLmpzIiwidW5pLWFwcDovLy9zZXJ2aWNlL2FwaS90b29sL3FyY29kZS5hcGkuanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYXBpL3Rvb2wvcXJjb2RlL1FTLVNoYXJlUG9zdGVyLmpzIiwidW5pLWFwcDovLy9zZXJ2aWNlL2FwaS90b29sL3FyY29kZS9hcHAuanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYXBpL3Rvb2wvcXJjb2RlL1FSQ29kZUFsZy5qcyIsInVuaS1hcHA6Ly8vc2VydmljZS9hcGkvdG9vbC9zaGFyZS5hcGkuanMiLCJ1bmktYXBwOi8vL3NlcnZpY2UvYXBpL3Rvb2wvdGh1bWJzVXAuYXBpLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9hYS9EZXNrdG9wL+W3peS9nC9iZGR3ZWIvc3JjL21haW4uanM/Y2ZkYSIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYWEvRGVza3RvcC/lt6XkvZwvYmRkd2ViL3NyYy9wYWdlcy9zdWJudnVlL21hbmFnZS90b3AubnZ1ZT8xN2UxIiwid2VicGFjazovLy9DOi9Vc2Vycy9hYS9EZXNrdG9wL+W3peS9nC9iZGR3ZWIvc3JjL3BhZ2VzL3N1Ym52dWUvbWFuYWdlL3RvcC5udnVlP2Q1YTgiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL2FhL0Rlc2t0b3Av5bel5L2cL2JkZHdlYi9zcmMvcGFnZXMvc3VibnZ1ZS9tYW5hZ2UvdG9wLm52dWU/NTgxNCIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYWEvRGVza3RvcC/lt6XkvZwvYmRkd2ViL3NyYy9wYWdlcy9zdWJudnVlL21hbmFnZS90b3AubnZ1ZT9hYjNlIiwidW5pLWFwcDovLy9wYWdlcy9zdWJudnVlL21hbmFnZS90b3AubnZ1ZSIsIndlYnBhY2s6Ly8vQzovVXNlcnMvYWEvRGVza3RvcC/lt6XkvZwvYmRkd2ViL3NyYy9wYWdlcy9zdWJudnVlL21hbmFnZS90b3AubnZ1ZT85M2E4Iiwid2VicGFjazovLy9DOi9Vc2Vycy9hYS9EZXNrdG9wL+W3peS9nC9iZGR3ZWIvc3JjL3BhZ2VzL3N1Ym52dWUvbWFuYWdlL3RvcC5udnVlP2IxYTAiXSwibmFtZXMiOlsiU1RBVF9WRVJTSU9OIiwidmVyc2lvbiIsIlNUQVRfVVJMIiwiU1RBVF9INV9VUkwiLCJQQUdFX1BWRVJfVElNRSIsIkFQUF9QVkVSX1RJTUUiLCJPUEVSQVRJTkdfVElNRSIsIlVVSURfS0VZIiwiVVVJRF9WQUxVRSIsImdldFV1aWQiLCJ1dWlkIiwiZ2V0UGxhdGZvcm1OYW1lIiwicGx1cyIsInJ1bnRpbWUiLCJnZXREQ2xvdWRJZCIsImUiLCJ1bmkiLCJnZXRTdG9yYWdlU3luYyIsIkRhdGUiLCJub3ciLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJzZXRTdG9yYWdlU3luYyIsImdldFNnaW4iLCJzdGF0RGF0YSIsImFyciIsIk9iamVjdCIsImtleXMiLCJzb3J0QXJyIiwic29ydCIsInNnaW4iLCJzZ2luU3RyIiwiaSIsInNpZ24iLCJvcHRpb25zIiwic3Vic3RyIiwibGVuZ3RoIiwiZ2V0U3BsaWNpbmciLCJkYXRhIiwic3RyIiwiZ2V0VGltZSIsInBhcnNlSW50IiwicGxhdGZvcm1MaXN0IiwicHJvY2VzcyIsImdldFBhY2tOYW1lIiwicGFja05hbWUiLCJjYW5JVXNlIiwiZ2V0QWNjb3VudEluZm9TeW5jIiwibWluaVByb2dyYW0iLCJhcHBJZCIsImdldFZlcnNpb24iLCJnZXRDaGFubmVsIiwicGxhdGZvcm1OYW1lIiwiY2hhbm5lbCIsImdldFNjZW5lIiwic2NlbmUiLCJnZXRMYXVuY2hPcHRpb25zU3luYyIsIkZpcnN0X19WaXNpdF9fVGltZV9fS0VZIiwiTGFzdF9fVmlzaXRfX1RpbWVfX0tFWSIsImdldEZpcnN0VmlzaXRUaW1lIiwidGltZVN0b3JnZSIsInRpbWUiLCJyZW1vdmVTdG9yYWdlU3luYyIsImdldExhc3RWaXNpdFRpbWUiLCJQQUdFX1JFU0lERU5DRV9USU1FIiwiRmlyc3RfUGFnZV9yZXNpZGVuY2VfdGltZSIsIkxhc3RfUGFnZV9yZXNpZGVuY2VfdGltZSIsInNldFBhZ2VSZXNpZGVuY2VUaW1lIiwiZ2V0UGFnZVJlc2lkZW5jZVRpbWUiLCJUT1RBTF9fVklTSVRfX0NPVU5UIiwiZ2V0VG90YWxWaXNpdENvdW50IiwiY291bnQiLCJHZXRFbmNvZGVVUklDb21wb25lbnRPcHRpb25zIiwicHJvcCIsImVuY29kZVVSSUNvbXBvbmVudCIsIlNldF9fRmlyc3RfX1RpbWUiLCJTZXRfX0xhc3RfX1RpbWUiLCJnZXRGaXJzdFRpbWUiLCJnZXRMYXN0VGltZSIsImdldFJlc2lkZW5jZVRpbWUiLCJ0eXBlIiwicmVzaWRlbmNlVGltZSIsIm92ZXJ0aW1lIiwiZ2V0Um91dGUiLCJwYWdlcyIsImdldEN1cnJlbnRQYWdlcyIsInBhZ2UiLCJfc2VsZiIsIiR2bSIsIiRtcCIsImlzIiwiJHNjb3BlIiwicm91dGUiLCJnZXRQYWdlUm91dGUiLCJzZWxmIiwicXVlcnkiLCJfcXVlcnkiLCJKU09OIiwic3RyaW5naWZ5IiwiZ2V0UGFnZVR5cGVzIiwibXBUeXBlIiwiJG9wdGlvbnMiLCJjYWxpYnJhdGlvbiIsImV2ZW50TmFtZSIsImNvbnNvbGUiLCJlcnJvciIsIlBhZ2VzSnNvbiIsInJlcXVpcmUiLCJkZWZhdWx0Iiwic3RhdENvbmZpZyIsInJlc3VsdE9wdGlvbnMiLCJnZXRTeXN0ZW1JbmZvU3luYyIsIlV0aWwiLCJfcmV0cnkiLCJfcGxhdGZvcm0iLCJfbmF2aWdhdGlvbkJhclRpdGxlIiwiY29uZmlnIiwicmVwb3J0IiwibHQiLCJfb3BlcmF0aW5nVGltZSIsIl9yZXBvcnRpbmdSZXF1ZXN0RGF0YSIsIl9fcHJldmVudF90cmlnZ2VyaW5nIiwiX19saWNhdGlvbkhpZGUiLCJfX2xpY2F0aW9uU2hvdyIsIl9sYXN0UGFnZVJvdXRlIiwidXQiLCJtcG4iLCJhayIsImFwcGlkIiwidXN2IiwidiIsImNoIiwiY24iLCJwbiIsImN0IiwidCIsInR0IiwicCIsInBsYXRmb3JtIiwiYnJhbmQiLCJtZCIsIm1vZGVsIiwic3YiLCJzeXN0ZW0iLCJyZXBsYWNlIiwibXBzZGsiLCJTREtWZXJzaW9uIiwibXB2IiwibGFuZyIsImxhbmd1YWdlIiwicHIiLCJwaXhlbFJhdGlvIiwid3ciLCJ3aW5kb3dXaWR0aCIsIndoIiwid2luZG93SGVpZ2h0Iiwic3ciLCJzY3JlZW5XaWR0aCIsInNoIiwic2NyZWVuSGVpZ2h0IiwicGF0aCIsInNjIiwiX3NlbmRSZXBvcnRSZXF1ZXN0IiwiX3NlbmRIaWRlUmVxdWVzdCIsInVybHJlZiIsInVybHJlZl90cyIsInJvdXRlcGF0aCIsInRpdGxlTlZpZXciLCJ0aXRsZVRleHQiLCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0IiwiX3NlbmRQYWdlUmVxdWVzdCIsInVybCIsIl9zZW5kRXZlbnRSZXF1ZXN0Iiwia2V5IiwiZnZ0cyIsImx2dHMiLCJ0dmMiLCJnZXRQcm9wZXJ0eSIsImdldE5ldHdvcmtJbmZvIiwib3B0IiwicmVxdWVzdCIsInZhbHVlIiwiZV9uIiwiZV92IiwidG9TdHJpbmciLCJnZXROZXR3b3JrVHlwZSIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJuZXQiLCJuZXR3b3JrVHlwZSIsImdldExvY2F0aW9uIiwid2d0aW5mbyIsImdlb2NvZGUiLCJhZGRyZXNzIiwiY291bnRyeSIsInByb3ZpbmNlIiwiY2l0eSIsImxhdCIsImxhdGl0dWRlIiwibG5nIiwibG9uZ2l0dWRlIiwidGl0bGUiLCJ0dG4iLCJ0dHBqIiwidHRjIiwicmVxdWVzdERhdGEiLCJwdXNoIiwidW5pU3RhdERhdGEiLCJmaXJzdEFyciIsImNvbnRlbnRBcnIiLCJsYXN0QXJyIiwicmQiLCJmb3JFYWNoIiwiZWxtIiwibmV3RGF0YSIsIm9wdGlvbnNEYXRhIiwicmVxdWVzdHMiLCJpbWFnZVJlcXVlc3QiLCJzZXRUaW1lb3V0IiwiX3NlbmRSZXF1ZXN0IiwibWV0aG9kIiwiZmFpbCIsImltYWdlIiwiSW1hZ2UiLCJzcmMiLCJTdGF0IiwiaW5zdGFuY2UiLCJhZGRJbnRlcmNlcHRvciIsImFkZEludGVyY2VwdG9ySW5pdCIsImludGVyY2VwdExvZ2luIiwiaW50ZXJjZXB0U2hhcmUiLCJpbnRlcmNlcHRSZXF1ZXN0UGF5bWVudCIsImludm9rZSIsImFyZ3MiLCJjb21wbGV0ZSIsIl9sb2dpbiIsIl9zaGFyZSIsIl9wYXltZW50IiwiX3BhZ2VTaG93IiwiX2FwcGxpY2F0aW9uU2hvdyIsIl9wYWdlSGlkZSIsIl9hcHBsaWNhdGlvbkhpZGUiLCJlbSIsImluZm8iLCJlbVZhbCIsIm1lc3NhZ2UiLCJzdGFjayIsInN0YXQiLCJnZXRJbnN0YW5jZSIsImlzSGlkZSIsImxpZmVjeWNsZSIsIm9uTGF1bmNoIiwib25SZWFkeSIsInJlYWR5Iiwib25Mb2FkIiwibG9hZCIsIm9uU2hhcmVBcHBNZXNzYWdlIiwib2xkU2hhcmVBcHBNZXNzYWdlIiwiY2FsbCIsIm9uU2hvdyIsInNob3ciLCJvbkhpZGUiLCJoaWRlIiwib25VbmxvYWQiLCJvbkVycm9yIiwibWFpbiIsImFsYSIsImNyZWF0ZSIsIm1vZHVsZXMiLCJhc3NpZ24iLCJtb2R1bGVzQXBpIiwiYXBwSWNvbiIsImRvbU1vZHVsZSIsIndlZXgiLCJyZXF1aXJlTW9kdWxlIiwiYWRkUnVsZSIsImZvbnRGYW1pbHkiLCJhcHBVcGRhdGUiLCJzY3JlZW4iLCJsb2NrT3JpZW50YXRpb24iLCJwYXIiLCJBcHBDbGllbnQiLCJwYXlUeXBlIiwiVmVyc2lvbiIsImh0dHBHZXQiLCJyZXNwb25zZSIsInNob3dNb2RhbCIsImNvbnRlbnQiLCJub3RlIiwicmVzIiwiY29uZmlybSIsImNhbmNlbCIsImJhY2siLCJiYWNrVXJsIiwiaGlzdG9yeXMiLCJ2dWV4TG9jYWxHZXQiLCJ0byIsInNwbGljZSIsInZ1ZXhMb2NhbFNldCIsImN1cnJlbnRVcmwiLCJpbmRleE9mIiwiYmFja0FkZCIsImZpbHRlciIsInIiLCJ1bnNoaWZ0IiwicG9wIiwiaG9zdCIsImlzQnVpbGQiLCJiYXNlQ29uZmlnIiwiZ2V0UXVlcnkiLCJqc1RoaXMiLCJzZWxlY3RvclF1ZXJ5IiwiY3JlYXRlU2VsZWN0b3JRdWVyeSIsInNlbGVjdEFsbCIsImJvdW5kaW5nQ2xpZW50UmVjdCIsInNlbGVjdFZpZXdwb3J0Iiwic2Nyb2xsT2Zmc2V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJpc1RlbmFudCIsInByb2plY3RJZCIsInRoZW1lSWQiLCJwcml2YXRlS2V5IiwibW9kdWxlIiwiZXhwb3J0cyIsImNsaWVudCIsImNsaWVudFBheVR5cGUiLCJjbGllbnRVcGxvYWRBcGkiLCJhcGlVcmwiLCJoaXN0b3J5IiwiZ2V0VmlldyIsImludGFuY2UiLCJwYXJhIiwiaWQiLCIkcm91dGUiLCJ1bmRlZmluZWQiLCJ3aWRnZXQiLCJvYmplY3QiLCJqc29uIiwic2F2ZSIsInZpZXdNb2RlbCIsImh0dHBQb3N0Iiwic3RhdHVzIiwiZ2xvYmFsQ29uZmlnIiwiaGVhZGVyIiwiZ2V0SGVhZCIsInN0YXR1c0NvZGUiLCJ0b2FzdFdhcm4iLCJodHRwUHV0IiwiaHR0cERlbGV0ZSIsImhlYWRPYmoiLCJ0b2tlbiIsImdldFRva2VuIiwidXNlcklkIiwiZ2V0VXNlclRva2VuIiwidGVuYW50IiwidGltZXN0YW1wIiwiaW5kZXgiLCJzdWJzdHJpbmciLCJ0b0xvd2VyQ2FzZSIsImNyeXB0byIsIm1kNSIsImdldERpeVRva2VuIiwicm91bmQiLCJsb2dpblVzZXIiLCJ1c2VyIiwiQ3J5cHRvSlMiLCJNRDUiLCJlbmNyeXB0IiwidGV4dCIsImFjZUtleSIsImVuY3J5cHRUZXh0IiwiQUVTIiwiZ2V0S2V5IiwiZGVjcnlwdCIsImJ5dGVzIiwib3JpZ2luYWxUZXh0IiwiZW5jIiwiVXRmOCIsInVzZXJUb2tlbktleSIsInVzZXJLZXkiLCJhcGkiLCJsb2NhbEdldCIsInN0cklzRW1wdHkiLCJ0b2tlbktleSIsImJhc2U2NCIsIkJhc2U2NCIsInBhcnNlIiwidXRmOCIsInJvb3QiLCJmYWN0b3J5IiwiRiIsIm9iaiIsInN1YnR5cGUiLCJwcm90b3R5cGUiLCJDIiwiQ19saWIiLCJsaWIiLCJCYXNlIiwiZXh0ZW5kIiwib3ZlcnJpZGVzIiwibWl4SW4iLCJoYXNPd25Qcm9wZXJ0eSIsImluaXQiLCIkc3VwZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsInByb3BlcnRpZXMiLCJwcm9wZXJ0eU5hbWUiLCJjbG9uZSIsIldvcmRBcnJheSIsIndvcmRzIiwic2lnQnl0ZXMiLCJlbmNvZGVyIiwiSGV4IiwiY29uY2F0Iiwid29yZEFycmF5IiwidGhpc1dvcmRzIiwidGhhdFdvcmRzIiwidGhpc1NpZ0J5dGVzIiwidGhhdFNpZ0J5dGVzIiwiY2xhbXAiLCJ0aGF0Qnl0ZSIsImNlaWwiLCJzbGljZSIsIm5CeXRlcyIsIm1fdyIsIm1feiIsIm1hc2siLCJyY2FjaGUiLCJfciIsIkNfZW5jIiwiaGV4Q2hhcnMiLCJiaXRlIiwiam9pbiIsImhleFN0ciIsImhleFN0ckxlbmd0aCIsIkxhdGluMSIsImxhdGluMUNoYXJzIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwibGF0aW4xU3RyIiwibGF0aW4xU3RyTGVuZ3RoIiwiY2hhckNvZGVBdCIsImRlY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsIkVycm9yIiwidXRmOFN0ciIsInVuZXNjYXBlIiwiQnVmZmVyZWRCbG9ja0FsZ29yaXRobSIsInJlc2V0IiwiX2RhdGEiLCJfbkRhdGFCeXRlcyIsIl9hcHBlbmQiLCJfcHJvY2VzcyIsImRvRmx1c2giLCJkYXRhV29yZHMiLCJkYXRhU2lnQnl0ZXMiLCJibG9ja1NpemUiLCJibG9ja1NpemVCeXRlcyIsIm5CbG9ja3NSZWFkeSIsIm1heCIsIl9taW5CdWZmZXJTaXplIiwibldvcmRzUmVhZHkiLCJuQnl0ZXNSZWFkeSIsIm1pbiIsIm9mZnNldCIsIl9kb1Byb2Nlc3NCbG9jayIsInByb2Nlc3NlZFdvcmRzIiwiSGFzaGVyIiwiY2ZnIiwiX2RvUmVzZXQiLCJ1cGRhdGUiLCJtZXNzYWdlVXBkYXRlIiwiZmluYWxpemUiLCJoYXNoIiwiX2RvRmluYWxpemUiLCJfY3JlYXRlSGVscGVyIiwiaGFzaGVyIiwiX2NyZWF0ZUhtYWNIZWxwZXIiLCJDX2FsZ28iLCJITUFDIiwiYWxnbyIsIm1hcCIsIl9tYXAiLCJiYXNlNjRDaGFycyIsImJ5dGUxIiwiYnl0ZTIiLCJieXRlMyIsInRyaXBsZXQiLCJqIiwiY2hhckF0IiwicGFkZGluZ0NoYXIiLCJiYXNlNjRTdHIiLCJiYXNlNjRTdHJMZW5ndGgiLCJyZXZlcnNlTWFwIiwiX3JldmVyc2VNYXAiLCJwYWRkaW5nSW5kZXgiLCJwYXJzZUxvb3AiLCJiaXRzMSIsImJpdHMyIiwiVCIsImFicyIsInNpbiIsIl9oYXNoIiwiTSIsIm9mZnNldF9pIiwiTV9vZmZzZXRfaSIsIkgiLCJNX29mZnNldF8wIiwiTV9vZmZzZXRfMSIsIk1fb2Zmc2V0XzIiLCJNX29mZnNldF8zIiwiTV9vZmZzZXRfNCIsIk1fb2Zmc2V0XzUiLCJNX29mZnNldF82IiwiTV9vZmZzZXRfNyIsIk1fb2Zmc2V0XzgiLCJNX29mZnNldF85IiwiTV9vZmZzZXRfMTAiLCJNX29mZnNldF8xMSIsIk1fb2Zmc2V0XzEyIiwiTV9vZmZzZXRfMTMiLCJNX29mZnNldF8xNCIsIk1fb2Zmc2V0XzE1IiwiYSIsImIiLCJjIiwiZCIsIkZGIiwiR0ciLCJISCIsIklJIiwibkJpdHNUb3RhbCIsIm5CaXRzTGVmdCIsIm5CaXRzVG90YWxIIiwibkJpdHNUb3RhbEwiLCJIX2kiLCJ4IiwicyIsIm4iLCJIbWFjTUQ1IiwiVyIsIlNIQTEiLCJIbWFjU0hBMSIsIksiLCJpc1ByaW1lIiwic3FydE4iLCJzcXJ0IiwiZmFjdG9yIiwiZ2V0RnJhY3Rpb25hbEJpdHMiLCJuUHJpbWUiLCJwb3ciLCJTSEEyNTYiLCJmIiwiZyIsImgiLCJnYW1tYTB4IiwiZ2FtbWEwIiwiZ2FtbWExeCIsImdhbW1hMSIsIm1haiIsInNpZ21hMCIsInNpZ21hMSIsInQxIiwidDIiLCJIbWFjU0hBMjU2IiwiVXRmMTZCRSIsIlV0ZjE2IiwidXRmMTZDaGFycyIsImNvZGVQb2ludCIsInV0ZjE2U3RyIiwidXRmMTZTdHJMZW5ndGgiLCJVdGYxNkxFIiwic3dhcEVuZGlhbiIsIndvcmQiLCJBcnJheUJ1ZmZlciIsInN1cGVySW5pdCIsInN1YkluaXQiLCJ0eXBlZEFycmF5IiwiVWludDhBcnJheSIsIkludDhBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiSW50MTZBcnJheSIsIlVpbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIlVpbnQzMkFycmF5IiwiRmxvYXQzMkFycmF5IiwiRmxvYXQ2NEFycmF5IiwiYnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJ0eXBlZEFycmF5Qnl0ZUxlbmd0aCIsIl96bCIsIl96ciIsIl9zbCIsIl9zciIsIl9obCIsIl9ociIsIlJJUEVNRDE2MCIsImhsIiwiaHIiLCJ6bCIsInpyIiwic2wiLCJzciIsImFsIiwiYmwiLCJjbCIsImRsIiwiZWwiLCJhciIsImJyIiwiY3IiLCJkciIsImVyIiwiZjEiLCJmMiIsImYzIiwiZjQiLCJmNSIsInJvdGwiLCJ5IiwieiIsIkhtYWNSSVBFTUQxNjAiLCJfaGFzaGVyIiwiaGFzaGVyQmxvY2tTaXplIiwiaGFzaGVyQmxvY2tTaXplQnl0ZXMiLCJvS2V5IiwiX29LZXkiLCJpS2V5IiwiX2lLZXkiLCJvS2V5V29yZHMiLCJpS2V5V29yZHMiLCJpbm5lckhhc2giLCJobWFjIiwiUEJLREYyIiwia2V5U2l6ZSIsIml0ZXJhdGlvbnMiLCJjb21wdXRlIiwicGFzc3dvcmQiLCJzYWx0IiwiZGVyaXZlZEtleSIsImJsb2NrSW5kZXgiLCJkZXJpdmVkS2V5V29yZHMiLCJibG9ja0luZGV4V29yZHMiLCJibG9jayIsImJsb2NrV29yZHMiLCJibG9ja1dvcmRzTGVuZ3RoIiwiaW50ZXJtZWRpYXRlIiwiaW50ZXJtZWRpYXRlV29yZHMiLCJFdnBLREYiLCJTSEEyMjQiLCJIbWFjU0hBMjI0IiwiWDMyV29yZEFycmF5IiwiQ194NjQiLCJ4NjQiLCJYNjRXb3JkIiwiV29yZCIsImhpZ2giLCJsb3ciLCJYNjRXb3JkQXJyYXkiLCJ0b1gzMiIsIng2NFdvcmRzIiwieDY0V29yZHNMZW5ndGgiLCJ4MzJXb3JkcyIsIng2NFdvcmQiLCJ3b3Jkc0xlbmd0aCIsIlJIT19PRkZTRVRTIiwiUElfSU5ERVhFUyIsIlJPVU5EX0NPTlNUQU5UUyIsIm5ld1giLCJuZXdZIiwiTEZTUiIsInJvdW5kQ29uc3RhbnRNc3ciLCJyb3VuZENvbnN0YW50THN3IiwiYml0UG9zaXRpb24iLCJTSEEzIiwib3V0cHV0TGVuZ3RoIiwic3RhdGUiLCJfc3RhdGUiLCJuQmxvY2tTaXplTGFuZXMiLCJNMmkiLCJNMmkxIiwibGFuZSIsInRNc3ciLCJ0THN3IiwiVHgiLCJUeDQiLCJUeDEiLCJUeDFNc3ciLCJUeDFMc3ciLCJsYW5lSW5kZXgiLCJsYW5lTXN3IiwibGFuZUxzdyIsInJob09mZnNldCIsIlRQaUxhbmUiLCJUMCIsInN0YXRlMCIsIlRMYW5lIiwiVHgxTGFuZSIsIlR4MkxhbmUiLCJyb3VuZENvbnN0YW50IiwiYmxvY2tTaXplQml0cyIsIm91dHB1dExlbmd0aEJ5dGVzIiwib3V0cHV0TGVuZ3RoTGFuZXMiLCJoYXNoV29yZHMiLCJIbWFjU0hBMyIsIlg2NFdvcmRfY3JlYXRlIiwiU0hBNTEyIiwiSDAiLCJIMSIsIkgyIiwiSDMiLCJINCIsIkg1IiwiSDYiLCJINyIsIkgwaCIsIkgwbCIsIkgxaCIsIkgxbCIsIkgyaCIsIkgybCIsIkgzaCIsIkgzbCIsIkg0aCIsIkg0bCIsIkg1aCIsIkg1bCIsIkg2aCIsIkg2bCIsIkg3aCIsIkg3bCIsImFoIiwiYmgiLCJkaCIsImVoIiwiZmgiLCJmbCIsImdoIiwiZ2wiLCJoaCIsIldpIiwiV2loIiwiV2lsIiwiZ2FtbWEweGgiLCJnYW1tYTB4bCIsImdhbW1hMGgiLCJnYW1tYTBsIiwiZ2FtbWExeGgiLCJnYW1tYTF4bCIsImdhbW1hMWgiLCJnYW1tYTFsIiwiV2k3IiwiV2k3aCIsIldpN2wiLCJXaTE2IiwiV2kxNmgiLCJXaTE2bCIsImNoaCIsImNobCIsIm1hamgiLCJtYWpsIiwic2lnbWEwaCIsInNpZ21hMGwiLCJzaWdtYTFoIiwic2lnbWExbCIsIktpIiwiS2loIiwiS2lsIiwidDFsIiwidDFoIiwidDJsIiwidDJoIiwiSG1hY1NIQTUxMiIsIlNIQTM4NCIsIkhtYWNTSEEzODQiLCJDaXBoZXIiLCJjcmVhdGVFbmNyeXB0b3IiLCJfRU5DX1hGT1JNX01PREUiLCJjcmVhdGVEZWNyeXB0b3IiLCJfREVDX1hGT1JNX01PREUiLCJ4Zm9ybU1vZGUiLCJfeGZvcm1Nb2RlIiwiX2tleSIsImRhdGFVcGRhdGUiLCJmaW5hbFByb2Nlc3NlZERhdGEiLCJpdlNpemUiLCJzZWxlY3RDaXBoZXJTdHJhdGVneSIsIlBhc3N3b3JkQmFzZWRDaXBoZXIiLCJTZXJpYWxpemFibGVDaXBoZXIiLCJjaXBoZXIiLCJjaXBoZXJ0ZXh0IiwiU3RyZWFtQ2lwaGVyIiwiZmluYWxQcm9jZXNzZWRCbG9ja3MiLCJDX21vZGUiLCJtb2RlIiwiQmxvY2tDaXBoZXJNb2RlIiwiaXYiLCJFbmNyeXB0b3IiLCJEZWNyeXB0b3IiLCJfY2lwaGVyIiwiX2l2IiwiQ0JDIiwicHJvY2Vzc0Jsb2NrIiwieG9yQmxvY2siLCJlbmNyeXB0QmxvY2siLCJfcHJldkJsb2NrIiwidGhpc0Jsb2NrIiwiZGVjcnlwdEJsb2NrIiwiQ19wYWQiLCJwYWQiLCJQa2NzNyIsIm5QYWRkaW5nQnl0ZXMiLCJwYWRkaW5nV29yZCIsInBhZGRpbmdXb3JkcyIsInBhZGRpbmciLCJ1bnBhZCIsIkJsb2NrQ2lwaGVyIiwibW9kZUNyZWF0b3IiLCJfbW9kZSIsIl9fY3JlYXRvciIsIkNpcGhlclBhcmFtcyIsImNpcGhlclBhcmFtcyIsImZvcm1hdHRlciIsIkNfZm9ybWF0IiwiZm9ybWF0IiwiT3BlblNTTEZvcm1hdHRlciIsIk9wZW5TU0wiLCJvcGVuU1NMU3RyIiwiY2lwaGVydGV4dFdvcmRzIiwiZW5jcnlwdG9yIiwiY2lwaGVyQ2ZnIiwiYWxnb3JpdGhtIiwiX3BhcnNlIiwicGxhaW50ZXh0IiwiQ19rZGYiLCJrZGYiLCJPcGVuU1NMS2RmIiwiZXhlY3V0ZSIsImRlcml2ZWRQYXJhbXMiLCJDRkIiLCJnZW5lcmF0ZUtleXN0cmVhbUFuZEVuY3J5cHQiLCJrZXlzdHJlYW0iLCJFQ0IiLCJBbnNpWDkyMyIsImxhc3RCeXRlUG9zIiwiSXNvMTAxMjYiLCJJc285Nzk3MSIsIlplcm9QYWRkaW5nIiwiT0ZCIiwiX2tleXN0cmVhbSIsIk5vUGFkZGluZyIsIkhleEZvcm1hdHRlciIsImlucHV0IiwiU0JPWCIsIklOVl9TQk9YIiwiU1VCX01JWF8wIiwiU1VCX01JWF8xIiwiU1VCX01JWF8yIiwiU1VCX01JWF8zIiwiSU5WX1NVQl9NSVhfMCIsIklOVl9TVUJfTUlYXzEiLCJJTlZfU1VCX01JWF8yIiwiSU5WX1NVQl9NSVhfMyIsInhpIiwic3giLCJ4MiIsIng0IiwieDgiLCJSQ09OIiwiX25Sb3VuZHMiLCJfa2V5UHJpb3JSZXNldCIsImtleVdvcmRzIiwiblJvdW5kcyIsImtzUm93cyIsImtleVNjaGVkdWxlIiwiX2tleVNjaGVkdWxlIiwia3NSb3ciLCJpbnZLZXlTY2hlZHVsZSIsIl9pbnZLZXlTY2hlZHVsZSIsImludktzUm93IiwiX2RvQ3J5cHRCbG9jayIsInMwIiwiczEiLCJzMiIsInMzIiwidDAiLCJ0MyIsIlBDMSIsIlBDMiIsIkJJVF9TSElGVFMiLCJTQk9YX1AiLCJTQk9YX01BU0siLCJERVMiLCJrZXlCaXRzIiwia2V5Qml0UG9zIiwic3ViS2V5cyIsIl9zdWJLZXlzIiwiblN1YktleSIsInN1YktleSIsImJpdFNoaWZ0IiwiaW52U3ViS2V5cyIsIl9pbnZTdWJLZXlzIiwiX2xCbG9jayIsIl9yQmxvY2siLCJleGNoYW5nZUxSIiwiZXhjaGFuZ2VSTCIsImxCbG9jayIsInJCbG9jayIsIlRyaXBsZURFUyIsIl9kZXMxIiwiX2RlczIiLCJfZGVzMyIsIlJDNCIsImtleVNpZ0J5dGVzIiwiUyIsIl9TIiwia2V5Qnl0ZUluZGV4Iiwia2V5Qnl0ZSIsIl9pIiwiX2oiLCJnZW5lcmF0ZUtleXN0cmVhbVdvcmQiLCJrZXlzdHJlYW1Xb3JkIiwiUkM0RHJvcCIsImRyb3AiLCJDVFJHbGFkbWFuIiwiaW5jV29yZCIsImIxIiwiYjIiLCJiMyIsImluY0NvdW50ZXIiLCJjb3VudGVyIiwiX2NvdW50ZXIiLCJDXyIsIkciLCJSYWJiaXQiLCJYIiwiX1giLCJfQyIsIl9iIiwibmV4dFN0YXRlIiwiSVYiLCJJVl8wIiwiSVZfMSIsImkwIiwiaTIiLCJpMSIsImkzIiwiZ3giLCJnYSIsImdiIiwiQ1RSIiwiUmFiYml0TGVnYWN5IiwibG9hZE9wZW4iLCJzaG93TG9hZGluZyIsImhpZGVMb2FkaW5nIiwibG9hZENsb3NlIiwidGltZXIiLCJoaWRlVG9hc3QiLCJjbGVhclRpbWVvdXQiLCJhbGxLZXlzIiwibG9jYWxTZXQiLCJuYW1lIiwic2V0S2V5cyIsImxvY2FsSHR0cCIsImxvY2FsUmVtb3ZlIiwibG9jYWxDbGVhciIsImVsZW1lbnQiLCJ0b2FzdFN1Y2Nlc3MiLCJsb2ciLCJ0eXBvZiIsImlzRGVidWdNb2RlIiwiX19jaGFubmVsSWRfXyIsImZvcm1hdExvZyIsIl9sZW4iLCJBcnJheSIsInNoaWZ0IiwibXNncyIsInZUeXBlIiwidG9VcHBlckNhc2UiLCJtc2ciLCJsYXN0TXNnIiwidGVybWluYWwiLCJyb3V0ZUZ1bGxQYXRoIiwiZnVsbFBhdGgiLCJwYXJzZVBhcmFtcyIsInJvdXRlUGF0aCIsIm9wdGlvbiIsImlzQXJyYXkiLCJpbiIsInRlbXBBcnIiLCJ1cmxQYXJhbXNTdHIiLCJlcnIiLCJzY3JlZW5JbmZvIiwic3RhdHVzSGVpZ2h0Iiwic3RhdHVzQmFySGVpZ2h0Iiwic3RvcmUiLCJWdWUiLCJ1c2UiLCJWdWV4IiwiU3RvcmUiLCJoYXNMb2dpbiIsInBob25lVmVyaWZpY2F0aW9uIiwic2hvd1ByaWNlIiwiaW5EZWZhdWx0IiwibXV0YXRpb25zIiwibG9naW4iLCJsb2dvdXQiLCJzdHJUb0xvd2VyIiwic3RyVG9VcHBlciIsInN0clN1YlN0YXJ0Iiwic3RyYXRTdHIiLCJzdGFydCIsInN0ckZpcnN0TG93ZXIiLCJzdHJUZW1wIiwic3RyTGVuZ3RoIiwibGVuIiwidGhlbWVQYWdlIiwiYWxsUGFnZXMiLCJnZXRQYWdlSW5mbyIsInBhZ2VJbmZvIiwid2lkZ2V0cyIsIndpZGdldEl0ZW0iLCJmaWxlclBhZ2VJbmZvIiwidGhlbWVXaWRnZXQiLCJwYXJhbWV0ZXIiLCJmaWx0ZXJXaWRnZXRzIiwic2V0dGluZyIsImlzTG9naW4iLCJ1c2VySXNMb2dpbiIsInVzZXJDaGVja0xvZ2luIiwiYm9yZGVyIiwiYm9yZGVyQ2xhc3MiLCJzdHlsZSIsInN0eWxlQm9yZGVyIiwiY2xhc3MiLCJjb2xvck5hbWUiLCJsYXlvdXQiLCJjb2x1bW5zIiwiY29sIiwiYWxsUGFnZUluZm8iLCJ0aGVtZUFsbFBhZ2UiLCJmaW5kUGFnZUluZm8iLCJwYWdlTGlzdCIsImNsaWVudFR5cGUiLCJhbGxQYWdlQ2FjaGVLZXkiLCJpc1JlcXVlc3QiLCJsYXN0VXBkYXRlIiwidnVleFNldCIsInRpbWVBZ28iLCJ0aW1lRGF0ZSIsImRhdGVUaW1lU3RhbXAiLCJ0b1RpbWVTcGFuIiwibWludXRlIiwiaG91ciIsImRheSIsImRpZmZWYWx1ZSIsIm1pbkMiLCJob3VyQyIsImRheUMiLCJ0b0hvbWUiLCJjb252ZXJ0VXJsIiwic3dpdGNoVGFiIiwibmF2aWdhdGVUbyIsInJlZ1BhZ2VzIiwicmVhbFBhZ2VzIiwic2hvd1NwbGl0IiwidG9QYWdlc1VybCIsInNwbGl0IiwibGlua1NwbGl0IiwidG9hc3QiLCJzaG93VG9hc3QiLCJkdXJhdGlvbiIsImljb24iLCJ0b2FzdEJvdHRvbiIsInRvYXN0Q2VudGVyIiwidW5pU3ViTlZ1ZSIsImdldFN1Yk5WdWVCeUlkIiwidGVzdCIsInVybFF1ZXJ5IiwicmVnIiwiUmVnRXhwIiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJtYXRjaCIsInVybElkIiwidXJsVHlwZSIsIlR5cGUiLCJ1cmxJbWFnZSIsInVybFRvUGFyYW1zIiwidXJsVG9PYmplY3QiLCJ0ZW1wIiwidGVtcDIiLCJ1c2VySW5mbyIsInVzZXJMb2dpbiIsInVzZXJuYW1lIiwib3BlbklkIiwidXNlck5hbWUiLCJzZXRVc2VyIiwidXNlckxvZ2luQWZ0ZXJUbyIsInVzZXJSZWciLCJ1c2VyTG9nb3V0Iiwic2hvd0NhbmNlbCIsInVzZXJUb2tlbiIsInVzZXJUZXh0IiwidXNlclRvTG9naW5QYWdlIiwidXNlckluZGV4IiwidXNlcmNvZGUiLCJyZUxhdW5jaCIsIndlaXhpblB1YmxvZ2luIiwic2Vzc2lvbiIsIm9wZW5pZCIsInZ1ZXhHZXQiLCJjb21tZW50IiwiZW50aXR5SWQiLCJjb21tZW50UmVwbHkiLCJjb21tZW50aWQiLCJjb21tZW50SWQiLCJjb21tZW50VXAiLCJpc3VwIiwiZW50aXR5IiwiaXNVcCIsImNvbW1lbnRSZXBseVVwIiwiZmF2b3JpdGVTdGF0dXMiLCJmYXZvcml0ZUFkZCIsImZhdm9yaXRlQ2FuY2VsIiwicXJjb2RlIiwiY3JlYXRlUXJDb2RlIiwibGlzdCIsInFyY29kZUxpc3QiLCJkcmF3UXJDb2RlIiwiZHJhd1FyVGV4dCIsImRyYXdRckltYWdlIiwiZ2V0Q2FudmFzIiwicG9zdGVyIiwiZ2V0U2hhcmVQb3N0ZXIiLCJUZXh0IiwiYWxwaGEiLCJkeCIsImR5IiwiWSIsInNpemUiLCJTaXplIiwiUGF0aCIsImluZm9DYWxsQmFjayIsImltYWdlSW5mbyIsImRXaWR0aCIsIldpZHRoIiwiZEhlaWdodCIsIkhlaWdodCIsImZvbnRTdHlsZSIsImNvbG9yIiwiQ29sb3IiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJfdGhpcyIsInBvc3RlckNhbnZhc0lkIiwiZGVsYXlUaW1lU2NhbGUiLCJiYWNrZ3JvdW5kSW1hZ2UiLCJiYWNrZ3JvdW5kVXJsIiwiZHJhd0FycmF5IiwiYmdPYmoiLCJiZ1NjYWxlIiwicnMiLCJyaiIsInNldENhbnZhc1dIIiwiU2hyZVVzZXJQb3N0ZXJCYWNrZ3JvdW5kS2V5IiwiaWRLZXkiLCJpc01wIiwicmV0dXJuUHJvbWlzZSIsInJlc3VsdDEiLCJyZW1vdmVQb3N0ZXJTdG9yYWdlIiwiX2FwcCIsInJlc3VsdDIiLCJmb3JtRGF0YSIsImJhY2tncm91bmQiLCJyZXNlcnZlIiwidGV4dEFycmF5IiwicXJDb2RlQXJyYXkiLCJpbWFnZXNBcnJheSIsInNldENhbnZhc1RvVGVtcEZpbGVQYXRoIiwic2V0RHJhdyIsIkNvbnRleHQiLCJkcmF3RGVsYXlUaW1lIiwiY3JlYXRlQ2FudmFzQ29udGV4dCIsIndpZHRoIiwiaGVpZ2h0IiwiZ2V0U2hyZVVzZXJQb3N0ZXJCYWNrZ3JvdW5kIiwicGFyYW1zIiwic2V0SW1hZ2UiLCJzZXRUZXh0IiwiZG93bmxvYWRGaWxlX1Byb21pc2VGYyIsImlzUHJvbWlzZSIsImhhc0FsbEluZm9DYWxsYmFjayIsImRyYXdBcnJheUl0ZW0iLCJpc0ZuIiwiYWxsSW5mb0NhbGxiYWNrIiwiaXNPYmplY3QiLCJkcmF3QXJyYXlfY29weSIsImFfc2VyaWFsTnVtIiwiaXNVbmRlZiIsInNlcmlhbE51bSIsImlzTnVsbCIsIk51bWJlciIsIk5FR0FUSVZFX0lORklOSVRZIiwiYl9zZXJpYWxOdW0iLCJpdGVtIiwiaXRlbV9pZEtleSIsImRyYXdTaGFyZUltYWdlIiwiZHJhd0ltYWdlIiwiYmFja2dyb3VuZENvbG9yIiwic2V0RmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJkcmF3VGV4dCIsImRyYXciLCJzZXRPYmoiLCJjYW52YXNUb1RlbXBGaWxlUGF0aEZuIiwiZGVzdFdpZHRoIiwiZGVzdEhlaWdodCIsInF1YWxpdHkiLCJmaWxlVHlwZSIsInRvVGVtcEZpbGVQYXRoT2JqIiwiY2FudmFzSWQiLCJjYW52YXNUb1RlbXBGaWxlUGF0aCIsImRlbGF5VGltZSIsInRleHRzIiwic2V0VGV4dEZuIiwidGV4dEl0ZW0iLCJpc05vdE51bGxfc3RyaW5nIiwidGV4dExlbmd0aCIsImNvdW50VGV4dExlbmd0aCIsImluZm9DYWxsQmFja09iaiIsInNldEZvbnRTaXplIiwibCIsImNvdW50TCIsImNvdW50U3RyTGVuZ3RoIiwiaW1hZ2VzIiwicmVqY2V0Iiwic2V0SW1hZ2VGbiIsImltZ1VybCIsImhhc2luZm9DYWxsQmFjayIsImdldEltYWdlSW5mb19Qcm9taXNlRmMiLCJuZXdBcnIiLCJsaW5lRmVlZCIsImxpbmVOdW0iLCJtYXhXaWR0aCIsImxpbmVIZWlnaHQiLCJjaHIiLCJyb3ciLCJhbGxOdW0iLCJkcmF3VGV4dHMiLCJzZXRGb250IiwiZm9udCIsImZvbnRWYXJpYW50IiwiZm9udFdlaWdodCIsImZvbnRTaXplIiwidHJpbSIsImRyYXdUZXh0Rm4iLCJzZXRHbG9iYWxBbHBoYSIsInNldFRleHRBbGlnbiIsInNldFRleHRCYXNlbGluZSIsImZpbGxUZXh0IiwibGluZVRocm91Z2giLCJjYXAiLCJzZXRTdHJva2VTdHlsZSIsInNldExpbmVXaWR0aCIsInNldExpbmVDYXAiLCJteCIsIm15IiwiYmVnaW5QYXRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwiY2xvc2VQYXRoIiwicmVhZHlEcmF3SW1hZ2VGbiIsImltZyIsImNpcmNsZVNldCIsImRyYXdDaXJjbGVJbWFnZSIsInJvdW5kUmVjdFNldCIsImRyYXdSb3VuZFJlY3RJbWFnZSIsImRyYXdJbWFnZUZuIiwiaGFzQWxwaGEiLCJzeSIsInNXaWR0aCIsInNIZWlnaHQiLCJhcmMiLCJQSSIsImZpbGxTdHlsZSIsImZpbGwiLCJjbGlwIiwicmVzdG9yZSIsImFyY1RvIiwicXJDb2RlT2JqIiwicXJjb2RlQWxnT2JqQ2FjaGUiLCJmb3JlZ3JvdW5kIiwicGRncm91bmQiLCJjb3JyZWN0TGV2ZWwiLCJpbWFnZVNpemUiLCJxckNvZGVBbGciLCJRUkNvZGVBbGciLCJnZXRGb3JlR3JvdW5kIiwiZ2V0TW9kdWxlQ291bnQiLCJyYXRpb1NpemUiLCJyYXRpb0ltZ1NpemUiLCJ0aWxlVyIsInRvUHJlY2lzaW9uIiwidGlsZUgiLCJ3IiwiZHJhd1JvdW5kZWRSZWN0IiwiY3R4aSIsImxpbmVXaWR0aCIsInRvRml4ZWQiLCJvYmpzIiwicGJnIiwiZ2V0UG9zdGVyU3RvcmFnZSIsImdldFBvc3RlclVybCIsImZpbGVOYW1lSW5QYXRoIiwiY2hlY2tGaWxlX1Byb21pc2VGYyIsImltYWdlT2JqIiwiZ2V0U2hyZVVzZXJQb3N0ZXJCYWNrZ3JvdW5kRmMiLCJzYXZlZEZpbGVQYXRoIiwic2V0UG9zdGVyU3RvcmFnZSIsImdldFN0b3JhZ2VLZXkiLCJyZW1vdmVTYXZlZEZpbGUiLCJzZXRTdG9yYWdlIiwidXBpbWFnZSIsImRvd25Mb2FkQW5kU2F2ZUZpbGVfUHJvbWlzZUZjIiwicmV0dXJuT2JqIiwiaWZtYXNrIiwiYXJnIiwidGhlbiIsImlzVW5kZWZpbmVkIiwiZm4iLCJnZXRTdG9yYWdlIiwic2NiIiwiZmNiIiwiY2xlYXJTdG9yYWdlU3luYyIsImdldEltYWdlSW5mbyIsImNiIiwiY2hlY2tNUFVybCIsImRvd25sb2FkRmlsZSIsInRlbXBGaWxlUGF0aCIsInNhdmVGaWxlIiwiZF9yZXMiLCJzX3JlcyIsImdldFNhdmVkRmlsZUxpc3QiLCJmaWxlTGlzdCIsImZpbmRJbmRleCIsImZpbGVQYXRoIiwiaW1nUGF0aCIsInByZXZpZXdJbWFnZSIsInVybHMiLCJ1bmljb2RlRm9ybWF0OCIsImNvZGUiLCJjMCIsImMxIiwiYzIiLCJnZXRVVEY4Qnl0ZXMiLCJzdHJpbmciLCJ1dGY4Y29kZXMiLCJlcnJvckNvcnJlY3RMZXZlbCIsInR5cGVOdW1iZXIiLCJtb2R1bGVDb3VudCIsImRhdGFDYWNoZSIsInJzQmxvY2tzIiwidG90YWxEYXRhQ291bnQiLCJ1dGY4Ynl0ZXMiLCJtYWtlIiwiY29uc3RydWN0b3IiLCJnZXRSaWdodFR5cGUiLCJjcmVhdGVEYXRhIiwiY3JlYXRlUXJjb2RlIiwibWFrZUltcGwiLCJtYXNrUGF0dGVybiIsInNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4iLCJzZXR1cFBvc2l0aW9uQWRqdXN0UGF0dGVybiIsInNldHVwVGltaW5nUGF0dGVybiIsInNldHVwVHlwZUluZm8iLCJzZXR1cFR5cGVOdW1iZXIiLCJtYXBEYXRhIiwibWluTG9zdFBvaW50IiwicGF0dGVybiIsImJlc3RNb2R1bGVzIiwibG9zdFBvaW50IiwiUVJVdGlsIiwiZ2V0TG9zdFBvaW50IiwicG9zIiwiZ2V0UGF0dGVyblBvc2l0aW9uIiwiYml0cyIsImdldEJDSFR5cGVOdW1iZXIiLCJtb2QiLCJRUkVycm9yQ29ycmVjdExldmVsIiwiZ2V0QkNIVHlwZUluZm8iLCJRUkJpdEJ1ZmZlciIsImxlbmd0aEJpdHMiLCJwdXQiLCJwdXRCaXQiLCJQQUQwIiwiUEFEMSIsImNyZWF0ZUJ5dGVzIiwibWF4RGNDb3VudCIsIm1heEVjQ291bnQiLCJyc0Jsb2NrIiwidG90YWxDb3VudCIsImRhdGFDb3VudCIsImRjZGF0YSIsImVjZGF0YSIsImRjQ291bnQiLCJlY0NvdW50IiwicnNQb2x5IiwiZ2V0RXJyb3JDb3JyZWN0UG9seW5vbWlhbCIsInJhd1BvbHkiLCJRUlBvbHlub21pYWwiLCJnZXRMZW5ndGgiLCJtb2RQb2x5IiwibW9kSW5kZXgiLCJnZXQiLCJpbmMiLCJiaXRJbmRleCIsImJ5dGVJbmRleCIsImRhcmsiLCJnZXRNYXNrIiwiUVJNYXNrUGF0dGVybiIsIlBBVFRFUk4wMDAiLCJQQVRURVJOMDAxIiwiUEFUVEVSTjAxMCIsIlBBVFRFUk4wMTEiLCJQQVRURVJOMTAwIiwiUEFUVEVSTjEwMSIsIlBBVFRFUk4xMTAiLCJQQVRURVJOMTExIiwiUEFUVEVSTl9QT1NJVElPTl9UQUJMRSIsIkcxNSIsIkcxOCIsIkcxNV9NQVNLIiwiZ2V0QkNIRGlnaXQiLCJkaWdpdCIsImVycm9yQ29ycmVjdExlbmd0aCIsIm11bHRpcGx5IiwiUVJNYXRoIiwiZ2V4cCIsInFyQ29kZSIsImRhcmtDb3VudCIsInNhbWVDb3VudCIsImhlYWQiLCJjdXJyZW50IiwicmF0aW8iLCJnbG9nIiwiTE9HX1RBQkxFIiwiRVhQX1RBQkxFIiwibnVtIiwidGwiLCJSU19CTE9DS19UQUJMRSIsImxlbmd0aEJ5dGVzIiwiYnVmSW5kZXgiLCJiaXQiLCJzaGFyZSIsInN1bW1hcnkiLCJocmVmIiwicHJvdmlkZXIiLCJpbWFnZVVybCIsInNoYXJlVGV4dCIsInNoYXJlSW1hZ2UiLCJzaGFyZVNjZW5lIiwic2hhcmVTY2VuZTIiLCJzaGFyZUNvcHkiLCJzZXRDbGlwYm9hcmREYXRhIiwic2hhcmVEb3duIiwic2F2ZUltYWdlVG9QaG90b3NBbGJ1bSIsInNoYXJlTW9yZSIsIndlaXhpbiIsIndlaXhpbkZyaWVuZCIsInFxIiwid2VpYm8iLCJjb3B5IiwibW9yZSIsInRodW1ic1VwU3RhdHVzIiwidGh1bWJzVXBBZGQiLCJ0aHVtYnNVcENhbmNlbCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtEQUEwQyxnQ0FBZ0M7QUFDMUU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnRUFBd0Qsa0JBQWtCO0FBQzFFO0FBQ0EseURBQWlELGNBQWM7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUF5QyxpQ0FBaUM7QUFDMUUsd0hBQWdILG1CQUFtQixFQUFFO0FBQ3JJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsbUNBQTJCLDBCQUEwQixFQUFFO0FBQ3ZELHlDQUFpQyxlQUFlO0FBQ2hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDhEQUFzRCwrREFBK0Q7O0FBRXJIO0FBQ0E7OztBQUdBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7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Q0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBLHdDQUF3QyxXQUFXO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9DQUFvQyxjQUFjO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQ0FBaUMsa0JBQWtCO0FBQ25EO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUI7O0FBRWpCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLDBCQUEwQixjQUFjLHFCQUFxQjs7QUFFN0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNLElBQXFDO0FBQzNDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQzs7QUFFdEM7QUFDQTs7QUFFQTtBQUNBLE1BQU0sSUFBcUM7QUFDM0M7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxJQUFxQztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEIsb0NBQW9DLEVBQUU7QUFDbEU7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QjtBQUM1Qix1RUFBdUUsRUFBRTtBQUN6RTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBCQUEw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a0JBQ0E7QUFDQTtBQUNBLG9CQURBO0FBRUEscUJBRkE7QUFHQSxnREFIQTtBQUlBLGlCQUpBO0FBS0EsaUJBTEE7O0FBT0EsR0FUQTtBQVVBLFNBVkEscUJBVUE7QUFDQTtBQUNBLEdBWkE7QUFhQTtBQUNBLFFBREE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUZBO0FBR0E7QUFDQSxxQ0FSQTs7QUFVQSxnREFWQSxTQVVBLFlBVkE7OztBQWFBLGdCQWJBLDBCQWFBO0FBQ0E7QUFDQSxLQWZBO0FBZ0JBLFlBaEJBLG9CQWdCQSxJQWhCQSxFQWdCQSxLQWhCQSxFQWdCQTtBQUNBO0FBQ0EsS0FsQkEsRUFiQSxFOzs7Ozs7Ozs7OztBQ3JCQTtBQUFBO0FBQUE7QUFBQTtBQUF5MUIsQ0FBZ0IsMDBCQUFHLEVBQUMsQzs7Ozs7Ozs7OztBQ0E3MkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQyIsImZpbGUiOiJwYWdlcy9zdWJudnVlL21hbmFnZS90b3AuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNzcpO1xuIiwiaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4uL3BhY2thZ2UuanNvbic7XHJcblxyXG5jb25zdCBTVEFUX1ZFUlNJT04gPSB2ZXJzaW9uO1xyXG5jb25zdCBTVEFUX1VSTCA9ICdodHRwczovL3RvbmdqaS5kY2xvdWQuaW8vdW5pL3N0YXQnO1xyXG5jb25zdCBTVEFUX0g1X1VSTCA9ICdodHRwczovL3RvbmdqaS5kY2xvdWQuaW8vdW5pL3N0YXQuZ2lmJzsgXHJcbmNvbnN0IFBBR0VfUFZFUl9USU1FID0gMTgwMDtcclxuY29uc3QgQVBQX1BWRVJfVElNRSA9IDMwMDtcclxuY29uc3QgT1BFUkFUSU5HX1RJTUUgPSAxMDtcclxuXHJcbmNvbnN0IFVVSURfS0VZID0gJ19fRENfU1RBVF9VVUlEJztcclxuY29uc3QgVVVJRF9WQUxVRSA9ICdfX0RDX1VVSURfVkFMVUUnO1xyXG5cclxuZnVuY3Rpb24gZ2V0VXVpZCgpIHtcclxuICBsZXQgdXVpZCA9ICcnO1xyXG4gIGlmIChnZXRQbGF0Zm9ybU5hbWUoKSA9PT0gJ24nKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICB1dWlkID0gcGx1cy5ydW50aW1lLmdldERDbG91ZElkKCk7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHV1aWQgPSAnJztcclxuICAgIH1cclxuICAgIHJldHVybiB1dWlkXHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgdXVpZCA9IHVuaS5nZXRTdG9yYWdlU3luYyhVVUlEX0tFWSk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgdXVpZCA9IFVVSURfVkFMVUU7XHJcbiAgfVxyXG5cclxuICBpZiAoIXV1aWQpIHtcclxuICAgIHV1aWQgPSBEYXRlLm5vdygpICsgJycgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxZTcpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgdW5pLnNldFN0b3JhZ2VTeW5jKFVVSURfS0VZLCB1dWlkKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgdW5pLnNldFN0b3JhZ2VTeW5jKFVVSURfS0VZLCBVVUlEX1ZBTFVFKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHV1aWQ7XHJcbn1cclxuXHJcbmNvbnN0IGdldFNnaW4gPSAoc3RhdERhdGEpID0+IHtcclxuICBsZXQgYXJyID0gT2JqZWN0LmtleXMoc3RhdERhdGEpO1xyXG4gIGxldCBzb3J0QXJyID0gYXJyLnNvcnQoKTtcclxuICBsZXQgc2dpbiA9IHt9O1xyXG4gIGxldCBzZ2luU3RyID0gJyc7XHJcbiAgZm9yICh2YXIgaSBpbiBzb3J0QXJyKSB7XHJcbiAgICBzZ2luW3NvcnRBcnJbaV1dID0gc3RhdERhdGFbc29ydEFycltpXV07XHJcbiAgICBzZ2luU3RyICs9IHNvcnRBcnJbaV0gKyAnPScgKyBzdGF0RGF0YVtzb3J0QXJyW2ldXSArICcmJztcclxuICB9XHJcbiAgLy8gY29uc3Qgb3B0aW9ucyA9IHNnaW5TdHIuc3Vic3RyKDAsIHNnaW5TdHIubGVuZ3RoIC0gMSlcclxuICAvLyBzZ2luU3RyID0gc2dpblN0ci5zdWJzdHIoMCwgc2dpblN0ci5sZW5ndGggLSAxKSArICcma2V5PScgKyBTVEFUX0tFWTtcclxuICAvLyBjb25zdCBzaSA9IGNyeXB0by5jcmVhdGVIYXNoKCdtZDUnKS51cGRhdGUoc2dpblN0cikuZGlnZXN0KCdoZXgnKTtcclxuICByZXR1cm4ge1xyXG4gICAgc2lnbjogJycsXHJcbiAgICBvcHRpb25zOiBzZ2luU3RyLnN1YnN0cigwLCBzZ2luU3RyLmxlbmd0aCAtIDEpXHJcbiAgfTtcclxufTtcclxuXHJcbmNvbnN0IGdldFNwbGljaW5nID0gKGRhdGEpID0+IHtcclxuICBsZXQgc3RyID0gJyc7XHJcbiAgZm9yICh2YXIgaSBpbiBkYXRhKSB7XHJcbiAgICBzdHIgKz0gaSArICc9JyArIGRhdGFbaV0gKyAnJic7XHJcbiAgfVxyXG4gIHJldHVybiBzdHIuc3Vic3RyKDAsIHN0ci5sZW5ndGggLSAxKVxyXG59O1xyXG5cclxuY29uc3QgZ2V0VGltZSA9ICgpID0+IHtcclxuICByZXR1cm4gcGFyc2VJbnQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKTtcclxufTtcclxuXHJcbmNvbnN0IGdldFBsYXRmb3JtTmFtZSA9ICgpID0+IHtcclxuICBjb25zdCBwbGF0Zm9ybUxpc3QgPSB7XHJcbiAgICAnYXBwLXBsdXMnOiAnbicsXHJcbiAgICAnaDUnOiAnaDUnLFxyXG4gICAgJ21wLXdlaXhpbic6ICd3eCcsXHJcbiAgICAnbXAtYWxpcGF5JzogJ2FsaScsXHJcbiAgICAnbXAtYmFpZHUnOiAnYmQnLFxyXG4gICAgJ21wLXRvdXRpYW8nOiAndHQnLFxyXG4gICAgJ21wLXFxJzogJ3FxJ1xyXG4gIH07XHJcbiAgcmV0dXJuIHBsYXRmb3JtTGlzdFtwcm9jZXNzLmVudi5WVUVfQVBQX1BMQVRGT1JNXTtcclxufTtcclxuXHJcbmNvbnN0IGdldFBhY2tOYW1lID0gKCkgPT4ge1xyXG4gIGxldCBwYWNrTmFtZSA9ICcnO1xyXG4gIGlmIChnZXRQbGF0Zm9ybU5hbWUoKSA9PT0gJ3d4JyB8fCBnZXRQbGF0Zm9ybU5hbWUoKSA9PT0gJ3FxJykge1xyXG4gICAgLy8g5YW85a655b6u5L+h5bCP56iL5bqP5L2O54mI5pys5Z+656GA5bqTXHJcbiAgICBpZih1bmkuY2FuSVVzZSgnZ2V0QWNjb3VudEluZm9TeW5jJykpe1xyXG4gICAgICBwYWNrTmFtZSA9IHVuaS5nZXRBY2NvdW50SW5mb1N5bmMoKS5taW5pUHJvZ3JhbS5hcHBJZCB8fCAnJztcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHBhY2tOYW1lXHJcbn07XHJcblxyXG5jb25zdCBnZXRWZXJzaW9uID0gKCkgPT4ge1xyXG4gIHJldHVybiBnZXRQbGF0Zm9ybU5hbWUoKSA9PT0gJ24nID8gcGx1cy5ydW50aW1lLnZlcnNpb24gOiAnJztcclxufTtcclxuXHJcbmNvbnN0IGdldENoYW5uZWwgPSAoKSA9PiB7XHJcbiAgY29uc3QgcGxhdGZvcm1OYW1lID0gZ2V0UGxhdGZvcm1OYW1lKCk7XHJcbiAgbGV0IGNoYW5uZWwgPSAnJztcclxuICBpZiAocGxhdGZvcm1OYW1lID09PSAnbicpIHtcclxuICAgIGNoYW5uZWwgPSBwbHVzLnJ1bnRpbWUuY2hhbm5lbDtcclxuICB9XHJcbiAgcmV0dXJuIGNoYW5uZWw7XHJcbn07XHJcblxyXG5jb25zdCBnZXRTY2VuZSA9IChvcHRpb25zKSA9PiB7XHJcbiAgY29uc3QgcGxhdGZvcm1OYW1lID0gZ2V0UGxhdGZvcm1OYW1lKCk7XHJcbiAgbGV0IHNjZW5lID0gJyc7XHJcbiAgaWYgKG9wdGlvbnMpIHtcclxuICAgIHJldHVybiBvcHRpb25zO1xyXG4gIH1cclxuICBpZiAocGxhdGZvcm1OYW1lID09PSAnd3gnKSB7XHJcbiAgICBzY2VuZSA9IHVuaS5nZXRMYXVuY2hPcHRpb25zU3luYygpLnNjZW5lO1xyXG4gIH1cclxuICByZXR1cm4gc2NlbmU7XHJcbn07XHJcbmNvbnN0IEZpcnN0X19WaXNpdF9fVGltZV9fS0VZID0gJ0ZpcnN0X19WaXNpdF9fVGltZSc7XHJcbmNvbnN0IExhc3RfX1Zpc2l0X19UaW1lX19LRVkgPSAnTGFzdF9fVmlzaXRfX1RpbWUnO1xyXG5cclxuY29uc3QgZ2V0Rmlyc3RWaXNpdFRpbWUgPSAoKSA9PiB7XHJcbiAgY29uc3QgdGltZVN0b3JnZSA9IHVuaS5nZXRTdG9yYWdlU3luYyhGaXJzdF9fVmlzaXRfX1RpbWVfX0tFWSk7XHJcbiAgbGV0IHRpbWUgPSAwO1xyXG4gIGlmICh0aW1lU3RvcmdlKSB7XHJcbiAgICB0aW1lID0gdGltZVN0b3JnZTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGltZSA9IGdldFRpbWUoKTtcclxuICAgIHVuaS5zZXRTdG9yYWdlU3luYyhGaXJzdF9fVmlzaXRfX1RpbWVfX0tFWSwgdGltZSk7XHJcbiAgICB1bmkucmVtb3ZlU3RvcmFnZVN5bmMoTGFzdF9fVmlzaXRfX1RpbWVfX0tFWSk7XHJcbiAgfVxyXG4gIHJldHVybiB0aW1lO1xyXG59O1xyXG5cclxuY29uc3QgZ2V0TGFzdFZpc2l0VGltZSA9ICgpID0+IHtcclxuICBjb25zdCB0aW1lU3RvcmdlID0gdW5pLmdldFN0b3JhZ2VTeW5jKExhc3RfX1Zpc2l0X19UaW1lX19LRVkpO1xyXG4gIGxldCB0aW1lID0gMDtcclxuICBpZiAodGltZVN0b3JnZSkge1xyXG4gICAgdGltZSA9IHRpbWVTdG9yZ2U7XHJcbiAgfSBlbHNlIHtcclxuICAgIHRpbWUgPSAnJztcclxuICB9XHJcbiAgdW5pLnNldFN0b3JhZ2VTeW5jKExhc3RfX1Zpc2l0X19UaW1lX19LRVksIGdldFRpbWUoKSk7XHJcbiAgcmV0dXJuIHRpbWU7XHJcbn07XHJcblxyXG5cclxuY29uc3QgUEFHRV9SRVNJREVOQ0VfVElNRSA9ICdfX3BhZ2VfX3Jlc2lkZW5jZV9fdGltZSc7XHJcbmxldCBGaXJzdF9QYWdlX3Jlc2lkZW5jZV90aW1lID0gMDtcclxubGV0IExhc3RfUGFnZV9yZXNpZGVuY2VfdGltZSA9IDA7XHJcblxyXG5cclxuY29uc3Qgc2V0UGFnZVJlc2lkZW5jZVRpbWUgPSAoKSA9PiB7XHJcbiAgRmlyc3RfUGFnZV9yZXNpZGVuY2VfdGltZSA9IGdldFRpbWUoKTtcclxuICBpZiAoZ2V0UGxhdGZvcm1OYW1lKCkgPT09ICduJykge1xyXG4gICAgdW5pLnNldFN0b3JhZ2VTeW5jKFBBR0VfUkVTSURFTkNFX1RJTUUsIGdldFRpbWUoKSk7XHJcbiAgfVxyXG4gIHJldHVybiBGaXJzdF9QYWdlX3Jlc2lkZW5jZV90aW1lXHJcbn07XHJcblxyXG5jb25zdCBnZXRQYWdlUmVzaWRlbmNlVGltZSA9ICgpID0+IHtcclxuICBMYXN0X1BhZ2VfcmVzaWRlbmNlX3RpbWUgPSBnZXRUaW1lKCk7XHJcbiAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicpIHtcclxuICAgIEZpcnN0X1BhZ2VfcmVzaWRlbmNlX3RpbWUgPSB1bmkuZ2V0U3RvcmFnZVN5bmMoUEFHRV9SRVNJREVOQ0VfVElNRSk7XHJcbiAgfVxyXG4gIHJldHVybiBMYXN0X1BhZ2VfcmVzaWRlbmNlX3RpbWUgLSBGaXJzdF9QYWdlX3Jlc2lkZW5jZV90aW1lXHJcbn07XHJcbmNvbnN0IFRPVEFMX19WSVNJVF9fQ09VTlQgPSAnVG90YWxfX1Zpc2l0X19Db3VudCc7XHJcbmNvbnN0IGdldFRvdGFsVmlzaXRDb3VudCA9ICgpID0+IHtcclxuICBjb25zdCB0aW1lU3RvcmdlID0gdW5pLmdldFN0b3JhZ2VTeW5jKFRPVEFMX19WSVNJVF9fQ09VTlQpO1xyXG4gIGxldCBjb3VudCA9IDE7XHJcbiAgaWYgKHRpbWVTdG9yZ2UpIHtcclxuICAgIGNvdW50ID0gdGltZVN0b3JnZTtcclxuICAgIGNvdW50Kys7XHJcbiAgfVxyXG4gIHVuaS5zZXRTdG9yYWdlU3luYyhUT1RBTF9fVklTSVRfX0NPVU5ULCBjb3VudCk7XHJcbiAgcmV0dXJuIGNvdW50O1xyXG59O1xyXG5cclxuY29uc3QgR2V0RW5jb2RlVVJJQ29tcG9uZW50T3B0aW9ucyA9IChzdGF0RGF0YSkgPT4ge1xyXG4gIGxldCBkYXRhID0ge307XHJcbiAgZm9yIChsZXQgcHJvcCBpbiBzdGF0RGF0YSkge1xyXG4gICAgZGF0YVtwcm9wXSA9IGVuY29kZVVSSUNvbXBvbmVudChzdGF0RGF0YVtwcm9wXSk7XHJcbiAgfVxyXG4gIHJldHVybiBkYXRhO1xyXG59O1xyXG5cclxubGV0IFNldF9fRmlyc3RfX1RpbWUgPSAwO1xyXG5sZXQgU2V0X19MYXN0X19UaW1lID0gMDtcclxuXHJcbmNvbnN0IGdldEZpcnN0VGltZSA9ICgpID0+IHtcclxuICBsZXQgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gIFNldF9fRmlyc3RfX1RpbWUgPSB0aW1lO1xyXG4gIFNldF9fTGFzdF9fVGltZSA9IDA7XHJcbiAgcmV0dXJuIHRpbWU7XHJcbn07XHJcblxyXG5cclxuY29uc3QgZ2V0TGFzdFRpbWUgPSAoKSA9PiB7XHJcbiAgbGV0IHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICBTZXRfX0xhc3RfX1RpbWUgPSB0aW1lO1xyXG4gIHJldHVybiB0aW1lO1xyXG59O1xyXG5cclxuXHJcbmNvbnN0IGdldFJlc2lkZW5jZVRpbWUgPSAodHlwZSkgPT4ge1xyXG4gIGxldCByZXNpZGVuY2VUaW1lID0gMDtcclxuICBpZiAoU2V0X19GaXJzdF9fVGltZSAhPT0gMCkge1xyXG4gICAgcmVzaWRlbmNlVGltZSA9IFNldF9fTGFzdF9fVGltZSAtIFNldF9fRmlyc3RfX1RpbWU7XHJcbiAgfVxyXG5cclxuICByZXNpZGVuY2VUaW1lID0gcGFyc2VJbnQocmVzaWRlbmNlVGltZSAvIDEwMDApO1xyXG4gIHJlc2lkZW5jZVRpbWUgPSByZXNpZGVuY2VUaW1lIDwgMSA/IDEgOiByZXNpZGVuY2VUaW1lO1xyXG4gIGlmICh0eXBlID09PSAnYXBwJykge1xyXG4gICAgbGV0IG92ZXJ0aW1lID0gcmVzaWRlbmNlVGltZSA+IEFQUF9QVkVSX1RJTUUgPyB0cnVlIDogZmFsc2U7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICByZXNpZGVuY2VUaW1lLFxyXG4gICAgICBvdmVydGltZVxyXG4gICAgfTtcclxuICB9XHJcbiAgaWYgKHR5cGUgPT09ICdwYWdlJykge1xyXG4gICAgbGV0IG92ZXJ0aW1lID0gcmVzaWRlbmNlVGltZSA+IFBBR0VfUFZFUl9USU1FID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcmVzaWRlbmNlVGltZSxcclxuICAgICAgb3ZlcnRpbWVcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgcmVzaWRlbmNlVGltZVxyXG4gIH07XHJcblxyXG59O1xyXG5cclxuY29uc3QgZ2V0Um91dGUgPSAoKSA9PiB7XHJcbiAgdmFyIHBhZ2VzID0gZ2V0Q3VycmVudFBhZ2VzKCk7XHJcbiAgdmFyIHBhZ2UgPSBwYWdlc1twYWdlcy5sZW5ndGggLSAxXTtcclxuICBsZXQgX3NlbGYgPSBwYWdlLiR2bTtcclxuXHJcbiAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnYmQnKSB7XHJcbiAgICByZXR1cm4gX3NlbGYuJG1wICYmIF9zZWxmLiRtcC5wYWdlLmlzO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gKF9zZWxmLiRzY29wZSAmJiBfc2VsZi4kc2NvcGUucm91dGUpIHx8IChfc2VsZi4kbXAgJiYgX3NlbGYuJG1wLnBhZ2Uucm91dGUpO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IGdldFBhZ2VSb3V0ZSA9IChzZWxmKSA9PiB7XHJcbiAgdmFyIHBhZ2VzID0gZ2V0Q3VycmVudFBhZ2VzKCk7XHJcbiAgdmFyIHBhZ2UgPSBwYWdlc1twYWdlcy5sZW5ndGggLSAxXTtcclxuICBsZXQgX3NlbGYgPSBwYWdlLiR2bTtcclxuICBsZXQgcXVlcnkgPSBzZWxmLl9xdWVyeTtcclxuICBsZXQgc3RyID0gcXVlcnkgJiYgSlNPTi5zdHJpbmdpZnkocXVlcnkpICE9PSAne30nID8gJz8nICsgSlNPTi5zdHJpbmdpZnkocXVlcnkpIDogJyc7XHJcbiAgLy8gY2xlYXJcclxuICBzZWxmLl9xdWVyeSA9ICcnO1xyXG4gIGlmIChnZXRQbGF0Zm9ybU5hbWUoKSA9PT0gJ2JkJykge1xyXG4gICAgcmV0dXJuIF9zZWxmLiRtcCAmJiBfc2VsZi4kbXAucGFnZS5pcyArIHN0cjtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIChfc2VsZi4kc2NvcGUgJiYgX3NlbGYuJHNjb3BlLnJvdXRlICsgc3RyICl8fCAoX3NlbGYuJG1wICYmIF9zZWxmLiRtcC5wYWdlLnJvdXRlICsgc3RyKTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBnZXRQYWdlVHlwZXMgPSAoc2VsZikgPT4ge1xyXG4gIGlmIChzZWxmLm1wVHlwZSA9PT0gJ3BhZ2UnIHx8IChzZWxmLiRtcCAmJiBzZWxmLiRtcC5tcFR5cGUgPT09ICdwYWdlJykgfHwgc2VsZi4kb3B0aW9ucy5tcFR5cGUgPT09ICdwYWdlJykge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIHJldHVybiBmYWxzZTtcclxufTtcclxuXHJcbmNvbnN0IGNhbGlicmF0aW9uID0gKGV2ZW50TmFtZSwgb3B0aW9ucykgPT4ge1xyXG4gIC8vICBsb2dpbiDjgIEgc2hhcmUg44CBcGF5X3N1Y2Nlc3Mg44CBcGF5X2ZhaWwg44CBcmVnaXN0ZXIg44CBdGl0bGVcclxuICBpZighZXZlbnROYW1lKXtcclxuICAgIGNvbnNvbGUuZXJyb3IoYHVuaS5yZXBvcnQg57y65bCRIFtldmVudE5hbWVdIOWPguaVsGApO1xyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcbiAgaWYgKHR5cGVvZiBldmVudE5hbWUgIT09ICdzdHJpbmcnKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGB1bmkucmVwb3J0IFtldmVudE5hbWVdIOWPguaVsOexu+Wei+mUmeivryzlj6rog73kuLogU3RyaW5nIOexu+Wei2ApO1xyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcbiAgaWYgKGV2ZW50TmFtZS5sZW5ndGggPiAyNTUpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYHVuaS5yZXBvcnQgW2V2ZW50TmFtZV0g5Y+C5pWw6ZW/5bqm5LiN6IO95aSn5LqOIDI1NWApO1xyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ3N0cmluZycgJiYgdHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGB1bmkucmVwb3J0IFtvcHRpb25zXSDlj4LmlbDnsbvlnovplJnor68s5Y+q6IO95Li6IFN0cmluZyDmiJYgT2JqZWN0IOexu+Wei2ApO1xyXG4gICAgcmV0dXJuIHRydWVcclxuICB9XHJcblxyXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5sZW5ndGggPiAyNTUpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoYHVuaS5yZXBvcnQgW29wdGlvbnNdIOWPguaVsOmVv+W6puS4jeiDveWkp+S6jiAyNTVgKTtcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG5cclxuICBpZiAoZXZlbnROYW1lID09PSAndGl0bGUnICYmIHR5cGVvZiBvcHRpb25zICE9PSAnc3RyaW5nJykge1xyXG4gICAgY29uc29sZS5lcnJvcigndW5pLnJlcG9ydCBbZXZlbnROYW1lXSDlj4LmlbDkuLogdGl0bGUg5pe277yMW29wdGlvbnNdIOWPguaVsOWPquiDveS4uiBTdHJpbmcg57G75Z6LJyk7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IFBhZ2VzSnNvbiA9IHJlcXVpcmUoJ3VuaS1wYWdlcz97XCJ0eXBlXCI6XCJzdHlsZVwifScpLmRlZmF1bHQ7XHJcbmNvbnN0IHN0YXRDb25maWcgPSByZXF1aXJlKCd1bmktc3RhdC1jb25maWcnKS5kZWZhdWx0IHx8IHJlcXVpcmUoJ3VuaS1zdGF0LWNvbmZpZycpO1xyXG5cclxuY29uc3QgcmVzdWx0T3B0aW9ucyA9IHVuaS5nZXRTeXN0ZW1JbmZvU3luYygpO1xyXG5cclxuY2xhc3MgVXRpbCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnNlbGYgPSAnJztcclxuICAgIHRoaXMuX3JldHJ5ID0gMDtcclxuICAgIHRoaXMuX3BsYXRmb3JtID0gJyc7XHJcbiAgICB0aGlzLl9xdWVyeSA9IHt9O1xyXG4gICAgdGhpcy5fbmF2aWdhdGlvbkJhclRpdGxlID0ge1xyXG4gICAgICBjb25maWc6ICcnLFxyXG4gICAgICBwYWdlOiAnJyxcclxuICAgICAgcmVwb3J0OiAnJyxcclxuICAgICAgbHQ6ICcnXHJcbiAgICB9O1xyXG4gICAgdGhpcy5fb3BlcmF0aW5nVGltZSA9IDA7XHJcbiAgICB0aGlzLl9yZXBvcnRpbmdSZXF1ZXN0RGF0YSA9IHtcclxuICAgICAgJzEnOiBbXSxcclxuICAgICAgJzExJzogW11cclxuICAgIH07XHJcbiAgICB0aGlzLl9fcHJldmVudF90cmlnZ2VyaW5nID0gZmFsc2U7XHJcblxyXG4gICAgdGhpcy5fX2xpY2F0aW9uSGlkZSA9IGZhbHNlO1xyXG4gICAgdGhpcy5fX2xpY2F0aW9uU2hvdyA9IGZhbHNlO1xyXG4gICAgdGhpcy5fbGFzdFBhZ2VSb3V0ZSA9ICcnO1xyXG4gICAgdGhpcy5zdGF0RGF0YSA9IHtcclxuICAgICAgdXVpZDogZ2V0VXVpZCgpLFxyXG4gICAgICB1dDogZ2V0UGxhdGZvcm1OYW1lKCksXHJcbiAgICAgIG1wbjogZ2V0UGFja05hbWUoKSxcclxuICAgICAgYWs6IHN0YXRDb25maWcuYXBwaWQsXHJcbiAgICAgIHVzdjogU1RBVF9WRVJTSU9OLFxyXG4gICAgICB2OiBnZXRWZXJzaW9uKCksXHJcbiAgICAgIGNoOiBnZXRDaGFubmVsKCksXHJcbiAgICAgIGNuOiAnJyxcclxuICAgICAgcG46ICcnLFxyXG4gICAgICBjdDogJycsXHJcbiAgICAgIHQ6IGdldFRpbWUoKSxcclxuICAgICAgdHQ6ICcnLFxyXG4gICAgICBwOiByZXN1bHRPcHRpb25zLnBsYXRmb3JtID09PSAnYW5kcm9pZCcgPyAnYScgOiAnaScsXHJcbiAgICAgIGJyYW5kOiByZXN1bHRPcHRpb25zLmJyYW5kIHx8ICcnLFxyXG4gICAgICBtZDogcmVzdWx0T3B0aW9ucy5tb2RlbCxcclxuICAgICAgc3Y6IHJlc3VsdE9wdGlvbnMuc3lzdGVtLnJlcGxhY2UoLyhBbmRyb2lkfGlPUylcXHMvLCAnJyksXHJcbiAgICAgIG1wc2RrOiByZXN1bHRPcHRpb25zLlNES1ZlcnNpb24gfHwgJycsXHJcbiAgICAgIG1wdjogcmVzdWx0T3B0aW9ucy52ZXJzaW9uIHx8ICcnLFxyXG4gICAgICBsYW5nOiByZXN1bHRPcHRpb25zLmxhbmd1YWdlLFxyXG4gICAgICBwcjogcmVzdWx0T3B0aW9ucy5waXhlbFJhdGlvLFxyXG4gICAgICB3dzogcmVzdWx0T3B0aW9ucy53aW5kb3dXaWR0aCxcclxuICAgICAgd2g6IHJlc3VsdE9wdGlvbnMud2luZG93SGVpZ2h0LFxyXG4gICAgICBzdzogcmVzdWx0T3B0aW9ucy5zY3JlZW5XaWR0aCxcclxuICAgICAgc2g6IHJlc3VsdE9wdGlvbnMuc2NyZWVuSGVpZ2h0XHJcbiAgICB9O1xyXG5cclxuICB9XHJcblxyXG4gIF9hcHBsaWNhdGlvblNob3coKSB7XHJcbiAgICBpZiAodGhpcy5fX2xpY2F0aW9uSGlkZSkge1xyXG4gICAgICBnZXRMYXN0VGltZSgpO1xyXG4gICAgICBjb25zdCB0aW1lID0gZ2V0UmVzaWRlbmNlVGltZSgnYXBwJyk7XHJcbiAgICAgIGlmICh0aW1lLm92ZXJ0aW1lKSB7XHJcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICBwYXRoOiB0aGlzLl9sYXN0UGFnZVJvdXRlLFxyXG4gICAgICAgICAgc2NlbmU6IHRoaXMuc3RhdERhdGEuc2NcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuX3NlbmRSZXBvcnRSZXF1ZXN0KG9wdGlvbnMpO1xyXG4gICAgICB9XHJcbiAgICAgIHRoaXMuX19saWNhdGlvbkhpZGUgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9hcHBsaWNhdGlvbkhpZGUoc2VsZiwgdHlwZSkge1xyXG5cclxuICAgIHRoaXMuX19saWNhdGlvbkhpZGUgPSB0cnVlO1xyXG4gICAgZ2V0TGFzdFRpbWUoKTtcclxuICAgIGNvbnN0IHRpbWUgPSBnZXRSZXNpZGVuY2VUaW1lKCk7XHJcbiAgICBnZXRGaXJzdFRpbWUoKTtcclxuICAgIGNvbnN0IHJvdXRlID0gZ2V0UGFnZVJvdXRlKHRoaXMpO1xyXG4gICAgdGhpcy5fc2VuZEhpZGVSZXF1ZXN0KHtcclxuICAgICAgdXJscmVmOiByb3V0ZSxcclxuICAgICAgdXJscmVmX3RzOiB0aW1lLnJlc2lkZW5jZVRpbWVcclxuICAgIH0sIHR5cGUpO1xyXG4gIH1cclxuXHJcbiAgX3BhZ2VTaG93KCkge1xyXG4gICAgY29uc3Qgcm91dGUgPSBnZXRQYWdlUm91dGUodGhpcyk7XHJcbiAgICBjb25zdCByb3V0ZXBhdGggPSBnZXRSb3V0ZSgpO1xyXG4gICAgdGhpcy5fbmF2aWdhdGlvbkJhclRpdGxlLmNvbmZpZyA9IFBhZ2VzSnNvbiAmJlxyXG4gICAgICBQYWdlc0pzb24ucGFnZXNbcm91dGVwYXRoXSAmJlxyXG4gICAgICBQYWdlc0pzb24ucGFnZXNbcm91dGVwYXRoXS50aXRsZU5WaWV3ICYmXHJcbiAgICAgIFBhZ2VzSnNvbi5wYWdlc1tyb3V0ZXBhdGhdLnRpdGxlTlZpZXcudGl0bGVUZXh0IHx8XHJcbiAgICAgIFBhZ2VzSnNvbiAmJlxyXG4gICAgICBQYWdlc0pzb24ucGFnZXNbcm91dGVwYXRoXSAmJlxyXG4gICAgICBQYWdlc0pzb24ucGFnZXNbcm91dGVwYXRoXS5uYXZpZ2F0aW9uQmFyVGl0bGVUZXh0IHx8ICcnO1xyXG5cclxuICAgIGlmICh0aGlzLl9fbGljYXRpb25TaG93KSB7XHJcbiAgICAgIGdldEZpcnN0VGltZSgpO1xyXG4gICAgICB0aGlzLl9fbGljYXRpb25TaG93ID0gZmFsc2U7XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCfov5nmmK8gb25MYXVjaCDkuYvlkI7miafooYznmoTnrKzkuIDmrKEgcGFnZVNob3cg77yM5Li65LiL5qyh6K6w5b2V5pe26Ze05YGa5YeG5aSHJyk7XHJcbiAgICAgIHRoaXMuX2xhc3RQYWdlUm91dGUgPSByb3V0ZTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGdldExhc3RUaW1lKCk7XHJcbiAgICB0aGlzLl9sYXN0UGFnZVJvdXRlID0gcm91dGU7XHJcbiAgICBjb25zdCB0aW1lID0gZ2V0UmVzaWRlbmNlVGltZSgncGFnZScpO1xyXG4gICAgaWYgKHRpbWUub3ZlcnRpbWUpIHtcclxuICAgICAgbGV0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgcGF0aDogdGhpcy5fbGFzdFBhZ2VSb3V0ZSxcclxuICAgICAgICBzY2VuZTogdGhpcy5zdGF0RGF0YS5zY1xyXG4gICAgICB9O1xyXG4gICAgICB0aGlzLl9zZW5kUmVwb3J0UmVxdWVzdChvcHRpb25zKTtcclxuICAgIH1cclxuICAgIGdldEZpcnN0VGltZSgpO1xyXG4gIH1cclxuXHJcbiAgX3BhZ2VIaWRlKCkge1xyXG4gICAgaWYgKCF0aGlzLl9fbGljYXRpb25IaWRlKSB7XHJcbiAgICAgIGdldExhc3RUaW1lKCk7XHJcbiAgICAgIGNvbnN0IHRpbWUgPSBnZXRSZXNpZGVuY2VUaW1lKCdwYWdlJyk7XHJcbiAgICAgIHRoaXMuX3NlbmRQYWdlUmVxdWVzdCh7XHJcbiAgICAgICAgdXJsOiB0aGlzLl9sYXN0UGFnZVJvdXRlLFxyXG4gICAgICAgIHVybHJlZjogdGhpcy5fbGFzdFBhZ2VSb3V0ZSxcclxuICAgICAgICB1cmxyZWZfdHM6IHRpbWUucmVzaWRlbmNlVGltZVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5fbmF2aWdhdGlvbkJhclRpdGxlID0ge1xyXG4gICAgICAgIGNvbmZpZzogJycsXHJcbiAgICAgICAgcGFnZTogJycsXHJcbiAgICAgICAgcmVwb3J0OiAnJyxcclxuICAgICAgICBsdDogJydcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgX2xvZ2luKCkge1xyXG4gICAgdGhpcy5fc2VuZEV2ZW50UmVxdWVzdCh7XHJcbiAgICAgIGtleTogJ2xvZ2luJ1xyXG4gICAgfSwgMCk7XHJcbiAgfVxyXG5cclxuICBfc2hhcmUoKSB7XHJcbiAgICB0aGlzLl9zZW5kRXZlbnRSZXF1ZXN0KHtcclxuICAgICAga2V5OiAnc2hhcmUnXHJcbiAgICB9LCAwKTtcclxuICB9XHJcbiAgX3BheW1lbnQoa2V5KSB7XHJcbiAgICB0aGlzLl9zZW5kRXZlbnRSZXF1ZXN0KHtcclxuICAgICAga2V5XHJcbiAgICB9LCAwKTtcclxuICB9XHJcbiAgX3NlbmRSZXBvcnRSZXF1ZXN0KG9wdGlvbnMpIHtcclxuXHJcbiAgICB0aGlzLl9uYXZpZ2F0aW9uQmFyVGl0bGUubHQgPSAnMSc7XHJcbiAgICBsZXQgcXVlcnkgPSBvcHRpb25zLnF1ZXJ5ICYmIEpTT04uc3RyaW5naWZ5KG9wdGlvbnMucXVlcnkpICE9PSAne30nID8gJz8nICsgSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5xdWVyeSkgOiAnJztcclxuICAgIHRoaXMuc3RhdERhdGEubHQgPSAnMSc7XHJcbiAgICB0aGlzLnN0YXREYXRhLnVybCA9IChvcHRpb25zLnBhdGggKyBxdWVyeSkgfHwgJyc7XHJcbiAgICB0aGlzLnN0YXREYXRhLnQgPSBnZXRUaW1lKCk7XHJcbiAgICB0aGlzLnN0YXREYXRhLnNjID0gZ2V0U2NlbmUob3B0aW9ucy5zY2VuZSk7XHJcbiAgICB0aGlzLnN0YXREYXRhLmZ2dHMgPSBnZXRGaXJzdFZpc2l0VGltZSgpO1xyXG4gICAgdGhpcy5zdGF0RGF0YS5sdnRzID0gZ2V0TGFzdFZpc2l0VGltZSgpO1xyXG4gICAgdGhpcy5zdGF0RGF0YS50dmMgPSBnZXRUb3RhbFZpc2l0Q291bnQoKTtcclxuICAgIGlmIChnZXRQbGF0Zm9ybU5hbWUoKSA9PT0gJ24nKSB7XHJcbiAgICAgIHRoaXMuZ2V0UHJvcGVydHkoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuZ2V0TmV0d29ya0luZm8oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIF9zZW5kUGFnZVJlcXVlc3Qob3B0KSB7XHJcbiAgICBsZXQge1xyXG4gICAgICB1cmwsXHJcbiAgICAgIHVybHJlZixcclxuICAgICAgdXJscmVmX3RzXHJcbiAgICB9ID0gb3B0O1xyXG4gICAgdGhpcy5fbmF2aWdhdGlvbkJhclRpdGxlLmx0ID0gJzExJztcclxuICAgIGxldCBvcHRpb25zID0ge1xyXG4gICAgICBhazogdGhpcy5zdGF0RGF0YS5hayxcclxuICAgICAgdXVpZDogdGhpcy5zdGF0RGF0YS51dWlkLFxyXG4gICAgICBsdDogJzExJyxcclxuICAgICAgdXQ6IHRoaXMuc3RhdERhdGEudXQsXHJcbiAgICAgIHVybCxcclxuICAgICAgdHQ6IHRoaXMuc3RhdERhdGEudHQsXHJcbiAgICAgIHVybHJlZixcclxuICAgICAgdXJscmVmX3RzLFxyXG4gICAgICBjaDogdGhpcy5zdGF0RGF0YS5jaCxcclxuICAgICAgdXN2OiB0aGlzLnN0YXREYXRhLnVzdixcclxuICAgICAgdDogZ2V0VGltZSgpLFxyXG4gICAgICBwOiB0aGlzLnN0YXREYXRhLnBcclxuICAgIH07XHJcbiAgICB0aGlzLnJlcXVlc3Qob3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBfc2VuZEhpZGVSZXF1ZXN0KG9wdCwgdHlwZSkge1xyXG4gICAgbGV0IHtcclxuICAgICAgdXJscmVmLFxyXG4gICAgICB1cmxyZWZfdHNcclxuICAgIH0gPSBvcHQ7XHJcbiAgICBsZXQgb3B0aW9ucyA9IHtcclxuICAgICAgYWs6IHRoaXMuc3RhdERhdGEuYWssXHJcbiAgICAgIHV1aWQ6IHRoaXMuc3RhdERhdGEudXVpZCxcclxuICAgICAgbHQ6ICczJyxcclxuICAgICAgdXQ6IHRoaXMuc3RhdERhdGEudXQsXHJcbiAgICAgIHVybHJlZixcclxuICAgICAgdXJscmVmX3RzLFxyXG4gICAgICBjaDogdGhpcy5zdGF0RGF0YS5jaCxcclxuICAgICAgdXN2OiB0aGlzLnN0YXREYXRhLnVzdixcclxuICAgICAgdDogZ2V0VGltZSgpLFxyXG4gICAgICBwOiB0aGlzLnN0YXREYXRhLnBcclxuICAgIH07XHJcbiAgICB0aGlzLnJlcXVlc3Qob3B0aW9ucywgdHlwZSk7XHJcbiAgfVxyXG4gIF9zZW5kRXZlbnRSZXF1ZXN0KHtcclxuICAgIGtleSA9ICcnLFxyXG4gICAgdmFsdWUgPSBcIlwiXHJcbiAgfSA9IHt9KSB7XHJcbiAgICBjb25zdCByb3V0ZSA9IHRoaXMuX2xhc3RQYWdlUm91dGU7XHJcbiAgICBsZXQgb3B0aW9ucyA9IHtcclxuICAgICAgYWs6IHRoaXMuc3RhdERhdGEuYWssXHJcbiAgICAgIHV1aWQ6IHRoaXMuc3RhdERhdGEudXVpZCxcclxuICAgICAgbHQ6ICcyMScsXHJcbiAgICAgIHV0OiB0aGlzLnN0YXREYXRhLnV0LFxyXG4gICAgICB1cmw6IHJvdXRlLFxyXG4gICAgICBjaDogdGhpcy5zdGF0RGF0YS5jaCxcclxuICAgICAgZV9uOiBrZXksXHJcbiAgICAgIGVfdjogdHlwZW9mKHZhbHVlKSA9PT0gJ29iamVjdCcgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgOiB2YWx1ZS50b1N0cmluZygpLFxyXG4gICAgICB1c3Y6IHRoaXMuc3RhdERhdGEudXN2LFxyXG4gICAgICB0OiBnZXRUaW1lKCksXHJcbiAgICAgIHA6IHRoaXMuc3RhdERhdGEucFxyXG4gICAgfTtcclxuICAgIHRoaXMucmVxdWVzdChvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIGdldE5ldHdvcmtJbmZvKCkge1xyXG4gICAgdW5pLmdldE5ldHdvcmtUeXBlKHtcclxuICAgICAgc3VjY2VzczogKHJlc3VsdCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc3RhdERhdGEubmV0ID0gcmVzdWx0Lm5ldHdvcmtUeXBlO1xyXG4gICAgICAgIHRoaXMuZ2V0TG9jYXRpb24oKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRQcm9wZXJ0eSgpIHtcclxuICAgIHBsdXMucnVudGltZS5nZXRQcm9wZXJ0eShwbHVzLnJ1bnRpbWUuYXBwaWQsICh3Z3RpbmZvKSA9PiB7XHJcbiAgICAgIHRoaXMuc3RhdERhdGEudiA9IHdndGluZm8udmVyc2lvbiB8fCAnJztcclxuICAgICAgdGhpcy5nZXROZXR3b3JrSW5mbygpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZXRMb2NhdGlvbigpIHtcclxuICAgIGlmIChzdGF0Q29uZmlnLmdldExvY2F0aW9uKSB7XHJcbiAgICAgIHVuaS5nZXRMb2NhdGlvbih7XHJcbiAgICAgICAgdHlwZTogJ3dnczg0JyxcclxuICAgICAgICBnZW9jb2RlOiB0cnVlLFxyXG4gICAgICAgIHN1Y2Nlc3M6IChyZXN1bHQpID0+IHtcclxuICAgICAgICAgIGlmIChyZXN1bHQuYWRkcmVzcykge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXREYXRhLmNuID0gcmVzdWx0LmFkZHJlc3MuY291bnRyeTtcclxuICAgICAgICAgICAgdGhpcy5zdGF0RGF0YS5wbiA9IHJlc3VsdC5hZGRyZXNzLnByb3ZpbmNlO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXREYXRhLmN0ID0gcmVzdWx0LmFkZHJlc3MuY2l0eTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB0aGlzLnN0YXREYXRhLmxhdCA9IHJlc3VsdC5sYXRpdHVkZTtcclxuICAgICAgICAgIHRoaXMuc3RhdERhdGEubG5nID0gcmVzdWx0LmxvbmdpdHVkZTtcclxuICAgICAgICAgIHRoaXMucmVxdWVzdCh0aGlzLnN0YXREYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zdGF0RGF0YS5sYXQgPSAwO1xyXG4gICAgICB0aGlzLnN0YXREYXRhLmxuZyA9IDA7XHJcbiAgICAgIHRoaXMucmVxdWVzdCh0aGlzLnN0YXREYXRhKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlcXVlc3QoZGF0YSwgdHlwZSkge1xyXG4gICAgbGV0IHRpbWUgPSBnZXRUaW1lKCk7XHJcbiAgICBjb25zdCB0aXRsZSA9IHRoaXMuX25hdmlnYXRpb25CYXJUaXRsZTtcclxuICAgIGRhdGEudHRuID0gdGl0bGUucGFnZTtcclxuICAgIGRhdGEudHRwaiA9IHRpdGxlLmNvbmZpZztcclxuICAgIGRhdGEudHRjID0gdGl0bGUucmVwb3J0O1xyXG5cclxuICAgIGxldCByZXF1ZXN0RGF0YSA9IHRoaXMuX3JlcG9ydGluZ1JlcXVlc3REYXRhO1xyXG4gICAgaWYgKGdldFBsYXRmb3JtTmFtZSgpID09PSAnbicpIHtcclxuICAgICAgcmVxdWVzdERhdGEgPSB1bmkuZ2V0U3RvcmFnZVN5bmMoJ19fVU5JX19TVEFUX19EQVRBJykgfHwge307XHJcbiAgICB9XHJcbiAgICBpZiAoIXJlcXVlc3REYXRhW2RhdGEubHRdKSB7XHJcbiAgICAgIHJlcXVlc3REYXRhW2RhdGEubHRdID0gW107XHJcbiAgICB9XHJcbiAgICByZXF1ZXN0RGF0YVtkYXRhLmx0XS5wdXNoKGRhdGEpO1xyXG5cclxuICAgIGlmIChnZXRQbGF0Zm9ybU5hbWUoKSA9PT0gJ24nKSB7XHJcbiAgICAgIHVuaS5zZXRTdG9yYWdlU3luYygnX19VTklfX1NUQVRfX0RBVEEnLCByZXF1ZXN0RGF0YSk7XHJcbiAgICB9XHJcbiAgICBpZiAoZ2V0UGFnZVJlc2lkZW5jZVRpbWUoKSA8IE9QRVJBVElOR19USU1FICYmICF0eXBlKSB7XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgbGV0IHVuaVN0YXREYXRhID0gdGhpcy5fcmVwb3J0aW5nUmVxdWVzdERhdGE7XHJcbiAgICBpZiAoZ2V0UGxhdGZvcm1OYW1lKCkgPT09ICduJykge1xyXG4gICAgICB1bmlTdGF0RGF0YSA9IHVuaS5nZXRTdG9yYWdlU3luYygnX19VTklfX1NUQVRfX0RBVEEnKTtcclxuICAgIH1cclxuICAgIC8vIOaXtumXtOi2hei/h++8jOmHjeaWsOiOt+WPluaXtumXtOaIs1xyXG4gICAgc2V0UGFnZVJlc2lkZW5jZVRpbWUoKTtcclxuICAgIGxldCBmaXJzdEFyciA9IFtdO1xyXG4gICAgbGV0IGNvbnRlbnRBcnIgPSBbXTtcclxuICAgIGxldCBsYXN0QXJyID0gW107XHJcblxyXG4gICAgZm9yIChsZXQgaSBpbiB1bmlTdGF0RGF0YSkge1xyXG4gICAgICBjb25zdCByZCA9IHVuaVN0YXREYXRhW2ldO1xyXG4gICAgICByZC5mb3JFYWNoKChlbG0pID0+IHtcclxuICAgICAgICBjb25zdCBuZXdEYXRhID0gZ2V0U3BsaWNpbmcoZWxtKTtcclxuICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgZmlyc3RBcnIucHVzaChuZXdEYXRhKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGkgPT09IDMpIHtcclxuICAgICAgICAgIGxhc3RBcnIucHVzaChuZXdEYXRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29udGVudEFyci5wdXNoKG5ld0RhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZmlyc3RBcnIucHVzaCguLi5jb250ZW50QXJyLCAuLi5sYXN0QXJyKTtcclxuICAgIGxldCBvcHRpb25zRGF0YSA9IHtcclxuICAgICAgdXN2OiBTVEFUX1ZFUlNJT04sIC8v57uf6K6hIFNESyDniYjmnKzlj7dcclxuICAgICAgdDogdGltZSwgLy/lj5HpgIHor7fmsYLml7bnmoTml7bpl7TmiK5cclxuICAgICAgcmVxdWVzdHM6IEpTT04uc3RyaW5naWZ5KGZpcnN0QXJyKSxcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5fcmVwb3J0aW5nUmVxdWVzdERhdGEgPSB7fTtcclxuICAgIGlmIChnZXRQbGF0Zm9ybU5hbWUoKSA9PT0gJ24nKSB7XHJcbiAgICAgIHVuaS5yZW1vdmVTdG9yYWdlU3luYygnX19VTklfX1NUQVRfX0RBVEEnKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGF0YS51dCA9PT0gJ2g1Jykge1xyXG4gICAgICB0aGlzLmltYWdlUmVxdWVzdChvcHRpb25zRGF0YSk7XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIGlmIChnZXRQbGF0Zm9ybU5hbWUoKSA9PT0gJ24nICYmIHRoaXMuc3RhdERhdGEucCA9PT0gJ2EnKSB7XHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuX3NlbmRSZXF1ZXN0KG9wdGlvbnNEYXRhKTtcclxuICAgICAgfSwgMjAwKTtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICB0aGlzLl9zZW5kUmVxdWVzdChvcHRpb25zRGF0YSk7XHJcbiAgfVxyXG4gIF9zZW5kUmVxdWVzdChvcHRpb25zRGF0YSkge1xyXG4gICAgdW5pLnJlcXVlc3Qoe1xyXG4gICAgICB1cmw6IFNUQVRfVVJMLFxyXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgLy8gaGVhZGVyOiB7XHJcbiAgICAgIC8vICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyAvLyDpu5jorqTlgLxcclxuICAgICAgLy8gfSxcclxuICAgICAgZGF0YTogb3B0aW9uc0RhdGEsXHJcbiAgICAgIHN1Y2Nlc3M6ICgpID0+IHtcclxuICAgICAgICAvLyBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcpIHtcclxuICAgICAgICAvLyAgIGNvbnNvbGUubG9nKCdzdGF0IHJlcXVlc3Qgc3VjY2VzcycpO1xyXG4gICAgICAgIC8vIH1cclxuICAgICAgfSxcclxuICAgICAgZmFpbDogKGUpID0+IHtcclxuICAgICAgICBpZiAoKyt0aGlzLl9yZXRyeSA8IDMpIHtcclxuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9zZW5kUmVxdWVzdChvcHRpb25zRGF0YSk7XHJcbiAgICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBoNSDor7fmsYJcclxuICAgKi9cclxuICBpbWFnZVJlcXVlc3QoZGF0YSkge1xyXG4gICAgbGV0IGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICBsZXQgb3B0aW9ucyA9IGdldFNnaW4oR2V0RW5jb2RlVVJJQ29tcG9uZW50T3B0aW9ucyhkYXRhKSkub3B0aW9ucztcclxuICAgIGltYWdlLnNyYyA9IFNUQVRfSDVfVVJMICsgJz8nICsgb3B0aW9ucztcclxuICB9XHJcblxyXG4gIHNlbmRFdmVudChrZXksIHZhbHVlKSB7XHJcbiAgICAvLyDmoKHpqowgdHlwZSDlj4LmlbBcclxuICAgIGlmIChjYWxpYnJhdGlvbihrZXksIHZhbHVlKSkgcmV0dXJuXHJcblxyXG4gICAgaWYgKGtleSA9PT0gJ3RpdGxlJykge1xyXG4gICAgICB0aGlzLl9uYXZpZ2F0aW9uQmFyVGl0bGUucmVwb3J0ID0gdmFsdWU7XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgdGhpcy5fc2VuZEV2ZW50UmVxdWVzdCh7XHJcbiAgICAgIGtleSxcclxuICAgICAgdmFsdWU6IHR5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnID8gSlNPTi5zdHJpbmdpZnkodmFsdWUpIDogdmFsdWVcclxuICAgIH0sIDEpO1xyXG4gIH1cclxufVxyXG5cclxuXHJcbmNsYXNzIFN0YXQgZXh0ZW5kcyBVdGlsIHtcclxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XHJcbiAgICBpZiAoIXRoaXMuaW5zdGFuY2UpIHtcclxuICAgICAgdGhpcy5pbnN0YW5jZSA9IG5ldyBTdGF0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5pbnN0YW5jZTtcclxuICB9XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gICAgdGhpcy5pbnN0YW5jZSA9IG51bGw7XHJcbiAgICAvLyDms6jlhozmi6bmiKrlmahcclxuICAgIGlmICh0eXBlb2YgdW5pLmFkZEludGVyY2VwdG9yID09PSAnZnVuY3Rpb24nICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgICAgIHRoaXMuYWRkSW50ZXJjZXB0b3JJbml0KCk7XHJcbiAgICAgIHRoaXMuaW50ZXJjZXB0TG9naW4oKTtcclxuICAgICAgdGhpcy5pbnRlcmNlcHRTaGFyZSh0cnVlKTtcclxuICAgICAgdGhpcy5pbnRlcmNlcHRSZXF1ZXN0UGF5bWVudCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkSW50ZXJjZXB0b3JJbml0KCkge1xyXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgdW5pLmFkZEludGVyY2VwdG9yKCdzZXROYXZpZ2F0aW9uQmFyVGl0bGUnLCB7XHJcbiAgICAgIGludm9rZShhcmdzKSB7XHJcbiAgICAgICAgc2VsZi5fbmF2aWdhdGlvbkJhclRpdGxlLnBhZ2UgPSBhcmdzLnRpdGxlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGludGVyY2VwdExvZ2luKCkge1xyXG4gICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgdW5pLmFkZEludGVyY2VwdG9yKCdsb2dpbicsIHtcclxuICAgICAgY29tcGxldGUoKSB7XHJcbiAgICAgICAgc2VsZi5fbG9naW4oKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpbnRlcmNlcHRTaGFyZSh0eXBlKSB7XHJcbiAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICBpZiAoIXR5cGUpIHtcclxuICAgICAgc2VsZi5fc2hhcmUoKTtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICB1bmkuYWRkSW50ZXJjZXB0b3IoJ3NoYXJlJywge1xyXG4gICAgICBzdWNjZXNzKCkge1xyXG4gICAgICAgIHNlbGYuX3NoYXJlKCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIGZhaWwoKSB7XHJcbiAgICAgICAgc2VsZi5fc2hhcmUoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBpbnRlcmNlcHRSZXF1ZXN0UGF5bWVudCgpIHtcclxuICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgIHVuaS5hZGRJbnRlcmNlcHRvcigncmVxdWVzdFBheW1lbnQnLCB7XHJcbiAgICAgIHN1Y2Nlc3MoKSB7XHJcbiAgICAgICAgc2VsZi5fcGF5bWVudCgncGF5X3N1Y2Nlc3MnKTtcclxuICAgICAgfSxcclxuICAgICAgZmFpbCgpIHtcclxuICAgICAgICBzZWxmLl9wYXltZW50KCdwYXlfZmFpbCcpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlcG9ydChvcHRpb25zLCBzZWxmKSB7XHJcbiAgICB0aGlzLnNlbGYgPSBzZWxmO1xyXG4gICAgLy8gaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgICAvLyAgIGNvbnNvbGUubG9nKCdyZXBvcnQgaW5pdCcpO1xyXG4gICAgLy8gfVxyXG4gICAgc2V0UGFnZVJlc2lkZW5jZVRpbWUoKTtcclxuICAgIHRoaXMuX19saWNhdGlvblNob3cgPSB0cnVlO1xyXG4gICAgdGhpcy5fc2VuZFJlcG9ydFJlcXVlc3Qob3B0aW9ucywgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBsb2FkKG9wdGlvbnMsIHNlbGYpIHtcclxuICAgIGlmICghc2VsZi4kc2NvcGUgJiYgIXNlbGYuJG1wKSB7XHJcbiAgICAgIGNvbnN0IHBhZ2UgPSBnZXRDdXJyZW50UGFnZXMoKTtcclxuICAgICAgc2VsZi4kc2NvcGUgPSBwYWdlW3BhZ2UubGVuZ3RoIC0gMV07XHJcbiAgICB9XHJcbiAgICB0aGlzLnNlbGYgPSBzZWxmO1xyXG4gICAgdGhpcy5fcXVlcnkgPSBvcHRpb25zO1xyXG4gIH1cclxuXHJcbiAgc2hvdyhzZWxmKSB7XHJcbiAgICB0aGlzLnNlbGYgPSBzZWxmO1xyXG4gICAgaWYgKGdldFBhZ2VUeXBlcyhzZWxmKSkge1xyXG4gICAgICB0aGlzLl9wYWdlU2hvdyhzZWxmKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuX2FwcGxpY2F0aW9uU2hvdyhzZWxmKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlYWR5KHNlbGYpIHtcclxuICAgIC8vIHRoaXMuc2VsZiA9IHNlbGY7XHJcbiAgICAvLyBpZiAoZ2V0UGFnZVR5cGVzKHNlbGYpKSB7XHJcbiAgICAvLyAgIHRoaXMuX3BhZ2VTaG93KHNlbGYpO1xyXG4gICAgLy8gfVxyXG4gIH1cclxuICBoaWRlKHNlbGYpIHtcclxuICAgIHRoaXMuc2VsZiA9IHNlbGY7XHJcbiAgICBpZiAoZ2V0UGFnZVR5cGVzKHNlbGYpKSB7XHJcbiAgICAgIHRoaXMuX3BhZ2VIaWRlKHNlbGYpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fYXBwbGljYXRpb25IaWRlKHNlbGYsIHRydWUpO1xyXG4gICAgfVxyXG4gIH1cclxuICBlcnJvcihlbSkge1xyXG4gICAgaWYgKHRoaXMuX3BsYXRmb3JtID09PSAnZGV2dG9vbHMnKSB7XHJcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbygn5b2T5YmN6L+Q6KGM546v5aKD5Li65byA5Y+R6ICF5bel5YW377yM5LiN5LiK5oql5pWw5o2u44CCJyk7XHJcbiAgICAgIH1cclxuICAgICAgLy8gcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IGVtVmFsID0gJyc7XHJcbiAgICBpZiAoIWVtLm1lc3NhZ2UpIHtcclxuICAgICAgZW1WYWwgPSBKU09OLnN0cmluZ2lmeShlbSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBlbVZhbCA9IGVtLnN0YWNrO1xyXG4gICAgfVxyXG4gICAgbGV0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGFrOiB0aGlzLnN0YXREYXRhLmFrLFxyXG4gICAgICB1dWlkOiB0aGlzLnN0YXREYXRhLnV1aWQsXHJcbiAgICAgIGx0OiAnMzEnLFxyXG4gICAgICB1dDogdGhpcy5zdGF0RGF0YS51dCxcclxuICAgICAgY2g6IHRoaXMuc3RhdERhdGEuY2gsXHJcbiAgICAgIG1wc2RrOiB0aGlzLnN0YXREYXRhLm1wc2RrLFxyXG4gICAgICBtcHY6IHRoaXMuc3RhdERhdGEubXB2LFxyXG4gICAgICB2OiB0aGlzLnN0YXREYXRhLnYsXHJcbiAgICAgIGVtOiBlbVZhbCxcclxuICAgICAgdXN2OiB0aGlzLnN0YXREYXRhLnVzdixcclxuICAgICAgdDogZ2V0VGltZSgpLFxyXG4gICAgICBwOiB0aGlzLnN0YXREYXRhLnBcclxuICAgIH07XHJcbiAgICB0aGlzLnJlcXVlc3Qob3B0aW9ucyk7XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBzdGF0ID0gU3RhdC5nZXRJbnN0YW5jZSgpO1xyXG5sZXQgaXNIaWRlID0gZmFsc2U7XHJcbmNvbnN0IGxpZmVjeWNsZSA9IHtcclxuICBvbkxhdW5jaChvcHRpb25zKSB7XHJcbiAgICBzdGF0LnJlcG9ydChvcHRpb25zLCB0aGlzKTtcclxuICB9LFxyXG4gIG9uUmVhZHkoKSB7XHJcbiAgICBzdGF0LnJlYWR5KHRoaXMpO1xyXG4gIH0sXHJcbiAgb25Mb2FkKG9wdGlvbnMpIHtcclxuICAgIHN0YXQubG9hZChvcHRpb25zLCB0aGlzKTtcclxuICAgIC8vIOmHjeWGmeWIhuS6q++8jOiOt+WPluWIhuS6q+S4iuaKpeS6i+S7tlxyXG4gICAgaWYgKHRoaXMuJHNjb3BlICYmIHRoaXMuJHNjb3BlLm9uU2hhcmVBcHBNZXNzYWdlKSB7XHJcbiAgICAgIGxldCBvbGRTaGFyZUFwcE1lc3NhZ2UgPSB0aGlzLiRzY29wZS5vblNoYXJlQXBwTWVzc2FnZTtcclxuICAgICAgdGhpcy4kc2NvcGUub25TaGFyZUFwcE1lc3NhZ2UgPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgc3RhdC5pbnRlcmNlcHRTaGFyZShmYWxzZSk7XHJcbiAgICAgICAgcmV0dXJuIG9sZFNoYXJlQXBwTWVzc2FnZS5jYWxsKHRoaXMsIG9wdGlvbnMpXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfSxcclxuICBvblNob3coKSB7XHJcbiAgICBpc0hpZGUgPSBmYWxzZTtcclxuICAgIHN0YXQuc2hvdyh0aGlzKTtcclxuICB9LFxyXG4gIG9uSGlkZSgpIHtcclxuICAgIGlzSGlkZSA9IHRydWU7XHJcbiAgICBzdGF0LmhpZGUodGhpcyk7XHJcbiAgfSxcclxuICBvblVubG9hZCgpIHtcclxuICAgIGlmIChpc0hpZGUpIHtcclxuICAgICAgaXNIaWRlID0gZmFsc2U7XHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgc3RhdC5oaWRlKHRoaXMpO1xyXG4gIH0sXHJcbiAgb25FcnJvcihlKSB7XHJcbiAgICBzdGF0LmVycm9yKGUpO1xyXG4gIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIG1haW4oKSB7XHJcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgICB1bmkucmVwb3J0ID0gZnVuY3Rpb24odHlwZSwgb3B0aW9ucykge307XHJcbiAgfWVsc2V7XHJcbiAgICBjb25zdCBWdWUgPSByZXF1aXJlKCd2dWUnKTtcclxuICAgIChWdWUuZGVmYXVsdCB8fCBWdWUpLm1peGluKGxpZmVjeWNsZSk7XHJcbiAgICB1bmkucmVwb3J0ID0gZnVuY3Rpb24odHlwZSwgb3B0aW9ucykge1xyXG4gICAgICBzdGF0LnNlbmRFdmVudCh0eXBlLCBvcHRpb25zKTtcclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5tYWluKCk7XHJcbiIsImV4cG9ydCBkZWZhdWx0IHtcInBhZ2VzXCI6e30sXCJnbG9iYWxTdHlsZVwiOnt9fSIsImV4cG9ydCBkZWZhdWx0IHtcImFwcGlkXCI6XCJfX1VOSV9fNjlCOTA0RVwifSIsIlZ1ZS5wcm90b3R5cGUuX18kYXBwU3R5bGVfXyA9IHt9XG5WdWUucHJvdG90eXBlLl9fbWVyZ2Vfc3R5bGUgJiYgVnVlLnByb3RvdHlwZS5fX21lcmdlX3N0eWxlKHJlcXVpcmUoXCIuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3NcIikuZGVmYXVsdCxWdWUucHJvdG90eXBlLl9fJGFwcFN0eWxlX18pXG4iLCJpbXBvcnQgbW9kIGZyb20gXCItIUQ6XFxcXOi9r+S7tlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4taGJ1aWxkZXJ4XFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stdW5pLW52dWUtbG9hZGVyXFxcXGxpYlxcXFxzdHlsZS5qcyFEOlxcXFzova/ku7ZcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXByZXByb2Nlc3MtbG9hZGVyXFxcXGluZGV4LmpzPz9yZWYtLTktb25lT2YtMC0xIUQ6XFxcXOi9r+S7tlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxwb3N0Y3NzLWxvYWRlclxcXFxzcmNcXFxcaW5kZXguanM/P3JlZi0tOS1vbmVPZi0wLTIhRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXHNhc3MtbG9hZGVyXFxcXGxpYlxcXFxsb2FkZXIuanM/P3JlZi0tOS1vbmVPZi0wLTMhRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlclxcXFxpbmRleC5qcz8/cmVmLS05LW9uZU9mLTAtNCFEOlxcXFzova/ku7ZcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2Nzc1wiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIUQ6XFxcXOi9r+S7tlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4taGJ1aWxkZXJ4XFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stdW5pLW52dWUtbG9hZGVyXFxcXGxpYlxcXFxzdHlsZS5qcyFEOlxcXFzova/ku7ZcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXByZXByb2Nlc3MtbG9hZGVyXFxcXGluZGV4LmpzPz9yZWYtLTktb25lT2YtMC0xIUQ6XFxcXOi9r+S7tlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxwb3N0Y3NzLWxvYWRlclxcXFxzcmNcXFxcaW5kZXguanM/P3JlZi0tOS1vbmVPZi0wLTIhRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXHNhc3MtbG9hZGVyXFxcXGxpYlxcXFxsb2FkZXIuanM/P3JlZi0tOS1vbmVPZi0wLTMhRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlclxcXFxpbmRleC5qcz8/cmVmLS05LW9uZU9mLTAtNCFEOlxcXFzova/ku7ZcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2Nzc1wiIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gIFwiYnJhbmRcIjoge1xuICAgIFwiY29sb3JcIjogXCIjZjQyZTE0XCJcbiAgfSxcbiAgXCJwcmltYXJ5XCI6IHtcbiAgICBcImNvbG9yXCI6IFwiIzU4NjdkZFwiXG4gIH0sXG4gIFwibWV0YWxcIjoge1xuICAgIFwiY29sb3JcIjogXCIjNTc1OTYyXCJcbiAgfSxcbiAgXCJzdWNjZXNzXCI6IHtcbiAgICBcImNvbG9yXCI6IFwiIzM0YmZhM1wiXG4gIH0sXG4gIFwid2FybmluZ1wiOiB7XG4gICAgXCJjb2xvclwiOiBcIiNmZmI4MjJcIlxuICB9LFxuICBcImluZm9cIjoge1xuICAgIFwiY29sb3JcIjogXCIjMzZhM2Y3XCJcbiAgfSxcbiAgXCJmb2N1c1wiOiB7XG4gICAgXCJjb2xvclwiOiBcIiM5ODE2ZjRcIlxuICB9LFxuICBcImxpZ2h0XCI6IHtcbiAgICBcImNvbG9yXCI6IFwiI2ZmZmZmZlwiXG4gIH0sXG4gIFwiYWNjZW50XCI6IHtcbiAgICBcImNvbG9yXCI6IFwiIzAwYzVkY1wiXG4gIH0sXG4gIFwiZGFuZ2VyXCI6IHtcbiAgICBcImNvbG9yXCI6IFwiI2Y0NTE2Y1wiXG4gIH1cbn0iLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSwgLyogdnVlLWNsaSBvbmx5ICovXG4gIGNvbXBvbmVudHMsIC8vIGZpeGVkIGJ5IHh4eHh4eCBhdXRvIGNvbXBvbmVudHNcbiAgcmVuZGVyanMgLy8gZml4ZWQgYnkgeHh4eHh4IHJlbmRlcmpzXG4pIHtcbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxuICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBzY3JpcHRFeHBvcnRzID09PSAnZnVuY3Rpb24nXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcbiAgICA6IHNjcmlwdEV4cG9ydHNcblxuICAvLyBmaXhlZCBieSB4eHh4eHggYXV0byBjb21wb25lbnRzXG4gIGlmIChjb21wb25lbnRzKSB7XG4gICAgb3B0aW9ucy5jb21wb25lbnRzID0gT2JqZWN0LmFzc2lnbihjb21wb25lbnRzLCBvcHRpb25zLmNvbXBvbmVudHMgfHwge30pXG4gIH1cbiAgLy8gZml4ZWQgYnkgeHh4eHh4IHJlbmRlcmpzXG4gIGlmIChyZW5kZXJqcykge1xuICAgIChyZW5kZXJqcy5iZWZvcmVDcmVhdGUgfHwgKHJlbmRlcmpzLmJlZm9yZUNyZWF0ZSA9IFtdKSkudW5zaGlmdChmdW5jdGlvbigpIHtcbiAgICAgIHRoaXNbcmVuZGVyanMuX19tb2R1bGVdID0gdGhpc1xuICAgIH0pO1xuICAgIChvcHRpb25zLm1peGlucyB8fCAob3B0aW9ucy5taXhpbnMgPSBbXSkpLnB1c2gocmVuZGVyanMpXG4gIH1cblxuICAvLyByZW5kZXIgZnVuY3Rpb25zXG4gIGlmIChyZW5kZXIpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXG4gIH1cblxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChmdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXG4gIH1cblxuICAvLyBzY29wZWRJZFxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSAnZGF0YS12LScgKyBzY29wZUlkXG4gIH1cblxuICB2YXIgaG9va1xuICBpZiAobW9kdWxlSWRlbnRpZmllcikgeyAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIC8vIDIuMyBpbmplY3Rpb25cbiAgICAgIGNvbnRleHQgPVxuICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXG4gICAgICAgICh0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0KSB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KSAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcbiAgICAgIGlmICghY29udGV4dCAmJiB0eXBlb2YgX19WVUVfU1NSX0NPTlRFWFRfXyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX19cbiAgICAgIH1cbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgc3R5bGVzXG4gICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIGNvbnRleHQpXG4gICAgICB9XG4gICAgICAvLyByZWdpc3RlciBjb21wb25lbnQgbW9kdWxlIGlkZW50aWZpZXIgZm9yIGFzeW5jIGNodW5rIGluZmVycmVuY2VcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XG4gICAgICAgIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzLmFkZChtb2R1bGVJZGVudGlmaWVyKVxuICAgICAgfVxuICAgIH1cbiAgICAvLyB1c2VkIGJ5IHNzciBpbiBjYXNlIGNvbXBvbmVudCBpcyBjYWNoZWQgYW5kIGJlZm9yZUNyZWF0ZVxuICAgIC8vIG5ldmVyIGdldHMgY2FsbGVkXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rXG4gIH0gZWxzZSBpZiAoaW5qZWN0U3R5bGVzKSB7XG4gICAgaG9vayA9IHNoYWRvd01vZGVcbiAgICAgID8gZnVuY3Rpb24gKCkgeyBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCB0aGlzLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3QpIH1cbiAgICAgIDogaW5qZWN0U3R5bGVzXG4gIH1cblxuICBpZiAoaG9vaykge1xuICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcbiAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0XG4gICAgICAvLyBnbyB0aHJvdWdoIHRoZSBub3JtYWxpemVyXG4gICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rXG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb2FsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxuICAgICAgdmFyIG9yaWdpbmFsUmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxuICAgICAgICByZXR1cm4gb3JpZ2luYWxSZW5kZXIoaCwgY29udGV4dClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCByZWdpc3RyYXRpb24gYXMgYmVmb3JlQ3JlYXRlIGhvb2tcbiAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXG4gICAgICAgID8gW10uY29uY2F0KGV4aXN0aW5nLCBob29rKVxuICAgICAgICA6IFtob29rXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwb3J0czogc2NyaXB0RXhwb3J0cyxcbiAgICBvcHRpb25zOiBvcHRpb25zXG4gIH1cbn1cbiIsImNvbnN0IGFsYSA9IE9iamVjdC5jcmVhdGUobnVsbClcclxuXHJcbmNvbnN0IG1vZHVsZXMgPSByZXF1aXJlLmNvbnRleHQoJy4vYWxhJywgdHJ1ZSwgL1xcLmpzJC8pXHJcbm1vZHVsZXMua2V5cygpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gIE9iamVjdC5hc3NpZ24oYWxhLCBtb2R1bGVzKGtleSkpXHJcbn0pXHJcblxyXG5jb25zdCBtb2R1bGVzQXBpID0gcmVxdWlyZS5jb250ZXh0KCcuL2FwaS90b29sJywgdHJ1ZSwgL1xcLmFwaS5qcyQvKVxyXG5tb2R1bGVzQXBpLmtleXMoKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICBPYmplY3QuYXNzaWduKGFsYSwgbW9kdWxlc0FwaShrZXkpKVxyXG59KVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWxhXHJcblxyXG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vYXBwLmpzXCI6IDMwLFxuXHRcIi4vYmFjay5qc1wiOiAzNCxcblx0XCIuL2Jhc2UuanNcIjogMzUsXG5cdFwiLi9jbGllbnQuanNcIjogMzcsXG5cdFwiLi9jb3JlLmpzXCI6IDM4LFxuXHRcIi4vY3J1ZC5qc1wiOiAzOSxcblx0XCIuL2h0dHAuanNcIjogNDAsXG5cdFwiLi9sb2FkLmpzXCI6IDQ0LFxuXHRcIi4vbG9jYWwuanNcIjogNDUsXG5cdFwiLi9sb2cuanNcIjogNDYsXG5cdFwiLi9wYXkuanNcIjogNDgsXG5cdFwiLi9yb3V0ZS5qc1wiOiA0OSxcblx0XCIuL3NjcmVlbi5qc1wiOiA1MCxcblx0XCIuL3N0ci5qc1wiOiA1NCxcblx0XCIuL3RlbmFudC5qc1wiOiA1NSxcblx0XCIuL3RoZW1lLmpzXCI6IDU2LFxuXHRcIi4vdGltZS5qc1wiOiA1Nyxcblx0XCIuL3RvLmpzXCI6IDU4LFxuXHRcIi4vdG9hc3QuanNcIjogNTksXG5cdFwiLi91bmkuanNcIjogNjAsXG5cdFwiLi91cmwuanNcIjogNjEsXG5cdFwiLi91c2VyLmpzXCI6IDYyLFxuXHRcIi4vdnVleC5qc1wiOiA2M1xufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgeyAvLyBjaGVjayBmb3IgbnVtYmVyIG9yIHN0cmluZ1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gaWQ7XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMjk7IiwiLy8g5q2k5paH5Lu25Li6aW9z5ZKM5a6J5Y2TYXBw55u45YWz55qE5Yqf6IO977yM5LiN5pSv5oyBaDXlvq7kv6HlsI/nqIvluo9cclxuLy8gQXBw5Zu+5qCH5Yqg6L29XHJcbmltcG9ydCBhbGEgZnJvbSAnQC9zZXJ2aWNlL2FsYS5qcydcclxuXHJcbi8vIOWbvuagh+WKoOi9vVxyXG5leHBvcnQgZnVuY3Rpb24gYXBwSWNvbigpIHtcclxuXHJcbiAgdmFyIGRvbU1vZHVsZSA9IHdlZXgucmVxdWlyZU1vZHVsZSgnZG9tJylcclxuICBkb21Nb2R1bGUuYWRkUnVsZSgnZm9udEZhY2UnLCB7XHJcbiAgICBmb250RmFtaWx5OiAnaWNvbmZvbnQnLFxyXG4gICAgc3JjOiBcInVybCgnLi4vLi4vc3RhdGljL2ljb25mb250L2ZvbnQvaWNvbmZvdW50LTU1OTA2MDRmYzYudHRmJylcIlxyXG4gIH0pXHJcblxyXG59XHJcblxyXG4vLyBBcHAg54mI5pys5pu05paw77yM5Y+v5Y+C6ICDdW5pLWFwcOWumOaWueeahOaWh+eroGRlbW/mnaXlrp7njrBcclxuZXhwb3J0IGZ1bmN0aW9uIGFwcFVwZGF0ZSgpIHtcclxuXHJcbiAgcGx1cy5zY3JlZW4ubG9ja09yaWVudGF0aW9uKCdwb3J0cmFpdC1wcmltYXJ5JylcclxuICB2YXIgdmVyc2lvblxyXG4gIHBsdXMucnVudGltZS5nZXRQcm9wZXJ0eShwbHVzLnJ1bnRpbWUuYXBwaWQsIGFzeW5jIGZ1bmN0aW9uKHdndGluZm8pIHtcclxuICAgIHZlcnNpb24gPSB3Z3RpbmZvLnZlcnNpb25cclxuICAgIGxldCBwYXIgPSB7XHJcbiAgICAgIEFwcENsaWVudDogYWxhLnBheVR5cGUoKSxcclxuICAgICAgVmVyc2lvbjogdmVyc2lvblxyXG4gICAgfVxyXG4gICAgdmFyIHJlc3BvbnNlID0gYXdhaXQgYWxhLmh0dHBHZXQoJ0FwaS9BcHBWZXJzaW9uL0FwcENoZWNrVmVyc2lvbicsIHBhcilcclxuICAgIGlmIChyZXNwb25zZSkge1xyXG4gICAgICB1bmkuc2hvd01vZGFsKHtcclxuICAgICAgICB0aXRsZTogJ+WPkeeOsOaWsOeJiOacrCcsXHJcbiAgICAgICAgY29udGVudDogcmVzcG9uc2Uubm90ZSxcclxuICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXMpIHtcclxuICAgICAgICAgIGlmIChyZXMuY29uZmlybSkge1xyXG4gICAgICAgICAgICAvLyB2YXIgdXJsID0gZW5jb2RlVVJJKHJlc3BvbnNlLnVybClcclxuICAgICAgICAgICAgLy8gcGx1cy5ydW50aW1lLm9wZW5VUkwodXJsLCBmdW5jdGlvbiAocmVzKSB7fSlcclxuICAgICAgICAgIH0gZWxzZSBpZiAocmVzLmNhbmNlbCkge1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH1cclxuICB9KVxyXG5cclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vLyBUaGlzIG1ldGhvZCBvZiBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbCBvYmplY3QgbmVlZHMgdG8gYmVcbi8vIGtlcHQgaWRlbnRpY2FsIHRvIHRoZSB3YXkgaXQgaXMgb2J0YWluZWQgaW4gcnVudGltZS5qc1xudmFyIGcgPSAoZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzIHx8ICh0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiAmJiBzZWxmKTtcbn0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuXG4vLyBVc2UgYGdldE93blByb3BlcnR5TmFtZXNgIGJlY2F1c2Ugbm90IGFsbCBicm93c2VycyBzdXBwb3J0IGNhbGxpbmdcbi8vIGBoYXNPd25Qcm9wZXJ0eWAgb24gdGhlIGdsb2JhbCBgc2VsZmAgb2JqZWN0IGluIGEgd29ya2VyLiBTZWUgIzE4My5cbnZhciBoYWRSdW50aW1lID0gZy5yZWdlbmVyYXRvclJ1bnRpbWUgJiZcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZykuaW5kZXhPZihcInJlZ2VuZXJhdG9yUnVudGltZVwiKSA+PSAwO1xuXG4vLyBTYXZlIHRoZSBvbGQgcmVnZW5lcmF0b3JSdW50aW1lIGluIGNhc2UgaXQgbmVlZHMgdG8gYmUgcmVzdG9yZWQgbGF0ZXIuXG52YXIgb2xkUnVudGltZSA9IGhhZFJ1bnRpbWUgJiYgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG5cbi8vIEZvcmNlIHJlZXZhbHV0YXRpb24gb2YgcnVudGltZS5qcy5cbmcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL3J1bnRpbWVcIik7XG5cbmlmIChoYWRSdW50aW1lKSB7XG4gIC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIHJ1bnRpbWUuXG4gIGcucmVnZW5lcmF0b3JSdW50aW1lID0gb2xkUnVudGltZTtcbn0gZWxzZSB7XG4gIC8vIFJlbW92ZSB0aGUgZ2xvYmFsIHByb3BlcnR5IGFkZGVkIGJ5IHJ1bnRpbWUuanMuXG4gIHRyeSB7XG4gICAgZGVsZXRlIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuICB9IGNhdGNoKGUpIHtcbiAgICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIHJ1bnRpbWUuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIHZhciBpdGVyID0gbmV3IEFzeW5jSXRlcmF0b3IoXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxuICAgICk7XG5cbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIHJ1bnRpbWUudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG59KShcbiAgLy8gSW4gc2xvcHB5IG1vZGUsIHVuYm91bmQgYHRoaXNgIHJlZmVycyB0byB0aGUgZ2xvYmFsIG9iamVjdCwgZmFsbGJhY2sgdG9cbiAgLy8gRnVuY3Rpb24gY29uc3RydWN0b3IgaWYgd2UncmUgaW4gZ2xvYmFsIHN0cmljdCBtb2RlLiBUaGF0IGlzIHNhZGx5IGEgZm9ybVxuICAvLyBvZiBpbmRpcmVjdCBldmFsIHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5LlxuICAoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMgfHwgKHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiICYmIHNlbGYpO1xuICB9KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKVxuKTtcbiIsImltcG9ydCBhbGEgZnJvbSAnQC9zZXJ2aWNlL2FsYSdcclxuXHJcbi8vIOi/lOWbnuS4iuS4gOmhtSzpgJrov4fljoblj7LorrDlvZXmn6Xmib4s5om+5LiN5Yiw5LiK5LiA6aG15pe2LOi/lOWbnuWIsOmmlumhtVxyXG5leHBvcnQgZnVuY3Rpb24gYmFjaygpIHtcclxuICB2YXIgdXJsID0gYmFja1VybCgpXHJcbiAgdmFyIGhpc3RvcnlzID0gYWxhLnZ1ZXhMb2NhbEdldCgnYnJvd3NlX2hpc3RvcnlzJylcclxuICBhbGEudG8odXJsKVxyXG4gIGhpc3RvcnlzLnNwbGljZSgwLCAxKVxyXG4gIGFsYS52dWV4TG9jYWxTZXQoJ2Jyb3dzZV9oaXN0b3J5cycsIGhpc3RvcnlzKVxyXG59XHJcblxyXG4vLyDkuIrkuIDpobVVUkxcclxuZXhwb3J0IGZ1bmN0aW9uIGJhY2tVcmwoKSB7XHJcbiAgdmFyIGhpc3RvcnlzID0gYWxhLnZ1ZXhMb2NhbEdldCgnYnJvd3NlX2hpc3RvcnlzJylcclxuICB2YXIgdXJsID0gJy9wYWdlcy90YWJiYXIvaW5kZXgnXHJcbiAgdmFyIGN1cnJlbnRVcmwgPSBoaXN0b3J5c1swXVxyXG4gIC8vIOeZu+W9lemhtemdouWQjumAgFxyXG4gIGlmIChjdXJyZW50VXJsLmluZGV4T2YoJ3VzZXJfbG9naW4nKSA+IC0xKSB7XHJcbiAgICB1cmwgPSAnL3BhZ2VzL3RhYmJhci9pbmRleCdcclxuICB9XHJcbiAgaWYgKGhpc3RvcnlzICYmIGhpc3RvcnlzLmxlbmd0aCA+IDEpIHtcclxuICAgIHVybCA9IGhpc3RvcnlzWzFdXHJcbiAgfVxyXG4gIHJldHVybiB1cmxcclxufVxyXG5cclxuLy8g5re75Yqg5Y6G5Y+y6K6w5b2VXHJcbmV4cG9ydCBmdW5jdGlvbiBiYWNrQWRkKHVybCkge1xyXG4gIGlmICghdXJsKSB7XHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgdmFyIGhpc3RvcnlzID0gYWxhLnZ1ZXhMb2NhbEdldCgnYnJvd3NlX2hpc3RvcnlzJylcclxuICBpZiAoIWhpc3RvcnlzKSB7XHJcbiAgICBoaXN0b3J5cyA9IFtdXHJcbiAgfSBlbHNlIHtcclxuICAgIGhpc3RvcnlzID0gaGlzdG9yeXMuZmlsdGVyKHIgPT4gciAhPT0gdXJsKVxyXG4gIH1cclxuICBoaXN0b3J5cy51bnNoaWZ0KHVybClcclxuICBpZiAoaGlzdG9yeXMubGVuZ3RoID4gMTApIHtcclxuICAgIGhpc3RvcnlzLnBvcCgpXHJcbiAgfVxyXG4gIGFsYS52dWV4TG9jYWxTZXQoJ2Jyb3dzZV9oaXN0b3J5cycsIGhpc3RvcnlzKVxyXG59XHJcbiIsImltcG9ydCBhbGEgZnJvbSAnQC9zZXJ2aWNlL2FsYSdcclxuaW1wb3J0IGNvbmZpZyBmcm9tICdAL3NlcnZpY2UvY29uZmlnJ1xyXG5leHBvcnQgbGV0IGhvc3QgPSBjb25maWcuaG9zdFxyXG5cclxuLy8g5Yik5pat5piv55Sf5oiQ546v5aKD6L+Y5piv5byA5Y+R546v5aKDXHJcbmV4cG9ydCBmdW5jdGlvbiBpc0J1aWxkKCkge1xyXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG59XHJcblxyXG4vLyDov5Tlm57ln7rmnKzphY3nva7liJfooahcclxuZXhwb3J0IGZ1bmN0aW9uIGJhc2VDb25maWcoKSB7XHJcbiAgcmV0dXJuIGNvbmZpZ1xyXG59XHJcblxyXG4vLyDojrflj5blhYPntKDoioLngrlcclxuZXhwb3J0IGZ1bmN0aW9uIGdldFF1ZXJ5KGpzVGhpcywgdHlwZSkge1xyXG4gIGxldCBzZWxlY3RvclF1ZXJ5ID0gJydcclxuXHJcblxyXG5cclxuXHJcbiAgc2VsZWN0b3JRdWVyeSA9IHVuaS5jcmVhdGVTZWxlY3RvclF1ZXJ5KClcclxuXHJcbiAgc2VsZWN0b3JRdWVyeS5zZWxlY3RBbGwodHlwZSkuYm91bmRpbmdDbGllbnRSZWN0KClcclxuICByZXR1cm4gc2VsZWN0b3JRdWVyeS5zZWxlY3RWaWV3cG9ydCgpLnNjcm9sbE9mZnNldCgpXHJcbn1cclxuXHJcblxyXG4vLyDlvLnnqpdcclxuZXhwb3J0IGZ1bmN0aW9uIHNob3dNb2RhbCh0aXRsZSwgY29udGVudCkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICB1bmkuc2hvd01vZGFsKHtcclxuICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICBjb250ZW50OiBjb250ZW50LFxyXG4gICAgICBzdWNjZXNzOiByZXMgPT4ge1xyXG4gICAgICAgIGlmIChyZXMuY29uZmlybSkge1xyXG4gICAgICAgICAgcmVzb2x2ZSh0cnVlKVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXNvbHZlKGZhbHNlKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9KVxyXG59XHJcbiIsIi8vIGNvbnN0IGhvc3QgPSAnaHR0cDovL2xvY2FsaG9zdDoxODAwLydcclxuY29uc3QgaG9zdCA9ICdodHRwOi8vYi1hcGkuYmFvZHVvZHVvLmNsdWIvJ1xyXG5cclxuY29uc3QgdmVyc2lvbiA9ICcwLjAuMTAxMCdcclxuY29uc3QgaXNUZW5hbnQgPSBmYWxzZVxyXG5jb25zdCBrZXkgPSAnTFVQR0hPREtZRldZTzBZQVJBV05US01NOFFaUThMMUJBN1pNTEVBRTUzVjZOUVM3WldKMVdVJ1xyXG5jb25zdCBwcm9qZWN0SWQgPSAnQzk0RTM1NUYtNzlEQy00NEU4LThFRjEtQ0JGODg2MTI5RURBJ1xyXG5jb25zdCB0aGVtZUlkID0gJzVlMWZkOTRjOTgzZGJmNDdiMGQxNmVmMCdcclxuY29uc3QgcHJpdmF0ZUtleSA9ICd6aG9uZ2h1YXJlbm1pbmdvbmdoZWdvdWNoZW5nbGlsZSdcclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgaG9zdCxcclxuICB0aGVtZUlkLFxyXG4gIHByb2plY3RJZCxcclxuICBrZXksXHJcbiAgaXNUZW5hbnQsXHJcbiAgcHJpdmF0ZUtleSxcclxuICB2ZXJzaW9uXHJcbn1cclxuIiwiaW1wb3J0IGFsYSBmcm9tICdAL3NlcnZpY2UvYWxhJ1xyXG4vLyDnu4jnq6/nsbvlnotcclxuZXhwb3J0IGZ1bmN0aW9uIGNsaWVudCgpIHtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxufVxyXG5cclxuLy8g5pSv5LuY57G75Z6LXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsaWVudFBheVR5cGUoKSB7XHJcbiAgaWYgKHRoaXMuY2xpZW50KCkgPT09ICdXYXBINScpIHtcclxuICAgIC8vIOaJi+aculdhcFxyXG4gICAgcmV0dXJuIDJcclxuICB9IGVsc2UgaWYgKHRoaXMuY2xpZW50KCkgPT09ICdXZUNoYXQnKSB7XHJcbiAgICAvLyDlvq7kv6FcclxuICAgIHJldHVybiA1XHJcbiAgfSBlbHNlIGlmICh0aGlzLmNsaWVudCgpID09PSAnV2VDaGF0TGl0ZScpIHtcclxuICAgIC8vIOWwj+eoi+W6j1xyXG4gICAgcmV0dXJuIDZcclxuICB9IGVsc2UgaWYgKHRoaXMuY2xpZW50KCkgPT09ICdBcHBQbHVzJykge1xyXG4gICAgcmV0dXJuIDNcclxuICB9IGVsc2UgaWYgKHRoaXMuY2xpZW50KCkgPT09ICdBcHBQbHVzJykge1xyXG4gICAgcmV0dXJuIDRcclxuICB9XHJcbn1cclxuXHJcblxyXG4vLyDmlofku7bkuIrkvKDlnLDlnYBcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjbGllbnRVcGxvYWRBcGkgKCkge1xyXG4gIHZhciBhcGlVcmwgPSBhbGEuaG9zdCArICdBcGkvU3RvcmFnZUZpbGUvdXBsb2FkJ1xyXG4gIHJldHVybiBhcGlVcmxcclxufVxyXG4iLCIvLyBpbXBvcnQgY29uZmlnIGZyb20gJ0Avc2VydmljZS9jb25maWcnXHJcblxyXG4vLyDpobXpnaLot7PovawgLOezu+e7n+mhtemdoui3s+i9rOS9v+eUqGFsYS50b1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0byh1cmwpIHtcclxuICBoaXN0b3J5LnRvKHVybClcclxufVxyXG4vL1xyXG5leHBvcnQgZnVuY3Rpb24gYmFjaygpIHtcclxuICBoaXN0b3J5LmJhY2soKVxyXG59XHJcbiIsImltcG9ydCBhbGEgZnJvbSAnQC9zZXJ2aWNlL2FsYSdcclxuXHJcbi8vIOagueaNrlVybOS4reeahOWPguaVsElk77yM6I635Y+W6KeG5Zu+XHJcbi8vIOS9v+eUqOWKqOaAgSDliqjmgIHnvZHlnYAgQXBpL3t76KGo5ZCNfX0vVmlld0J5SWRcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFZpZXcoaW50YW5jZSwgYXBpVXJsKSB7XHJcbiAgdmFyIHBhcmEgPSB7XHJcbiAgICBpZDogaW50YW5jZS4kcm91dGUucXVlcnkuaWQgIT09IHVuZGVmaW5lZCA/IGludGFuY2UuJHJvdXRlLnF1ZXJ5LmlkIDogMFxyXG4gIH1cclxuICB2YXIgcmVzcG9uc2UgPSBhd2FpdCBhbGEuaHR0cEdldChhcGlVcmwsIHBhcmEpXHJcbiAgcmV0dXJuIHJlc3BvbnNlXHJcbn1cclxuXHJcbi8vIOS7jndpZGdldOS4reiOt+WPluaVsOaNrlxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gd2lkZ2V0KGludGFuY2UsIHR5cGUsIG9iamVjdCkge1xyXG4gIHZhciBwYXJhID0ge1xyXG4gICAgdHlwZTogdHlwZSxcclxuICAgIGpzb246IEpTT04uc3RyaW5naWZ5KG9iamVjdClcclxuICB9XHJcbiAgdmFyIHJlc3BvbnNlID0gYXdhaXQgYWxhLmh0dHBHZXQoJ2FwaS9XaWRnZXQvR2V0JywgcGFyYSlcclxuICByZXR1cm4gcmVzcG9uc2VcclxufVxyXG5cclxuLy8g5L+d5a2YXHJcbi8vIOWKqOaAgeS/neWtmOaOpeWPo++8miBBcGkve3vooajlkI19fS9RdWVyeVNhdmVcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHNhdmUoaW50YW5jZSwgYXBpVXJsLCB2aWV3TW9kZWwpIHtcclxuICB2YXIgcGFyYSA9IHtcclxuICAgIC4uLnZpZXdNb2RlbFxyXG4gIH1cclxuICB2YXIgcmVzcG9uc2UgPSBhd2FpdCBhbGEuaHR0cFBvc3QoYXBpVXJsLCBwYXJhKVxyXG4gIHJldHVybiByZXNwb25zZVxyXG59XHJcblxyXG4vLyDmj5DnpLrvvIzmiJDlip/mj5DnpLrmraPnoa7kv6Hmga/vvIzojrflj5bmmL7npLrplJnor6/kv6Hmga9cclxuZXhwb3J0IGZ1bmN0aW9uIG1lc3NhZ2UocmVzcG9uc2UpIHtcclxuICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAxKSB7XHJcbiAgICBhbGEudG8oJy9wYWdlcy9tZXNzYWdlJylcclxuICB9IGVsc2Uge1xyXG4gICAgYWxhLnRvKCcvcGFnZXMvbWVzc2FnZScpXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB0b2tlbiBmcm9tICdAL3NlcnZpY2UvdXRpbHMvdG9rZW4nXHJcbmltcG9ydCBhbGEgZnJvbSAnQC9zZXJ2aWNlL2FsYSdcclxuaW1wb3J0IGdsb2JhbENvbmZpZyBmcm9tICdAL3NlcnZpY2UvY29uZmlnJ1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gcmVxdWVzdChhcGlVcmwsIG1ldGhvZCwgZGF0YSkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICB1bmkucmVxdWVzdCh7XHJcbiAgICAgIHVybDogZ2xvYmFsQ29uZmlnLmhvc3QgKyBhcGlVcmwsXHJcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxyXG4gICAgICBkYXRhOiB7XHJcbiAgICAgICAgLi4uZGF0YVxyXG4gICAgICB9LFxyXG4gICAgICBoZWFkZXI6IHtcclxuICAgICAgICAuLi5nZXRIZWFkKGFwaVVybClcclxuICAgICAgfSxcclxuICAgICAgY29tcGxldGUocmVzKSB7XHJcbiAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlID09PSAyMDApIHtcclxuICAgICAgICAgIGlmIChyZXMuZGF0YS5zdGF0dXMgPT09IDEpIHtcclxuICAgICAgICAgICAgaWYgKHJlcy5kYXRhLnJlc3VsdCAhPT0gbnVsbCAmJiByZXMuZGF0YS5yZXN1bHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgIHJlc29sdmUocmVzLmRhdGEucmVzdWx0KVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIHJlc29sdmUocmVzLmRhdGEpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0gZWxzZSBpZiAocmVzLmRhdGEpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZShudWxsKVxyXG4gICAgICAgICAgICBhbGEudG9hc3RXYXJuKHJlcy5kYXRhLm1lc3NhZ2UpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdChyZXMpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBodHRwR2V0KGFwaVVybCwgZGF0YSkge1xyXG4gIHZhciByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBpVXJsLCAnR0VUJywgZGF0YSlcclxuICByZXR1cm4gcmVzcG9uc2VcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGh0dHBQb3N0KGFwaVVybCwgZGF0YSkge1xyXG4gIHZhciByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBpVXJsLCAnUE9TVCcsIGRhdGEpXHJcbiAgcmV0dXJuIHJlc3BvbnNlXHJcbn1cclxuXHJcbi8vICBQdXTmlrnms5XvvJrmlLlcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGh0dHBQdXQoYXBpVXJsLCBkYXRhKSB7XHJcbiAgdmFyIHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcGlVcmwsICdQVVQnLCBkYXRhKVxyXG4gIHJldHVybiByZXNwb25zZVxyXG59XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaHR0cERlbGV0ZShhcGlVcmwsIGRhdGEpIHtcclxuICB2YXIgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwaVVybCwgJ0RFTEVURScsIGRhdGEpXHJcbiAgcmV0dXJuIHJlc3BvbnNlXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEhlYWQoYXBpVXJsKSB7XHJcbiAgdmFyIGhlYWRPYmogPSB7XHJcbiAgICAnemstdG9rZW4nOiB0b2tlbi5nZXRUb2tlbihhcGlVcmwpLFxyXG4gICAgJ3prLXVzZXItaWQnOiBhbGEudXNlcklkKCksXHJcbiAgICAnemstdXNlci10b2tlbic6IHRva2VuLmdldFVzZXJUb2tlbihhcGlVcmwpLFxyXG4gICAgJ3prLXRlbmFudCc6IGFsYS50ZW5hbnQoKSxcclxuICAgICd6ay10aW1lc3RhbXAnOiB0b2tlbi50aW1lc3RhbXAoKVxyXG4gIH1cclxuICByZXR1cm4gaGVhZE9ialxyXG59IiwiaW1wb3J0IGdsb2JhbENvbmZpZyBmcm9tICdAL3NlcnZpY2UvY29uZmlnJ1xyXG5pbXBvcnQgY3J5cHRvIGZyb20gJ0Avc2VydmljZS91dGlscy9jcnlwdG8nXHJcbmltcG9ydCBhbGEgZnJvbSAnQC9zZXJ2aWNlL2FsYSdcclxudmFyIHsgcHJvamVjdElkLCBrZXksIHByaXZhdGVLZXkgfSA9IGdsb2JhbENvbmZpZ1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgLy8g5aS06YOo5Lyg5YWldG9rZW7mnLrliLYs566X5rOV5ZKM5ZCO5Y+w5Yy56YWN77yM566h55CG5ZGY5Y+v5Lul5Zyo5ZCO5Y+w6ZqP5pe25L+u5pS5XHJcbiAgZ2V0VG9rZW4oYXBpVXJsKSB7XHJcbiAgICB2YXIgaW5kZXggPSBhcGlVcmwuaW5kZXhPZignPycpXHJcbiAgICBpZiAoaW5kZXggPiAwKSB7XHJcbiAgICAgIGFwaVVybCA9IGFwaVVybC5zdWJzdHJpbmcoMCwgaW5kZXgpXHJcbiAgICB9XHJcbiAgICBhcGlVcmwgPSBhcGlVcmxcclxuICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgLnJlcGxhY2UoJy8vLycsICcvJylcclxuICAgICAgLnJlcGxhY2UoJy8vJywgJy8nKVxyXG4gICAgICAucmVwbGFjZSgnYXBpLycsICdhcGkvJylcclxuICAgICAgLnJlcGxhY2UoJy8vJywgJy8nKVxyXG4gICAgdmFyIHRva2VuID0gYXBpVXJsICsgdGhpcy50aW1lc3RhbXAoKSArIHByb2plY3RJZCArIGtleSArIHByaXZhdGVLZXlcclxuXHJcbiAgICB0b2tlbiA9IGNyeXB0by5tZDUodG9rZW4udG9Mb3dlckNhc2UoKSlcclxuICAgIHJldHVybiB0b2tlblxyXG4gIH0sXHJcbiAgZ2V0RGl5VG9rZW4oYXBpVXJsKSB7XHJcbiAgICBhcGlVcmwgPSBhcGlVcmxcclxuICAgICAgLnRvTG93ZXJDYXNlKClcclxuICAgICAgLnJlcGxhY2UoJy8vLycsICcvJylcclxuICAgICAgLnJlcGxhY2UoJy8vJywgJy8nKVxyXG4gICAgICAucmVwbGFjZSgnYXBpLycsICdhcGkvJylcclxuICAgICAgLnJlcGxhY2UoJy8vJywgJy8nKVxyXG4gICAgdmFyIHRva2VuID0gYXBpVXJsICsgdGhpcy50aW1lc3RhbXAoKSArICdkaXlUb2tlbidcclxuICAgIHRva2VuID0gY3J5cHRvLm1kNSh0b2tlbi50b0xvd2VyQ2FzZSgpKVxyXG4gICAgcmV0dXJuIHRva2VuXHJcbiAgfSxcclxuICAvLyDml7bpl7TmiLNcclxuICB0aW1lc3RhbXAoKSB7XHJcbiAgICByZXR1cm4gTWF0aC5yb3VuZChuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApXHJcbiAgfSxcclxuICAvLyDnlKjmiLfnmbvlvZXlpLTpg6hUb2tlblxyXG4gIGdldFVzZXJUb2tlbihhcGlVcmwpIHtcclxuICAgIHZhciBsb2dpblVzZXIgPSBhbGEudXNlcigpXHJcbiAgICBpZiAobG9naW5Vc2VyICE9PSBudWxsICYmIGxvZ2luVXNlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHZhciB0b2tlbiA9IHRoaXMuZ2V0VG9rZW4oYXBpVXJsKS5zdWJzdHJpbmcoMiwgMTApICsgbG9naW5Vc2VyLnRva2VuXHJcbiAgICAgIHRva2VuID0gY3J5cHRvLm1kNSh0b2tlbi50b0xvd2VyQ2FzZSgpKVxyXG4gICAgICByZXR1cm4gdG9rZW5cclxuICAgIH1cclxuICAgIHJldHVybiAnJ1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgZ2xvYmFsQ29uZmlnIGZyb20gJ0Avc2VydmljZS9jb25maWcnXHJcbmltcG9ydCBDcnlwdG9KUyBmcm9tICcuL2NyeXB0by1qcydcclxuaW1wb3J0IGFwaSBmcm9tICdAL3NlcnZpY2UvYWxhJ1xyXG52YXIge1xyXG4gIHByb2plY3RJZCxcclxuICBrZXlcclxufSA9IGdsb2JhbENvbmZpZ1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgLy8gbWQ15Yqg5a+GXHJcbiAgbWQ1IChzdHIpIHtcclxuICAgIHJldHVybiBDcnlwdG9KUy5NRDUoc3RyKS50b1N0cmluZygpXHJcbiAgfSxcclxuICAvLyBhY2Ug5Yqg5a+GXHJcbiAgZW5jcnlwdCAodGV4dCwgYWNlS2V5KSB7XHJcbiAgICB2YXIgZW5jcnlwdFRleHQgPSBDcnlwdG9KUy5BRVMuZW5jcnlwdCh0ZXh0LCB0aGlzLmdldEtleShhY2VLZXkpKS50b1N0cmluZygpXHJcbiAgICByZXR1cm4gZW5jcnlwdFRleHRcclxuICB9LFxyXG4gIC8vIGFjZSDop6Plr4ZcclxuICBkZWNyeXB0ICh0ZXh0LCBhY2VLZXkpIHtcclxuICAgIC8vIERlY3J5cHRcclxuICAgIHZhciBieXRlcyA9IENyeXB0b0pTLkFFUy5kZWNyeXB0KHRleHQsIHRoaXMuZ2V0S2V5KGFjZUtleSkpXHJcbiAgICB2YXIgb3JpZ2luYWxUZXh0ID0gYnl0ZXMudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLlV0ZjgpXHJcbiAgICByZXR1cm4gb3JpZ2luYWxUZXh0XHJcbiAgfSxcclxuICB1c2VyVG9rZW5LZXkgKCkge1xyXG5cclxuICB9LFxyXG4gIC8vIOacrOWcsOeUqOaIt+e8k+WtmOS/oeaBr2tleSzlj43mraPooqvku5bkurrotJ/otKPmgbbmhI/kv67mlLnvvIzmr4/kuKrnlKjmiLfkuI3kuIDmoLdcclxuICB1c2VyS2V5ICgpIHtcclxuICAgIHZhciB0b2tlbiA9IGFwaS5sb2NhbEdldCgndXNlcl90b2tlbicpXHJcbiAgICBpZiAoYXBpLnN0cklzRW1wdHkodG9rZW4pKSB7XHJcbiAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcbiAgICB2YXIgdG9rZW5LZXkgPSB0b2tlbiArIHRva2VuLnN1YnN0cmluZygzLCAxMCkgKyBwcm9qZWN0SWQuc3Vic3RyaW5nKDEsIDQpXHJcbiAgICB2YXIgdXNlcktleSA9IENyeXB0b0pTLk1ENSh0b2tlbktleSlcclxuICAgIHVzZXJLZXkgPSAndXNlcl8nICsgdXNlcktleS50b1N0cmluZygpLnN1YnN0cmluZyg0LCAyNClcclxuICAgIHJldHVybiB1c2VyS2V5XHJcbiAgfSxcclxuICBnZXRLZXkgKGFjZUtleSkge1xyXG4gICAgaWYgKGFjZUtleSA9PT0gbnVsbCB8fCBhY2VLZXkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBhY2VLZXkgPSAnJ1xyXG4gICAgfVxyXG4gICAgYWNlS2V5ID0gYWNlS2V5ICsgcHJvamVjdElkLnN1YnN0cmluZygxLCA0KSArIGtleS5zdWJzdHJpbmcoMiwgMTApXHJcbiAgICByZXR1cm4gYWNlS2V5XHJcbiAgfSxcclxuICBiYXNlNjQgKHRleHQpIHtcclxuICAgIHJldHVybiBDcnlwdG9KUy5lbmMuQmFzZTY0LnN0cmluZ2lmeShDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZSh0ZXh0KSlcclxuICB9LFxyXG4gIHV0ZjggKHRleHQpIHtcclxuICAgIHJldHVybiBDcnlwdG9KUy5lbmMuQmFzZTY0LnBhcnNlKHRleHQpLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5VdGY4KVxyXG4gIH1cclxufVxyXG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqLyA7XHJcbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xyXG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcclxuICAgIC8vIENvbW1vbkpTXHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmYWN0b3J5KClcclxuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgLy8gQU1EXHJcbiAgICBkZWZpbmUoW10sIGZhY3RvcnkpXHJcbiAgfSBlbHNlIHtcclxuICAgIC8vIEdsb2JhbCAoYnJvd3NlcilcclxuICAgIHJvb3QuQ3J5cHRvSlMgPSBmYWN0b3J5KClcclxuICB9XHJcbn0odGhpcywgZnVuY3Rpb24gKCkge1xyXG4gIC8qKlxyXG4gICAqIENyeXB0b0pTIGNvcmUgY29tcG9uZW50cy5cclxuICAgKi9cclxuICB2YXIgQ3J5cHRvSlMgPSBDcnlwdG9KUyB8fCAoZnVuY3Rpb24gKE1hdGgsIHVuZGVmaW5lZCkge1xyXG4gICAgLypcclxuICAgICAqIExvY2FsIHBvbHlmaWwgb2YgT2JqZWN0LmNyZWF0ZVxyXG4gICAgICovXHJcbiAgICB2YXIgY3JlYXRlID0gT2JqZWN0LmNyZWF0ZSB8fCAoZnVuY3Rpb24gKCkge1xyXG4gICAgICBmdW5jdGlvbiBGKCkge307XHJcblxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgIHZhciBzdWJ0eXBlXHJcblxyXG4gICAgICAgIEYucHJvdG90eXBlID0gb2JqXHJcblxyXG4gICAgICAgIHN1YnR5cGUgPSBuZXcgRigpXHJcblxyXG4gICAgICAgIEYucHJvdG90eXBlID0gbnVsbFxyXG5cclxuICAgICAgICByZXR1cm4gc3VidHlwZVxyXG4gICAgICB9XHJcbiAgICB9KCkpXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDcnlwdG9KUyBuYW1lc3BhY2UuXHJcbiAgICAgKi9cclxuICAgIHZhciBDID0ge31cclxuXHJcbiAgICAvKipcclxuICAgICAqIExpYnJhcnkgbmFtZXNwYWNlLlxyXG4gICAgICovXHJcbiAgICB2YXIgQ19saWIgPSBDLmxpYiA9IHt9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlIG9iamVjdCBmb3IgcHJvdG90eXBhbCBpbmhlcml0YW5jZS5cclxuICAgICAqL1xyXG4gICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhpcyBvYmplY3QuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3ZlcnJpZGVzIFByb3BlcnRpZXMgdG8gY29weSBpbnRvIHRoZSBuZXcgb2JqZWN0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgbmV3IG9iamVjdC5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiAgICAgdmFyIE15VHlwZSA9IENyeXB0b0pTLmxpYi5CYXNlLmV4dGVuZCh7XHJcbiAgICAgICAgICogICAgICAgICBmaWVsZDogJ3ZhbHVlJyxcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqICAgICAgICAgbWV0aG9kOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICogICAgICAgICB9XHJcbiAgICAgICAgICogICAgIH0pO1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGV4dGVuZDogZnVuY3Rpb24gKG92ZXJyaWRlcykge1xyXG4gICAgICAgICAgLy8gU3Bhd25cclxuICAgICAgICAgIHZhciBzdWJ0eXBlID0gY3JlYXRlKHRoaXMpXHJcblxyXG4gICAgICAgICAgLy8gQXVnbWVudFxyXG4gICAgICAgICAgaWYgKG92ZXJyaWRlcykge1xyXG4gICAgICAgICAgICBzdWJ0eXBlLm1peEluKG92ZXJyaWRlcylcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBDcmVhdGUgZGVmYXVsdCBpbml0aWFsaXplclxyXG4gICAgICAgICAgaWYgKCFzdWJ0eXBlLmhhc093blByb3BlcnR5KCdpbml0JykgfHwgdGhpcy5pbml0ID09PSBzdWJ0eXBlLmluaXQpIHtcclxuICAgICAgICAgICAgc3VidHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgIHN1YnR5cGUuJHN1cGVyLmluaXQuYXBwbHkodGhpcywgYXJndW1lbnRzKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gSW5pdGlhbGl6ZXIncyBwcm90b3R5cGUgaXMgdGhlIHN1YnR5cGUgb2JqZWN0XHJcbiAgICAgICAgICBzdWJ0eXBlLmluaXQucHJvdG90eXBlID0gc3VidHlwZVxyXG5cclxuICAgICAgICAgIC8vIFJlZmVyZW5jZSBzdXBlcnR5cGVcclxuICAgICAgICAgIHN1YnR5cGUuJHN1cGVyID0gdGhpc1xyXG5cclxuICAgICAgICAgIHJldHVybiBzdWJ0eXBlXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogRXh0ZW5kcyB0aGlzIG9iamVjdCBhbmQgcnVucyB0aGUgaW5pdCBtZXRob2QuXHJcbiAgICAgICAgICogQXJndW1lbnRzIHRvIGNyZWF0ZSgpIHdpbGwgYmUgcGFzc2VkIHRvIGluaXQoKS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIG5ldyBvYmplY3QuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogICAgIHZhciBpbnN0YW5jZSA9IE15VHlwZS5jcmVhdGUoKTtcclxuICAgICAgICAgKi9cclxuICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuZXh0ZW5kKClcclxuICAgICAgICAgIGluc3RhbmNlLmluaXQuYXBwbHkoaW5zdGFuY2UsIGFyZ3VtZW50cylcclxuXHJcbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2VcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgb2JqZWN0LlxyXG4gICAgICAgICAqIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGFkZCBzb21lIGxvZ2ljIHdoZW4geW91ciBvYmplY3RzIGFyZSBjcmVhdGVkLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqICAgICB2YXIgTXlUeXBlID0gQ3J5cHRvSlMubGliLkJhc2UuZXh0ZW5kKHtcclxuICAgICAgICAgKiAgICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgKiAgICAgICAgICAgICAvLyAuLi5cclxuICAgICAgICAgKiAgICAgICAgIH1cclxuICAgICAgICAgKiAgICAgfSk7XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge30sXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIGludG8gdGhpcyBvYmplY3QuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvcGVydGllcyBUaGUgcHJvcGVydGllcyB0byBtaXggaW4uXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogICAgIE15VHlwZS5taXhJbih7XHJcbiAgICAgICAgICogICAgICAgICBmaWVsZDogJ3ZhbHVlJ1xyXG4gICAgICAgICAqICAgICB9KTtcclxuICAgICAgICAgKi9cclxuICAgICAgICBtaXhJbjogZnVuY3Rpb24gKHByb3BlcnRpZXMpIHtcclxuICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiBwcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5TmFtZSkpIHtcclxuICAgICAgICAgICAgICB0aGlzW3Byb3BlcnR5TmFtZV0gPSBwcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIElFIHdvbid0IGNvcHkgdG9TdHJpbmcgdXNpbmcgdGhlIGxvb3AgYWJvdmVcclxuICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KCd0b1N0cmluZycpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudG9TdHJpbmcgPSBwcm9wZXJ0aWVzLnRvU3RyaW5nXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ3JlYXRlcyBhIGNvcHkgb2YgdGhpcyBvYmplY3QuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBjbG9uZS5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiAgICAgdmFyIGNsb25lID0gaW5zdGFuY2UuY2xvbmUoKTtcclxuICAgICAgICAgKi9cclxuICAgICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW5pdC5wcm90b3R5cGUuZXh0ZW5kKHRoaXMpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KCkpXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBhcnJheSBvZiAzMi1iaXQgd29yZHMuXHJcbiAgICAgKlxyXG4gICAgICogQHByb3BlcnR5IHtBcnJheX0gd29yZHMgVGhlIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy5cclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBzaWdCeXRlcyBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoaXMgd29yZCBhcnJheS5cclxuICAgICAqL1xyXG4gICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheSA9IEJhc2UuZXh0ZW5kKHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCB3b3JkIGFycmF5LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyAoT3B0aW9uYWwpIEFuIGFycmF5IG9mIDMyLWJpdCB3b3Jkcy5cclxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpZ0J5dGVzIChPcHRpb25hbCkgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGUgd29yZHMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoKTtcclxuICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5saWIuV29yZEFycmF5LmNyZWF0ZShbMHgwMDAxMDIwMywgMHgwNDA1MDYwN10pO1xyXG4gICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDAwMDEwMjAzLCAweDA0MDUwNjA3XSwgNik7XHJcbiAgICAgICAqL1xyXG4gICAgICBpbml0OiBmdW5jdGlvbiAod29yZHMsIHNpZ0J5dGVzKSB7XHJcbiAgICAgICAgd29yZHMgPSB0aGlzLndvcmRzID0gd29yZHMgfHwgW11cclxuXHJcbiAgICAgICAgaWYgKHNpZ0J5dGVzICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgdGhpcy5zaWdCeXRlcyA9IHNpZ0J5dGVzXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSB3b3Jkcy5sZW5ndGggKiA0XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENvbnZlcnRzIHRoaXMgd29yZCBhcnJheSB0byBhIHN0cmluZy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtFbmNvZGVyfSBlbmNvZGVyIChPcHRpb25hbCkgVGhlIGVuY29kaW5nIHN0cmF0ZWd5IHRvIHVzZS4gRGVmYXVsdDogQ3J5cHRvSlMuZW5jLkhleFxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBzdHJpbmdpZmllZCB3b3JkIGFycmF5LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheSArICcnO1xyXG4gICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheS50b1N0cmluZygpO1xyXG4gICAgICAgKiAgICAgdmFyIHN0cmluZyA9IHdvcmRBcnJheS50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XHJcbiAgICAgICAqL1xyXG4gICAgICB0b1N0cmluZzogZnVuY3Rpb24gKGVuY29kZXIpIHtcclxuICAgICAgICByZXR1cm4gKGVuY29kZXIgfHwgSGV4KS5zdHJpbmdpZnkodGhpcylcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb25jYXRlbmF0ZXMgYSB3b3JkIGFycmF5IHRvIHRoaXMgd29yZCBhcnJheS5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheSB0byBhcHBlbmQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhpcyB3b3JkIGFycmF5LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgd29yZEFycmF5MS5jb25jYXQod29yZEFycmF5Mik7XHJcbiAgICAgICAqL1xyXG4gICAgICBjb25jYXQ6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICB2YXIgdGhpc1dvcmRzID0gdGhpcy53b3Jkc1xyXG4gICAgICAgIHZhciB0aGF0V29yZHMgPSB3b3JkQXJyYXkud29yZHNcclxuICAgICAgICB2YXIgdGhpc1NpZ0J5dGVzID0gdGhpcy5zaWdCeXRlc1xyXG4gICAgICAgIHZhciB0aGF0U2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXNcclxuXHJcbiAgICAgICAgLy8gQ2xhbXAgZXhjZXNzIGJpdHNcclxuICAgICAgICB0aGlzLmNsYW1wKClcclxuXHJcbiAgICAgICAgLy8gQ29uY2F0XHJcbiAgICAgICAgaWYgKHRoaXNTaWdCeXRlcyAlIDQpIHtcclxuICAgICAgICAgIC8vIENvcHkgb25lIGJ5dGUgYXQgYSB0aW1lXHJcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoYXRTaWdCeXRlczsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciB0aGF0Qnl0ZSA9ICh0aGF0V29yZHNbaSA+Pj4gMl0gPj4+ICgyNCAtIChpICUgNCkgKiA4KSkgJiAweGZmXHJcbiAgICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaSkgPj4+IDJdIHw9IHRoYXRCeXRlIDw8ICgyNCAtICgodGhpc1NpZ0J5dGVzICsgaSkgJSA0KSAqIDgpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIENvcHkgb25lIHdvcmQgYXQgYSB0aW1lXHJcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoYXRTaWdCeXRlczsgaSArPSA0KSB7XHJcbiAgICAgICAgICAgIHRoaXNXb3Jkc1sodGhpc1NpZ0J5dGVzICsgaSkgPj4+IDJdID0gdGhhdFdvcmRzW2kgPj4+IDJdXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2lnQnl0ZXMgKz0gdGhhdFNpZ0J5dGVzXHJcblxyXG4gICAgICAgIC8vIENoYWluYWJsZVxyXG4gICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogUmVtb3ZlcyBpbnNpZ25pZmljYW50IGJpdHMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB3b3JkQXJyYXkuY2xhbXAoKTtcclxuICAgICAgICovXHJcbiAgICAgIGNsYW1wOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIHdvcmRzID0gdGhpcy53b3Jkc1xyXG4gICAgICAgIHZhciBzaWdCeXRlcyA9IHRoaXMuc2lnQnl0ZXNcclxuXHJcbiAgICAgICAgLy8gQ2xhbXBcclxuICAgICAgICB3b3Jkc1tzaWdCeXRlcyA+Pj4gMl0gJj0gMHhmZmZmZmZmZiA8PCAoMzIgLSAoc2lnQnl0ZXMgJSA0KSAqIDgpXHJcbiAgICAgICAgd29yZHMubGVuZ3RoID0gTWF0aC5jZWlsKHNpZ0J5dGVzIC8gNClcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIHdvcmQgYXJyYXkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGNsb25lLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIGNsb25lID0gd29yZEFycmF5LmNsb25lKCk7XHJcbiAgICAgICAqL1xyXG4gICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjbG9uZSA9IEJhc2UuY2xvbmUuY2FsbCh0aGlzKVxyXG4gICAgICAgIGNsb25lLndvcmRzID0gdGhpcy53b3Jkcy5zbGljZSgwKVxyXG5cclxuICAgICAgICByZXR1cm4gY2xvbmVcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDcmVhdGVzIGEgd29yZCBhcnJheSBmaWxsZWQgd2l0aCByYW5kb20gYnl0ZXMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuQnl0ZXMgVGhlIG51bWJlciBvZiByYW5kb20gYnl0ZXMgdG8gZ2VuZXJhdGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHJhbmRvbSB3b3JkIGFycmF5LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgd29yZEFycmF5ID0gQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oMTYpO1xyXG4gICAgICAgKi9cclxuICAgICAgcmFuZG9tOiBmdW5jdGlvbiAobkJ5dGVzKSB7XHJcbiAgICAgICAgdmFyIHdvcmRzID0gW11cclxuXHJcbiAgICAgICAgdmFyIHIgPSBmdW5jdGlvbiAobV93KSB7XHJcbiAgICAgICAgICB2YXIgbV93ID0gbV93XHJcbiAgICAgICAgICB2YXIgbV96ID0gMHgzYWRlNjhiMVxyXG4gICAgICAgICAgdmFyIG1hc2sgPSAweGZmZmZmZmZmXHJcblxyXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbV96ID0gKDB4OTA2OSAqIChtX3ogJiAweEZGRkYpICsgKG1feiA+PiAweDEwKSkgJiBtYXNrXHJcbiAgICAgICAgICAgIG1fdyA9ICgweDQ2NTAgKiAobV93ICYgMHhGRkZGKSArIChtX3cgPj4gMHgxMCkpICYgbWFza1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gKChtX3ogPDwgMHgxMCkgKyBtX3cpICYgbWFza1xyXG4gICAgICAgICAgICByZXN1bHQgLz0gMHgxMDAwMDAwMDBcclxuICAgICAgICAgICAgcmVzdWx0ICs9IDAuNVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICogKE1hdGgucmFuZG9tKCkgPiAwLjUgPyAxIDogLTEpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcmNhY2hlOyBpIDwgbkJ5dGVzOyBpICs9IDQpIHtcclxuICAgICAgICAgIHZhciBfciA9IHIoKHJjYWNoZSB8fCBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDAwMDAwKVxyXG5cclxuICAgICAgICAgIHJjYWNoZSA9IF9yKCkgKiAweDNhZGU2N2I3XHJcbiAgICAgICAgICB3b3Jkcy5wdXNoKChfcigpICogMHgxMDAwMDAwMDApIHwgMClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQod29yZHMsIG5CeXRlcylcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuY29kZXIgbmFtZXNwYWNlLlxyXG4gICAgICovXHJcbiAgICB2YXIgQ19lbmMgPSBDLmVuYyA9IHt9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBIZXggZW5jb2Rpbmcgc3RyYXRlZ3kuXHJcbiAgICAgKi9cclxuICAgIHZhciBIZXggPSBDX2VuYy5IZXggPSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBoZXggc3RyaW5nLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBoZXggc3RyaW5nLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgaGV4U3RyaW5nID0gQ3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkod29yZEFycmF5KTtcclxuICAgICAgICovXHJcbiAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkc1xyXG4gICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlc1xyXG5cclxuICAgICAgICAvLyBDb252ZXJ0XHJcbiAgICAgICAgdmFyIGhleENoYXJzID0gW11cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpKyspIHtcclxuICAgICAgICAgIHZhciBiaXRlID0gKHdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZlxyXG4gICAgICAgICAgaGV4Q2hhcnMucHVzaCgoYml0ZSA+Pj4gNCkudG9TdHJpbmcoMTYpKVxyXG4gICAgICAgICAgaGV4Q2hhcnMucHVzaCgoYml0ZSAmIDB4MGYpLnRvU3RyaW5nKDE2KSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBoZXhDaGFycy5qb2luKCcnKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENvbnZlcnRzIGEgaGV4IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBoZXhTdHIgVGhlIGhleCBzdHJpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuSGV4LnBhcnNlKGhleFN0cmluZyk7XHJcbiAgICAgICAqL1xyXG4gICAgICBwYXJzZTogZnVuY3Rpb24gKGhleFN0cikge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0XHJcbiAgICAgICAgdmFyIGhleFN0ckxlbmd0aCA9IGhleFN0ci5sZW5ndGhcclxuXHJcbiAgICAgICAgLy8gQ29udmVydFxyXG4gICAgICAgIHZhciB3b3JkcyA9IFtdXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZXhTdHJMZW5ndGg7IGkgKz0gMikge1xyXG4gICAgICAgICAgd29yZHNbaSA+Pj4gM10gfD0gcGFyc2VJbnQoaGV4U3RyLnN1YnN0cihpLCAyKSwgMTYpIDw8ICgyNCAtIChpICUgOCkgKiA0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBXb3JkQXJyYXkuaW5pdCh3b3JkcywgaGV4U3RyTGVuZ3RoIC8gMilcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTGF0aW4xIGVuY29kaW5nIHN0cmF0ZWd5LlxyXG4gICAgICovXHJcbiAgICB2YXIgTGF0aW4xID0gQ19lbmMuTGF0aW4xID0ge1xyXG4gICAgICAvKipcclxuICAgICAgICogQ29udmVydHMgYSB3b3JkIGFycmF5IHRvIGEgTGF0aW4xIHN0cmluZy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IHdvcmRBcnJheSBUaGUgd29yZCBhcnJheS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgTGF0aW4xIHN0cmluZy5cclxuICAgICAgICpcclxuICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIGxhdGluMVN0cmluZyA9IENyeXB0b0pTLmVuYy5MYXRpbjEuc3RyaW5naWZ5KHdvcmRBcnJheSk7XHJcbiAgICAgICAqL1xyXG4gICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHNcclxuICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXNcclxuXHJcbiAgICAgICAgLy8gQ29udmVydFxyXG4gICAgICAgIHZhciBsYXRpbjFDaGFycyA9IFtdXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSsrKSB7XHJcbiAgICAgICAgICB2YXIgYml0ZSA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmZcclxuICAgICAgICAgIGxhdGluMUNoYXJzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShiaXRlKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBsYXRpbjFDaGFycy5qb2luKCcnKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENvbnZlcnRzIGEgTGF0aW4xIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXRpbjFTdHIgVGhlIExhdGluMSBzdHJpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuTGF0aW4xLnBhcnNlKGxhdGluMVN0cmluZyk7XHJcbiAgICAgICAqL1xyXG4gICAgICBwYXJzZTogZnVuY3Rpb24gKGxhdGluMVN0cikge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0XHJcbiAgICAgICAgdmFyIGxhdGluMVN0ckxlbmd0aCA9IGxhdGluMVN0ci5sZW5ndGhcclxuXHJcbiAgICAgICAgLy8gQ29udmVydFxyXG4gICAgICAgIHZhciB3b3JkcyA9IFtdXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXRpbjFTdHJMZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgd29yZHNbaSA+Pj4gMl0gfD0gKGxhdGluMVN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZikgPDwgKDI0IC0gKGkgJSA0KSAqIDgpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHdvcmRzLCBsYXRpbjFTdHJMZW5ndGgpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVURi04IGVuY29kaW5nIHN0cmF0ZWd5LlxyXG4gICAgICovXHJcbiAgICB2YXIgVXRmOCA9IENfZW5jLlV0ZjggPSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBVVEYtOCBzdHJpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi04IHN0cmluZy5cclxuICAgICAgICpcclxuICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIHV0ZjhTdHJpbmcgPSBDcnlwdG9KUy5lbmMuVXRmOC5zdHJpbmdpZnkod29yZEFycmF5KTtcclxuICAgICAgICovXHJcbiAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShMYXRpbjEuc3RyaW5naWZ5KHdvcmRBcnJheSkpKVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIFVURi04IGRhdGEnKVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb252ZXJ0cyBhIFVURi04IHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGY4U3RyIFRoZSBVVEYtOCBzdHJpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmOC5wYXJzZSh1dGY4U3RyaW5nKTtcclxuICAgICAgICovXHJcbiAgICAgIHBhcnNlOiBmdW5jdGlvbiAodXRmOFN0cikge1xyXG4gICAgICAgIHJldHVybiBMYXRpbjEucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHV0ZjhTdHIpKSlcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWJzdHJhY3QgYnVmZmVyZWQgYmxvY2sgYWxnb3JpdGhtIHRlbXBsYXRlLlxyXG4gICAgICpcclxuICAgICAqIFRoZSBwcm9wZXJ0eSBibG9ja1NpemUgbXVzdCBiZSBpbXBsZW1lbnRlZCBpbiBhIGNvbmNyZXRlIHN1YnR5cGUuXHJcbiAgICAgKlxyXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IF9taW5CdWZmZXJTaXplIFRoZSBudW1iZXIgb2YgYmxvY2tzIHRoYXQgc2hvdWxkIGJlIGtlcHQgdW5wcm9jZXNzZWQgaW4gdGhlIGJ1ZmZlci4gRGVmYXVsdDogMFxyXG4gICAgICovXHJcbiAgICB2YXIgQnVmZmVyZWRCbG9ja0FsZ29yaXRobSA9IENfbGliLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBCYXNlLmV4dGVuZCh7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXNldHMgdGhpcyBibG9jayBhbGdvcml0aG0ncyBkYXRhIGJ1ZmZlciB0byBpdHMgaW5pdGlhbCBzdGF0ZS5cclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0ucmVzZXQoKTtcclxuICAgICAgICovXHJcbiAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gSW5pdGlhbCB2YWx1ZXNcclxuICAgICAgICB0aGlzLl9kYXRhID0gbmV3IFdvcmRBcnJheS5pbml0KClcclxuICAgICAgICB0aGlzLl9uRGF0YUJ5dGVzID0gMFxyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEFkZHMgbmV3IGRhdGEgdG8gdGhpcyBibG9jayBhbGdvcml0aG0ncyBidWZmZXIuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBhcHBlbmQuIFN0cmluZ3MgYXJlIGNvbnZlcnRlZCB0byBhIFdvcmRBcnJheSB1c2luZyBVVEYtOC5cclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX2FwcGVuZCgnZGF0YScpO1xyXG4gICAgICAgKiAgICAgYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fYXBwZW5kKHdvcmRBcnJheSk7XHJcbiAgICAgICAqL1xyXG4gICAgICBfYXBwZW5kOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIC8vIENvbnZlcnQgc3RyaW5nIHRvIFdvcmRBcnJheSwgZWxzZSBhc3N1bWUgV29yZEFycmF5IGFscmVhZHlcclxuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICBkYXRhID0gVXRmOC5wYXJzZShkYXRhKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQXBwZW5kXHJcbiAgICAgICAgdGhpcy5fZGF0YS5jb25jYXQoZGF0YSlcclxuICAgICAgICB0aGlzLl9uRGF0YUJ5dGVzICs9IGRhdGEuc2lnQnl0ZXNcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBQcm9jZXNzZXMgYXZhaWxhYmxlIGRhdGEgYmxvY2tzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBUaGlzIG1ldGhvZCBpbnZva2VzIF9kb1Byb2Nlc3NCbG9jayhvZmZzZXQpLCB3aGljaCBtdXN0IGJlIGltcGxlbWVudGVkIGJ5IGEgY29uY3JldGUgc3VidHlwZS5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBkb0ZsdXNoIFdoZXRoZXIgYWxsIGJsb2NrcyBhbmQgcGFydGlhbCBibG9ja3Mgc2hvdWxkIGJlIHByb2Nlc3NlZC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcHJvY2Vzc2VkIGRhdGEuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgcHJvY2Vzc2VkRGF0YSA9IGJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0uX3Byb2Nlc3MoKTtcclxuICAgICAgICogICAgIHZhciBwcm9jZXNzZWREYXRhID0gYnVmZmVyZWRCbG9ja0FsZ29yaXRobS5fcHJvY2VzcyghISdmbHVzaCcpO1xyXG4gICAgICAgKi9cclxuICAgICAgX3Byb2Nlc3M6IGZ1bmN0aW9uIChkb0ZsdXNoKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhXHJcbiAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHNcclxuICAgICAgICB2YXIgZGF0YVNpZ0J5dGVzID0gZGF0YS5zaWdCeXRlc1xyXG4gICAgICAgIHZhciBibG9ja1NpemUgPSB0aGlzLmJsb2NrU2l6ZVxyXG4gICAgICAgIHZhciBibG9ja1NpemVCeXRlcyA9IGJsb2NrU2l6ZSAqIDRcclxuXHJcbiAgICAgICAgLy8gQ291bnQgYmxvY2tzIHJlYWR5XHJcbiAgICAgICAgdmFyIG5CbG9ja3NSZWFkeSA9IGRhdGFTaWdCeXRlcyAvIGJsb2NrU2l6ZUJ5dGVzXHJcbiAgICAgICAgaWYgKGRvRmx1c2gpIHtcclxuICAgICAgICAgIC8vIFJvdW5kIHVwIHRvIGluY2x1ZGUgcGFydGlhbCBibG9ja3NcclxuICAgICAgICAgIG5CbG9ja3NSZWFkeSA9IE1hdGguY2VpbChuQmxvY2tzUmVhZHkpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIFJvdW5kIGRvd24gdG8gaW5jbHVkZSBvbmx5IGZ1bGwgYmxvY2tzLFxyXG4gICAgICAgICAgLy8gbGVzcyB0aGUgbnVtYmVyIG9mIGJsb2NrcyB0aGF0IG11c3QgcmVtYWluIGluIHRoZSBidWZmZXJcclxuICAgICAgICAgIG5CbG9ja3NSZWFkeSA9IE1hdGgubWF4KChuQmxvY2tzUmVhZHkgfCAwKSAtIHRoaXMuX21pbkJ1ZmZlclNpemUsIDApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb3VudCB3b3JkcyByZWFkeVxyXG4gICAgICAgIHZhciBuV29yZHNSZWFkeSA9IG5CbG9ja3NSZWFkeSAqIGJsb2NrU2l6ZVxyXG5cclxuICAgICAgICAvLyBDb3VudCBieXRlcyByZWFkeVxyXG4gICAgICAgIHZhciBuQnl0ZXNSZWFkeSA9IE1hdGgubWluKG5Xb3Jkc1JlYWR5ICogNCwgZGF0YVNpZ0J5dGVzKVxyXG5cclxuICAgICAgICAvLyBQcm9jZXNzIGJsb2Nrc1xyXG4gICAgICAgIGlmIChuV29yZHNSZWFkeSkge1xyXG4gICAgICAgICAgZm9yICh2YXIgb2Zmc2V0ID0gMDsgb2Zmc2V0IDwgbldvcmRzUmVhZHk7IG9mZnNldCArPSBibG9ja1NpemUpIHtcclxuICAgICAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1hbGdvcml0aG0gbG9naWNcclxuICAgICAgICAgICAgdGhpcy5fZG9Qcm9jZXNzQmxvY2soZGF0YVdvcmRzLCBvZmZzZXQpXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gUmVtb3ZlIHByb2Nlc3NlZCB3b3Jkc1xyXG4gICAgICAgICAgdmFyIHByb2Nlc3NlZFdvcmRzID0gZGF0YVdvcmRzLnNwbGljZSgwLCBuV29yZHNSZWFkeSlcclxuICAgICAgICAgIGRhdGEuc2lnQnl0ZXMgLT0gbkJ5dGVzUmVhZHlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBwcm9jZXNzZWQgd29yZHNcclxuICAgICAgICByZXR1cm4gbmV3IFdvcmRBcnJheS5pbml0KHByb2Nlc3NlZFdvcmRzLCBuQnl0ZXNSZWFkeSlcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDcmVhdGVzIGEgY29weSBvZiB0aGlzIG9iamVjdC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgY2xvbmUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgY2xvbmUgPSBidWZmZXJlZEJsb2NrQWxnb3JpdGhtLmNsb25lKCk7XHJcbiAgICAgICAqL1xyXG4gICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjbG9uZSA9IEJhc2UuY2xvbmUuY2FsbCh0aGlzKVxyXG4gICAgICAgIGNsb25lLl9kYXRhID0gdGhpcy5fZGF0YS5jbG9uZSgpXHJcblxyXG4gICAgICAgIHJldHVybiBjbG9uZVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgX21pbkJ1ZmZlclNpemU6IDBcclxuICAgIH0pXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBYnN0cmFjdCBoYXNoZXIgdGVtcGxhdGUuXHJcbiAgICAgKlxyXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGJsb2NrU2l6ZSBUaGUgbnVtYmVyIG9mIDMyLWJpdCB3b3JkcyB0aGlzIGhhc2hlciBvcGVyYXRlcyBvbi4gRGVmYXVsdDogMTYgKDUxMiBiaXRzKVxyXG4gICAgICovXHJcbiAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyID0gQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5leHRlbmQoe1xyXG4gICAgICAvKipcclxuICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxyXG4gICAgICAgKi9cclxuICAgICAgY2ZnOiBCYXNlLmV4dGVuZCgpLFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEluaXRpYWxpemVzIGEgbmV3bHkgY3JlYXRlZCBoYXNoZXIuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBoYXNoIGNvbXB1dGF0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIGhhc2hlciA9IENyeXB0b0pTLmFsZ28uU0hBMjU2LmNyZWF0ZSgpO1xyXG4gICAgICAgKi9cclxuICAgICAgaW5pdDogZnVuY3Rpb24gKGNmZykge1xyXG4gICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0c1xyXG4gICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZylcclxuXHJcbiAgICAgICAgLy8gU2V0IGluaXRpYWwgdmFsdWVzXHJcbiAgICAgICAgdGhpcy5yZXNldCgpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogUmVzZXRzIHRoaXMgaGFzaGVyIHRvIGl0cyBpbml0aWFsIHN0YXRlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgaGFzaGVyLnJlc2V0KCk7XHJcbiAgICAgICAqL1xyXG4gICAgICByZXNldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFJlc2V0IGRhdGEgYnVmZmVyXHJcbiAgICAgICAgQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5yZXNldC5jYWxsKHRoaXMpXHJcblxyXG4gICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtaGFzaGVyIGxvZ2ljXHJcbiAgICAgICAgdGhpcy5fZG9SZXNldCgpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogVXBkYXRlcyB0aGlzIGhhc2hlciB3aXRoIGEgbWVzc2FnZS5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlVXBkYXRlIFRoZSBtZXNzYWdlIHRvIGFwcGVuZC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7SGFzaGVyfSBUaGlzIGhhc2hlci5cclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIGhhc2hlci51cGRhdGUoJ21lc3NhZ2UnKTtcclxuICAgICAgICogICAgIGhhc2hlci51cGRhdGUod29yZEFycmF5KTtcclxuICAgICAgICovXHJcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcclxuICAgICAgICAvLyBBcHBlbmRcclxuICAgICAgICB0aGlzLl9hcHBlbmQobWVzc2FnZVVwZGF0ZSlcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIHRoZSBoYXNoXHJcbiAgICAgICAgdGhpcy5fcHJvY2VzcygpXHJcblxyXG4gICAgICAgIC8vIENoYWluYWJsZVxyXG4gICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogRmluYWxpemVzIHRoZSBoYXNoIGNvbXB1dGF0aW9uLlxyXG4gICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgKE9wdGlvbmFsKSBBIGZpbmFsIG1lc3NhZ2UgdXBkYXRlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIGhhc2ggPSBoYXNoZXIuZmluYWxpemUoKTtcclxuICAgICAgICogICAgIHZhciBoYXNoID0gaGFzaGVyLmZpbmFsaXplKCdtZXNzYWdlJyk7XHJcbiAgICAgICAqICAgICB2YXIgaGFzaCA9IGhhc2hlci5maW5hbGl6ZSh3b3JkQXJyYXkpO1xyXG4gICAgICAgKi9cclxuICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIChtZXNzYWdlVXBkYXRlKSB7XHJcbiAgICAgICAgLy8gRmluYWwgbWVzc2FnZSB1cGRhdGVcclxuICAgICAgICBpZiAobWVzc2FnZVVwZGF0ZSkge1xyXG4gICAgICAgICAgdGhpcy5fYXBwZW5kKG1lc3NhZ2VVcGRhdGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBQZXJmb3JtIGNvbmNyZXRlLWhhc2hlciBsb2dpY1xyXG4gICAgICAgIHZhciBoYXNoID0gdGhpcy5fZG9GaW5hbGl6ZSgpXHJcblxyXG4gICAgICAgIHJldHVybiBoYXNoXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBibG9ja1NpemU6IDUxMiAvIDMyLFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENyZWF0ZXMgYSBzaG9ydGN1dCBmdW5jdGlvbiB0byBhIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byBjcmVhdGUgYSBoZWxwZXIgZm9yLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtGdW5jdGlvbn0gVGhlIHNob3J0Y3V0IGZ1bmN0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgU0hBMjU2ID0gQ3J5cHRvSlMubGliLkhhc2hlci5fY3JlYXRlSGVscGVyKENyeXB0b0pTLmFsZ28uU0hBMjU2KTtcclxuICAgICAgICovXHJcbiAgICAgIF9jcmVhdGVIZWxwZXI6IGZ1bmN0aW9uIChoYXNoZXIpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1lc3NhZ2UsIGNmZykge1xyXG4gICAgICAgICAgcmV0dXJuIG5ldyBoYXNoZXIuaW5pdChjZmcpLmZpbmFsaXplKG1lc3NhZ2UpXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENyZWF0ZXMgYSBzaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7SGFzaGVyfSBoYXNoZXIgVGhlIGhhc2hlciB0byB1c2UgaW4gdGhpcyBITUFDIGhlbHBlci5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBzaG9ydGN1dCBmdW5jdGlvbi5cclxuICAgICAgICpcclxuICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIEhtYWNTSEEyNTYgPSBDcnlwdG9KUy5saWIuSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKENyeXB0b0pTLmFsZ28uU0hBMjU2KTtcclxuICAgICAgICovXHJcbiAgICAgIF9jcmVhdGVIbWFjSGVscGVyOiBmdW5jdGlvbiAoaGFzaGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChtZXNzYWdlLCBrZXkpIHtcclxuICAgICAgICAgIHJldHVybiBuZXcgQ19hbGdvLkhNQUMuaW5pdChoYXNoZXIsIGtleSkuZmluYWxpemUobWVzc2FnZSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGdvcml0aG0gbmFtZXNwYWNlLlxyXG4gICAgICovXHJcbiAgICB2YXIgQ19hbGdvID0gQy5hbGdvID0ge31cclxuXHJcbiAgICByZXR1cm4gQ1xyXG4gIH0oTWF0aCkpO1xyXG5cclxuXHJcbiAgKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgdmFyIEMgPSBDcnlwdG9KU1xyXG4gICAgdmFyIENfbGliID0gQy5saWJcclxuICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXlcclxuICAgIHZhciBDX2VuYyA9IEMuZW5jXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQgZW5jb2Rpbmcgc3RyYXRlZ3kuXHJcbiAgICAgKi9cclxuICAgIHZhciBCYXNlNjQgPSBDX2VuYy5CYXNlNjQgPSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBCYXNlNjQgc3RyaW5nLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBCYXNlNjQgc3RyaW5nLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgYmFzZTY0U3RyaW5nID0gQ3J5cHRvSlMuZW5jLkJhc2U2NC5zdHJpbmdpZnkod29yZEFycmF5KTtcclxuICAgICAgICovXHJcbiAgICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gKHdvcmRBcnJheSkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgIHZhciB3b3JkcyA9IHdvcmRBcnJheS53b3Jkc1xyXG4gICAgICAgIHZhciBzaWdCeXRlcyA9IHdvcmRBcnJheS5zaWdCeXRlc1xyXG4gICAgICAgIHZhciBtYXAgPSB0aGlzLl9tYXBcclxuXHJcbiAgICAgICAgLy8gQ2xhbXAgZXhjZXNzIGJpdHNcclxuICAgICAgICB3b3JkQXJyYXkuY2xhbXAoKVxyXG5cclxuICAgICAgICAvLyBDb252ZXJ0XHJcbiAgICAgICAgdmFyIGJhc2U2NENoYXJzID0gW11cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpICs9IDMpIHtcclxuICAgICAgICAgIHZhciBieXRlMSA9ICh3b3Jkc1tpID4+PiAyXSA+Pj4gKDI0IC0gKGkgJSA0KSAqIDgpKSAmIDB4ZmZcclxuICAgICAgICAgIHZhciBieXRlMiA9ICh3b3Jkc1soaSArIDEpID4+PiAyXSA+Pj4gKDI0IC0gKChpICsgMSkgJSA0KSAqIDgpKSAmIDB4ZmZcclxuICAgICAgICAgIHZhciBieXRlMyA9ICh3b3Jkc1soaSArIDIpID4+PiAyXSA+Pj4gKDI0IC0gKChpICsgMikgJSA0KSAqIDgpKSAmIDB4ZmZcclxuXHJcbiAgICAgICAgICB2YXIgdHJpcGxldCA9IChieXRlMSA8PCAxNikgfCAoYnl0ZTIgPDwgOCkgfCBieXRlM1xyXG5cclxuICAgICAgICAgIGZvciAodmFyIGogPSAwO1xyXG4gICAgICAgICAgICAoaiA8IDQpICYmIChpICsgaiAqIDAuNzUgPCBzaWdCeXRlcyk7IGorKykge1xyXG4gICAgICAgICAgICBiYXNlNjRDaGFycy5wdXNoKG1hcC5jaGFyQXQoKHRyaXBsZXQgPj4+ICg2ICogKDMgLSBqKSkpICYgMHgzZikpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBZGQgcGFkZGluZ1xyXG4gICAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpXHJcbiAgICAgICAgaWYgKHBhZGRpbmdDaGFyKSB7XHJcbiAgICAgICAgICB3aGlsZSAoYmFzZTY0Q2hhcnMubGVuZ3RoICUgNCkge1xyXG4gICAgICAgICAgICBiYXNlNjRDaGFycy5wdXNoKHBhZGRpbmdDaGFyKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGJhc2U2NENoYXJzLmpvaW4oJycpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQ29udmVydHMgYSBCYXNlNjQgc3RyaW5nIHRvIGEgd29yZCBhcnJheS5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2U2NFN0ciBUaGUgQmFzZTY0IHN0cmluZy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cclxuICAgICAgICpcclxuICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5CYXNlNjQucGFyc2UoYmFzZTY0U3RyaW5nKTtcclxuICAgICAgICovXHJcbiAgICAgIHBhcnNlOiBmdW5jdGlvbiAoYmFzZTY0U3RyKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIGJhc2U2NFN0ckxlbmd0aCA9IGJhc2U2NFN0ci5sZW5ndGhcclxuICAgICAgICB2YXIgbWFwID0gdGhpcy5fbWFwXHJcbiAgICAgICAgdmFyIHJldmVyc2VNYXAgPSB0aGlzLl9yZXZlcnNlTWFwXHJcblxyXG4gICAgICAgIGlmICghcmV2ZXJzZU1hcCkge1xyXG4gICAgICAgICAgcmV2ZXJzZU1hcCA9IHRoaXMuX3JldmVyc2VNYXAgPSBbXVxyXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtYXAubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgcmV2ZXJzZU1hcFttYXAuY2hhckNvZGVBdChqKV0gPSBqXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJZ25vcmUgcGFkZGluZ1xyXG4gICAgICAgIHZhciBwYWRkaW5nQ2hhciA9IG1hcC5jaGFyQXQoNjQpXHJcbiAgICAgICAgaWYgKHBhZGRpbmdDaGFyKSB7XHJcbiAgICAgICAgICB2YXIgcGFkZGluZ0luZGV4ID0gYmFzZTY0U3RyLmluZGV4T2YocGFkZGluZ0NoYXIpXHJcbiAgICAgICAgICBpZiAocGFkZGluZ0luZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICBiYXNlNjRTdHJMZW5ndGggPSBwYWRkaW5nSW5kZXhcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENvbnZlcnRcclxuICAgICAgICByZXR1cm4gcGFyc2VMb29wKGJhc2U2NFN0ciwgYmFzZTY0U3RyTGVuZ3RoLCByZXZlcnNlTWFwKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgX21hcDogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89J1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHBhcnNlTG9vcChiYXNlNjRTdHIsIGJhc2U2NFN0ckxlbmd0aCwgcmV2ZXJzZU1hcCkge1xyXG4gICAgICB2YXIgd29yZHMgPSBbXVxyXG4gICAgICB2YXIgbkJ5dGVzID0gMFxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhc2U2NFN0ckxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGkgJSA0KSB7XHJcbiAgICAgICAgICB2YXIgYml0czEgPSByZXZlcnNlTWFwW2Jhc2U2NFN0ci5jaGFyQ29kZUF0KGkgLSAxKV0gPDwgKChpICUgNCkgKiAyKVxyXG4gICAgICAgICAgdmFyIGJpdHMyID0gcmV2ZXJzZU1hcFtiYXNlNjRTdHIuY2hhckNvZGVBdChpKV0gPj4+ICg2IC0gKGkgJSA0KSAqIDIpXHJcbiAgICAgICAgICB3b3Jkc1tuQnl0ZXMgPj4+IDJdIHw9IChiaXRzMSB8IGJpdHMyKSA8PCAoMjQgLSAobkJ5dGVzICUgNCkgKiA4KVxyXG4gICAgICAgICAgbkJ5dGVzKytcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFdvcmRBcnJheS5jcmVhdGUod29yZHMsIG5CeXRlcylcclxuICAgIH1cclxuICB9KCkpO1xyXG5cclxuXHJcbiAgKGZ1bmN0aW9uIChNYXRoKSB7XHJcbiAgICAvLyBTaG9ydGN1dHNcclxuICAgIHZhciBDID0gQ3J5cHRvSlNcclxuICAgIHZhciBDX2xpYiA9IEMubGliXHJcbiAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5XHJcbiAgICB2YXIgSGFzaGVyID0gQ19saWIuSGFzaGVyXHJcbiAgICB2YXIgQ19hbGdvID0gQy5hbGdvXHJcblxyXG4gICAgLy8gQ29uc3RhbnRzIHRhYmxlXHJcbiAgICB2YXIgVCA9IFtdO1xyXG5cclxuICAgIC8vIENvbXB1dGUgY29uc3RhbnRzXHJcbiAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDY0OyBpKyspIHtcclxuICAgICAgICBUW2ldID0gKE1hdGguYWJzKE1hdGguc2luKGkgKyAxKSkgKiAweDEwMDAwMDAwMCkgfCAwXHJcbiAgICAgIH1cclxuICAgIH0oKSlcclxuXHJcbiAgICAvKipcclxuICAgICAqIE1ENSBoYXNoIGFsZ29yaXRobS5cclxuICAgICAqL1xyXG4gICAgdmFyIE1ENSA9IENfYWxnby5NRDUgPSBIYXNoZXIuZXh0ZW5kKHtcclxuICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFtcclxuICAgICAgICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksXHJcbiAgICAgICAgICAweDk4YmFkY2ZlLCAweDEwMzI1NDc2XHJcbiAgICAgICAgXSlcclxuICAgICAgfSxcclxuXHJcbiAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xyXG4gICAgICAgIC8vIFN3YXAgZW5kaWFuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICAgIHZhciBvZmZzZXRfaSA9IG9mZnNldCArIGlcclxuICAgICAgICAgIHZhciBNX29mZnNldF9pID0gTVtvZmZzZXRfaV1cclxuXHJcbiAgICAgICAgICBNW29mZnNldF9pXSA9IChcclxuICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCA4KSB8IChNX29mZnNldF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxyXG4gICAgICAgICAgICAoKChNX29mZnNldF9pIDw8IDI0KSB8IChNX29mZnNldF9pID4+PiA4KSkgJiAweGZmMDBmZjAwKVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzXHJcblxyXG4gICAgICAgIHZhciBNX29mZnNldF8wID0gTVtvZmZzZXQgKyAwXVxyXG4gICAgICAgIHZhciBNX29mZnNldF8xID0gTVtvZmZzZXQgKyAxXVxyXG4gICAgICAgIHZhciBNX29mZnNldF8yID0gTVtvZmZzZXQgKyAyXVxyXG4gICAgICAgIHZhciBNX29mZnNldF8zID0gTVtvZmZzZXQgKyAzXVxyXG4gICAgICAgIHZhciBNX29mZnNldF80ID0gTVtvZmZzZXQgKyA0XVxyXG4gICAgICAgIHZhciBNX29mZnNldF81ID0gTVtvZmZzZXQgKyA1XVxyXG4gICAgICAgIHZhciBNX29mZnNldF82ID0gTVtvZmZzZXQgKyA2XVxyXG4gICAgICAgIHZhciBNX29mZnNldF83ID0gTVtvZmZzZXQgKyA3XVxyXG4gICAgICAgIHZhciBNX29mZnNldF84ID0gTVtvZmZzZXQgKyA4XVxyXG4gICAgICAgIHZhciBNX29mZnNldF85ID0gTVtvZmZzZXQgKyA5XVxyXG4gICAgICAgIHZhciBNX29mZnNldF8xMCA9IE1bb2Zmc2V0ICsgMTBdXHJcbiAgICAgICAgdmFyIE1fb2Zmc2V0XzExID0gTVtvZmZzZXQgKyAxMV1cclxuICAgICAgICB2YXIgTV9vZmZzZXRfMTIgPSBNW29mZnNldCArIDEyXVxyXG4gICAgICAgIHZhciBNX29mZnNldF8xMyA9IE1bb2Zmc2V0ICsgMTNdXHJcbiAgICAgICAgdmFyIE1fb2Zmc2V0XzE0ID0gTVtvZmZzZXQgKyAxNF1cclxuICAgICAgICB2YXIgTV9vZmZzZXRfMTUgPSBNW29mZnNldCArIDE1XVxyXG5cclxuICAgICAgICAvLyBXb3JraW5nIHZhcmlhbGJlc1xyXG4gICAgICAgIHZhciBhID0gSFswXVxyXG4gICAgICAgIHZhciBiID0gSFsxXVxyXG4gICAgICAgIHZhciBjID0gSFsyXVxyXG4gICAgICAgIHZhciBkID0gSFszXVxyXG5cclxuICAgICAgICAvLyBDb21wdXRhdGlvblxyXG4gICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF8wLCA3LCBUWzBdKVxyXG4gICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF8xLCAxMiwgVFsxXSlcclxuICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMiwgMTcsIFRbMl0pXHJcbiAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzMsIDIyLCBUWzNdKVxyXG4gICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF80LCA3LCBUWzRdKVxyXG4gICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF81LCAxMiwgVFs1XSlcclxuICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfNiwgMTcsIFRbNl0pXHJcbiAgICAgICAgYiA9IEZGKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzcsIDIyLCBUWzddKVxyXG4gICAgICAgIGEgPSBGRihhLCBiLCBjLCBkLCBNX29mZnNldF84LCA3LCBUWzhdKVxyXG4gICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF85LCAxMiwgVFs5XSlcclxuICAgICAgICBjID0gRkYoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTAsIDE3LCBUWzEwXSlcclxuICAgICAgICBiID0gRkYoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTEsIDIyLCBUWzExXSlcclxuICAgICAgICBhID0gRkYoYSwgYiwgYywgZCwgTV9vZmZzZXRfMTIsIDcsIFRbMTJdKVxyXG4gICAgICAgIGQgPSBGRihkLCBhLCBiLCBjLCBNX29mZnNldF8xMywgMTIsIFRbMTNdKVxyXG4gICAgICAgIGMgPSBGRihjLCBkLCBhLCBiLCBNX29mZnNldF8xNCwgMTcsIFRbMTRdKVxyXG4gICAgICAgIGIgPSBGRihiLCBjLCBkLCBhLCBNX29mZnNldF8xNSwgMjIsIFRbMTVdKVxyXG5cclxuICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfMSwgNSwgVFsxNl0pXHJcbiAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzYsIDksIFRbMTddKVxyXG4gICAgICAgIGMgPSBHRyhjLCBkLCBhLCBiLCBNX29mZnNldF8xMSwgMTQsIFRbMThdKVxyXG4gICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF8wLCAyMCwgVFsxOV0pXHJcbiAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzUsIDUsIFRbMjBdKVxyXG4gICAgICAgIGQgPSBHRyhkLCBhLCBiLCBjLCBNX29mZnNldF8xMCwgOSwgVFsyMV0pXHJcbiAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzE1LCAxNCwgVFsyMl0pXHJcbiAgICAgICAgYiA9IEdHKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzQsIDIwLCBUWzIzXSlcclxuICAgICAgICBhID0gR0coYSwgYiwgYywgZCwgTV9vZmZzZXRfOSwgNSwgVFsyNF0pXHJcbiAgICAgICAgZCA9IEdHKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzE0LCA5LCBUWzI1XSlcclxuICAgICAgICBjID0gR0coYywgZCwgYSwgYiwgTV9vZmZzZXRfMywgMTQsIFRbMjZdKVxyXG4gICAgICAgIGIgPSBHRyhiLCBjLCBkLCBhLCBNX29mZnNldF84LCAyMCwgVFsyN10pXHJcbiAgICAgICAgYSA9IEdHKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEzLCA1LCBUWzI4XSlcclxuICAgICAgICBkID0gR0coZCwgYSwgYiwgYywgTV9vZmZzZXRfMiwgOSwgVFsyOV0pXHJcbiAgICAgICAgYyA9IEdHKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsIDE0LCBUWzMwXSlcclxuICAgICAgICBiID0gR0coYiwgYywgZCwgYSwgTV9vZmZzZXRfMTIsIDIwLCBUWzMxXSlcclxuXHJcbiAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzUsIDQsIFRbMzJdKVxyXG4gICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF84LCAxMSwgVFszM10pXHJcbiAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzExLCAxNiwgVFszNF0pXHJcbiAgICAgICAgYiA9IEhIKGIsIGMsIGQsIGEsIE1fb2Zmc2V0XzE0LCAyMywgVFszNV0pXHJcbiAgICAgICAgYSA9IEhIKGEsIGIsIGMsIGQsIE1fb2Zmc2V0XzEsIDQsIFRbMzZdKVxyXG4gICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF80LCAxMSwgVFszN10pXHJcbiAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzcsIDE2LCBUWzM4XSlcclxuICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMTAsIDIzLCBUWzM5XSlcclxuICAgICAgICBhID0gSEgoYSwgYiwgYywgZCwgTV9vZmZzZXRfMTMsIDQsIFRbNDBdKVxyXG4gICAgICAgIGQgPSBISChkLCBhLCBiLCBjLCBNX29mZnNldF8wLCAxMSwgVFs0MV0pXHJcbiAgICAgICAgYyA9IEhIKGMsIGQsIGEsIGIsIE1fb2Zmc2V0XzMsIDE2LCBUWzQyXSlcclxuICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfNiwgMjMsIFRbNDNdKVxyXG4gICAgICAgIGEgPSBISChhLCBiLCBjLCBkLCBNX29mZnNldF85LCA0LCBUWzQ0XSlcclxuICAgICAgICBkID0gSEgoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTIsIDExLCBUWzQ1XSlcclxuICAgICAgICBjID0gSEgoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTUsIDE2LCBUWzQ2XSlcclxuICAgICAgICBiID0gSEgoYiwgYywgZCwgYSwgTV9vZmZzZXRfMiwgMjMsIFRbNDddKVxyXG5cclxuICAgICAgICBhID0gSUkoYSwgYiwgYywgZCwgTV9vZmZzZXRfMCwgNiwgVFs0OF0pXHJcbiAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzcsIDEwLCBUWzQ5XSlcclxuICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTQsIDE1LCBUWzUwXSlcclxuICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfNSwgMjEsIFRbNTFdKVxyXG4gICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF8xMiwgNiwgVFs1Ml0pXHJcbiAgICAgICAgZCA9IElJKGQsIGEsIGIsIGMsIE1fb2Zmc2V0XzMsIDEwLCBUWzUzXSlcclxuICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMTAsIDE1LCBUWzU0XSlcclxuICAgICAgICBiID0gSUkoYiwgYywgZCwgYSwgTV9vZmZzZXRfMSwgMjEsIFRbNTVdKVxyXG4gICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF84LCA2LCBUWzU2XSlcclxuICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTUsIDEwLCBUWzU3XSlcclxuICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfNiwgMTUsIFRbNThdKVxyXG4gICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF8xMywgMjEsIFRbNTldKVxyXG4gICAgICAgIGEgPSBJSShhLCBiLCBjLCBkLCBNX29mZnNldF80LCA2LCBUWzYwXSlcclxuICAgICAgICBkID0gSUkoZCwgYSwgYiwgYywgTV9vZmZzZXRfMTEsIDEwLCBUWzYxXSlcclxuICAgICAgICBjID0gSUkoYywgZCwgYSwgYiwgTV9vZmZzZXRfMiwgMTUsIFRbNjJdKVxyXG4gICAgICAgIGIgPSBJSShiLCBjLCBkLCBhLCBNX29mZnNldF85LCAyMSwgVFs2M10pXHJcblxyXG4gICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlXHJcbiAgICAgICAgSFswXSA9IChIWzBdICsgYSkgfCAwXHJcbiAgICAgICAgSFsxXSA9IChIWzFdICsgYikgfCAwXHJcbiAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwXHJcbiAgICAgICAgSFszXSA9IChIWzNdICsgZCkgfCAwXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YVxyXG4gICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzXHJcblxyXG4gICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDhcclxuICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDhcclxuXHJcbiAgICAgICAgLy8gQWRkIHBhZGRpbmdcclxuICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKVxyXG5cclxuICAgICAgICB2YXIgbkJpdHNUb3RhbEggPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMClcclxuICAgICAgICB2YXIgbkJpdHNUb3RhbEwgPSBuQml0c1RvdGFsXHJcbiAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSAoXHJcbiAgICAgICAgICAoKChuQml0c1RvdGFsSCA8PCA4KSB8IChuQml0c1RvdGFsSCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcclxuICAgICAgICAgICgoKG5CaXRzVG90YWxIIDw8IDI0KSB8IChuQml0c1RvdGFsSCA+Pj4gOCkpICYgMHhmZjAwZmYwMClcclxuICAgICAgICApXHJcbiAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNF0gPSAoXHJcbiAgICAgICAgICAoKChuQml0c1RvdGFsTCA8PCA4KSB8IChuQml0c1RvdGFsTCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcclxuICAgICAgICAgICgoKG5CaXRzVG90YWxMIDw8IDI0KSB8IChuQml0c1RvdGFsTCA+Pj4gOCkpICYgMHhmZjAwZmYwMClcclxuICAgICAgICApXHJcblxyXG4gICAgICAgIGRhdGEuc2lnQnl0ZXMgPSAoZGF0YVdvcmRzLmxlbmd0aCArIDEpICogNFxyXG5cclxuICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xyXG4gICAgICAgIHRoaXMuX3Byb2Nlc3MoKVxyXG5cclxuICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2hcclxuICAgICAgICB2YXIgSCA9IGhhc2gud29yZHNcclxuXHJcbiAgICAgICAgLy8gU3dhcCBlbmRpYW5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgLy8gU2hvcnRjdXRcclxuICAgICAgICAgIHZhciBIX2kgPSBIW2ldXHJcblxyXG4gICAgICAgICAgSFtpXSA9ICgoKEhfaSA8PCA4KSB8IChIX2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XHJcbiAgICAgICAgICAgICgoKEhfaSA8PCAyNCkgfCAoSF9pID4+PiA4KSkgJiAweGZmMDBmZjAwKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcclxuICAgICAgICByZXR1cm4gaGFzaFxyXG4gICAgICB9LFxyXG5cclxuICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKVxyXG4gICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpXHJcblxyXG4gICAgICAgIHJldHVybiBjbG9uZVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIGZ1bmN0aW9uIEZGKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcclxuICAgICAgdmFyIG4gPSBhICsgKChiICYgYykgfCAofmIgJiBkKSkgKyB4ICsgdFxyXG4gICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gR0coYSwgYiwgYywgZCwgeCwgcywgdCkge1xyXG4gICAgICB2YXIgbiA9IGEgKyAoKGIgJiBkKSB8IChjICYgfmQpKSArIHggKyB0XHJcbiAgICAgIHJldHVybiAoKG4gPDwgcykgfCAobiA+Pj4gKDMyIC0gcykpKSArIGJcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBISChhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XHJcbiAgICAgIHZhciBuID0gYSArIChiIF4gYyBeIGQpICsgeCArIHRcclxuICAgICAgcmV0dXJuICgobiA8PCBzKSB8IChuID4+PiAoMzIgLSBzKSkpICsgYlxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIElJKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcclxuICAgICAgdmFyIG4gPSBhICsgKGMgXiAoYiB8IH5kKSkgKyB4ICsgdFxyXG4gICAgICByZXR1cm4gKChuIDw8IHMpIHwgKG4gPj4+ICgzMiAtIHMpKSkgKyBiXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICpcclxuICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLk1ENSgnbWVzc2FnZScpO1xyXG4gICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuTUQ1KHdvcmRBcnJheSk7XHJcbiAgICAgKi9cclxuICAgIEMuTUQ1ID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoTUQ1KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxyXG4gICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cclxuICAgICAqXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqXHJcbiAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjTUQ1KG1lc3NhZ2UsIGtleSk7XHJcbiAgICAgKi9cclxuICAgIEMuSG1hY01ENSA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihNRDUpXHJcbiAgfShNYXRoKSk7XHJcblxyXG5cclxuICAoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gU2hvcnRjdXRzXHJcbiAgICB2YXIgQyA9IENyeXB0b0pTXHJcbiAgICB2YXIgQ19saWIgPSBDLmxpYlxyXG4gICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheVxyXG4gICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlclxyXG4gICAgdmFyIENfYWxnbyA9IEMuYWxnb1xyXG5cclxuICAgIC8vIFJldXNhYmxlIG9iamVjdFxyXG4gICAgdmFyIFcgPSBbXVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU0hBLTEgaGFzaCBhbGdvcml0aG0uXHJcbiAgICAgKi9cclxuICAgIHZhciBTSEExID0gQ19hbGdvLlNIQTEgPSBIYXNoZXIuZXh0ZW5kKHtcclxuICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KFtcclxuICAgICAgICAgIDB4Njc0NTIzMDEsIDB4ZWZjZGFiODksXHJcbiAgICAgICAgICAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LFxyXG4gICAgICAgICAgMHhjM2QyZTFmMFxyXG4gICAgICAgIF0pXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dFxyXG4gICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3Jkc1xyXG5cclxuICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xyXG4gICAgICAgIHZhciBhID0gSFswXVxyXG4gICAgICAgIHZhciBiID0gSFsxXVxyXG4gICAgICAgIHZhciBjID0gSFsyXVxyXG4gICAgICAgIHZhciBkID0gSFszXVxyXG4gICAgICAgIHZhciBlID0gSFs0XVxyXG5cclxuICAgICAgICAvLyBDb21wdXRhdGlvblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODA7IGkrKykge1xyXG4gICAgICAgICAgaWYgKGkgPCAxNikge1xyXG4gICAgICAgICAgICBXW2ldID0gTVtvZmZzZXQgKyBpXSB8IDBcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBuID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XVxyXG4gICAgICAgICAgICBXW2ldID0gKG4gPDwgMSkgfCAobiA+Pj4gMzEpXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdmFyIHQgPSAoKGEgPDwgNSkgfCAoYSA+Pj4gMjcpKSArIGUgKyBXW2ldXHJcbiAgICAgICAgICBpZiAoaSA8IDIwKSB7XHJcbiAgICAgICAgICAgIHQgKz0gKChiICYgYykgfCAofmIgJiBkKSkgKyAweDVhODI3OTk5XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGkgPCA0MCkge1xyXG4gICAgICAgICAgICB0ICs9IChiIF4gYyBeIGQpICsgMHg2ZWQ5ZWJhMVxyXG4gICAgICAgICAgfSBlbHNlIGlmIChpIDwgNjApIHtcclxuICAgICAgICAgICAgdCArPSAoKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpKSAtIDB4NzBlNDQzMjRcclxuICAgICAgICAgIH0gZWxzZSAvKiBpZiAoaSA8IDgwKSAqLyB7XHJcbiAgICAgICAgICAgIHQgKz0gKGIgXiBjIF4gZCkgLSAweDM1OWQzZTJhXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZSA9IGRcclxuICAgICAgICAgIGQgPSBjXHJcbiAgICAgICAgICBjID0gKGIgPDwgMzApIHwgKGIgPj4+IDIpXHJcbiAgICAgICAgICBiID0gYVxyXG4gICAgICAgICAgYSA9IHRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEludGVybWVkaWF0ZSBoYXNoIHZhbHVlXHJcbiAgICAgICAgSFswXSA9IChIWzBdICsgYSkgfCAwXHJcbiAgICAgICAgSFsxXSA9IChIWzFdICsgYikgfCAwXHJcbiAgICAgICAgSFsyXSA9IChIWzJdICsgYykgfCAwXHJcbiAgICAgICAgSFszXSA9IChIWzNdICsgZCkgfCAwXHJcbiAgICAgICAgSFs0XSA9IChIWzRdICsgZSkgfCAwXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YVxyXG4gICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzXHJcblxyXG4gICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDhcclxuICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDhcclxuXHJcbiAgICAgICAgLy8gQWRkIHBhZGRpbmdcclxuICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKVxyXG4gICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTRdID0gTWF0aC5mbG9vcihuQml0c1RvdGFsIC8gMHgxMDAwMDAwMDApXHJcbiAgICAgICAgZGF0YVdvcmRzWygoKG5CaXRzTGVmdCArIDY0KSA+Pj4gOSkgPDwgNCkgKyAxNV0gPSBuQml0c1RvdGFsXHJcbiAgICAgICAgZGF0YS5zaWdCeXRlcyA9IGRhdGFXb3Jkcy5sZW5ndGggKiA0XHJcblxyXG4gICAgICAgIC8vIEhhc2ggZmluYWwgYmxvY2tzXHJcbiAgICAgICAgdGhpcy5fcHJvY2VzcygpXHJcblxyXG4gICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc2hcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcylcclxuICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKVxyXG5cclxuICAgICAgICByZXR1cm4gY2xvbmVcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKlxyXG4gICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMSgnbWVzc2FnZScpO1xyXG4gICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMSh3b3JkQXJyYXkpO1xyXG4gICAgICovXHJcbiAgICBDLlNIQTEgPSBIYXNoZXIuX2NyZWF0ZUhlbHBlcihTSEExKVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxyXG4gICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cclxuICAgICAqXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqXHJcbiAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMShtZXNzYWdlLCBrZXkpO1xyXG4gICAgICovXHJcbiAgICBDLkhtYWNTSEExID0gSGFzaGVyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTEpXHJcbiAgfSgpKTtcclxuXHJcblxyXG4gIChmdW5jdGlvbiAoTWF0aCkge1xyXG4gICAgLy8gU2hvcnRjdXRzXHJcbiAgICB2YXIgQyA9IENyeXB0b0pTXHJcbiAgICB2YXIgQ19saWIgPSBDLmxpYlxyXG4gICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheVxyXG4gICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlclxyXG4gICAgdmFyIENfYWxnbyA9IEMuYWxnb1xyXG5cclxuICAgIC8vIEluaXRpYWxpemF0aW9uIGFuZCByb3VuZCBjb25zdGFudHMgdGFibGVzXHJcbiAgICB2YXIgSCA9IFtdXHJcbiAgICB2YXIgSyA9IFtdO1xyXG5cclxuICAgIC8vIENvbXB1dGUgY29uc3RhbnRzXHJcbiAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICBmdW5jdGlvbiBpc1ByaW1lKG4pIHtcclxuICAgICAgICB2YXIgc3FydE4gPSBNYXRoLnNxcnQobilcclxuICAgICAgICBmb3IgKHZhciBmYWN0b3IgPSAyOyBmYWN0b3IgPD0gc3FydE47IGZhY3RvcisrKSB7XHJcbiAgICAgICAgICBpZiAoIShuICUgZmFjdG9yKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZ1bmN0aW9uIGdldEZyYWN0aW9uYWxCaXRzKG4pIHtcclxuICAgICAgICByZXR1cm4gKChuIC0gKG4gfCAwKSkgKiAweDEwMDAwMDAwMCkgfCAwXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHZhciBuID0gMlxyXG4gICAgICB2YXIgblByaW1lID0gMFxyXG4gICAgICB3aGlsZSAoblByaW1lIDwgNjQpIHtcclxuICAgICAgICBpZiAoaXNQcmltZShuKSkge1xyXG4gICAgICAgICAgaWYgKG5QcmltZSA8IDgpIHtcclxuICAgICAgICAgICAgSFtuUHJpbWVdID0gZ2V0RnJhY3Rpb25hbEJpdHMoTWF0aC5wb3cobiwgMSAvIDIpKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgS1tuUHJpbWVdID0gZ2V0RnJhY3Rpb25hbEJpdHMoTWF0aC5wb3cobiwgMSAvIDMpKVxyXG5cclxuICAgICAgICAgIG5QcmltZSsrXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuKytcclxuICAgICAgfVxyXG4gICAgfSgpKVxyXG5cclxuICAgIC8vIFJldXNhYmxlIG9iamVjdFxyXG4gICAgdmFyIFcgPSBbXVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU0hBLTI1NiBoYXNoIGFsZ29yaXRobS5cclxuICAgICAqL1xyXG4gICAgdmFyIFNIQTI1NiA9IENfYWxnby5TSEEyNTYgPSBIYXNoZXIuZXh0ZW5kKHtcclxuICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFdvcmRBcnJheS5pbml0KEguc2xpY2UoMCkpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dFxyXG4gICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3Jkc1xyXG5cclxuICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xyXG4gICAgICAgIHZhciBhID0gSFswXVxyXG4gICAgICAgIHZhciBiID0gSFsxXVxyXG4gICAgICAgIHZhciBjID0gSFsyXVxyXG4gICAgICAgIHZhciBkID0gSFszXVxyXG4gICAgICAgIHZhciBlID0gSFs0XVxyXG4gICAgICAgIHZhciBmID0gSFs1XVxyXG4gICAgICAgIHZhciBnID0gSFs2XVxyXG4gICAgICAgIHZhciBoID0gSFs3XVxyXG5cclxuICAgICAgICAvLyBDb21wdXRhdGlvblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykge1xyXG4gICAgICAgICAgaWYgKGkgPCAxNikge1xyXG4gICAgICAgICAgICBXW2ldID0gTVtvZmZzZXQgKyBpXSB8IDBcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciBnYW1tYTB4ID0gV1tpIC0gMTVdXHJcbiAgICAgICAgICAgIHZhciBnYW1tYTAgPSAoKGdhbW1hMHggPDwgMjUpIHwgKGdhbW1hMHggPj4+IDcpKSBeXHJcbiAgICAgICAgICAgICAgKChnYW1tYTB4IDw8IDE0KSB8IChnYW1tYTB4ID4+PiAxOCkpIF5cclxuICAgICAgICAgICAgICAoZ2FtbWEweCA+Pj4gMylcclxuXHJcbiAgICAgICAgICAgIHZhciBnYW1tYTF4ID0gV1tpIC0gMl1cclxuICAgICAgICAgICAgdmFyIGdhbW1hMSA9ICgoZ2FtbWExeCA8PCAxNSkgfCAoZ2FtbWExeCA+Pj4gMTcpKSBeXHJcbiAgICAgICAgICAgICAgKChnYW1tYTF4IDw8IDEzKSB8IChnYW1tYTF4ID4+PiAxOSkpIF5cclxuICAgICAgICAgICAgICAoZ2FtbWExeCA+Pj4gMTApXHJcblxyXG4gICAgICAgICAgICBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB2YXIgY2ggPSAoZSAmIGYpIF4gKH5lICYgZylcclxuICAgICAgICAgIHZhciBtYWogPSAoYSAmIGIpIF4gKGEgJiBjKSBeIChiICYgYylcclxuXHJcbiAgICAgICAgICB2YXIgc2lnbWEwID0gKChhIDw8IDMwKSB8IChhID4+PiAyKSkgXiAoKGEgPDwgMTkpIHwgKGEgPj4+IDEzKSkgXiAoKGEgPDwgMTApIHwgKGEgPj4+IDIyKSlcclxuICAgICAgICAgIHZhciBzaWdtYTEgPSAoKGUgPDwgMjYpIHwgKGUgPj4+IDYpKSBeICgoZSA8PCAyMSkgfCAoZSA+Pj4gMTEpKSBeICgoZSA8PCA3KSB8IChlID4+PiAyNSkpXHJcblxyXG4gICAgICAgICAgdmFyIHQxID0gaCArIHNpZ21hMSArIGNoICsgS1tpXSArIFdbaV1cclxuICAgICAgICAgIHZhciB0MiA9IHNpZ21hMCArIG1halxyXG5cclxuICAgICAgICAgIGggPSBnXHJcbiAgICAgICAgICBnID0gZlxyXG4gICAgICAgICAgZiA9IGVcclxuICAgICAgICAgIGUgPSAoZCArIHQxKSB8IDBcclxuICAgICAgICAgIGQgPSBjXHJcbiAgICAgICAgICBjID0gYlxyXG4gICAgICAgICAgYiA9IGFcclxuICAgICAgICAgIGEgPSAodDEgKyB0MikgfCAwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxyXG4gICAgICAgIEhbMF0gPSAoSFswXSArIGEpIHwgMFxyXG4gICAgICAgIEhbMV0gPSAoSFsxXSArIGIpIHwgMFxyXG4gICAgICAgIEhbMl0gPSAoSFsyXSArIGMpIHwgMFxyXG4gICAgICAgIEhbM10gPSAoSFszXSArIGQpIHwgMFxyXG4gICAgICAgIEhbNF0gPSAoSFs0XSArIGUpIHwgMFxyXG4gICAgICAgIEhbNV0gPSAoSFs1XSArIGYpIHwgMFxyXG4gICAgICAgIEhbNl0gPSAoSFs2XSArIGcpIHwgMFxyXG4gICAgICAgIEhbN10gPSAoSFs3XSArIGgpIHwgMFxyXG4gICAgICB9LFxyXG5cclxuICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGFcclxuICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3Jkc1xyXG5cclxuICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4XHJcbiAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4XHJcblxyXG4gICAgICAgIC8vIEFkZCBwYWRkaW5nXHJcbiAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMilcclxuICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IE1hdGguZmxvb3IobkJpdHNUb3RhbCAvIDB4MTAwMDAwMDAwKVxyXG4gICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyA2NCkgPj4+IDkpIDw8IDQpICsgMTVdID0gbkJpdHNUb3RhbFxyXG4gICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNFxyXG5cclxuICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xyXG4gICAgICAgIHRoaXMuX3Byb2Nlc3MoKVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaFxyXG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNoXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBjbG9uZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBjbG9uZSA9IEhhc2hlci5jbG9uZS5jYWxsKHRoaXMpXHJcbiAgICAgICAgY2xvbmUuX2hhc2ggPSB0aGlzLl9oYXNoLmNsb25lKClcclxuXHJcbiAgICAgICAgcmV0dXJuIGNsb25lXHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICpcclxuICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTI1NignbWVzc2FnZScpO1xyXG4gICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMjU2KHdvcmRBcnJheSk7XHJcbiAgICAgKi9cclxuICAgIEMuU0hBMjU2ID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBMjU2KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIEhNQUMncyBvYmplY3QgaW50ZXJmYWNlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxyXG4gICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBrZXkgVGhlIHNlY3JldCBrZXkuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgSE1BQy5cclxuICAgICAqXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqXHJcbiAgICAgKiAgICAgdmFyIGhtYWMgPSBDcnlwdG9KUy5IbWFjU0hBMjU2KG1lc3NhZ2UsIGtleSk7XHJcbiAgICAgKi9cclxuICAgIEMuSG1hY1NIQTI1NiA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihTSEEyNTYpXHJcbiAgfShNYXRoKSk7XHJcblxyXG5cclxuICAoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gU2hvcnRjdXRzXHJcbiAgICB2YXIgQyA9IENyeXB0b0pTXHJcbiAgICB2YXIgQ19saWIgPSBDLmxpYlxyXG4gICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheVxyXG4gICAgdmFyIENfZW5jID0gQy5lbmNcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVURi0xNiBCRSBlbmNvZGluZyBzdHJhdGVneS5cclxuICAgICAqL1xyXG4gICAgdmFyIFV0ZjE2QkUgPSBDX2VuYy5VdGYxNiA9IENfZW5jLlV0ZjE2QkUgPSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb252ZXJ0cyBhIHdvcmQgYXJyYXkgdG8gYSBVVEYtMTYgQkUgc3RyaW5nLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gd29yZEFycmF5IFRoZSB3b3JkIGFycmF5LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBVVEYtMTYgQkUgc3RyaW5nLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgdXRmMTZTdHJpbmcgPSBDcnlwdG9KUy5lbmMuVXRmMTYuc3RyaW5naWZ5KHdvcmRBcnJheSk7XHJcbiAgICAgICAqL1xyXG4gICAgICBzdHJpbmdpZnk6IGZ1bmN0aW9uICh3b3JkQXJyYXkpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICB2YXIgd29yZHMgPSB3b3JkQXJyYXkud29yZHNcclxuICAgICAgICB2YXIgc2lnQnl0ZXMgPSB3b3JkQXJyYXkuc2lnQnl0ZXNcclxuXHJcbiAgICAgICAgLy8gQ29udmVydFxyXG4gICAgICAgIHZhciB1dGYxNkNoYXJzID0gW11cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpZ0J5dGVzOyBpICs9IDIpIHtcclxuICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSAod29yZHNbaSA+Pj4gMl0gPj4+ICgxNiAtIChpICUgNCkgKiA4KSkgJiAweGZmZmZcclxuICAgICAgICAgIHV0ZjE2Q2hhcnMucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdXRmMTZDaGFycy5qb2luKCcnKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENvbnZlcnRzIGEgVVRGLTE2IEJFIHN0cmluZyB0byBhIHdvcmQgYXJyYXkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1dGYxNlN0ciBUaGUgVVRGLTE2IEJFIHN0cmluZy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgd29yZCBhcnJheS5cclxuICAgICAgICpcclxuICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLmVuYy5VdGYxNi5wYXJzZSh1dGYxNlN0cmluZyk7XHJcbiAgICAgICAqL1xyXG4gICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjE2U3RyKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRcclxuICAgICAgICB2YXIgdXRmMTZTdHJMZW5ndGggPSB1dGYxNlN0ci5sZW5ndGhcclxuXHJcbiAgICAgICAgLy8gQ29udmVydFxyXG4gICAgICAgIHZhciB3b3JkcyA9IFtdXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1dGYxNlN0ckxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICB3b3Jkc1tpID4+PiAxXSB8PSB1dGYxNlN0ci5jaGFyQ29kZUF0KGkpIDw8ICgxNiAtIChpICUgMikgKiAxNilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBXb3JkQXJyYXkuY3JlYXRlKHdvcmRzLCB1dGYxNlN0ckxlbmd0aCAqIDIpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFVURi0xNiBMRSBlbmNvZGluZyBzdHJhdGVneS5cclxuICAgICAqL1xyXG4gICAgQ19lbmMuVXRmMTZMRSA9IHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIENvbnZlcnRzIGEgd29yZCBhcnJheSB0byBhIFVURi0xNiBMRSBzdHJpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSB3b3JkQXJyYXkgVGhlIHdvcmQgYXJyYXkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIFVURi0xNiBMRSBzdHJpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciB1dGYxNlN0ciA9IENyeXB0b0pTLmVuYy5VdGYxNkxFLnN0cmluZ2lmeSh3b3JkQXJyYXkpO1xyXG4gICAgICAgKi9cclxuICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAod29yZEFycmF5KSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIHdvcmRzID0gd29yZEFycmF5LndvcmRzXHJcbiAgICAgICAgdmFyIHNpZ0J5dGVzID0gd29yZEFycmF5LnNpZ0J5dGVzXHJcblxyXG4gICAgICAgIC8vIENvbnZlcnRcclxuICAgICAgICB2YXIgdXRmMTZDaGFycyA9IFtdXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaWdCeXRlczsgaSArPSAyKSB7XHJcbiAgICAgICAgICB2YXIgY29kZVBvaW50ID0gc3dhcEVuZGlhbigod29yZHNbaSA+Pj4gMl0gPj4+ICgxNiAtIChpICUgNCkgKiA4KSkgJiAweGZmZmYpXHJcbiAgICAgICAgICB1dGYxNkNoYXJzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlUG9pbnQpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHV0ZjE2Q2hhcnMuam9pbignJylcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb252ZXJ0cyBhIFVURi0xNiBMRSBzdHJpbmcgdG8gYSB3b3JkIGFycmF5LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXRmMTZTdHIgVGhlIFVURi0xNiBMRSBzdHJpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIHdvcmQgYXJyYXkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy5lbmMuVXRmMTZMRS5wYXJzZSh1dGYxNlN0cik7XHJcbiAgICAgICAqL1xyXG4gICAgICBwYXJzZTogZnVuY3Rpb24gKHV0ZjE2U3RyKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRcclxuICAgICAgICB2YXIgdXRmMTZTdHJMZW5ndGggPSB1dGYxNlN0ci5sZW5ndGhcclxuXHJcbiAgICAgICAgLy8gQ29udmVydFxyXG4gICAgICAgIHZhciB3b3JkcyA9IFtdXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1dGYxNlN0ckxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICB3b3Jkc1tpID4+PiAxXSB8PSBzd2FwRW5kaWFuKHV0ZjE2U3RyLmNoYXJDb2RlQXQoaSkgPDwgKDE2IC0gKGkgJSAyKSAqIDE2KSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBXb3JkQXJyYXkuY3JlYXRlKHdvcmRzLCB1dGYxNlN0ckxlbmd0aCAqIDIpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzd2FwRW5kaWFuKHdvcmQpIHtcclxuICAgICAgcmV0dXJuICgod29yZCA8PCA4KSAmIDB4ZmYwMGZmMDApIHwgKCh3b3JkID4+PiA4KSAmIDB4MDBmZjAwZmYpXHJcbiAgICB9XHJcbiAgfSgpKTtcclxuXHJcblxyXG4gIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBDaGVjayBpZiB0eXBlZCBhcnJheXMgYXJlIHN1cHBvcnRlZFxyXG4gICAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuXHJcbiAgICAvLyBTaG9ydGN1dHNcclxuICAgIHZhciBDID0gQ3J5cHRvSlNcclxuICAgIHZhciBDX2xpYiA9IEMubGliXHJcbiAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5XHJcblxyXG4gICAgLy8gUmVmZXJlbmNlIG9yaWdpbmFsIGluaXRcclxuICAgIHZhciBzdXBlckluaXQgPSBXb3JkQXJyYXkuaW5pdFxyXG5cclxuICAgIC8vIEF1Z21lbnQgV29yZEFycmF5LmluaXQgdG8gaGFuZGxlIHR5cGVkIGFycmF5c1xyXG4gICAgdmFyIHN1YkluaXQgPSBXb3JkQXJyYXkuaW5pdCA9IGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XHJcbiAgICAgIC8vIENvbnZlcnQgYnVmZmVycyB0byB1aW50OFxyXG4gICAgICBpZiAodHlwZWRBcnJheSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgdHlwZWRBcnJheSA9IG5ldyBVaW50OEFycmF5KHR5cGVkQXJyYXkpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENvbnZlcnQgb3RoZXIgYXJyYXkgdmlld3MgdG8gdWludDhcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBJbnQ4QXJyYXkgfHxcclxuICAgICAgICAodHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlZEFycmF5IGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXkpIHx8XHJcbiAgICAgICAgdHlwZWRBcnJheSBpbnN0YW5jZW9mIEludDE2QXJyYXkgfHxcclxuICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgVWludDE2QXJyYXkgfHxcclxuICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgSW50MzJBcnJheSB8fFxyXG4gICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBVaW50MzJBcnJheSB8fFxyXG4gICAgICAgIHR5cGVkQXJyYXkgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXkgfHxcclxuICAgICAgICB0eXBlZEFycmF5IGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5XHJcbiAgICAgICkge1xyXG4gICAgICAgIHR5cGVkQXJyYXkgPSBuZXcgVWludDhBcnJheSh0eXBlZEFycmF5LmJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5LmJ5dGVMZW5ndGgpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIEhhbmRsZSBVaW50OEFycmF5XHJcbiAgICAgIGlmICh0eXBlZEFycmF5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0XHJcbiAgICAgICAgdmFyIHR5cGVkQXJyYXlCeXRlTGVuZ3RoID0gdHlwZWRBcnJheS5ieXRlTGVuZ3RoXHJcblxyXG4gICAgICAgIC8vIEV4dHJhY3QgYnl0ZXNcclxuICAgICAgICB2YXIgd29yZHMgPSBbXVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZWRBcnJheUJ5dGVMZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgd29yZHNbaSA+Pj4gMl0gfD0gdHlwZWRBcnJheVtpXSA8PCAoMjQgLSAoaSAlIDQpICogOClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhpcyB3b3JkIGFycmF5XHJcbiAgICAgICAgc3VwZXJJbml0LmNhbGwodGhpcywgd29yZHMsIHR5cGVkQXJyYXlCeXRlTGVuZ3RoKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIEVsc2UgY2FsbCBub3JtYWwgaW5pdFxyXG4gICAgICAgIHN1cGVySW5pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdWJJbml0LnByb3RvdHlwZSA9IFdvcmRBcnJheVxyXG4gIH0oKSk7XHJcblxyXG5cclxuICAvKiogQHByZXNlcnZlXHJcbiAgKGMpIDIwMTIgYnkgQ8OpZHJpYyBNZXNuaWwuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcblxyXG4gIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dCBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlIG1ldDpcclxuXHJcbiAgICAgIC0gUmVkaXN0cmlidXRpb25zIG9mIHNvdXJjZSBjb2RlIG11c3QgcmV0YWluIHRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZyBkaXNjbGFpbWVyLlxyXG4gICAgICAtIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkIHdpdGggdGhlIGRpc3RyaWJ1dGlvbi5cclxuXHJcbiAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUyBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UIExJTUlURUQgVE8sIFRIRSBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVCBIT0xERVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWSBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRSBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxyXG4gICovXHJcblxyXG4gIChmdW5jdGlvbiAoTWF0aCkge1xyXG4gICAgLy8gU2hvcnRjdXRzXHJcbiAgICB2YXIgQyA9IENyeXB0b0pTXHJcbiAgICB2YXIgQ19saWIgPSBDLmxpYlxyXG4gICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheVxyXG4gICAgdmFyIEhhc2hlciA9IENfbGliLkhhc2hlclxyXG4gICAgdmFyIENfYWxnbyA9IEMuYWxnb1xyXG5cclxuICAgIC8vIENvbnN0YW50cyB0YWJsZVxyXG4gICAgdmFyIF96bCA9IFdvcmRBcnJheS5jcmVhdGUoW1xyXG4gICAgICAwLCAxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEyLCAxMywgMTQsIDE1LFxyXG4gICAgICA3LCA0LCAxMywgMSwgMTAsIDYsIDE1LCAzLCAxMiwgMCwgOSwgNSwgMiwgMTQsIDExLCA4LFxyXG4gICAgICAzLCAxMCwgMTQsIDQsIDksIDE1LCA4LCAxLCAyLCA3LCAwLCA2LCAxMywgMTEsIDUsIDEyLFxyXG4gICAgICAxLCA5LCAxMSwgMTAsIDAsIDgsIDEyLCA0LCAxMywgMywgNywgMTUsIDE0LCA1LCA2LCAyLFxyXG4gICAgICA0LCAwLCA1LCA5LCA3LCAxMiwgMiwgMTAsIDE0LCAxLCAzLCA4LCAxMSwgNiwgMTUsIDEzXHJcbiAgICBdKVxyXG4gICAgdmFyIF96ciA9IFdvcmRBcnJheS5jcmVhdGUoW1xyXG4gICAgICA1LCAxNCwgNywgMCwgOSwgMiwgMTEsIDQsIDEzLCA2LCAxNSwgOCwgMSwgMTAsIDMsIDEyLFxyXG4gICAgICA2LCAxMSwgMywgNywgMCwgMTMsIDUsIDEwLCAxNCwgMTUsIDgsIDEyLCA0LCA5LCAxLCAyLFxyXG4gICAgICAxNSwgNSwgMSwgMywgNywgMTQsIDYsIDksIDExLCA4LCAxMiwgMiwgMTAsIDAsIDQsIDEzLFxyXG4gICAgICA4LCA2LCA0LCAxLCAzLCAxMSwgMTUsIDAsIDUsIDEyLCAyLCAxMywgOSwgNywgMTAsIDE0LFxyXG4gICAgICAxMiwgMTUsIDEwLCA0LCAxLCA1LCA4LCA3LCA2LCAyLCAxMywgMTQsIDAsIDMsIDksIDExXHJcbiAgICBdKVxyXG4gICAgdmFyIF9zbCA9IFdvcmRBcnJheS5jcmVhdGUoW1xyXG4gICAgICAxMSwgMTQsIDE1LCAxMiwgNSwgOCwgNywgOSwgMTEsIDEzLCAxNCwgMTUsIDYsIDcsIDksIDgsXHJcbiAgICAgIDcsIDYsIDgsIDEzLCAxMSwgOSwgNywgMTUsIDcsIDEyLCAxNSwgOSwgMTEsIDcsIDEzLCAxMixcclxuICAgICAgMTEsIDEzLCA2LCA3LCAxNCwgOSwgMTMsIDE1LCAxNCwgOCwgMTMsIDYsIDUsIDEyLCA3LCA1LFxyXG4gICAgICAxMSwgMTIsIDE0LCAxNSwgMTQsIDE1LCA5LCA4LCA5LCAxNCwgNSwgNiwgOCwgNiwgNSwgMTIsXHJcbiAgICAgIDksIDE1LCA1LCAxMSwgNiwgOCwgMTMsIDEyLCA1LCAxMiwgMTMsIDE0LCAxMSwgOCwgNSwgNlxyXG4gICAgXSlcclxuICAgIHZhciBfc3IgPSBXb3JkQXJyYXkuY3JlYXRlKFtcclxuICAgICAgOCwgOSwgOSwgMTEsIDEzLCAxNSwgMTUsIDUsIDcsIDcsIDgsIDExLCAxNCwgMTQsIDEyLCA2LFxyXG4gICAgICA5LCAxMywgMTUsIDcsIDEyLCA4LCA5LCAxMSwgNywgNywgMTIsIDcsIDYsIDE1LCAxMywgMTEsXHJcbiAgICAgIDksIDcsIDE1LCAxMSwgOCwgNiwgNiwgMTQsIDEyLCAxMywgNSwgMTQsIDEzLCAxMywgNywgNSxcclxuICAgICAgMTUsIDUsIDgsIDExLCAxNCwgMTQsIDYsIDE0LCA2LCA5LCAxMiwgOSwgMTIsIDUsIDE1LCA4LFxyXG4gICAgICA4LCA1LCAxMiwgOSwgMTIsIDUsIDE0LCA2LCA4LCAxMywgNiwgNSwgMTUsIDEzLCAxMSwgMTFcclxuICAgIF0pXHJcblxyXG4gICAgdmFyIF9obCA9IFdvcmRBcnJheS5jcmVhdGUoWzB4MDAwMDAwMDAsIDB4NUE4Mjc5OTksIDB4NkVEOUVCQTEsIDB4OEYxQkJDREMsIDB4QTk1M0ZENEVdKVxyXG4gICAgdmFyIF9ociA9IFdvcmRBcnJheS5jcmVhdGUoWzB4NTBBMjhCRTYsIDB4NUM0REQxMjQsIDB4NkQ3MDNFRjMsIDB4N0E2RDc2RTksIDB4MDAwMDAwMDBdKVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUklQRU1EMTYwIGhhc2ggYWxnb3JpdGhtLlxyXG4gICAgICovXHJcbiAgICB2YXIgUklQRU1EMTYwID0gQ19hbGdvLlJJUEVNRDE2MCA9IEhhc2hlci5leHRlbmQoe1xyXG4gICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX2hhc2ggPSBXb3JkQXJyYXkuY3JlYXRlKFsweDY3NDUyMzAxLCAweEVGQ0RBQjg5LCAweDk4QkFEQ0ZFLCAweDEwMzI1NDc2LCAweEMzRDJFMUYwXSlcclxuICAgICAgfSxcclxuXHJcbiAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xyXG4gICAgICAgIC8vIFN3YXAgZW5kaWFuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICAgIHZhciBvZmZzZXRfaSA9IG9mZnNldCArIGlcclxuICAgICAgICAgIHZhciBNX29mZnNldF9pID0gTVtvZmZzZXRfaV1cclxuXHJcbiAgICAgICAgICAvLyBTd2FwXHJcbiAgICAgICAgICBNW29mZnNldF9pXSA9IChcclxuICAgICAgICAgICAgKCgoTV9vZmZzZXRfaSA8PCA4KSB8IChNX29mZnNldF9pID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxyXG4gICAgICAgICAgICAoKChNX29mZnNldF9pIDw8IDI0KSB8IChNX29mZnNldF9pID4+PiA4KSkgJiAweGZmMDBmZjAwKVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBTaG9ydGN1dFxyXG4gICAgICAgIHZhciBIID0gdGhpcy5faGFzaC53b3Jkc1xyXG4gICAgICAgIHZhciBobCA9IF9obC53b3Jkc1xyXG4gICAgICAgIHZhciBociA9IF9oci53b3Jkc1xyXG4gICAgICAgIHZhciB6bCA9IF96bC53b3Jkc1xyXG4gICAgICAgIHZhciB6ciA9IF96ci53b3Jkc1xyXG4gICAgICAgIHZhciBzbCA9IF9zbC53b3Jkc1xyXG4gICAgICAgIHZhciBzciA9IF9zci53b3Jkc1xyXG5cclxuICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xyXG4gICAgICAgIHZhciBhbCwgYmwsIGNsLCBkbCwgZWxcclxuICAgICAgICB2YXIgYXIsIGJyLCBjciwgZHIsIGVyXHJcblxyXG4gICAgICAgIGFyID0gYWwgPSBIWzBdXHJcbiAgICAgICAgYnIgPSBibCA9IEhbMV1cclxuICAgICAgICBjciA9IGNsID0gSFsyXVxyXG4gICAgICAgIGRyID0gZGwgPSBIWzNdXHJcbiAgICAgICAgZXIgPSBlbCA9IEhbNF1cclxuICAgICAgICAvLyBDb21wdXRhdGlvblxyXG4gICAgICAgIHZhciB0XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSArPSAxKSB7XHJcbiAgICAgICAgICB0ID0gKGFsICsgTVtvZmZzZXQgKyB6bFtpXV0pIHwgMFxyXG4gICAgICAgICAgaWYgKGkgPCAxNikge1xyXG4gICAgICAgICAgICB0ICs9IGYxKGJsLCBjbCwgZGwpICsgaGxbMF1cclxuICAgICAgICAgIH0gZWxzZSBpZiAoaSA8IDMyKSB7XHJcbiAgICAgICAgICAgIHQgKz0gZjIoYmwsIGNsLCBkbCkgKyBobFsxXVxyXG4gICAgICAgICAgfSBlbHNlIGlmIChpIDwgNDgpIHtcclxuICAgICAgICAgICAgdCArPSBmMyhibCwgY2wsIGRsKSArIGhsWzJdXHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGkgPCA2NCkge1xyXG4gICAgICAgICAgICB0ICs9IGY0KGJsLCBjbCwgZGwpICsgaGxbM11cclxuICAgICAgICAgIH0gZWxzZSB7IC8vIGlmIChpPDgwKSB7XHJcbiAgICAgICAgICAgIHQgKz0gZjUoYmwsIGNsLCBkbCkgKyBobFs0XVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdCA9IHQgfCAwXHJcbiAgICAgICAgICB0ID0gcm90bCh0LCBzbFtpXSlcclxuICAgICAgICAgIHQgPSAodCArIGVsKSB8IDBcclxuICAgICAgICAgIGFsID0gZWxcclxuICAgICAgICAgIGVsID0gZGxcclxuICAgICAgICAgIGRsID0gcm90bChjbCwgMTApXHJcbiAgICAgICAgICBjbCA9IGJsXHJcbiAgICAgICAgICBibCA9IHRcclxuXHJcbiAgICAgICAgICB0ID0gKGFyICsgTVtvZmZzZXQgKyB6cltpXV0pIHwgMFxyXG4gICAgICAgICAgaWYgKGkgPCAxNikge1xyXG4gICAgICAgICAgICB0ICs9IGY1KGJyLCBjciwgZHIpICsgaHJbMF1cclxuICAgICAgICAgIH0gZWxzZSBpZiAoaSA8IDMyKSB7XHJcbiAgICAgICAgICAgIHQgKz0gZjQoYnIsIGNyLCBkcikgKyBoclsxXVxyXG4gICAgICAgICAgfSBlbHNlIGlmIChpIDwgNDgpIHtcclxuICAgICAgICAgICAgdCArPSBmMyhiciwgY3IsIGRyKSArIGhyWzJdXHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGkgPCA2NCkge1xyXG4gICAgICAgICAgICB0ICs9IGYyKGJyLCBjciwgZHIpICsgaHJbM11cclxuICAgICAgICAgIH0gZWxzZSB7IC8vIGlmIChpPDgwKSB7XHJcbiAgICAgICAgICAgIHQgKz0gZjEoYnIsIGNyLCBkcikgKyBocls0XVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdCA9IHQgfCAwXHJcbiAgICAgICAgICB0ID0gcm90bCh0LCBzcltpXSlcclxuICAgICAgICAgIHQgPSAodCArIGVyKSB8IDBcclxuICAgICAgICAgIGFyID0gZXJcclxuICAgICAgICAgIGVyID0gZHJcclxuICAgICAgICAgIGRyID0gcm90bChjciwgMTApXHJcbiAgICAgICAgICBjciA9IGJyXHJcbiAgICAgICAgICBiciA9IHRcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSW50ZXJtZWRpYXRlIGhhc2ggdmFsdWVcclxuICAgICAgICB0ID0gKEhbMV0gKyBjbCArIGRyKSB8IDBcclxuICAgICAgICBIWzFdID0gKEhbMl0gKyBkbCArIGVyKSB8IDBcclxuICAgICAgICBIWzJdID0gKEhbM10gKyBlbCArIGFyKSB8IDBcclxuICAgICAgICBIWzNdID0gKEhbNF0gKyBhbCArIGJyKSB8IDBcclxuICAgICAgICBIWzRdID0gKEhbMF0gKyBibCArIGNyKSB8IDBcclxuICAgICAgICBIWzBdID0gdFxyXG4gICAgICB9LFxyXG5cclxuICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGFcclxuICAgICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3Jkc1xyXG5cclxuICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4XHJcbiAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4XHJcblxyXG4gICAgICAgIC8vIEFkZCBwYWRkaW5nXHJcbiAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHg4MCA8PCAoMjQgLSBuQml0c0xlZnQgJSAzMilcclxuICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgNjQpID4+PiA5KSA8PCA0KSArIDE0XSA9IChcclxuICAgICAgICAgICgoKG5CaXRzVG90YWwgPDwgOCkgfCAobkJpdHNUb3RhbCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcclxuICAgICAgICAgICgoKG5CaXRzVG90YWwgPDwgMjQpIHwgKG5CaXRzVG90YWwgPj4+IDgpKSAmIDB4ZmYwMGZmMDApXHJcbiAgICAgICAgKVxyXG4gICAgICAgIGRhdGEuc2lnQnl0ZXMgPSAoZGF0YVdvcmRzLmxlbmd0aCArIDEpICogNFxyXG5cclxuICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xyXG4gICAgICAgIHRoaXMuX3Byb2Nlc3MoKVxyXG5cclxuICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2hhc2hcclxuICAgICAgICB2YXIgSCA9IGhhc2gud29yZHNcclxuXHJcbiAgICAgICAgLy8gU3dhcCBlbmRpYW5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xyXG4gICAgICAgICAgLy8gU2hvcnRjdXRcclxuICAgICAgICAgIHZhciBIX2kgPSBIW2ldXHJcblxyXG4gICAgICAgICAgLy8gU3dhcFxyXG4gICAgICAgICAgSFtpXSA9ICgoKEhfaSA8PCA4KSB8IChIX2kgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XHJcbiAgICAgICAgICAgICgoKEhfaSA8PCAyNCkgfCAoSF9pID4+PiA4KSkgJiAweGZmMDBmZjAwKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuIGZpbmFsIGNvbXB1dGVkIGhhc2hcclxuICAgICAgICByZXR1cm4gaGFzaFxyXG4gICAgICB9LFxyXG5cclxuICAgICAgY2xvbmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY2xvbmUgPSBIYXNoZXIuY2xvbmUuY2FsbCh0aGlzKVxyXG4gICAgICAgIGNsb25lLl9oYXNoID0gdGhpcy5faGFzaC5jbG9uZSgpXHJcblxyXG4gICAgICAgIHJldHVybiBjbG9uZVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBmMSh4LCB5LCB6KSB7XHJcbiAgICAgIHJldHVybiAoKHgpIF4gKHkpIF4gKHopKVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGYyKHgsIHksIHopIHtcclxuICAgICAgcmV0dXJuICgoKHgpICYgKHkpKSB8ICgofngpICYgKHopKSlcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmMyh4LCB5LCB6KSB7XHJcbiAgICAgIHJldHVybiAoKCh4KSB8ICh+KHkpKSkgXiAoeikpXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZjQoeCwgeSwgeikge1xyXG4gICAgICByZXR1cm4gKCgoeCkgJiAoeikpIHwgKCh5KSAmICh+KHopKSkpXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZjUoeCwgeSwgeikge1xyXG4gICAgICByZXR1cm4gKCh4KSBeICgoeSkgfCAofih6KSkpKVxyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJvdGwoeCwgbikge1xyXG4gICAgICByZXR1cm4gKHggPDwgbikgfCAoeCA+Pj4gKDMyIC0gbikpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cclxuICAgICAqXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqXHJcbiAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5SSVBFTUQxNjAoJ21lc3NhZ2UnKTtcclxuICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlJJUEVNRDE2MCh3b3JkQXJyYXkpO1xyXG4gICAgICovXHJcbiAgICBDLlJJUEVNRDE2MCA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFJJUEVNRDE2MClcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cclxuICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKlxyXG4gICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1JJUEVNRDE2MChtZXNzYWdlLCBrZXkpO1xyXG4gICAgICovXHJcbiAgICBDLkhtYWNSSVBFTUQxNjAgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoUklQRU1EMTYwKVxyXG4gIH0oTWF0aCkpO1xyXG5cclxuXHJcbiAgKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgdmFyIEMgPSBDcnlwdG9KU1xyXG4gICAgdmFyIENfbGliID0gQy5saWJcclxuICAgIHZhciBCYXNlID0gQ19saWIuQmFzZVxyXG4gICAgdmFyIENfZW5jID0gQy5lbmNcclxuICAgIHZhciBVdGY4ID0gQ19lbmMuVXRmOFxyXG4gICAgdmFyIENfYWxnbyA9IEMuYWxnb1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSE1BQyBhbGdvcml0aG0uXHJcbiAgICAgKi9cclxuICAgIHZhciBITUFDID0gQ19hbGdvLkhNQUMgPSBCYXNlLmV4dGVuZCh7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgSE1BQy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaCBhbGdvcml0aG0gdG8gdXNlLlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBobWFjSGFzaGVyID0gQ3J5cHRvSlMuYWxnby5ITUFDLmNyZWF0ZShDcnlwdG9KUy5hbGdvLlNIQTI1Niwga2V5KTtcclxuICAgICAgICovXHJcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIChoYXNoZXIsIGtleSkge1xyXG4gICAgICAgIC8vIEluaXQgaGFzaGVyXHJcbiAgICAgICAgaGFzaGVyID0gdGhpcy5faGFzaGVyID0gbmV3IGhhc2hlci5pbml0KClcclxuXHJcbiAgICAgICAgLy8gQ29udmVydCBzdHJpbmcgdG8gV29yZEFycmF5LCBlbHNlIGFzc3VtZSBXb3JkQXJyYXkgYWxyZWFkeVxyXG4gICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAga2V5ID0gVXRmOC5wYXJzZShrZXkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICB2YXIgaGFzaGVyQmxvY2tTaXplID0gaGFzaGVyLmJsb2NrU2l6ZVxyXG4gICAgICAgIHZhciBoYXNoZXJCbG9ja1NpemVCeXRlcyA9IGhhc2hlckJsb2NrU2l6ZSAqIDRcclxuXHJcbiAgICAgICAgLy8gQWxsb3cgYXJiaXRyYXJ5IGxlbmd0aCBrZXlzXHJcbiAgICAgICAgaWYgKGtleS5zaWdCeXRlcyA+IGhhc2hlckJsb2NrU2l6ZUJ5dGVzKSB7XHJcbiAgICAgICAgICBrZXkgPSBoYXNoZXIuZmluYWxpemUoa2V5KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2xhbXAgZXhjZXNzIGJpdHNcclxuICAgICAgICBrZXkuY2xhbXAoKVxyXG5cclxuICAgICAgICAvLyBDbG9uZSBrZXkgZm9yIGlubmVyIGFuZCBvdXRlciBwYWRzXHJcbiAgICAgICAgdmFyIG9LZXkgPSB0aGlzLl9vS2V5ID0ga2V5LmNsb25lKClcclxuICAgICAgICB2YXIgaUtleSA9IHRoaXMuX2lLZXkgPSBrZXkuY2xvbmUoKVxyXG5cclxuICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICB2YXIgb0tleVdvcmRzID0gb0tleS53b3Jkc1xyXG4gICAgICAgIHZhciBpS2V5V29yZHMgPSBpS2V5LndvcmRzXHJcblxyXG4gICAgICAgIC8vIFhPUiBrZXlzIHdpdGggcGFkIGNvbnN0YW50c1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFzaGVyQmxvY2tTaXplOyBpKyspIHtcclxuICAgICAgICAgIG9LZXlXb3Jkc1tpXSBePSAweDVjNWM1YzVjXHJcbiAgICAgICAgICBpS2V5V29yZHNbaV0gXj0gMHgzNjM2MzYzNlxyXG4gICAgICAgIH1cclxuICAgICAgICBvS2V5LnNpZ0J5dGVzID0gaUtleS5zaWdCeXRlcyA9IGhhc2hlckJsb2NrU2l6ZUJ5dGVzXHJcblxyXG4gICAgICAgIC8vIFNldCBpbml0aWFsIHZhbHVlc1xyXG4gICAgICAgIHRoaXMucmVzZXQoKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFJlc2V0cyB0aGlzIEhNQUMgdG8gaXRzIGluaXRpYWwgc3RhdGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICBobWFjSGFzaGVyLnJlc2V0KCk7XHJcbiAgICAgICAqL1xyXG4gICAgICByZXNldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0XHJcbiAgICAgICAgdmFyIGhhc2hlciA9IHRoaXMuX2hhc2hlclxyXG5cclxuICAgICAgICAvLyBSZXNldFxyXG4gICAgICAgIGhhc2hlci5yZXNldCgpXHJcbiAgICAgICAgaGFzaGVyLnVwZGF0ZSh0aGlzLl9pS2V5KVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFVwZGF0ZXMgdGhpcyBITUFDIHdpdGggYSBtZXNzYWdlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgVGhlIG1lc3NhZ2UgdG8gYXBwZW5kLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtITUFDfSBUaGlzIEhNQUMgaW5zdGFuY2UuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICBobWFjSGFzaGVyLnVwZGF0ZSgnbWVzc2FnZScpO1xyXG4gICAgICAgKiAgICAgaG1hY0hhc2hlci51cGRhdGUod29yZEFycmF5KTtcclxuICAgICAgICovXHJcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKG1lc3NhZ2VVcGRhdGUpIHtcclxuICAgICAgICB0aGlzLl9oYXNoZXIudXBkYXRlKG1lc3NhZ2VVcGRhdGUpXHJcblxyXG4gICAgICAgIC8vIENoYWluYWJsZVxyXG4gICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogRmluYWxpemVzIHRoZSBITUFDIGNvbXB1dGF0aW9uLlxyXG4gICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2VVcGRhdGUgKE9wdGlvbmFsKSBBIGZpbmFsIG1lc3NhZ2UgdXBkYXRlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIGhtYWMgPSBobWFjSGFzaGVyLmZpbmFsaXplKCk7XHJcbiAgICAgICAqICAgICB2YXIgaG1hYyA9IGhtYWNIYXNoZXIuZmluYWxpemUoJ21lc3NhZ2UnKTtcclxuICAgICAgICogICAgIHZhciBobWFjID0gaG1hY0hhc2hlci5maW5hbGl6ZSh3b3JkQXJyYXkpO1xyXG4gICAgICAgKi9cclxuICAgICAgZmluYWxpemU6IGZ1bmN0aW9uIChtZXNzYWdlVXBkYXRlKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRcclxuICAgICAgICB2YXIgaGFzaGVyID0gdGhpcy5faGFzaGVyXHJcblxyXG4gICAgICAgIC8vIENvbXB1dGUgSE1BQ1xyXG4gICAgICAgIHZhciBpbm5lckhhc2ggPSBoYXNoZXIuZmluYWxpemUobWVzc2FnZVVwZGF0ZSlcclxuICAgICAgICBoYXNoZXIucmVzZXQoKVxyXG4gICAgICAgIHZhciBobWFjID0gaGFzaGVyLmZpbmFsaXplKHRoaXMuX29LZXkuY2xvbmUoKS5jb25jYXQoaW5uZXJIYXNoKSlcclxuXHJcbiAgICAgICAgcmV0dXJuIGhtYWNcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9KCkpO1xyXG5cclxuXHJcbiAgKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgdmFyIEMgPSBDcnlwdG9KU1xyXG4gICAgdmFyIENfbGliID0gQy5saWJcclxuICAgIHZhciBCYXNlID0gQ19saWIuQmFzZVxyXG4gICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheVxyXG4gICAgdmFyIENfYWxnbyA9IEMuYWxnb1xyXG4gICAgdmFyIFNIQTEgPSBDX2FsZ28uU0hBMVxyXG4gICAgdmFyIEhNQUMgPSBDX2FsZ28uSE1BQ1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFzc3dvcmQtQmFzZWQgS2V5IERlcml2YXRpb24gRnVuY3Rpb24gMiBhbGdvcml0aG0uXHJcbiAgICAgKi9cclxuICAgIHZhciBQQktERjIgPSBDX2FsZ28uUEJLREYyID0gQmFzZS5leHRlbmQoe1xyXG4gICAgICAvKipcclxuICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcHJvcGVydHkge251bWJlcn0ga2V5U2l6ZSBUaGUga2V5IHNpemUgaW4gd29yZHMgdG8gZ2VuZXJhdGUuIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxyXG4gICAgICAgKiBAcHJvcGVydHkge0hhc2hlcn0gaGFzaGVyIFRoZSBoYXNoZXIgdG8gdXNlLiBEZWZhdWx0OiBTSEExXHJcbiAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpdGVyYXRpb25zIFRoZSBudW1iZXIgb2YgaXRlcmF0aW9ucyB0byBwZXJmb3JtLiBEZWZhdWx0OiAxXHJcbiAgICAgICAqL1xyXG4gICAgICBjZmc6IEJhc2UuZXh0ZW5kKHtcclxuICAgICAgICBrZXlTaXplOiAxMjggLyAzMixcclxuICAgICAgICBoYXNoZXI6IFNIQTEsXHJcbiAgICAgICAgaXRlcmF0aW9uczogMVxyXG4gICAgICB9KSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQga2V5IGRlcml2YXRpb24gZnVuY3Rpb24uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhlIGRlcml2YXRpb24uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5QQktERjIuY3JlYXRlKCk7XHJcbiAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5QQktERjIuY3JlYXRlKHsga2V5U2l6ZTogOCB9KTtcclxuICAgICAgICogICAgIHZhciBrZGYgPSBDcnlwdG9KUy5hbGdvLlBCS0RGMi5jcmVhdGUoeyBrZXlTaXplOiA4LCBpdGVyYXRpb25zOiAxMDAwIH0pO1xyXG4gICAgICAgKi9cclxuICAgICAgaW5pdDogZnVuY3Rpb24gKGNmZykge1xyXG4gICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZylcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb21wdXRlcyB0aGUgUGFzc3dvcmQtQmFzZWQgS2V5IERlcml2YXRpb24gRnVuY3Rpb24gMi5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXHJcbiAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRlcml2ZWQga2V5LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIGtleSA9IGtkZi5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KTtcclxuICAgICAgICovXHJcbiAgICAgIGNvbXB1dGU6IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0XHJcbiAgICAgICAgdmFyIGNmZyA9IHRoaXMuY2ZnXHJcblxyXG4gICAgICAgIC8vIEluaXQgSE1BQ1xyXG4gICAgICAgIHZhciBobWFjID0gSE1BQy5jcmVhdGUoY2ZnLmhhc2hlciwgcGFzc3dvcmQpXHJcblxyXG4gICAgICAgIC8vIEluaXRpYWwgdmFsdWVzXHJcbiAgICAgICAgdmFyIGRlcml2ZWRLZXkgPSBXb3JkQXJyYXkuY3JlYXRlKClcclxuICAgICAgICB2YXIgYmxvY2tJbmRleCA9IFdvcmRBcnJheS5jcmVhdGUoWzB4MDAwMDAwMDFdKVxyXG5cclxuICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICB2YXIgZGVyaXZlZEtleVdvcmRzID0gZGVyaXZlZEtleS53b3Jkc1xyXG4gICAgICAgIHZhciBibG9ja0luZGV4V29yZHMgPSBibG9ja0luZGV4LndvcmRzXHJcbiAgICAgICAgdmFyIGtleVNpemUgPSBjZmcua2V5U2l6ZVxyXG4gICAgICAgIHZhciBpdGVyYXRpb25zID0gY2ZnLml0ZXJhdGlvbnNcclxuXHJcbiAgICAgICAgLy8gR2VuZXJhdGUga2V5XHJcbiAgICAgICAgd2hpbGUgKGRlcml2ZWRLZXlXb3Jkcy5sZW5ndGggPCBrZXlTaXplKSB7XHJcbiAgICAgICAgICB2YXIgYmxvY2sgPSBobWFjLnVwZGF0ZShzYWx0KS5maW5hbGl6ZShibG9ja0luZGV4KVxyXG4gICAgICAgICAgaG1hYy5yZXNldCgpXHJcblxyXG4gICAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgICB2YXIgYmxvY2tXb3JkcyA9IGJsb2NrLndvcmRzXHJcbiAgICAgICAgICB2YXIgYmxvY2tXb3Jkc0xlbmd0aCA9IGJsb2NrV29yZHMubGVuZ3RoXHJcblxyXG4gICAgICAgICAgLy8gSXRlcmF0aW9uc1xyXG4gICAgICAgICAgdmFyIGludGVybWVkaWF0ZSA9IGJsb2NrXHJcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGl0ZXJhdGlvbnM7IGkrKykge1xyXG4gICAgICAgICAgICBpbnRlcm1lZGlhdGUgPSBobWFjLmZpbmFsaXplKGludGVybWVkaWF0ZSlcclxuICAgICAgICAgICAgaG1hYy5yZXNldCgpXHJcblxyXG4gICAgICAgICAgICAvLyBTaG9ydGN1dFxyXG4gICAgICAgICAgICB2YXIgaW50ZXJtZWRpYXRlV29yZHMgPSBpbnRlcm1lZGlhdGUud29yZHNcclxuXHJcbiAgICAgICAgICAgIC8vIFhPUiBpbnRlcm1lZGlhdGUgd2l0aCBibG9ja1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJsb2NrV29yZHNMZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgICAgIGJsb2NrV29yZHNbal0gXj0gaW50ZXJtZWRpYXRlV29yZHNbal1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGRlcml2ZWRLZXkuY29uY2F0KGJsb2NrKVxyXG4gICAgICAgICAgYmxvY2tJbmRleFdvcmRzWzBdKytcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVyaXZlZEtleS5zaWdCeXRlcyA9IGtleVNpemUgKiA0XHJcblxyXG4gICAgICAgIHJldHVybiBkZXJpdmVkS2V5XHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb21wdXRlcyB0aGUgUGFzc3dvcmQtQmFzZWQgS2V5IERlcml2YXRpb24gRnVuY3Rpb24gMi5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cclxuICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gc2FsdCBBIHNhbHQuXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgY29tcHV0YXRpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGVyaXZlZCBrZXkuXHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKlxyXG4gICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5QQktERjIocGFzc3dvcmQsIHNhbHQpO1xyXG4gICAgICogICAgIHZhciBrZXkgPSBDcnlwdG9KUy5QQktERjIocGFzc3dvcmQsIHNhbHQsIHsga2V5U2l6ZTogOCB9KTtcclxuICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuUEJLREYyKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDgsIGl0ZXJhdGlvbnM6IDEwMDAgfSk7XHJcbiAgICAgKi9cclxuICAgIEMuUEJLREYyID0gZnVuY3Rpb24gKHBhc3N3b3JkLCBzYWx0LCBjZmcpIHtcclxuICAgICAgcmV0dXJuIFBCS0RGMi5jcmVhdGUoY2ZnKS5jb21wdXRlKHBhc3N3b3JkLCBzYWx0KVxyXG4gICAgfVxyXG4gIH0oKSk7XHJcblxyXG5cclxuICAoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gU2hvcnRjdXRzXHJcbiAgICB2YXIgQyA9IENyeXB0b0pTXHJcbiAgICB2YXIgQ19saWIgPSBDLmxpYlxyXG4gICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlXHJcbiAgICB2YXIgV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5XHJcbiAgICB2YXIgQ19hbGdvID0gQy5hbGdvXHJcbiAgICB2YXIgTUQ1ID0gQ19hbGdvLk1ENVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbiBpcyBtZWFudCB0byBjb25mb3JtIHdpdGggRVZQX0J5dGVzVG9LZXkuXHJcbiAgICAgKiB3d3cub3BlbnNzbC5vcmcvZG9jcy9jcnlwdG8vRVZQX0J5dGVzVG9LZXkuaHRtbFxyXG4gICAgICovXHJcbiAgICB2YXIgRXZwS0RGID0gQ19hbGdvLkV2cEtERiA9IEJhc2UuZXh0ZW5kKHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cclxuICAgICAgICpcclxuICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGtleVNpemUgVGhlIGtleSBzaXplIGluIHdvcmRzIHRvIGdlbmVyYXRlLiBEZWZhdWx0OiA0ICgxMjggYml0cylcclxuICAgICAgICogQHByb3BlcnR5IHtIYXNoZXJ9IGhhc2hlciBUaGUgaGFzaCBhbGdvcml0aG0gdG8gdXNlLiBEZWZhdWx0OiBNRDVcclxuICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGl0ZXJhdGlvbnMgVGhlIG51bWJlciBvZiBpdGVyYXRpb25zIHRvIHBlcmZvcm0uIERlZmF1bHQ6IDFcclxuICAgICAgICovXHJcbiAgICAgIGNmZzogQmFzZS5leHRlbmQoe1xyXG4gICAgICAgIGtleVNpemU6IDEyOCAvIDMyLFxyXG4gICAgICAgIGhhc2hlcjogTUQ1LFxyXG4gICAgICAgIGl0ZXJhdGlvbnM6IDFcclxuICAgICAgfSksXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoZSBkZXJpdmF0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uRXZwS0RGLmNyZWF0ZSgpO1xyXG4gICAgICAgKiAgICAgdmFyIGtkZiA9IENyeXB0b0pTLmFsZ28uRXZwS0RGLmNyZWF0ZSh7IGtleVNpemU6IDggfSk7XHJcbiAgICAgICAqICAgICB2YXIga2RmID0gQ3J5cHRvSlMuYWxnby5FdnBLREYuY3JlYXRlKHsga2V5U2l6ZTogOCwgaXRlcmF0aW9uczogMTAwMCB9KTtcclxuICAgICAgICovXHJcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIChjZmcpIHtcclxuICAgICAgICB0aGlzLmNmZyA9IHRoaXMuY2ZnLmV4dGVuZChjZmcpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogRGVyaXZlcyBhIGtleSBmcm9tIGEgcGFzc3dvcmQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgQSBzYWx0LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkZXJpdmVkIGtleS5cclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBrZXkgPSBrZGYuY29tcHV0ZShwYXNzd29yZCwgc2FsdCk7XHJcbiAgICAgICAqL1xyXG4gICAgICBjb21wdXRlOiBmdW5jdGlvbiAocGFzc3dvcmQsIHNhbHQpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dFxyXG4gICAgICAgIHZhciBjZmcgPSB0aGlzLmNmZ1xyXG5cclxuICAgICAgICAvLyBJbml0IGhhc2hlclxyXG4gICAgICAgIHZhciBoYXNoZXIgPSBjZmcuaGFzaGVyLmNyZWF0ZSgpXHJcblxyXG4gICAgICAgIC8vIEluaXRpYWwgdmFsdWVzXHJcbiAgICAgICAgdmFyIGRlcml2ZWRLZXkgPSBXb3JkQXJyYXkuY3JlYXRlKClcclxuXHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIGRlcml2ZWRLZXlXb3JkcyA9IGRlcml2ZWRLZXkud29yZHNcclxuICAgICAgICB2YXIga2V5U2l6ZSA9IGNmZy5rZXlTaXplXHJcbiAgICAgICAgdmFyIGl0ZXJhdGlvbnMgPSBjZmcuaXRlcmF0aW9uc1xyXG5cclxuICAgICAgICAvLyBHZW5lcmF0ZSBrZXlcclxuICAgICAgICB3aGlsZSAoZGVyaXZlZEtleVdvcmRzLmxlbmd0aCA8IGtleVNpemUpIHtcclxuICAgICAgICAgIGlmIChibG9jaykge1xyXG4gICAgICAgICAgICBoYXNoZXIudXBkYXRlKGJsb2NrKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdmFyIGJsb2NrID0gaGFzaGVyLnVwZGF0ZShwYXNzd29yZCkuZmluYWxpemUoc2FsdClcclxuICAgICAgICAgIGhhc2hlci5yZXNldCgpXHJcblxyXG4gICAgICAgICAgLy8gSXRlcmF0aW9uc1xyXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBpdGVyYXRpb25zOyBpKyspIHtcclxuICAgICAgICAgICAgYmxvY2sgPSBoYXNoZXIuZmluYWxpemUoYmxvY2spXHJcbiAgICAgICAgICAgIGhhc2hlci5yZXNldCgpXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgZGVyaXZlZEtleS5jb25jYXQoYmxvY2spXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlcml2ZWRLZXkuc2lnQnl0ZXMgPSBrZXlTaXplICogNFxyXG5cclxuICAgICAgICByZXR1cm4gZGVyaXZlZEtleVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVyaXZlcyBhIGtleSBmcm9tIGEgcGFzc3dvcmQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQuXHJcbiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgQSBzYWx0LlxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIGNvbXB1dGF0aW9uLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGRlcml2ZWQga2V5LlxyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICpcclxuICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuRXZwS0RGKHBhc3N3b3JkLCBzYWx0KTtcclxuICAgICAqICAgICB2YXIga2V5ID0gQ3J5cHRvSlMuRXZwS0RGKHBhc3N3b3JkLCBzYWx0LCB7IGtleVNpemU6IDggfSk7XHJcbiAgICAgKiAgICAgdmFyIGtleSA9IENyeXB0b0pTLkV2cEtERihwYXNzd29yZCwgc2FsdCwgeyBrZXlTaXplOiA4LCBpdGVyYXRpb25zOiAxMDAwIH0pO1xyXG4gICAgICovXHJcbiAgICBDLkV2cEtERiA9IGZ1bmN0aW9uIChwYXNzd29yZCwgc2FsdCwgY2ZnKSB7XHJcbiAgICAgIHJldHVybiBFdnBLREYuY3JlYXRlKGNmZykuY29tcHV0ZShwYXNzd29yZCwgc2FsdClcclxuICAgIH1cclxuICB9KCkpO1xyXG5cclxuXHJcbiAgKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgdmFyIEMgPSBDcnlwdG9KU1xyXG4gICAgdmFyIENfbGliID0gQy5saWJcclxuICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXlcclxuICAgIHZhciBDX2FsZ28gPSBDLmFsZ29cclxuICAgIHZhciBTSEEyNTYgPSBDX2FsZ28uU0hBMjU2XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTSEEtMjI0IGhhc2ggYWxnb3JpdGhtLlxyXG4gICAgICovXHJcbiAgICB2YXIgU0hBMjI0ID0gQ19hbGdvLlNIQTIyNCA9IFNIQTI1Ni5leHRlbmQoe1xyXG4gICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX2hhc2ggPSBuZXcgV29yZEFycmF5LmluaXQoW1xyXG4gICAgICAgICAgMHhjMTA1OWVkOCwgMHgzNjdjZDUwNywgMHgzMDcwZGQxNywgMHhmNzBlNTkzOSxcclxuICAgICAgICAgIDB4ZmZjMDBiMzEsIDB4Njg1ODE1MTEsIDB4NjRmOThmYTcsIDB4YmVmYTRmYTRcclxuICAgICAgICBdKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaGFzaCA9IFNIQTI1Ni5fZG9GaW5hbGl6ZS5jYWxsKHRoaXMpXHJcblxyXG4gICAgICAgIGhhc2guc2lnQnl0ZXMgLT0gNFxyXG5cclxuICAgICAgICByZXR1cm4gaGFzaFxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cclxuICAgICAqXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqXHJcbiAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEyMjQoJ21lc3NhZ2UnKTtcclxuICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTIyNCh3b3JkQXJyYXkpO1xyXG4gICAgICovXHJcbiAgICBDLlNIQTIyNCA9IFNIQTI1Ni5fY3JlYXRlSGVscGVyKFNIQTIyNClcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cclxuICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKlxyXG4gICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTIyNChtZXNzYWdlLCBrZXkpO1xyXG4gICAgICovXHJcbiAgICBDLkhtYWNTSEEyMjQgPSBTSEEyNTYuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBMjI0KVxyXG4gIH0oKSk7XHJcblxyXG5cclxuICAoZnVuY3Rpb24gKHVuZGVmaW5lZCkge1xyXG4gICAgLy8gU2hvcnRjdXRzXHJcbiAgICB2YXIgQyA9IENyeXB0b0pTXHJcbiAgICB2YXIgQ19saWIgPSBDLmxpYlxyXG4gICAgdmFyIEJhc2UgPSBDX2xpYi5CYXNlXHJcbiAgICB2YXIgWDMyV29yZEFycmF5ID0gQ19saWIuV29yZEFycmF5XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiB4NjQgbmFtZXNwYWNlLlxyXG4gICAgICovXHJcbiAgICB2YXIgQ194NjQgPSBDLng2NCA9IHt9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIDY0LWJpdCB3b3JkLlxyXG4gICAgICovXHJcbiAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmQgPSBCYXNlLmV4dGVuZCh7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgNjQtYml0IHdvcmQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoaWdoIFRoZSBoaWdoIDMyIGJpdHMuXHJcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsb3cgVGhlIGxvdyAzMiBiaXRzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIHg2NFdvcmQgPSBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgwMDAxMDIwMywgMHgwNDA1MDYwNyk7XHJcbiAgICAgICAqL1xyXG4gICAgICBpbml0OiBmdW5jdGlvbiAoaGlnaCwgbG93KSB7XHJcbiAgICAgICAgdGhpcy5oaWdoID0gaGlnaFxyXG4gICAgICAgIHRoaXMubG93ID0gbG93XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBCaXR3aXNlIE5PVHMgdGhpcyB3b3JkLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtYNjRXb3JkfSBBIG5ldyB4NjQtV29yZCBvYmplY3QgYWZ0ZXIgbmVnYXRpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgbmVnYXRlZCA9IHg2NFdvcmQubm90KCk7XHJcbiAgICAgICAqL1xyXG4gICAgICAvLyBub3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy8gdmFyIGhpZ2ggPSB+dGhpcy5oaWdoO1xyXG4gICAgICAvLyB2YXIgbG93ID0gfnRoaXMubG93O1xyXG5cclxuICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XHJcbiAgICAgIC8vIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQml0d2lzZSBBTkRzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBBTkQgd2l0aCB0aGlzIHdvcmQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBBTkRpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgYW5kZWQgPSB4NjRXb3JkLmFuZChhbm90aGVyWDY0V29yZCk7XHJcbiAgICAgICAqL1xyXG4gICAgICAvLyBhbmQ6IGZ1bmN0aW9uICh3b3JkKSB7XHJcbiAgICAgIC8vIHZhciBoaWdoID0gdGhpcy5oaWdoICYgd29yZC5oaWdoO1xyXG4gICAgICAvLyB2YXIgbG93ID0gdGhpcy5sb3cgJiB3b3JkLmxvdztcclxuXHJcbiAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xyXG4gICAgICAvLyB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEJpdHdpc2UgT1JzIHRoaXMgd29yZCB3aXRoIHRoZSBwYXNzZWQgd29yZC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtYNjRXb3JkfSB3b3JkIFRoZSB4NjQtV29yZCB0byBPUiB3aXRoIHRoaXMgd29yZC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIE9SaW5nLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIG9yZWQgPSB4NjRXb3JkLm9yKGFub3RoZXJYNjRXb3JkKTtcclxuICAgICAgICovXHJcbiAgICAgIC8vIG9yOiBmdW5jdGlvbiAod29yZCkge1xyXG4gICAgICAvLyB2YXIgaGlnaCA9IHRoaXMuaGlnaCB8IHdvcmQuaGlnaDtcclxuICAgICAgLy8gdmFyIGxvdyA9IHRoaXMubG93IHwgd29yZC5sb3c7XHJcblxyXG4gICAgICAvLyByZXR1cm4gWDY0V29yZC5jcmVhdGUoaGlnaCwgbG93KTtcclxuICAgICAgLy8gfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBCaXR3aXNlIFhPUnMgdGhpcyB3b3JkIHdpdGggdGhlIHBhc3NlZCB3b3JkLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIFhPUiB3aXRoIHRoaXMgd29yZC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIFhPUmluZy5cclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciB4b3JlZCA9IHg2NFdvcmQueG9yKGFub3RoZXJYNjRXb3JkKTtcclxuICAgICAgICovXHJcbiAgICAgIC8vIHhvcjogZnVuY3Rpb24gKHdvcmQpIHtcclxuICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggXiB3b3JkLmhpZ2g7XHJcbiAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmxvdyBeIHdvcmQubG93O1xyXG5cclxuICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XHJcbiAgICAgIC8vIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogU2hpZnRzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIGxlZnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgYml0cyB0byBzaGlmdC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHNoaWZ0aW5nLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIHNoaWZ0ZWQgPSB4NjRXb3JkLnNoaWZ0TCgyNSk7XHJcbiAgICAgICAqL1xyXG4gICAgICAvLyBzaGlmdEw6IGZ1bmN0aW9uIChuKSB7XHJcbiAgICAgIC8vIGlmIChuIDwgMzIpIHtcclxuICAgICAgLy8gdmFyIGhpZ2ggPSAodGhpcy5oaWdoIDw8IG4pIHwgKHRoaXMubG93ID4+PiAoMzIgLSBuKSk7XHJcbiAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmxvdyA8PCBuO1xyXG4gICAgICAvLyB9IGVsc2Uge1xyXG4gICAgICAvLyB2YXIgaGlnaCA9IHRoaXMubG93IDw8IChuIC0gMzIpO1xyXG4gICAgICAvLyB2YXIgbG93ID0gMDtcclxuICAgICAgLy8gfVxyXG5cclxuICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XHJcbiAgICAgIC8vIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogU2hpZnRzIHRoaXMgd29yZCBuIGJpdHMgdG8gdGhlIHJpZ2h0LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIGJpdHMgdG8gc2hpZnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciBzaGlmdGluZy5cclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBzaGlmdGVkID0geDY0V29yZC5zaGlmdFIoNyk7XHJcbiAgICAgICAqL1xyXG4gICAgICAvLyBzaGlmdFI6IGZ1bmN0aW9uIChuKSB7XHJcbiAgICAgIC8vIGlmIChuIDwgMzIpIHtcclxuICAgICAgLy8gdmFyIGxvdyA9ICh0aGlzLmxvdyA+Pj4gbikgfCAodGhpcy5oaWdoIDw8ICgzMiAtIG4pKTtcclxuICAgICAgLy8gdmFyIGhpZ2ggPSB0aGlzLmhpZ2ggPj4+IG47XHJcbiAgICAgIC8vIH0gZWxzZSB7XHJcbiAgICAgIC8vIHZhciBsb3cgPSB0aGlzLmhpZ2ggPj4+IChuIC0gMzIpO1xyXG4gICAgICAvLyB2YXIgaGlnaCA9IDA7XHJcbiAgICAgIC8vIH1cclxuXHJcbiAgICAgIC8vIHJldHVybiBYNjRXb3JkLmNyZWF0ZShoaWdoLCBsb3cpO1xyXG4gICAgICAvLyB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFJvdGF0ZXMgdGhpcyB3b3JkIG4gYml0cyB0byB0aGUgbGVmdC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBiaXRzIHRvIHJvdGF0ZS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIHJvdGF0aW5nLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIHJvdGF0ZWQgPSB4NjRXb3JkLnJvdEwoMjUpO1xyXG4gICAgICAgKi9cclxuICAgICAgLy8gcm90TDogZnVuY3Rpb24gKG4pIHtcclxuICAgICAgLy8gcmV0dXJuIHRoaXMuc2hpZnRMKG4pLm9yKHRoaXMuc2hpZnRSKDY0IC0gbikpO1xyXG4gICAgICAvLyB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIFJvdGF0ZXMgdGhpcyB3b3JkIG4gYml0cyB0byB0aGUgcmlnaHQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgYml0cyB0byByb3RhdGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge1g2NFdvcmR9IEEgbmV3IHg2NC1Xb3JkIG9iamVjdCBhZnRlciByb3RhdGluZy5cclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciByb3RhdGVkID0geDY0V29yZC5yb3RSKDcpO1xyXG4gICAgICAgKi9cclxuICAgICAgLy8gcm90UjogZnVuY3Rpb24gKG4pIHtcclxuICAgICAgLy8gcmV0dXJuIHRoaXMuc2hpZnRSKG4pLm9yKHRoaXMuc2hpZnRMKDY0IC0gbikpO1xyXG4gICAgICAvLyB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIEFkZHMgdGhpcyB3b3JkIHdpdGggdGhlIHBhc3NlZCB3b3JkLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1g2NFdvcmR9IHdvcmQgVGhlIHg2NC1Xb3JkIHRvIGFkZCB3aXRoIHRoaXMgd29yZC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7WDY0V29yZH0gQSBuZXcgeDY0LVdvcmQgb2JqZWN0IGFmdGVyIGFkZGluZy5cclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBhZGRlZCA9IHg2NFdvcmQuYWRkKGFub3RoZXJYNjRXb3JkKTtcclxuICAgICAgICovXHJcbiAgICAgIC8vIGFkZDogZnVuY3Rpb24gKHdvcmQpIHtcclxuICAgICAgLy8gdmFyIGxvdyA9ICh0aGlzLmxvdyArIHdvcmQubG93KSB8IDA7XHJcbiAgICAgIC8vIHZhciBjYXJyeSA9IChsb3cgPj4+IDApIDwgKHRoaXMubG93ID4+PiAwKSA/IDEgOiAwO1xyXG4gICAgICAvLyB2YXIgaGlnaCA9ICh0aGlzLmhpZ2ggKyB3b3JkLmhpZ2ggKyBjYXJyeSkgfCAwO1xyXG5cclxuICAgICAgLy8gcmV0dXJuIFg2NFdvcmQuY3JlYXRlKGhpZ2gsIGxvdyk7XHJcbiAgICAgIC8vIH1cclxuICAgIH0pXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBbiBhcnJheSBvZiA2NC1iaXQgd29yZHMuXHJcbiAgICAgKlxyXG4gICAgICogQHByb3BlcnR5IHtBcnJheX0gd29yZHMgVGhlIGFycmF5IG9mIENyeXB0b0pTLng2NC5Xb3JkIG9iamVjdHMuXHJcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gc2lnQnl0ZXMgVGhlIG51bWJlciBvZiBzaWduaWZpY2FudCBieXRlcyBpbiB0aGlzIHdvcmQgYXJyYXkuXHJcbiAgICAgKi9cclxuICAgIHZhciBYNjRXb3JkQXJyYXkgPSBDX3g2NC5Xb3JkQXJyYXkgPSBCYXNlLmV4dGVuZCh7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgd29yZCBhcnJheS5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgKE9wdGlvbmFsKSBBbiBhcnJheSBvZiBDcnlwdG9KUy54NjQuV29yZCBvYmplY3RzLlxyXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2lnQnl0ZXMgKE9wdGlvbmFsKSBUaGUgbnVtYmVyIG9mIHNpZ25pZmljYW50IGJ5dGVzIGluIHRoZSB3b3Jkcy5cclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy54NjQuV29yZEFycmF5LmNyZWF0ZSgpO1xyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIHdvcmRBcnJheSA9IENyeXB0b0pTLng2NC5Xb3JkQXJyYXkuY3JlYXRlKFtcclxuICAgICAgICogICAgICAgICBDcnlwdG9KUy54NjQuV29yZC5jcmVhdGUoMHgwMDAxMDIwMywgMHgwNDA1MDYwNyksXHJcbiAgICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MTgxOTFhMWIsIDB4MWMxZDFlMWYpXHJcbiAgICAgICAqICAgICBdKTtcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciB3b3JkQXJyYXkgPSBDcnlwdG9KUy54NjQuV29yZEFycmF5LmNyZWF0ZShbXHJcbiAgICAgICAqICAgICAgICAgQ3J5cHRvSlMueDY0LldvcmQuY3JlYXRlKDB4MDAwMTAyMDMsIDB4MDQwNTA2MDcpLFxyXG4gICAgICAgKiAgICAgICAgIENyeXB0b0pTLng2NC5Xb3JkLmNyZWF0ZSgweDE4MTkxYTFiLCAweDFjMWQxZTFmKVxyXG4gICAgICAgKiAgICAgXSwgMTApO1xyXG4gICAgICAgKi9cclxuICAgICAgaW5pdDogZnVuY3Rpb24gKHdvcmRzLCBzaWdCeXRlcykge1xyXG4gICAgICAgIHdvcmRzID0gdGhpcy53b3JkcyA9IHdvcmRzIHx8IFtdXHJcblxyXG4gICAgICAgIGlmIChzaWdCeXRlcyAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHRoaXMuc2lnQnl0ZXMgPSBzaWdCeXRlc1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLnNpZ0J5dGVzID0gd29yZHMubGVuZ3RoICogOFxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb252ZXJ0cyB0aGlzIDY0LWJpdCB3b3JkIGFycmF5IHRvIGEgMzItYml0IHdvcmQgYXJyYXkuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge0NyeXB0b0pTLmxpYi5Xb3JkQXJyYXl9IFRoaXMgd29yZCBhcnJheSdzIGRhdGEgYXMgYSAzMi1iaXQgd29yZCBhcnJheS5cclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciB4MzJXb3JkQXJyYXkgPSB4NjRXb3JkQXJyYXkudG9YMzIoKTtcclxuICAgICAgICovXHJcbiAgICAgIHRvWDMyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIHg2NFdvcmRzID0gdGhpcy53b3Jkc1xyXG4gICAgICAgIHZhciB4NjRXb3Jkc0xlbmd0aCA9IHg2NFdvcmRzLmxlbmd0aFxyXG5cclxuICAgICAgICAvLyBDb252ZXJ0XHJcbiAgICAgICAgdmFyIHgzMldvcmRzID0gW11cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHg2NFdvcmRzTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIHZhciB4NjRXb3JkID0geDY0V29yZHNbaV1cclxuICAgICAgICAgIHgzMldvcmRzLnB1c2goeDY0V29yZC5oaWdoKVxyXG4gICAgICAgICAgeDMyV29yZHMucHVzaCh4NjRXb3JkLmxvdylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBYMzJXb3JkQXJyYXkuY3JlYXRlKHgzMldvcmRzLCB0aGlzLnNpZ0J5dGVzKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENyZWF0ZXMgYSBjb3B5IG9mIHRoaXMgd29yZCBhcnJheS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7WDY0V29yZEFycmF5fSBUaGUgY2xvbmUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgY2xvbmUgPSB4NjRXb3JkQXJyYXkuY2xvbmUoKTtcclxuICAgICAgICovXHJcbiAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNsb25lID0gQmFzZS5jbG9uZS5jYWxsKHRoaXMpXHJcblxyXG4gICAgICAgIC8vIENsb25lIFwid29yZHNcIiBhcnJheVxyXG4gICAgICAgIHZhciB3b3JkcyA9IGNsb25lLndvcmRzID0gdGhpcy53b3Jkcy5zbGljZSgwKVxyXG5cclxuICAgICAgICAvLyBDbG9uZSBlYWNoIFg2NFdvcmQgb2JqZWN0XHJcbiAgICAgICAgdmFyIHdvcmRzTGVuZ3RoID0gd29yZHMubGVuZ3RoXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3b3Jkc0xlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICB3b3Jkc1tpXSA9IHdvcmRzW2ldLmNsb25lKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjbG9uZVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH0oKSk7XHJcblxyXG5cclxuICAoZnVuY3Rpb24gKE1hdGgpIHtcclxuICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgdmFyIEMgPSBDcnlwdG9KU1xyXG4gICAgdmFyIENfbGliID0gQy5saWJcclxuICAgIHZhciBXb3JkQXJyYXkgPSBDX2xpYi5Xb3JkQXJyYXlcclxuICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXJcclxuICAgIHZhciBDX3g2NCA9IEMueDY0XHJcbiAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmRcclxuICAgIHZhciBDX2FsZ28gPSBDLmFsZ29cclxuXHJcbiAgICAvLyBDb25zdGFudHMgdGFibGVzXHJcbiAgICB2YXIgUkhPX09GRlNFVFMgPSBbXVxyXG4gICAgdmFyIFBJX0lOREVYRVMgPSBbXVxyXG4gICAgdmFyIFJPVU5EX0NPTlNUQU5UUyA9IFtdO1xyXG5cclxuICAgIC8vIENvbXB1dGUgQ29uc3RhbnRzXHJcbiAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAvLyBDb21wdXRlIHJobyBvZmZzZXQgY29uc3RhbnRzXHJcbiAgICAgIHZhciB4ID0gMSxcclxuICAgICAgICB5ID0gMFxyXG4gICAgICBmb3IgKHZhciB0ID0gMDsgdCA8IDI0OyB0KyspIHtcclxuICAgICAgICBSSE9fT0ZGU0VUU1t4ICsgNSAqIHldID0gKCh0ICsgMSkgKiAodCArIDIpIC8gMikgJSA2NFxyXG5cclxuICAgICAgICB2YXIgbmV3WCA9IHkgJSA1XHJcbiAgICAgICAgdmFyIG5ld1kgPSAoMiAqIHggKyAzICogeSkgJSA1XHJcbiAgICAgICAgeCA9IG5ld1hcclxuICAgICAgICB5ID0gbmV3WVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDb21wdXRlIHBpIGluZGV4IGNvbnN0YW50c1xyXG4gICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xyXG4gICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgNTsgeSsrKSB7XHJcbiAgICAgICAgICBQSV9JTkRFWEVTW3ggKyA1ICogeV0gPSB5ICsgKCgyICogeCArIDMgKiB5KSAlIDUpICogNVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ29tcHV0ZSByb3VuZCBjb25zdGFudHNcclxuICAgICAgdmFyIExGU1IgPSAweDAxXHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjQ7IGkrKykge1xyXG4gICAgICAgIHZhciByb3VuZENvbnN0YW50TXN3ID0gMFxyXG4gICAgICAgIHZhciByb3VuZENvbnN0YW50THN3ID0gMFxyXG5cclxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDc7IGorKykge1xyXG4gICAgICAgICAgaWYgKExGU1IgJiAweDAxKSB7XHJcbiAgICAgICAgICAgIHZhciBiaXRQb3NpdGlvbiA9ICgxIDw8IGopIC0gMVxyXG4gICAgICAgICAgICBpZiAoYml0UG9zaXRpb24gPCAzMikge1xyXG4gICAgICAgICAgICAgIHJvdW5kQ29uc3RhbnRMc3cgXj0gMSA8PCBiaXRQb3NpdGlvblxyXG4gICAgICAgICAgICB9IGVsc2UgLyogaWYgKGJpdFBvc2l0aW9uID49IDMyKSAqLyB7XHJcbiAgICAgICAgICAgICAgcm91bmRDb25zdGFudE1zdyBePSAxIDw8IChiaXRQb3NpdGlvbiAtIDMyKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gQ29tcHV0ZSBuZXh0IExGU1JcclxuICAgICAgICAgIGlmIChMRlNSICYgMHg4MCkge1xyXG4gICAgICAgICAgICAvLyBQcmltaXRpdmUgcG9seW5vbWlhbCBvdmVyIEdGKDIpOiB4XjggKyB4XjYgKyB4XjUgKyB4XjQgKyAxXHJcbiAgICAgICAgICAgIExGU1IgPSAoTEZTUiA8PCAxKSBeIDB4NzFcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIExGU1IgPDw9IDFcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFJPVU5EX0NPTlNUQU5UU1tpXSA9IFg2NFdvcmQuY3JlYXRlKHJvdW5kQ29uc3RhbnRNc3csIHJvdW5kQ29uc3RhbnRMc3cpXHJcbiAgICAgIH1cclxuICAgIH0oKSlcclxuXHJcbiAgICAvLyBSZXVzYWJsZSBvYmplY3RzIGZvciB0ZW1wb3JhcnkgdmFsdWVzXHJcbiAgICB2YXIgVCA9IFtdO1xyXG4gICAgKGZ1bmN0aW9uICgpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAyNTsgaSsrKSB7XHJcbiAgICAgICAgVFtpXSA9IFg2NFdvcmQuY3JlYXRlKClcclxuICAgICAgfVxyXG4gICAgfSgpKVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU0hBLTMgaGFzaCBhbGdvcml0aG0uXHJcbiAgICAgKi9cclxuICAgIHZhciBTSEEzID0gQ19hbGdvLlNIQTMgPSBIYXNoZXIuZXh0ZW5kKHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cclxuICAgICAgICpcclxuICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IG91dHB1dExlbmd0aFxyXG4gICAgICAgKiAgIFRoZSBkZXNpcmVkIG51bWJlciBvZiBiaXRzIGluIHRoZSBvdXRwdXQgaGFzaC5cclxuICAgICAgICogICBPbmx5IHZhbHVlcyBwZXJtaXR0ZWQgYXJlOiAyMjQsIDI1NiwgMzg0LCA1MTIuXHJcbiAgICAgICAqICAgRGVmYXVsdDogNTEyXHJcbiAgICAgICAqL1xyXG4gICAgICBjZmc6IEhhc2hlci5jZmcuZXh0ZW5kKHtcclxuICAgICAgICBvdXRwdXRMZW5ndGg6IDUxMlxyXG4gICAgICB9KSxcclxuXHJcbiAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGUgPSBbXVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU7IGkrKykge1xyXG4gICAgICAgICAgc3RhdGVbaV0gPSBuZXcgWDY0V29yZC5pbml0KClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYmxvY2tTaXplID0gKDE2MDAgLSAyICogdGhpcy5jZmcub3V0cHV0TGVuZ3RoKSAvIDMyXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBfZG9Qcm9jZXNzQmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLl9zdGF0ZVxyXG4gICAgICAgIHZhciBuQmxvY2tTaXplTGFuZXMgPSB0aGlzLmJsb2NrU2l6ZSAvIDJcclxuXHJcbiAgICAgICAgLy8gQWJzb3JiXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuQmxvY2tTaXplTGFuZXM7IGkrKykge1xyXG4gICAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgICB2YXIgTTJpID0gTVtvZmZzZXQgKyAyICogaV1cclxuICAgICAgICAgIHZhciBNMmkxID0gTVtvZmZzZXQgKyAyICogaSArIDFdXHJcblxyXG4gICAgICAgICAgLy8gU3dhcCBlbmRpYW5cclxuICAgICAgICAgIE0yaSA9IChcclxuICAgICAgICAgICAgKCgoTTJpIDw8IDgpIHwgKE0yaSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcclxuICAgICAgICAgICAgKCgoTTJpIDw8IDI0KSB8IChNMmkgPj4+IDgpKSAmIDB4ZmYwMGZmMDApXHJcbiAgICAgICAgICApXHJcbiAgICAgICAgICBNMmkxID0gKFxyXG4gICAgICAgICAgICAoKChNMmkxIDw8IDgpIHwgKE0yaTEgPj4+IDI0KSkgJiAweDAwZmYwMGZmKSB8XHJcbiAgICAgICAgICAgICgoKE0yaTEgPDwgMjQpIHwgKE0yaTEgPj4+IDgpKSAmIDB4ZmYwMGZmMDApXHJcbiAgICAgICAgICApXHJcblxyXG4gICAgICAgICAgLy8gQWJzb3JiIG1lc3NhZ2UgaW50byBzdGF0ZVxyXG4gICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtpXVxyXG4gICAgICAgICAgbGFuZS5oaWdoIF49IE0yaTFcclxuICAgICAgICAgIGxhbmUubG93IF49IE0yaVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUm91bmRzXHJcbiAgICAgICAgZm9yICh2YXIgcm91bmQgPSAwOyByb3VuZCA8IDI0OyByb3VuZCsrKSB7XHJcbiAgICAgICAgICAvLyBUaGV0YVxyXG4gICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCA1OyB4KyspIHtcclxuICAgICAgICAgICAgLy8gTWl4IGNvbHVtbiBsYW5lc1xyXG4gICAgICAgICAgICB2YXIgdE1zdyA9IDAsXHJcbiAgICAgICAgICAgICAgdExzdyA9IDBcclxuICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHtcclxuICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW3ggKyA1ICogeV1cclxuICAgICAgICAgICAgICB0TXN3IF49IGxhbmUuaGlnaFxyXG4gICAgICAgICAgICAgIHRMc3cgXj0gbGFuZS5sb3dcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVGVtcG9yYXJ5IHZhbHVlc1xyXG4gICAgICAgICAgICB2YXIgVHggPSBUW3hdXHJcbiAgICAgICAgICAgIFR4LmhpZ2ggPSB0TXN3XHJcbiAgICAgICAgICAgIFR4LmxvdyA9IHRMc3dcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgNTsgeCsrKSB7XHJcbiAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgICAgICB2YXIgVHg0ID0gVFsoeCArIDQpICUgNV1cclxuICAgICAgICAgICAgdmFyIFR4MSA9IFRbKHggKyAxKSAlIDVdXHJcbiAgICAgICAgICAgIHZhciBUeDFNc3cgPSBUeDEuaGlnaFxyXG4gICAgICAgICAgICB2YXIgVHgxTHN3ID0gVHgxLmxvd1xyXG5cclxuICAgICAgICAgICAgLy8gTWl4IHN1cnJvdW5kaW5nIGNvbHVtbnNcclxuICAgICAgICAgICAgdmFyIHRNc3cgPSBUeDQuaGlnaCBeICgoVHgxTXN3IDw8IDEpIHwgKFR4MUxzdyA+Pj4gMzEpKVxyXG4gICAgICAgICAgICB2YXIgdExzdyA9IFR4NC5sb3cgXiAoKFR4MUxzdyA8PCAxKSB8IChUeDFNc3cgPj4+IDMxKSlcclxuICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCA1OyB5KyspIHtcclxuICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW3ggKyA1ICogeV1cclxuICAgICAgICAgICAgICBsYW5lLmhpZ2ggXj0gdE1zd1xyXG4gICAgICAgICAgICAgIGxhbmUubG93IF49IHRMc3dcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFJobyBQaVxyXG4gICAgICAgICAgZm9yICh2YXIgbGFuZUluZGV4ID0gMTsgbGFuZUluZGV4IDwgMjU7IGxhbmVJbmRleCsrKSB7XHJcbiAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW2xhbmVJbmRleF1cclxuICAgICAgICAgICAgdmFyIGxhbmVNc3cgPSBsYW5lLmhpZ2hcclxuICAgICAgICAgICAgdmFyIGxhbmVMc3cgPSBsYW5lLmxvd1xyXG4gICAgICAgICAgICB2YXIgcmhvT2Zmc2V0ID0gUkhPX09GRlNFVFNbbGFuZUluZGV4XVxyXG5cclxuICAgICAgICAgICAgLy8gUm90YXRlIGxhbmVzXHJcbiAgICAgICAgICAgIGlmIChyaG9PZmZzZXQgPCAzMikge1xyXG4gICAgICAgICAgICAgIHZhciB0TXN3ID0gKGxhbmVNc3cgPDwgcmhvT2Zmc2V0KSB8IChsYW5lTHN3ID4+PiAoMzIgLSByaG9PZmZzZXQpKVxyXG4gICAgICAgICAgICAgIHZhciB0THN3ID0gKGxhbmVMc3cgPDwgcmhvT2Zmc2V0KSB8IChsYW5lTXN3ID4+PiAoMzIgLSByaG9PZmZzZXQpKVxyXG4gICAgICAgICAgICB9IGVsc2UgLyogaWYgKHJob09mZnNldCA+PSAzMikgKi8ge1xyXG4gICAgICAgICAgICAgIHZhciB0TXN3ID0gKGxhbmVMc3cgPDwgKHJob09mZnNldCAtIDMyKSkgfCAobGFuZU1zdyA+Pj4gKDY0IC0gcmhvT2Zmc2V0KSlcclxuICAgICAgICAgICAgICB2YXIgdExzdyA9IChsYW5lTXN3IDw8IChyaG9PZmZzZXQgLSAzMikpIHwgKGxhbmVMc3cgPj4+ICg2NCAtIHJob09mZnNldCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFRyYW5zcG9zZSBsYW5lc1xyXG4gICAgICAgICAgICB2YXIgVFBpTGFuZSA9IFRbUElfSU5ERVhFU1tsYW5lSW5kZXhdXVxyXG4gICAgICAgICAgICBUUGlMYW5lLmhpZ2ggPSB0TXN3XHJcbiAgICAgICAgICAgIFRQaUxhbmUubG93ID0gdExzd1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFJobyBwaSBhdCB4ID0geSA9IDBcclxuICAgICAgICAgIHZhciBUMCA9IFRbMF1cclxuICAgICAgICAgIHZhciBzdGF0ZTAgPSBzdGF0ZVswXVxyXG4gICAgICAgICAgVDAuaGlnaCA9IHN0YXRlMC5oaWdoXHJcbiAgICAgICAgICBUMC5sb3cgPSBzdGF0ZTAubG93XHJcblxyXG4gICAgICAgICAgLy8gQ2hpXHJcbiAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IDU7IHgrKykge1xyXG4gICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IDU7IHkrKykge1xyXG4gICAgICAgICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgICAgICAgIHZhciBsYW5lSW5kZXggPSB4ICsgNSAqIHlcclxuICAgICAgICAgICAgICB2YXIgbGFuZSA9IHN0YXRlW2xhbmVJbmRleF1cclxuICAgICAgICAgICAgICB2YXIgVExhbmUgPSBUW2xhbmVJbmRleF1cclxuICAgICAgICAgICAgICB2YXIgVHgxTGFuZSA9IFRbKCh4ICsgMSkgJSA1KSArIDUgKiB5XVxyXG4gICAgICAgICAgICAgIHZhciBUeDJMYW5lID0gVFsoKHggKyAyKSAlIDUpICsgNSAqIHldXHJcblxyXG4gICAgICAgICAgICAgIC8vIE1peCByb3dzXHJcbiAgICAgICAgICAgICAgbGFuZS5oaWdoID0gVExhbmUuaGlnaCBeICh+VHgxTGFuZS5oaWdoICYgVHgyTGFuZS5oaWdoKVxyXG4gICAgICAgICAgICAgIGxhbmUubG93ID0gVExhbmUubG93IF4gKH5UeDFMYW5lLmxvdyAmIFR4MkxhbmUubG93KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gSW90YVxyXG4gICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVswXVxyXG4gICAgICAgICAgdmFyIHJvdW5kQ29uc3RhbnQgPSBST1VORF9DT05TVEFOVFNbcm91bmRdXHJcbiAgICAgICAgICBsYW5lLmhpZ2ggXj0gcm91bmRDb25zdGFudC5oaWdoXHJcbiAgICAgICAgICBsYW5lLmxvdyBePSByb3VuZENvbnN0YW50Lmxvd1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcbiAgICAgIF9kb0ZpbmFsaXplOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9kYXRhXHJcbiAgICAgICAgdmFyIGRhdGFXb3JkcyA9IGRhdGEud29yZHNcclxuICAgICAgICB2YXIgbkJpdHNUb3RhbCA9IHRoaXMuX25EYXRhQnl0ZXMgKiA4XHJcbiAgICAgICAgdmFyIG5CaXRzTGVmdCA9IGRhdGEuc2lnQnl0ZXMgKiA4XHJcbiAgICAgICAgdmFyIGJsb2NrU2l6ZUJpdHMgPSB0aGlzLmJsb2NrU2l6ZSAqIDMyXHJcblxyXG4gICAgICAgIC8vIEFkZCBwYWRkaW5nXHJcbiAgICAgICAgZGF0YVdvcmRzW25CaXRzTGVmdCA+Pj4gNV0gfD0gMHgxIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKVxyXG4gICAgICAgIGRhdGFXb3Jkc1soKE1hdGguY2VpbCgobkJpdHNMZWZ0ICsgMSkgLyBibG9ja1NpemVCaXRzKSAqIGJsb2NrU2l6ZUJpdHMpID4+PiA1KSAtIDFdIHw9IDB4ODBcclxuICAgICAgICBkYXRhLnNpZ0J5dGVzID0gZGF0YVdvcmRzLmxlbmd0aCAqIDRcclxuXHJcbiAgICAgICAgLy8gSGFzaCBmaW5hbCBibG9ja3NcclxuICAgICAgICB0aGlzLl9wcm9jZXNzKClcclxuXHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5fc3RhdGVcclxuICAgICAgICB2YXIgb3V0cHV0TGVuZ3RoQnl0ZXMgPSB0aGlzLmNmZy5vdXRwdXRMZW5ndGggLyA4XHJcbiAgICAgICAgdmFyIG91dHB1dExlbmd0aExhbmVzID0gb3V0cHV0TGVuZ3RoQnl0ZXMgLyA4XHJcblxyXG4gICAgICAgIC8vIFNxdWVlemVcclxuICAgICAgICB2YXIgaGFzaFdvcmRzID0gW11cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG91dHB1dExlbmd0aExhbmVzOyBpKyspIHtcclxuICAgICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgICAgdmFyIGxhbmUgPSBzdGF0ZVtpXVxyXG4gICAgICAgICAgdmFyIGxhbmVNc3cgPSBsYW5lLmhpZ2hcclxuICAgICAgICAgIHZhciBsYW5lTHN3ID0gbGFuZS5sb3dcclxuXHJcbiAgICAgICAgICAvLyBTd2FwIGVuZGlhblxyXG4gICAgICAgICAgbGFuZU1zdyA9IChcclxuICAgICAgICAgICAgKCgobGFuZU1zdyA8PCA4KSB8IChsYW5lTXN3ID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxyXG4gICAgICAgICAgICAoKChsYW5lTXN3IDw8IDI0KSB8IChsYW5lTXN3ID4+PiA4KSkgJiAweGZmMDBmZjAwKVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICAgbGFuZUxzdyA9IChcclxuICAgICAgICAgICAgKCgobGFuZUxzdyA8PCA4KSB8IChsYW5lTHN3ID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxyXG4gICAgICAgICAgICAoKChsYW5lTHN3IDw8IDI0KSB8IChsYW5lTHN3ID4+PiA4KSkgJiAweGZmMDBmZjAwKVxyXG4gICAgICAgICAgKVxyXG5cclxuICAgICAgICAgIC8vIFNxdWVlemUgc3RhdGUgdG8gcmV0cmlldmUgaGFzaFxyXG4gICAgICAgICAgaGFzaFdvcmRzLnB1c2gobGFuZUxzdylcclxuICAgICAgICAgIGhhc2hXb3Jkcy5wdXNoKGxhbmVNc3cpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXR1cm4gZmluYWwgY29tcHV0ZWQgaGFzaFxyXG4gICAgICAgIHJldHVybiBuZXcgV29yZEFycmF5LmluaXQoaGFzaFdvcmRzLCBvdXRwdXRMZW5ndGhCeXRlcylcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcylcclxuXHJcbiAgICAgICAgdmFyIHN0YXRlID0gY2xvbmUuX3N0YXRlID0gdGhpcy5fc3RhdGUuc2xpY2UoMClcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1OyBpKyspIHtcclxuICAgICAgICAgIHN0YXRlW2ldID0gc3RhdGVbaV0uY2xvbmUoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNsb25lXHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgaGFzaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBoYXNoLlxyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICpcclxuICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTMoJ21lc3NhZ2UnKTtcclxuICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTMod29yZEFycmF5KTtcclxuICAgICAqL1xyXG4gICAgQy5TSEEzID0gSGFzaGVyLl9jcmVhdGVIZWxwZXIoU0hBMylcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cclxuICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKlxyXG4gICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTMobWVzc2FnZSwga2V5KTtcclxuICAgICAqL1xyXG4gICAgQy5IbWFjU0hBMyA9IEhhc2hlci5fY3JlYXRlSG1hY0hlbHBlcihTSEEzKVxyXG4gIH0oTWF0aCkpO1xyXG5cclxuXHJcbiAgKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgdmFyIEMgPSBDcnlwdG9KU1xyXG4gICAgdmFyIENfbGliID0gQy5saWJcclxuICAgIHZhciBIYXNoZXIgPSBDX2xpYi5IYXNoZXJcclxuICAgIHZhciBDX3g2NCA9IEMueDY0XHJcbiAgICB2YXIgWDY0V29yZCA9IENfeDY0LldvcmRcclxuICAgIHZhciBYNjRXb3JkQXJyYXkgPSBDX3g2NC5Xb3JkQXJyYXlcclxuICAgIHZhciBDX2FsZ28gPSBDLmFsZ29cclxuXHJcbiAgICBmdW5jdGlvbiBYNjRXb3JkX2NyZWF0ZSgpIHtcclxuICAgICAgcmV0dXJuIFg2NFdvcmQuY3JlYXRlLmFwcGx5KFg2NFdvcmQsIGFyZ3VtZW50cylcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb25zdGFudHNcclxuICAgIHZhciBLID0gW1xyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweDQyOGEyZjk4LCAweGQ3MjhhZTIyKSwgWDY0V29yZF9jcmVhdGUoMHg3MTM3NDQ5MSwgMHgyM2VmNjVjZCksXHJcbiAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YjVjMGZiY2YsIDB4ZWM0ZDNiMmYpLCBYNjRXb3JkX2NyZWF0ZSgweGU5YjVkYmE1LCAweDgxODlkYmJjKSxcclxuICAgICAgWDY0V29yZF9jcmVhdGUoMHgzOTU2YzI1YiwgMHhmMzQ4YjUzOCksIFg2NFdvcmRfY3JlYXRlKDB4NTlmMTExZjEsIDB4YjYwNWQwMTkpLFxyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweDkyM2Y4MmE0LCAweGFmMTk0ZjliKSwgWDY0V29yZF9jcmVhdGUoMHhhYjFjNWVkNSwgMHhkYTZkODExOCksXHJcbiAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZDgwN2FhOTgsIDB4YTMwMzAyNDIpLCBYNjRXb3JkX2NyZWF0ZSgweDEyODM1YjAxLCAweDQ1NzA2ZmJlKSxcclxuICAgICAgWDY0V29yZF9jcmVhdGUoMHgyNDMxODViZSwgMHg0ZWU0YjI4YyksIFg2NFdvcmRfY3JlYXRlKDB4NTUwYzdkYzMsIDB4ZDVmZmI0ZTIpLFxyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweDcyYmU1ZDc0LCAweGYyN2I4OTZmKSwgWDY0V29yZF9jcmVhdGUoMHg4MGRlYjFmZSwgMHgzYjE2OTZiMSksXHJcbiAgICAgIFg2NFdvcmRfY3JlYXRlKDB4OWJkYzA2YTcsIDB4MjVjNzEyMzUpLCBYNjRXb3JkX2NyZWF0ZSgweGMxOWJmMTc0LCAweGNmNjkyNjk0KSxcclxuICAgICAgWDY0V29yZF9jcmVhdGUoMHhlNDliNjljMSwgMHg5ZWYxNGFkMiksIFg2NFdvcmRfY3JlYXRlKDB4ZWZiZTQ3ODYsIDB4Mzg0ZjI1ZTMpLFxyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweDBmYzE5ZGM2LCAweDhiOGNkNWI1KSwgWDY0V29yZF9jcmVhdGUoMHgyNDBjYTFjYywgMHg3N2FjOWM2NSksXHJcbiAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MmRlOTJjNmYsIDB4NTkyYjAyNzUpLCBYNjRXb3JkX2NyZWF0ZSgweDRhNzQ4NGFhLCAweDZlYTZlNDgzKSxcclxuICAgICAgWDY0V29yZF9jcmVhdGUoMHg1Y2IwYTlkYywgMHhiZDQxZmJkNCksIFg2NFdvcmRfY3JlYXRlKDB4NzZmOTg4ZGEsIDB4ODMxMTUzYjUpLFxyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweDk4M2U1MTUyLCAweGVlNjZkZmFiKSwgWDY0V29yZF9jcmVhdGUoMHhhODMxYzY2ZCwgMHgyZGI0MzIxMCksXHJcbiAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YjAwMzI3YzgsIDB4OThmYjIxM2YpLCBYNjRXb3JkX2NyZWF0ZSgweGJmNTk3ZmM3LCAweGJlZWYwZWU0KSxcclxuICAgICAgWDY0V29yZF9jcmVhdGUoMHhjNmUwMGJmMywgMHgzZGE4OGZjMiksIFg2NFdvcmRfY3JlYXRlKDB4ZDVhNzkxNDcsIDB4OTMwYWE3MjUpLFxyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweDA2Y2E2MzUxLCAweGUwMDM4MjZmKSwgWDY0V29yZF9jcmVhdGUoMHgxNDI5Mjk2NywgMHgwYTBlNmU3MCksXHJcbiAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MjdiNzBhODUsIDB4NDZkMjJmZmMpLCBYNjRXb3JkX2NyZWF0ZSgweDJlMWIyMTM4LCAweDVjMjZjOTI2KSxcclxuICAgICAgWDY0V29yZF9jcmVhdGUoMHg0ZDJjNmRmYywgMHg1YWM0MmFlZCksIFg2NFdvcmRfY3JlYXRlKDB4NTMzODBkMTMsIDB4OWQ5NWIzZGYpLFxyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweDY1MGE3MzU0LCAweDhiYWY2M2RlKSwgWDY0V29yZF9jcmVhdGUoMHg3NjZhMGFiYiwgMHgzYzc3YjJhOCksXHJcbiAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ODFjMmM5MmUsIDB4NDdlZGFlZTYpLCBYNjRXb3JkX2NyZWF0ZSgweDkyNzIyYzg1LCAweDE0ODIzNTNiKSxcclxuICAgICAgWDY0V29yZF9jcmVhdGUoMHhhMmJmZThhMSwgMHg0Y2YxMDM2NCksIFg2NFdvcmRfY3JlYXRlKDB4YTgxYTY2NGIsIDB4YmM0MjMwMDEpLFxyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweGMyNGI4YjcwLCAweGQwZjg5NzkxKSwgWDY0V29yZF9jcmVhdGUoMHhjNzZjNTFhMywgMHgwNjU0YmUzMCksXHJcbiAgICAgIFg2NFdvcmRfY3JlYXRlKDB4ZDE5MmU4MTksIDB4ZDZlZjUyMTgpLCBYNjRXb3JkX2NyZWF0ZSgweGQ2OTkwNjI0LCAweDU1NjVhOTEwKSxcclxuICAgICAgWDY0V29yZF9jcmVhdGUoMHhmNDBlMzU4NSwgMHg1NzcxMjAyYSksIFg2NFdvcmRfY3JlYXRlKDB4MTA2YWEwNzAsIDB4MzJiYmQxYjgpLFxyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweDE5YTRjMTE2LCAweGI4ZDJkMGM4KSwgWDY0V29yZF9jcmVhdGUoMHgxZTM3NmMwOCwgMHg1MTQxYWI1MyksXHJcbiAgICAgIFg2NFdvcmRfY3JlYXRlKDB4Mjc0ODc3NGMsIDB4ZGY4ZWViOTkpLCBYNjRXb3JkX2NyZWF0ZSgweDM0YjBiY2I1LCAweGUxOWI0OGE4KSxcclxuICAgICAgWDY0V29yZF9jcmVhdGUoMHgzOTFjMGNiMywgMHhjNWM5NWE2MyksIFg2NFdvcmRfY3JlYXRlKDB4NGVkOGFhNGEsIDB4ZTM0MThhY2IpLFxyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweDViOWNjYTRmLCAweDc3NjNlMzczKSwgWDY0V29yZF9jcmVhdGUoMHg2ODJlNmZmMywgMHhkNmIyYjhhMyksXHJcbiAgICAgIFg2NFdvcmRfY3JlYXRlKDB4NzQ4ZjgyZWUsIDB4NWRlZmIyZmMpLCBYNjRXb3JkX2NyZWF0ZSgweDc4YTU2MzZmLCAweDQzMTcyZjYwKSxcclxuICAgICAgWDY0V29yZF9jcmVhdGUoMHg4NGM4NzgxNCwgMHhhMWYwYWI3MiksIFg2NFdvcmRfY3JlYXRlKDB4OGNjNzAyMDgsIDB4MWE2NDM5ZWMpLFxyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweDkwYmVmZmZhLCAweDIzNjMxZTI4KSwgWDY0V29yZF9jcmVhdGUoMHhhNDUwNmNlYiwgMHhkZTgyYmRlOSksXHJcbiAgICAgIFg2NFdvcmRfY3JlYXRlKDB4YmVmOWEzZjcsIDB4YjJjNjc5MTUpLCBYNjRXb3JkX2NyZWF0ZSgweGM2NzE3OGYyLCAweGUzNzI1MzJiKSxcclxuICAgICAgWDY0V29yZF9jcmVhdGUoMHhjYTI3M2VjZSwgMHhlYTI2NjE5YyksIFg2NFdvcmRfY3JlYXRlKDB4ZDE4NmI4YzcsIDB4MjFjMGMyMDcpLFxyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweGVhZGE3ZGQ2LCAweGNkZTBlYjFlKSwgWDY0V29yZF9jcmVhdGUoMHhmNTdkNGY3ZiwgMHhlZTZlZDE3OCksXHJcbiAgICAgIFg2NFdvcmRfY3JlYXRlKDB4MDZmMDY3YWEsIDB4NzIxNzZmYmEpLCBYNjRXb3JkX2NyZWF0ZSgweDBhNjM3ZGM1LCAweGEyYzg5OGE2KSxcclxuICAgICAgWDY0V29yZF9jcmVhdGUoMHgxMTNmOTgwNCwgMHhiZWY5MGRhZSksIFg2NFdvcmRfY3JlYXRlKDB4MWI3MTBiMzUsIDB4MTMxYzQ3MWIpLFxyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweDI4ZGI3N2Y1LCAweDIzMDQ3ZDg0KSwgWDY0V29yZF9jcmVhdGUoMHgzMmNhYWI3YiwgMHg0MGM3MjQ5MyksXHJcbiAgICAgIFg2NFdvcmRfY3JlYXRlKDB4M2M5ZWJlMGEsIDB4MTVjOWJlYmMpLCBYNjRXb3JkX2NyZWF0ZSgweDQzMWQ2N2M0LCAweDljMTAwZDRjKSxcclxuICAgICAgWDY0V29yZF9jcmVhdGUoMHg0Y2M1ZDRiZSwgMHhjYjNlNDJiNiksIFg2NFdvcmRfY3JlYXRlKDB4NTk3ZjI5OWMsIDB4ZmM2NTdlMmEpLFxyXG4gICAgICBYNjRXb3JkX2NyZWF0ZSgweDVmY2I2ZmFiLCAweDNhZDZmYWVjKSwgWDY0V29yZF9jcmVhdGUoMHg2YzQ0MTk4YywgMHg0YTQ3NTgxNylcclxuICAgIF1cclxuXHJcbiAgICAvLyBSZXVzYWJsZSBvYmplY3RzXHJcbiAgICB2YXIgVyA9IFtdO1xyXG4gICAgKGZ1bmN0aW9uICgpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MDsgaSsrKSB7XHJcbiAgICAgICAgV1tpXSA9IFg2NFdvcmRfY3JlYXRlKClcclxuICAgICAgfVxyXG4gICAgfSgpKVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU0hBLTUxMiBoYXNoIGFsZ29yaXRobS5cclxuICAgICAqL1xyXG4gICAgdmFyIFNIQTUxMiA9IENfYWxnby5TSEE1MTIgPSBIYXNoZXIuZXh0ZW5kKHtcclxuICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFg2NFdvcmRBcnJheS5pbml0KFtcclxuICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHg2YTA5ZTY2NywgMHhmM2JjYzkwOCksIG5ldyBYNjRXb3JkLmluaXQoMHhiYjY3YWU4NSwgMHg4NGNhYTczYiksXHJcbiAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4M2M2ZWYzNzIsIDB4ZmU5NGY4MmIpLCBuZXcgWDY0V29yZC5pbml0KDB4YTU0ZmY1M2EsIDB4NWYxZDM2ZjEpLFxyXG4gICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDUxMGU1MjdmLCAweGFkZTY4MmQxKSwgbmV3IFg2NFdvcmQuaW5pdCgweDliMDU2ODhjLCAweDJiM2U2YzFmKSxcclxuICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHgxZjgzZDlhYiwgMHhmYjQxYmQ2YiksIG5ldyBYNjRXb3JkLmluaXQoMHg1YmUwY2QxOSwgMHgxMzdlMjE3OSlcclxuICAgICAgICBdKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIEggPSB0aGlzLl9oYXNoLndvcmRzXHJcblxyXG4gICAgICAgIHZhciBIMCA9IEhbMF1cclxuICAgICAgICB2YXIgSDEgPSBIWzFdXHJcbiAgICAgICAgdmFyIEgyID0gSFsyXVxyXG4gICAgICAgIHZhciBIMyA9IEhbM11cclxuICAgICAgICB2YXIgSDQgPSBIWzRdXHJcbiAgICAgICAgdmFyIEg1ID0gSFs1XVxyXG4gICAgICAgIHZhciBINiA9IEhbNl1cclxuICAgICAgICB2YXIgSDcgPSBIWzddXHJcblxyXG4gICAgICAgIHZhciBIMGggPSBIMC5oaWdoXHJcbiAgICAgICAgdmFyIEgwbCA9IEgwLmxvd1xyXG4gICAgICAgIHZhciBIMWggPSBIMS5oaWdoXHJcbiAgICAgICAgdmFyIEgxbCA9IEgxLmxvd1xyXG4gICAgICAgIHZhciBIMmggPSBIMi5oaWdoXHJcbiAgICAgICAgdmFyIEgybCA9IEgyLmxvd1xyXG4gICAgICAgIHZhciBIM2ggPSBIMy5oaWdoXHJcbiAgICAgICAgdmFyIEgzbCA9IEgzLmxvd1xyXG4gICAgICAgIHZhciBINGggPSBINC5oaWdoXHJcbiAgICAgICAgdmFyIEg0bCA9IEg0Lmxvd1xyXG4gICAgICAgIHZhciBINWggPSBINS5oaWdoXHJcbiAgICAgICAgdmFyIEg1bCA9IEg1Lmxvd1xyXG4gICAgICAgIHZhciBINmggPSBINi5oaWdoXHJcbiAgICAgICAgdmFyIEg2bCA9IEg2Lmxvd1xyXG4gICAgICAgIHZhciBIN2ggPSBINy5oaWdoXHJcbiAgICAgICAgdmFyIEg3bCA9IEg3Lmxvd1xyXG5cclxuICAgICAgICAvLyBXb3JraW5nIHZhcmlhYmxlc1xyXG4gICAgICAgIHZhciBhaCA9IEgwaFxyXG4gICAgICAgIHZhciBhbCA9IEgwbFxyXG4gICAgICAgIHZhciBiaCA9IEgxaFxyXG4gICAgICAgIHZhciBibCA9IEgxbFxyXG4gICAgICAgIHZhciBjaCA9IEgyaFxyXG4gICAgICAgIHZhciBjbCA9IEgybFxyXG4gICAgICAgIHZhciBkaCA9IEgzaFxyXG4gICAgICAgIHZhciBkbCA9IEgzbFxyXG4gICAgICAgIHZhciBlaCA9IEg0aFxyXG4gICAgICAgIHZhciBlbCA9IEg0bFxyXG4gICAgICAgIHZhciBmaCA9IEg1aFxyXG4gICAgICAgIHZhciBmbCA9IEg1bFxyXG4gICAgICAgIHZhciBnaCA9IEg2aFxyXG4gICAgICAgIHZhciBnbCA9IEg2bFxyXG4gICAgICAgIHZhciBoaCA9IEg3aFxyXG4gICAgICAgIHZhciBobCA9IEg3bFxyXG5cclxuICAgICAgICAvLyBSb3VuZHNcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDgwOyBpKyspIHtcclxuICAgICAgICAgIC8vIFNob3J0Y3V0XHJcbiAgICAgICAgICB2YXIgV2kgPSBXW2ldXHJcblxyXG4gICAgICAgICAgLy8gRXh0ZW5kIG1lc3NhZ2VcclxuICAgICAgICAgIGlmIChpIDwgMTYpIHtcclxuICAgICAgICAgICAgdmFyIFdpaCA9IFdpLmhpZ2ggPSBNW29mZnNldCArIGkgKiAyXSB8IDBcclxuICAgICAgICAgICAgdmFyIFdpbCA9IFdpLmxvdyA9IE1bb2Zmc2V0ICsgaSAqIDIgKyAxXSB8IDBcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEdhbW1hMFxyXG4gICAgICAgICAgICB2YXIgZ2FtbWEweCA9IFdbaSAtIDE1XVxyXG4gICAgICAgICAgICB2YXIgZ2FtbWEweGggPSBnYW1tYTB4LmhpZ2hcclxuICAgICAgICAgICAgdmFyIGdhbW1hMHhsID0gZ2FtbWEweC5sb3dcclxuICAgICAgICAgICAgdmFyIGdhbW1hMGggPSAoKGdhbW1hMHhoID4+PiAxKSB8IChnYW1tYTB4bCA8PCAzMSkpIF4gKChnYW1tYTB4aCA+Pj4gOCkgfCAoZ2FtbWEweGwgPDwgMjQpKSBeIChnYW1tYTB4aCA+Pj4gNylcclxuICAgICAgICAgICAgdmFyIGdhbW1hMGwgPSAoKGdhbW1hMHhsID4+PiAxKSB8IChnYW1tYTB4aCA8PCAzMSkpIF4gKChnYW1tYTB4bCA+Pj4gOCkgfCAoZ2FtbWEweGggPDwgMjQpKSBeICgoZ2FtbWEweGwgPj4+IDcpIHwgKGdhbW1hMHhoIDw8IDI1KSlcclxuXHJcbiAgICAgICAgICAgIC8vIEdhbW1hMVxyXG4gICAgICAgICAgICB2YXIgZ2FtbWExeCA9IFdbaSAtIDJdXHJcbiAgICAgICAgICAgIHZhciBnYW1tYTF4aCA9IGdhbW1hMXguaGlnaFxyXG4gICAgICAgICAgICB2YXIgZ2FtbWExeGwgPSBnYW1tYTF4Lmxvd1xyXG4gICAgICAgICAgICB2YXIgZ2FtbWExaCA9ICgoZ2FtbWExeGggPj4+IDE5KSB8IChnYW1tYTF4bCA8PCAxMykpIF4gKChnYW1tYTF4aCA8PCAzKSB8IChnYW1tYTF4bCA+Pj4gMjkpKSBeIChnYW1tYTF4aCA+Pj4gNilcclxuICAgICAgICAgICAgdmFyIGdhbW1hMWwgPSAoKGdhbW1hMXhsID4+PiAxOSkgfCAoZ2FtbWExeGggPDwgMTMpKSBeICgoZ2FtbWExeGwgPDwgMykgfCAoZ2FtbWExeGggPj4+IDI5KSkgXiAoKGdhbW1hMXhsID4+PiA2KSB8IChnYW1tYTF4aCA8PCAyNikpXHJcblxyXG4gICAgICAgICAgICAvLyBXW2ldID0gZ2FtbWEwICsgV1tpIC0gN10gKyBnYW1tYTEgKyBXW2kgLSAxNl1cclxuICAgICAgICAgICAgdmFyIFdpNyA9IFdbaSAtIDddXHJcbiAgICAgICAgICAgIHZhciBXaTdoID0gV2k3LmhpZ2hcclxuICAgICAgICAgICAgdmFyIFdpN2wgPSBXaTcubG93XHJcblxyXG4gICAgICAgICAgICB2YXIgV2kxNiA9IFdbaSAtIDE2XVxyXG4gICAgICAgICAgICB2YXIgV2kxNmggPSBXaTE2LmhpZ2hcclxuICAgICAgICAgICAgdmFyIFdpMTZsID0gV2kxNi5sb3dcclxuXHJcbiAgICAgICAgICAgIHZhciBXaWwgPSBnYW1tYTBsICsgV2k3bFxyXG4gICAgICAgICAgICB2YXIgV2loID0gZ2FtbWEwaCArIFdpN2ggKyAoKFdpbCA+Pj4gMCkgPCAoZ2FtbWEwbCA+Pj4gMCkgPyAxIDogMClcclxuICAgICAgICAgICAgdmFyIFdpbCA9IFdpbCArIGdhbW1hMWxcclxuICAgICAgICAgICAgdmFyIFdpaCA9IFdpaCArIGdhbW1hMWggKyAoKFdpbCA+Pj4gMCkgPCAoZ2FtbWExbCA+Pj4gMCkgPyAxIDogMClcclxuICAgICAgICAgICAgdmFyIFdpbCA9IFdpbCArIFdpMTZsXHJcbiAgICAgICAgICAgIHZhciBXaWggPSBXaWggKyBXaTE2aCArICgoV2lsID4+PiAwKSA8IChXaTE2bCA+Pj4gMCkgPyAxIDogMClcclxuXHJcbiAgICAgICAgICAgIFdpLmhpZ2ggPSBXaWhcclxuICAgICAgICAgICAgV2kubG93ID0gV2lsXHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgdmFyIGNoaCA9IChlaCAmIGZoKSBeICh+ZWggJiBnaClcclxuICAgICAgICAgIHZhciBjaGwgPSAoZWwgJiBmbCkgXiAofmVsICYgZ2wpXHJcbiAgICAgICAgICB2YXIgbWFqaCA9IChhaCAmIGJoKSBeIChhaCAmIGNoKSBeIChiaCAmIGNoKVxyXG4gICAgICAgICAgdmFyIG1hamwgPSAoYWwgJiBibCkgXiAoYWwgJiBjbCkgXiAoYmwgJiBjbClcclxuXHJcbiAgICAgICAgICB2YXIgc2lnbWEwaCA9ICgoYWggPj4+IDI4KSB8IChhbCA8PCA0KSkgXiAoKGFoIDw8IDMwKSB8IChhbCA+Pj4gMikpIF4gKChhaCA8PCAyNSkgfCAoYWwgPj4+IDcpKVxyXG4gICAgICAgICAgdmFyIHNpZ21hMGwgPSAoKGFsID4+PiAyOCkgfCAoYWggPDwgNCkpIF4gKChhbCA8PCAzMCkgfCAoYWggPj4+IDIpKSBeICgoYWwgPDwgMjUpIHwgKGFoID4+PiA3KSlcclxuICAgICAgICAgIHZhciBzaWdtYTFoID0gKChlaCA+Pj4gMTQpIHwgKGVsIDw8IDE4KSkgXiAoKGVoID4+PiAxOCkgfCAoZWwgPDwgMTQpKSBeICgoZWggPDwgMjMpIHwgKGVsID4+PiA5KSlcclxuICAgICAgICAgIHZhciBzaWdtYTFsID0gKChlbCA+Pj4gMTQpIHwgKGVoIDw8IDE4KSkgXiAoKGVsID4+PiAxOCkgfCAoZWggPDwgMTQpKSBeICgoZWwgPDwgMjMpIHwgKGVoID4+PiA5KSlcclxuXHJcbiAgICAgICAgICAvLyB0MSA9IGggKyBzaWdtYTEgKyBjaCArIEtbaV0gKyBXW2ldXHJcbiAgICAgICAgICB2YXIgS2kgPSBLW2ldXHJcbiAgICAgICAgICB2YXIgS2loID0gS2kuaGlnaFxyXG4gICAgICAgICAgdmFyIEtpbCA9IEtpLmxvd1xyXG5cclxuICAgICAgICAgIHZhciB0MWwgPSBobCArIHNpZ21hMWxcclxuICAgICAgICAgIHZhciB0MWggPSBoaCArIHNpZ21hMWggKyAoKHQxbCA+Pj4gMCkgPCAoaGwgPj4+IDApID8gMSA6IDApXHJcbiAgICAgICAgICB2YXIgdDFsID0gdDFsICsgY2hsXHJcbiAgICAgICAgICB2YXIgdDFoID0gdDFoICsgY2hoICsgKCh0MWwgPj4+IDApIDwgKGNobCA+Pj4gMCkgPyAxIDogMClcclxuICAgICAgICAgIHZhciB0MWwgPSB0MWwgKyBLaWxcclxuICAgICAgICAgIHZhciB0MWggPSB0MWggKyBLaWggKyAoKHQxbCA+Pj4gMCkgPCAoS2lsID4+PiAwKSA/IDEgOiAwKVxyXG4gICAgICAgICAgdmFyIHQxbCA9IHQxbCArIFdpbFxyXG4gICAgICAgICAgdmFyIHQxaCA9IHQxaCArIFdpaCArICgodDFsID4+PiAwKSA8IChXaWwgPj4+IDApID8gMSA6IDApXHJcblxyXG4gICAgICAgICAgLy8gdDIgPSBzaWdtYTAgKyBtYWpcclxuICAgICAgICAgIHZhciB0MmwgPSBzaWdtYTBsICsgbWFqbFxyXG4gICAgICAgICAgdmFyIHQyaCA9IHNpZ21hMGggKyBtYWpoICsgKCh0MmwgPj4+IDApIDwgKHNpZ21hMGwgPj4+IDApID8gMSA6IDApXHJcblxyXG4gICAgICAgICAgLy8gVXBkYXRlIHdvcmtpbmcgdmFyaWFibGVzXHJcbiAgICAgICAgICBoaCA9IGdoXHJcbiAgICAgICAgICBobCA9IGdsXHJcbiAgICAgICAgICBnaCA9IGZoXHJcbiAgICAgICAgICBnbCA9IGZsXHJcbiAgICAgICAgICBmaCA9IGVoXHJcbiAgICAgICAgICBmbCA9IGVsXHJcbiAgICAgICAgICBlbCA9IChkbCArIHQxbCkgfCAwXHJcbiAgICAgICAgICBlaCA9IChkaCArIHQxaCArICgoZWwgPj4+IDApIDwgKGRsID4+PiAwKSA/IDEgOiAwKSkgfCAwXHJcbiAgICAgICAgICBkaCA9IGNoXHJcbiAgICAgICAgICBkbCA9IGNsXHJcbiAgICAgICAgICBjaCA9IGJoXHJcbiAgICAgICAgICBjbCA9IGJsXHJcbiAgICAgICAgICBiaCA9IGFoXHJcbiAgICAgICAgICBibCA9IGFsXHJcbiAgICAgICAgICBhbCA9ICh0MWwgKyB0MmwpIHwgMFxyXG4gICAgICAgICAgYWggPSAodDFoICsgdDJoICsgKChhbCA+Pj4gMCkgPCAodDFsID4+PiAwKSA/IDEgOiAwKSkgfCAwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJbnRlcm1lZGlhdGUgaGFzaCB2YWx1ZVxyXG4gICAgICAgIEgwbCA9IEgwLmxvdyA9IChIMGwgKyBhbClcclxuICAgICAgICBIMC5oaWdoID0gKEgwaCArIGFoICsgKChIMGwgPj4+IDApIDwgKGFsID4+PiAwKSA/IDEgOiAwKSlcclxuICAgICAgICBIMWwgPSBIMS5sb3cgPSAoSDFsICsgYmwpXHJcbiAgICAgICAgSDEuaGlnaCA9IChIMWggKyBiaCArICgoSDFsID4+PiAwKSA8IChibCA+Pj4gMCkgPyAxIDogMCkpXHJcbiAgICAgICAgSDJsID0gSDIubG93ID0gKEgybCArIGNsKVxyXG4gICAgICAgIEgyLmhpZ2ggPSAoSDJoICsgY2ggKyAoKEgybCA+Pj4gMCkgPCAoY2wgPj4+IDApID8gMSA6IDApKVxyXG4gICAgICAgIEgzbCA9IEgzLmxvdyA9IChIM2wgKyBkbClcclxuICAgICAgICBIMy5oaWdoID0gKEgzaCArIGRoICsgKChIM2wgPj4+IDApIDwgKGRsID4+PiAwKSA/IDEgOiAwKSlcclxuICAgICAgICBINGwgPSBINC5sb3cgPSAoSDRsICsgZWwpXHJcbiAgICAgICAgSDQuaGlnaCA9IChINGggKyBlaCArICgoSDRsID4+PiAwKSA8IChlbCA+Pj4gMCkgPyAxIDogMCkpXHJcbiAgICAgICAgSDVsID0gSDUubG93ID0gKEg1bCArIGZsKVxyXG4gICAgICAgIEg1LmhpZ2ggPSAoSDVoICsgZmggKyAoKEg1bCA+Pj4gMCkgPCAoZmwgPj4+IDApID8gMSA6IDApKVxyXG4gICAgICAgIEg2bCA9IEg2LmxvdyA9IChINmwgKyBnbClcclxuICAgICAgICBINi5oaWdoID0gKEg2aCArIGdoICsgKChINmwgPj4+IDApIDwgKGdsID4+PiAwKSA/IDEgOiAwKSlcclxuICAgICAgICBIN2wgPSBINy5sb3cgPSAoSDdsICsgaGwpXHJcbiAgICAgICAgSDcuaGlnaCA9IChIN2ggKyBoaCArICgoSDdsID4+PiAwKSA8IChobCA+Pj4gMCkgPyAxIDogMCkpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBfZG9GaW5hbGl6ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YVxyXG4gICAgICAgIHZhciBkYXRhV29yZHMgPSBkYXRhLndvcmRzXHJcblxyXG4gICAgICAgIHZhciBuQml0c1RvdGFsID0gdGhpcy5fbkRhdGFCeXRlcyAqIDhcclxuICAgICAgICB2YXIgbkJpdHNMZWZ0ID0gZGF0YS5zaWdCeXRlcyAqIDhcclxuXHJcbiAgICAgICAgLy8gQWRkIHBhZGRpbmdcclxuICAgICAgICBkYXRhV29yZHNbbkJpdHNMZWZ0ID4+PiA1XSB8PSAweDgwIDw8ICgyNCAtIG5CaXRzTGVmdCAlIDMyKVxyXG4gICAgICAgIGRhdGFXb3Jkc1soKChuQml0c0xlZnQgKyAxMjgpID4+PiAxMCkgPDwgNSkgKyAzMF0gPSBNYXRoLmZsb29yKG5CaXRzVG90YWwgLyAweDEwMDAwMDAwMClcclxuICAgICAgICBkYXRhV29yZHNbKCgobkJpdHNMZWZ0ICsgMTI4KSA+Pj4gMTApIDw8IDUpICsgMzFdID0gbkJpdHNUb3RhbFxyXG4gICAgICAgIGRhdGEuc2lnQnl0ZXMgPSBkYXRhV29yZHMubGVuZ3RoICogNFxyXG5cclxuICAgICAgICAvLyBIYXNoIGZpbmFsIGJsb2Nrc1xyXG4gICAgICAgIHRoaXMuX3Byb2Nlc3MoKVxyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IGhhc2ggdG8gMzItYml0IHdvcmQgYXJyYXkgYmVmb3JlIHJldHVybmluZ1xyXG4gICAgICAgIHZhciBoYXNoID0gdGhpcy5faGFzaC50b1gzMigpXHJcblxyXG4gICAgICAgIC8vIFJldHVybiBmaW5hbCBjb21wdXRlZCBoYXNoXHJcbiAgICAgICAgcmV0dXJuIGhhc2hcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGNsb25lOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNsb25lID0gSGFzaGVyLmNsb25lLmNhbGwodGhpcylcclxuICAgICAgICBjbG9uZS5faGFzaCA9IHRoaXMuX2hhc2guY2xvbmUoKVxyXG5cclxuICAgICAgICByZXR1cm4gY2xvbmVcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGJsb2NrU2l6ZTogMTAyNCAvIDMyXHJcbiAgICB9KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvcnRjdXQgZnVuY3Rpb24gdG8gdGhlIGhhc2hlcidzIG9iamVjdCBpbnRlcmZhY2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgaGFzaC5cclxuICAgICAqXHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqXHJcbiAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEE1MTIoJ21lc3NhZ2UnKTtcclxuICAgICAqICAgICB2YXIgaGFzaCA9IENyeXB0b0pTLlNIQTUxMih3b3JkQXJyYXkpO1xyXG4gICAgICovXHJcbiAgICBDLlNIQTUxMiA9IEhhc2hlci5fY3JlYXRlSGVscGVyKFNIQTUxMilcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBITUFDJ3Mgb2JqZWN0IGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gaGFzaC5cclxuICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30ga2V5IFRoZSBzZWNyZXQga2V5LlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIEhNQUMuXHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKlxyXG4gICAgICogICAgIHZhciBobWFjID0gQ3J5cHRvSlMuSG1hY1NIQTUxMihtZXNzYWdlLCBrZXkpO1xyXG4gICAgICovXHJcbiAgICBDLkhtYWNTSEE1MTIgPSBIYXNoZXIuX2NyZWF0ZUhtYWNIZWxwZXIoU0hBNTEyKVxyXG4gIH0oKSk7XHJcblxyXG5cclxuICAoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gU2hvcnRjdXRzXHJcbiAgICB2YXIgQyA9IENyeXB0b0pTXHJcbiAgICB2YXIgQ194NjQgPSBDLng2NFxyXG4gICAgdmFyIFg2NFdvcmQgPSBDX3g2NC5Xb3JkXHJcbiAgICB2YXIgWDY0V29yZEFycmF5ID0gQ194NjQuV29yZEFycmF5XHJcbiAgICB2YXIgQ19hbGdvID0gQy5hbGdvXHJcbiAgICB2YXIgU0hBNTEyID0gQ19hbGdvLlNIQTUxMlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU0hBLTM4NCBoYXNoIGFsZ29yaXRobS5cclxuICAgICAqL1xyXG4gICAgdmFyIFNIQTM4NCA9IENfYWxnby5TSEEzODQgPSBTSEE1MTIuZXh0ZW5kKHtcclxuICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9oYXNoID0gbmV3IFg2NFdvcmRBcnJheS5pbml0KFtcclxuICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHhjYmJiOWQ1ZCwgMHhjMTA1OWVkOCksIG5ldyBYNjRXb3JkLmluaXQoMHg2MjlhMjkyYSwgMHgzNjdjZDUwNyksXHJcbiAgICAgICAgICBuZXcgWDY0V29yZC5pbml0KDB4OTE1OTAxNWEsIDB4MzA3MGRkMTcpLCBuZXcgWDY0V29yZC5pbml0KDB4MTUyZmVjZDgsIDB4ZjcwZTU5MzkpLFxyXG4gICAgICAgICAgbmV3IFg2NFdvcmQuaW5pdCgweDY3MzMyNjY3LCAweGZmYzAwYjMxKSwgbmV3IFg2NFdvcmQuaW5pdCgweDhlYjQ0YTg3LCAweDY4NTgxNTExKSxcclxuICAgICAgICAgIG5ldyBYNjRXb3JkLmluaXQoMHhkYjBjMmUwZCwgMHg2NGY5OGZhNyksIG5ldyBYNjRXb3JkLmluaXQoMHg0N2I1NDgxZCwgMHhiZWZhNGZhNClcclxuICAgICAgICBdKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaGFzaCA9IFNIQTUxMi5fZG9GaW5hbGl6ZS5jYWxsKHRoaXMpXHJcblxyXG4gICAgICAgIGhhc2guc2lnQnl0ZXMgLT0gMTZcclxuXHJcbiAgICAgICAgcmV0dXJuIGhhc2hcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9uIHRvIHRoZSBoYXNoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBoYXNoLlxyXG4gICAgICpcclxuICAgICAqIEByZXR1cm4ge1dvcmRBcnJheX0gVGhlIGhhc2guXHJcbiAgICAgKlxyXG4gICAgICogQHN0YXRpY1xyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKlxyXG4gICAgICogICAgIHZhciBoYXNoID0gQ3J5cHRvSlMuU0hBMzg0KCdtZXNzYWdlJyk7XHJcbiAgICAgKiAgICAgdmFyIGhhc2ggPSBDcnlwdG9KUy5TSEEzODQod29yZEFycmF5KTtcclxuICAgICAqL1xyXG4gICAgQy5TSEEzODQgPSBTSEE1MTIuX2NyZWF0ZUhlbHBlcihTSEEzODQpXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbiB0byB0aGUgSE1BQydzIG9iamVjdCBpbnRlcmZhY2UuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBtZXNzYWdlIFRoZSBtZXNzYWdlIHRvIGhhc2guXHJcbiAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGtleSBUaGUgc2VjcmV0IGtleS5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBITUFDLlxyXG4gICAgICpcclxuICAgICAqIEBzdGF0aWNcclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICpcclxuICAgICAqICAgICB2YXIgaG1hYyA9IENyeXB0b0pTLkhtYWNTSEEzODQobWVzc2FnZSwga2V5KTtcclxuICAgICAqL1xyXG4gICAgQy5IbWFjU0hBMzg0ID0gU0hBNTEyLl9jcmVhdGVIbWFjSGVscGVyKFNIQTM4NClcclxuICB9KCkpXHJcblxyXG5cclxuICAvKipcclxuICAgKiBDaXBoZXIgY29yZSBjb21wb25lbnRzLlxyXG4gICAqL1xyXG4gIENyeXB0b0pTLmxpYi5DaXBoZXIgfHwgKGZ1bmN0aW9uICh1bmRlZmluZWQpIHtcclxuICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgdmFyIEMgPSBDcnlwdG9KU1xyXG4gICAgdmFyIENfbGliID0gQy5saWJcclxuICAgIHZhciBCYXNlID0gQ19saWIuQmFzZVxyXG4gICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheVxyXG4gICAgdmFyIEJ1ZmZlcmVkQmxvY2tBbGdvcml0aG0gPSBDX2xpYi5CdWZmZXJlZEJsb2NrQWxnb3JpdGhtXHJcbiAgICB2YXIgQ19lbmMgPSBDLmVuY1xyXG4gICAgdmFyIFV0ZjggPSBDX2VuYy5VdGY4XHJcbiAgICB2YXIgQmFzZTY0ID0gQ19lbmMuQmFzZTY0XHJcbiAgICB2YXIgQ19hbGdvID0gQy5hbGdvXHJcbiAgICB2YXIgRXZwS0RGID0gQ19hbGdvLkV2cEtERlxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWJzdHJhY3QgYmFzZSBjaXBoZXIgdGVtcGxhdGUuXHJcbiAgICAgKlxyXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGtleVNpemUgVGhpcyBjaXBoZXIncyBrZXkgc2l6ZS4gRGVmYXVsdDogNCAoMTI4IGJpdHMpXHJcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gaXZTaXplIFRoaXMgY2lwaGVyJ3MgSVYgc2l6ZS4gRGVmYXVsdDogNCAoMTI4IGJpdHMpXHJcbiAgICAgKiBAcHJvcGVydHkge251bWJlcn0gX0VOQ19YRk9STV9NT0RFIEEgY29uc3RhbnQgcmVwcmVzZW50aW5nIGVuY3J5cHRpb24gbW9kZS5cclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBfREVDX1hGT1JNX01PREUgQSBjb25zdGFudCByZXByZXNlbnRpbmcgZGVjcnlwdGlvbiBtb2RlLlxyXG4gICAgICovXHJcbiAgICB2YXIgQ2lwaGVyID0gQ19saWIuQ2lwaGVyID0gQnVmZmVyZWRCbG9ja0FsZ29yaXRobS5leHRlbmQoe1xyXG4gICAgICAvKipcclxuICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gaXYgVGhlIElWIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXHJcbiAgICAgICAqL1xyXG4gICAgICBjZmc6IEJhc2UuZXh0ZW5kKCksXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQ3JlYXRlcyB0aGlzIGNpcGhlciBpbiBlbmNyeXB0aW9uIG1vZGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fSBrZXkgVGhlIGtleS5cclxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Q2lwaGVyfSBBIGNpcGhlciBpbnN0YW5jZS5cclxuICAgICAgICpcclxuICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIGNpcGhlciA9IENyeXB0b0pTLmFsZ28uQUVTLmNyZWF0ZUVuY3J5cHRvcihrZXlXb3JkQXJyYXksIHsgaXY6IGl2V29yZEFycmF5IH0pO1xyXG4gICAgICAgKi9cclxuICAgICAgY3JlYXRlRW5jcnlwdG9yOiBmdW5jdGlvbiAoa2V5LCBjZmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUodGhpcy5fRU5DX1hGT1JNX01PREUsIGtleSwgY2ZnKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgLyoqXHJcbiAgICAgICAqIENyZWF0ZXMgdGhpcyBjaXBoZXIgaW4gZGVjcnlwdGlvbiBtb2RlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0ga2V5IFRoZSBrZXkuXHJcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjZmcgKE9wdGlvbmFsKSBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIHRvIHVzZSBmb3IgdGhpcyBvcGVyYXRpb24uXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge0NpcGhlcn0gQSBjaXBoZXIgaW5zdGFuY2UuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBjaXBoZXIgPSBDcnlwdG9KUy5hbGdvLkFFUy5jcmVhdGVEZWNyeXB0b3Ioa2V5V29yZEFycmF5LCB7IGl2OiBpdldvcmRBcnJheSB9KTtcclxuICAgICAgICovXHJcbiAgICAgIGNyZWF0ZURlY3J5cHRvcjogZnVuY3Rpb24gKGtleSwgY2ZnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlKHRoaXMuX0RFQ19YRk9STV9NT0RFLCBrZXksIGNmZylcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgY2lwaGVyLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0geGZvcm1Nb2RlIEVpdGhlciB0aGUgZW5jcnlwdGlvbiBvciBkZWNyeXB0aW9uIHRyYW5zb3JtYXRpb24gbW9kZSBjb25zdGFudC5cclxuICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxyXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIGNpcGhlciA9IENyeXB0b0pTLmFsZ28uQUVTLmNyZWF0ZShDcnlwdG9KUy5hbGdvLkFFUy5fRU5DX1hGT1JNX01PREUsIGtleVdvcmRBcnJheSwgeyBpdjogaXZXb3JkQXJyYXkgfSk7XHJcbiAgICAgICAqL1xyXG4gICAgICBpbml0OiBmdW5jdGlvbiAoeGZvcm1Nb2RlLCBrZXksIGNmZykge1xyXG4gICAgICAgIC8vIEFwcGx5IGNvbmZpZyBkZWZhdWx0c1xyXG4gICAgICAgIHRoaXMuY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZylcclxuXHJcbiAgICAgICAgLy8gU3RvcmUgdHJhbnNmb3JtIG1vZGUgYW5kIGtleVxyXG4gICAgICAgIHRoaXMuX3hmb3JtTW9kZSA9IHhmb3JtTW9kZVxyXG4gICAgICAgIHRoaXMuX2tleSA9IGtleVxyXG5cclxuICAgICAgICAvLyBTZXQgaW5pdGlhbCB2YWx1ZXNcclxuICAgICAgICB0aGlzLnJlc2V0KClcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBSZXNldHMgdGhpcyBjaXBoZXIgdG8gaXRzIGluaXRpYWwgc3RhdGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICBjaXBoZXIucmVzZXQoKTtcclxuICAgICAgICovXHJcbiAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gUmVzZXQgZGF0YSBidWZmZXJcclxuICAgICAgICBCdWZmZXJlZEJsb2NrQWxnb3JpdGhtLnJlc2V0LmNhbGwodGhpcylcclxuXHJcbiAgICAgICAgLy8gUGVyZm9ybSBjb25jcmV0ZS1jaXBoZXIgbG9naWNcclxuICAgICAgICB0aGlzLl9kb1Jlc2V0KClcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBBZGRzIGRhdGEgdG8gYmUgZW5jcnlwdGVkIG9yIGRlY3J5cHRlZC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl8c3RyaW5nfSBkYXRhVXBkYXRlIFRoZSBkYXRhIHRvIGVuY3J5cHQgb3IgZGVjcnlwdC5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgZGF0YSBhZnRlciBwcm9jZXNzaW5nLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIGVuY3J5cHRlZCA9IGNpcGhlci5wcm9jZXNzKCdkYXRhJyk7XHJcbiAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLnByb2Nlc3Mod29yZEFycmF5KTtcclxuICAgICAgICovXHJcbiAgICAgIHByb2Nlc3M6IGZ1bmN0aW9uIChkYXRhVXBkYXRlKSB7XHJcbiAgICAgICAgLy8gQXBwZW5kXHJcbiAgICAgICAgdGhpcy5fYXBwZW5kKGRhdGFVcGRhdGUpXHJcblxyXG4gICAgICAgIC8vIFByb2Nlc3MgYXZhaWxhYmxlIGJsb2Nrc1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9jZXNzKClcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBGaW5hbGl6ZXMgdGhlIGVuY3J5cHRpb24gb3IgZGVjcnlwdGlvbiBwcm9jZXNzLlxyXG4gICAgICAgKiBOb3RlIHRoYXQgdGhlIGZpbmFsaXplIG9wZXJhdGlvbiBpcyBlZmZlY3RpdmVseSBhIGRlc3RydWN0aXZlLCByZWFkLW9uY2Ugb3BlcmF0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IGRhdGFVcGRhdGUgVGhlIGZpbmFsIGRhdGEgdG8gZW5jcnlwdCBvciBkZWNyeXB0LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBkYXRhIGFmdGVyIGZpbmFsIHByb2Nlc3NpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLmZpbmFsaXplKCk7XHJcbiAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLmZpbmFsaXplKCdkYXRhJyk7XHJcbiAgICAgICAqICAgICB2YXIgZW5jcnlwdGVkID0gY2lwaGVyLmZpbmFsaXplKHdvcmRBcnJheSk7XHJcbiAgICAgICAqL1xyXG4gICAgICBmaW5hbGl6ZTogZnVuY3Rpb24gKGRhdGFVcGRhdGUpIHtcclxuICAgICAgICAvLyBGaW5hbCBkYXRhIHVwZGF0ZVxyXG4gICAgICAgIGlmIChkYXRhVXBkYXRlKSB7XHJcbiAgICAgICAgICB0aGlzLl9hcHBlbmQoZGF0YVVwZGF0ZSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFBlcmZvcm0gY29uY3JldGUtY2lwaGVyIGxvZ2ljXHJcbiAgICAgICAgdmFyIGZpbmFsUHJvY2Vzc2VkRGF0YSA9IHRoaXMuX2RvRmluYWxpemUoKVxyXG5cclxuICAgICAgICByZXR1cm4gZmluYWxQcm9jZXNzZWREYXRhXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBrZXlTaXplOiAxMjggLyAzMixcclxuXHJcbiAgICAgIGl2U2l6ZTogMTI4IC8gMzIsXHJcblxyXG4gICAgICBfRU5DX1hGT1JNX01PREU6IDEsXHJcblxyXG4gICAgICBfREVDX1hGT1JNX01PREU6IDIsXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQ3JlYXRlcyBzaG9ydGN1dCBmdW5jdGlvbnMgdG8gYSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIFRoZSBjaXBoZXIgdG8gY3JlYXRlIGEgaGVscGVyIGZvci5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7T2JqZWN0fSBBbiBvYmplY3Qgd2l0aCBlbmNyeXB0IGFuZCBkZWNyeXB0IHNob3J0Y3V0IGZ1bmN0aW9ucy5cclxuICAgICAgICpcclxuICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIEFFUyA9IENyeXB0b0pTLmxpYi5DaXBoZXIuX2NyZWF0ZUhlbHBlcihDcnlwdG9KUy5hbGdvLkFFUyk7XHJcbiAgICAgICAqL1xyXG4gICAgICBfY3JlYXRlSGVscGVyOiAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkge1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQYXNzd29yZEJhc2VkQ2lwaGVyXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gU2VyaWFsaXphYmxlQ2lwaGVyXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNpcGhlcikge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZW5jcnlwdDogZnVuY3Rpb24gKG1lc3NhZ2UsIGtleSwgY2ZnKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkuZW5jcnlwdChjaXBoZXIsIG1lc3NhZ2UsIGtleSwgY2ZnKVxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgZGVjcnlwdDogZnVuY3Rpb24gKGNpcGhlcnRleHQsIGtleSwgY2ZnKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdENpcGhlclN0cmF0ZWd5KGtleSkuZGVjcnlwdChjaXBoZXIsIGNpcGhlcnRleHQsIGtleSwgY2ZnKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9KCkpXHJcbiAgICB9KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWJzdHJhY3QgYmFzZSBzdHJlYW0gY2lwaGVyIHRlbXBsYXRlLlxyXG4gICAgICpcclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG51bWJlciBvZiAzMi1iaXQgd29yZHMgdGhpcyBjaXBoZXIgb3BlcmF0ZXMgb24uIERlZmF1bHQ6IDEgKDMyIGJpdHMpXHJcbiAgICAgKi9cclxuICAgIHZhciBTdHJlYW1DaXBoZXIgPSBDX2xpYi5TdHJlYW1DaXBoZXIgPSBDaXBoZXIuZXh0ZW5kKHtcclxuICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBQcm9jZXNzIHBhcnRpYWwgYmxvY2tzXHJcbiAgICAgICAgdmFyIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpXHJcblxyXG4gICAgICAgIHJldHVybiBmaW5hbFByb2Nlc3NlZEJsb2Nrc1xyXG4gICAgICB9LFxyXG5cclxuICAgICAgYmxvY2tTaXplOiAxXHJcbiAgICB9KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTW9kZSBuYW1lc3BhY2UuXHJcbiAgICAgKi9cclxuICAgIHZhciBDX21vZGUgPSBDLm1vZGUgPSB7fVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWJzdHJhY3QgYmFzZSBibG9jayBjaXBoZXIgbW9kZSB0ZW1wbGF0ZS5cclxuICAgICAqL1xyXG4gICAgdmFyIEJsb2NrQ2lwaGVyTW9kZSA9IENfbGliLkJsb2NrQ2lwaGVyTW9kZSA9IEJhc2UuZXh0ZW5kKHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIENyZWF0ZXMgdGhpcyBtb2RlIGZvciBlbmNyeXB0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge0NpcGhlcn0gY2lwaGVyIEEgYmxvY2sgY2lwaGVyIGluc3RhbmNlLlxyXG4gICAgICAgKiBAcGFyYW0ge0FycmF5fSBpdiBUaGUgSVYgd29yZHMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBtb2RlID0gQ3J5cHRvSlMubW9kZS5DQkMuY3JlYXRlRW5jcnlwdG9yKGNpcGhlciwgaXYud29yZHMpO1xyXG4gICAgICAgKi9cclxuICAgICAgY3JlYXRlRW5jcnlwdG9yOiBmdW5jdGlvbiAoY2lwaGVyLCBpdikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVuY3J5cHRvci5jcmVhdGUoY2lwaGVyLCBpdilcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDcmVhdGVzIHRoaXMgbW9kZSBmb3IgZGVjcnlwdGlvbi5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBBIGJsb2NrIGNpcGhlciBpbnN0YW5jZS5cclxuICAgICAgICogQHBhcmFtIHtBcnJheX0gaXYgVGhlIElWIHdvcmRzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgbW9kZSA9IENyeXB0b0pTLm1vZGUuQ0JDLmNyZWF0ZURlY3J5cHRvcihjaXBoZXIsIGl2LndvcmRzKTtcclxuICAgICAgICovXHJcbiAgICAgIGNyZWF0ZURlY3J5cHRvcjogZnVuY3Rpb24gKGNpcGhlciwgaXYpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5EZWNyeXB0b3IuY3JlYXRlKGNpcGhlciwgaXYpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogSW5pdGlhbGl6ZXMgYSBuZXdseSBjcmVhdGVkIG1vZGUuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgQSBibG9jayBjaXBoZXIgaW5zdGFuY2UuXHJcbiAgICAgICAqIEBwYXJhbSB7QXJyYXl9IGl2IFRoZSBJViB3b3Jkcy5cclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBtb2RlID0gQ3J5cHRvSlMubW9kZS5DQkMuRW5jcnlwdG9yLmNyZWF0ZShjaXBoZXIsIGl2LndvcmRzKTtcclxuICAgICAgICovXHJcbiAgICAgIGluaXQ6IGZ1bmN0aW9uIChjaXBoZXIsIGl2KSB7XHJcbiAgICAgICAgdGhpcy5fY2lwaGVyID0gY2lwaGVyXHJcbiAgICAgICAgdGhpcy5faXYgPSBpdlxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2lwaGVyIEJsb2NrIENoYWluaW5nIG1vZGUuXHJcbiAgICAgKi9cclxuICAgIHZhciBDQkMgPSBDX21vZGUuQ0JDID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIEFic3RyYWN0IGJhc2UgQ0JDIG1vZGUuXHJcbiAgICAgICAqL1xyXG4gICAgICB2YXIgQ0JDID0gQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQ0JDIGVuY3J5cHRvci5cclxuICAgICAgICovXHJcbiAgICAgIENCQy5FbmNyeXB0b3IgPSBDQkMuZXh0ZW5kKHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBQcm9jZXNzZXMgdGhlIGRhdGEgYmxvY2sgYXQgb2Zmc2V0LlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQHBhcmFtIHtBcnJheX0gd29yZHMgVGhlIGRhdGEgd29yZHMgdG8gb3BlcmF0ZSBvbi5cclxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0IFRoZSBvZmZzZXQgd2hlcmUgdGhlIGJsb2NrIHN0YXJ0cy5cclxuICAgICAgICAgKlxyXG4gICAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiAgICAgbW9kZS5wcm9jZXNzQmxvY2soZGF0YS53b3Jkcywgb2Zmc2V0KTtcclxuICAgICAgICAgKi9cclxuICAgICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XHJcbiAgICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXJcclxuICAgICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplXHJcblxyXG4gICAgICAgICAgLy8gWE9SIGFuZCBlbmNyeXB0XHJcbiAgICAgICAgICB4b3JCbG9jay5jYWxsKHRoaXMsIHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSlcclxuICAgICAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2sod29yZHMsIG9mZnNldClcclxuXHJcbiAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2tcclxuICAgICAgICAgIHRoaXMuX3ByZXZCbG9jayA9IHdvcmRzLnNsaWNlKG9mZnNldCwgb2Zmc2V0ICsgYmxvY2tTaXplKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDQkMgZGVjcnlwdG9yLlxyXG4gICAgICAgKi9cclxuICAgICAgQ0JDLkRlY3J5cHRvciA9IENCQy5leHRlbmQoe1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFByb2Nlc3NlcyB0aGUgZGF0YSBibG9jayBhdCBvZmZzZXQuXHJcbiAgICAgICAgICpcclxuICAgICAgICAgKiBAcGFyYW0ge0FycmF5fSB3b3JkcyBUaGUgZGF0YSB3b3JkcyB0byBvcGVyYXRlIG9uLlxyXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXQgVGhlIG9mZnNldCB3aGVyZSB0aGUgYmxvY2sgc3RhcnRzLlxyXG4gICAgICAgICAqXHJcbiAgICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICAgKlxyXG4gICAgICAgICAqICAgICBtb2RlLnByb2Nlc3NCbG9jayhkYXRhLndvcmRzLCBvZmZzZXQpO1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHByb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcclxuICAgICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlclxyXG4gICAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGNpcGhlci5ibG9ja1NpemVcclxuXHJcbiAgICAgICAgICAvLyBSZW1lbWJlciB0aGlzIGJsb2NrIHRvIHVzZSB3aXRoIG5leHQgYmxvY2tcclxuICAgICAgICAgIHZhciB0aGlzQmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSlcclxuXHJcbiAgICAgICAgICAvLyBEZWNyeXB0IGFuZCBYT1JcclxuICAgICAgICAgIGNpcGhlci5kZWNyeXB0QmxvY2sod29yZHMsIG9mZnNldClcclxuICAgICAgICAgIHhvckJsb2NrLmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplKVxyXG5cclxuICAgICAgICAgIC8vIFRoaXMgYmxvY2sgYmVjb21lcyB0aGUgcHJldmlvdXMgYmxvY2tcclxuICAgICAgICAgIHRoaXMuX3ByZXZCbG9jayA9IHRoaXNCbG9ja1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuXHJcbiAgICAgIGZ1bmN0aW9uIHhvckJsb2NrKHdvcmRzLCBvZmZzZXQsIGJsb2NrU2l6ZSkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0XHJcbiAgICAgICAgdmFyIGl2ID0gdGhpcy5faXZcclxuXHJcbiAgICAgICAgLy8gQ2hvb3NlIG1peGluZyBibG9ja1xyXG4gICAgICAgIGlmIChpdikge1xyXG4gICAgICAgICAgdmFyIGJsb2NrID0gaXZcclxuXHJcbiAgICAgICAgICAvLyBSZW1vdmUgSVYgZm9yIHN1YnNlcXVlbnQgYmxvY2tzXHJcbiAgICAgICAgICB0aGlzLl9pdiA9IHVuZGVmaW5lZFxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YXIgYmxvY2sgPSB0aGlzLl9wcmV2QmxvY2tcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFhPUiBibG9ja3NcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBibG9ja1tpXVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIENCQ1xyXG4gICAgfSgpKVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFkZGluZyBuYW1lc3BhY2UuXHJcbiAgICAgKi9cclxuICAgIHZhciBDX3BhZCA9IEMucGFkID0ge31cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBLQ1MgIzUvNyBwYWRkaW5nIHN0cmF0ZWd5LlxyXG4gICAgICovXHJcbiAgICB2YXIgUGtjczcgPSBDX3BhZC5Qa2NzNyA9IHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIFBhZHMgZGF0YSB1c2luZyB0aGUgYWxnb3JpdGhtIGRlZmluZWQgaW4gUEtDUyAjNS83LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gZGF0YSBUaGUgZGF0YSB0byBwYWQuXHJcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG11bHRpcGxlIHRoYXQgdGhlIGRhdGEgc2hvdWxkIGJlIHBhZGRlZCB0by5cclxuICAgICAgICpcclxuICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgQ3J5cHRvSlMucGFkLlBrY3M3LnBhZCh3b3JkQXJyYXksIDQpO1xyXG4gICAgICAgKi9cclxuICAgICAgcGFkOiBmdW5jdGlvbiAoZGF0YSwgYmxvY2tTaXplKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRcclxuICAgICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0XHJcblxyXG4gICAgICAgIC8vIENvdW50IHBhZGRpbmcgYnl0ZXNcclxuICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YS5zaWdCeXRlcyAlIGJsb2NrU2l6ZUJ5dGVzXHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBwYWRkaW5nIHdvcmRcclxuICAgICAgICB2YXIgcGFkZGluZ1dvcmQgPSAoblBhZGRpbmdCeXRlcyA8PCAyNCkgfCAoblBhZGRpbmdCeXRlcyA8PCAxNikgfCAoblBhZGRpbmdCeXRlcyA8PCA4KSB8IG5QYWRkaW5nQnl0ZXNcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIHBhZGRpbmdcclxuICAgICAgICB2YXIgcGFkZGluZ1dvcmRzID0gW11cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5QYWRkaW5nQnl0ZXM7IGkgKz0gNCkge1xyXG4gICAgICAgICAgcGFkZGluZ1dvcmRzLnB1c2gocGFkZGluZ1dvcmQpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBwYWRkaW5nID0gV29yZEFycmF5LmNyZWF0ZShwYWRkaW5nV29yZHMsIG5QYWRkaW5nQnl0ZXMpXHJcblxyXG4gICAgICAgIC8vIEFkZCBwYWRkaW5nXHJcbiAgICAgICAgZGF0YS5jb25jYXQocGFkZGluZylcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBVbnBhZHMgZGF0YSB0aGF0IGhhZCBiZWVuIHBhZGRlZCB1c2luZyB0aGUgYWxnb3JpdGhtIGRlZmluZWQgaW4gUEtDUyAjNS83LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheX0gZGF0YSBUaGUgZGF0YSB0byB1bnBhZC5cclxuICAgICAgICpcclxuICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgQ3J5cHRvSlMucGFkLlBrY3M3LnVucGFkKHdvcmRBcnJheSk7XHJcbiAgICAgICAqL1xyXG4gICAgICB1bnBhZDogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAvLyBHZXQgbnVtYmVyIG9mIHBhZGRpbmcgYnl0ZXMgZnJvbSBsYXN0IGJ5dGVcclxuICAgICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmXHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSBwYWRkaW5nXHJcbiAgICAgICAgZGF0YS5zaWdCeXRlcyAtPSBuUGFkZGluZ0J5dGVzXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFic3RyYWN0IGJhc2UgYmxvY2sgY2lwaGVyIHRlbXBsYXRlLlxyXG4gICAgICpcclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIG51bWJlciBvZiAzMi1iaXQgd29yZHMgdGhpcyBjaXBoZXIgb3BlcmF0ZXMgb24uIERlZmF1bHQ6IDQgKDEyOCBiaXRzKVxyXG4gICAgICovXHJcbiAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlciA9IENpcGhlci5leHRlbmQoe1xyXG4gICAgICAvKipcclxuICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcHJvcGVydHkge01vZGV9IG1vZGUgVGhlIGJsb2NrIG1vZGUgdG8gdXNlLiBEZWZhdWx0OiBDQkNcclxuICAgICAgICogQHByb3BlcnR5IHtQYWRkaW5nfSBwYWRkaW5nIFRoZSBwYWRkaW5nIHN0cmF0ZWd5IHRvIHVzZS4gRGVmYXVsdDogUGtjczdcclxuICAgICAgICovXHJcbiAgICAgIGNmZzogQ2lwaGVyLmNmZy5leHRlbmQoe1xyXG4gICAgICAgIG1vZGU6IENCQyxcclxuICAgICAgICBwYWRkaW5nOiBQa2NzN1xyXG4gICAgICB9KSxcclxuXHJcbiAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gUmVzZXQgY2lwaGVyXHJcbiAgICAgICAgQ2lwaGVyLnJlc2V0LmNhbGwodGhpcylcclxuXHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIGNmZyA9IHRoaXMuY2ZnXHJcbiAgICAgICAgdmFyIGl2ID0gY2ZnLml2XHJcbiAgICAgICAgdmFyIG1vZGUgPSBjZmcubW9kZVxyXG5cclxuICAgICAgICAvLyBSZXNldCBibG9jayBtb2RlXHJcbiAgICAgICAgaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9FTkNfWEZPUk1fTU9ERSkge1xyXG4gICAgICAgICAgdmFyIG1vZGVDcmVhdG9yID0gbW9kZS5jcmVhdGVFbmNyeXB0b3JcclxuICAgICAgICB9IGVsc2UgLyogaWYgKHRoaXMuX3hmb3JtTW9kZSA9PSB0aGlzLl9ERUNfWEZPUk1fTU9ERSkgKi8ge1xyXG4gICAgICAgICAgdmFyIG1vZGVDcmVhdG9yID0gbW9kZS5jcmVhdGVEZWNyeXB0b3JcclxuICAgICAgICAgIC8vIEtlZXAgYXQgbGVhc3Qgb25lIGJsb2NrIGluIHRoZSBidWZmZXIgZm9yIHVucGFkZGluZ1xyXG4gICAgICAgICAgdGhpcy5fbWluQnVmZmVyU2l6ZSA9IDFcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9tb2RlICYmIHRoaXMuX21vZGUuX19jcmVhdG9yID09IG1vZGVDcmVhdG9yKSB7XHJcbiAgICAgICAgICB0aGlzLl9tb2RlLmluaXQodGhpcywgaXYgJiYgaXYud29yZHMpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuX21vZGUgPSBtb2RlQ3JlYXRvci5jYWxsKG1vZGUsIHRoaXMsIGl2ICYmIGl2LndvcmRzKVxyXG4gICAgICAgICAgdGhpcy5fbW9kZS5fX2NyZWF0b3IgPSBtb2RlQ3JlYXRvclxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcbiAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKHdvcmRzLCBvZmZzZXQpIHtcclxuICAgICAgICB0aGlzLl9tb2RlLnByb2Nlc3NCbG9jayh3b3Jkcywgb2Zmc2V0KVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgX2RvRmluYWxpemU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dFxyXG4gICAgICAgIHZhciBwYWRkaW5nID0gdGhpcy5jZmcucGFkZGluZ1xyXG5cclxuICAgICAgICAvLyBGaW5hbGl6ZVxyXG4gICAgICAgIGlmICh0aGlzLl94Zm9ybU1vZGUgPT0gdGhpcy5fRU5DX1hGT1JNX01PREUpIHtcclxuICAgICAgICAgIC8vIFBhZCBkYXRhXHJcbiAgICAgICAgICBwYWRkaW5nLnBhZCh0aGlzLl9kYXRhLCB0aGlzLmJsb2NrU2l6ZSlcclxuXHJcbiAgICAgICAgICAvLyBQcm9jZXNzIGZpbmFsIGJsb2Nrc1xyXG4gICAgICAgICAgdmFyIGZpbmFsUHJvY2Vzc2VkQmxvY2tzID0gdGhpcy5fcHJvY2VzcyghISdmbHVzaCcpXHJcbiAgICAgICAgfSBlbHNlIC8qIGlmICh0aGlzLl94Zm9ybU1vZGUgPT0gdGhpcy5fREVDX1hGT1JNX01PREUpICovIHtcclxuICAgICAgICAgIC8vIFByb2Nlc3MgZmluYWwgYmxvY2tzXHJcbiAgICAgICAgICB2YXIgZmluYWxQcm9jZXNzZWRCbG9ja3MgPSB0aGlzLl9wcm9jZXNzKCEhJ2ZsdXNoJylcclxuXHJcbiAgICAgICAgICAvLyBVbnBhZCBkYXRhXHJcbiAgICAgICAgICBwYWRkaW5nLnVucGFkKGZpbmFsUHJvY2Vzc2VkQmxvY2tzKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZpbmFsUHJvY2Vzc2VkQmxvY2tzXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBibG9ja1NpemU6IDEyOCAvIDMyXHJcbiAgICB9KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQSBjb2xsZWN0aW9uIG9mIGNpcGhlciBwYXJhbWV0ZXJzLlxyXG4gICAgICpcclxuICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBjaXBoZXJ0ZXh0IFRoZSByYXcgY2lwaGVydGV4dC5cclxuICAgICAqIEBwcm9wZXJ0eSB7V29yZEFycmF5fSBrZXkgVGhlIGtleSB0byB0aGlzIGNpcGhlcnRleHQuXHJcbiAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gaXYgVGhlIElWIHVzZWQgaW4gdGhlIGNpcGhlcmluZyBvcGVyYXRpb24uXHJcbiAgICAgKiBAcHJvcGVydHkge1dvcmRBcnJheX0gc2FsdCBUaGUgc2FsdCB1c2VkIHdpdGggYSBrZXkgZGVyaXZhdGlvbiBmdW5jdGlvbi5cclxuICAgICAqIEBwcm9wZXJ0eSB7Q2lwaGVyfSBhbGdvcml0aG0gVGhlIGNpcGhlciBhbGdvcml0aG0uXHJcbiAgICAgKiBAcHJvcGVydHkge01vZGV9IG1vZGUgVGhlIGJsb2NrIG1vZGUgdXNlZCBpbiB0aGUgY2lwaGVyaW5nIG9wZXJhdGlvbi5cclxuICAgICAqIEBwcm9wZXJ0eSB7UGFkZGluZ30gcGFkZGluZyBUaGUgcGFkZGluZyBzY2hlbWUgdXNlZCBpbiB0aGUgY2lwaGVyaW5nIG9wZXJhdGlvbi5cclxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBibG9ja1NpemUgVGhlIGJsb2NrIHNpemUgb2YgdGhlIGNpcGhlci5cclxuICAgICAqIEBwcm9wZXJ0eSB7Rm9ybWF0fSBmb3JtYXR0ZXIgVGhlIGRlZmF1bHQgZm9ybWF0dGluZyBzdHJhdGVneSB0byBjb252ZXJ0IHRoaXMgY2lwaGVyIHBhcmFtcyBvYmplY3QgdG8gYSBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIHZhciBDaXBoZXJQYXJhbXMgPSBDX2xpYi5DaXBoZXJQYXJhbXMgPSBCYXNlLmV4dGVuZCh7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBJbml0aWFsaXplcyBhIG5ld2x5IGNyZWF0ZWQgY2lwaGVyIHBhcmFtcyBvYmplY3QuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7T2JqZWN0fSBjaXBoZXJQYXJhbXMgQW4gb2JqZWN0IHdpdGggYW55IG9mIHRoZSBwb3NzaWJsZSBjaXBoZXIgcGFyYW1ldGVycy5cclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBjaXBoZXJQYXJhbXMgPSBDcnlwdG9KUy5saWIuQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7XHJcbiAgICAgICAqICAgICAgICAgY2lwaGVydGV4dDogY2lwaGVydGV4dFdvcmRBcnJheSxcclxuICAgICAgICogICAgICAgICBrZXk6IGtleVdvcmRBcnJheSxcclxuICAgICAgICogICAgICAgICBpdjogaXZXb3JkQXJyYXksXHJcbiAgICAgICAqICAgICAgICAgc2FsdDogc2FsdFdvcmRBcnJheSxcclxuICAgICAgICogICAgICAgICBhbGdvcml0aG06IENyeXB0b0pTLmFsZ28uQUVTLFxyXG4gICAgICAgKiAgICAgICAgIG1vZGU6IENyeXB0b0pTLm1vZGUuQ0JDLFxyXG4gICAgICAgKiAgICAgICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5QS0NTNyxcclxuICAgICAgICogICAgICAgICBibG9ja1NpemU6IDQsXHJcbiAgICAgICAqICAgICAgICAgZm9ybWF0dGVyOiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTFxyXG4gICAgICAgKiAgICAgfSk7XHJcbiAgICAgICAqL1xyXG4gICAgICBpbml0OiBmdW5jdGlvbiAoY2lwaGVyUGFyYW1zKSB7XHJcbiAgICAgICAgdGhpcy5taXhJbihjaXBoZXJQYXJhbXMpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQ29udmVydHMgdGhpcyBjaXBoZXIgcGFyYW1zIG9iamVjdCB0byBhIHN0cmluZy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtGb3JtYXR9IGZvcm1hdHRlciAoT3B0aW9uYWwpIFRoZSBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIHVzZS5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7c3RyaW5nfSBUaGUgc3RyaW5naWZpZWQgY2lwaGVyIHBhcmFtcy5cclxuICAgICAgICpcclxuICAgICAgICogQHRocm93cyBFcnJvciBJZiBuZWl0aGVyIHRoZSBmb3JtYXR0ZXIgbm9yIHRoZSBkZWZhdWx0IGZvcm1hdHRlciBpcyBzZXQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgc3RyaW5nID0gY2lwaGVyUGFyYW1zICsgJyc7XHJcbiAgICAgICAqICAgICB2YXIgc3RyaW5nID0gY2lwaGVyUGFyYW1zLnRvU3RyaW5nKCk7XHJcbiAgICAgICAqICAgICB2YXIgc3RyaW5nID0gY2lwaGVyUGFyYW1zLnRvU3RyaW5nKENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMKTtcclxuICAgICAgICovXHJcbiAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiAoZm9ybWF0dGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIChmb3JtYXR0ZXIgfHwgdGhpcy5mb3JtYXR0ZXIpLnN0cmluZ2lmeSh0aGlzKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRm9ybWF0IG5hbWVzcGFjZS5cclxuICAgICAqL1xyXG4gICAgdmFyIENfZm9ybWF0ID0gQy5mb3JtYXQgPSB7fVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogT3BlblNTTCBmb3JtYXR0aW5nIHN0cmF0ZWd5LlxyXG4gICAgICovXHJcbiAgICB2YXIgT3BlblNTTEZvcm1hdHRlciA9IENfZm9ybWF0Lk9wZW5TU0wgPSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb252ZXJ0cyBhIGNpcGhlciBwYXJhbXMgb2JqZWN0IHRvIGFuIE9wZW5TU0wtY29tcGF0aWJsZSBzdHJpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfSBjaXBoZXJQYXJhbXMgVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBPcGVuU1NMLWNvbXBhdGlibGUgc3RyaW5nLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgb3BlblNTTFN0cmluZyA9IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMLnN0cmluZ2lmeShjaXBoZXJQYXJhbXMpO1xyXG4gICAgICAgKi9cclxuICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAoY2lwaGVyUGFyYW1zKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIGNpcGhlcnRleHQgPSBjaXBoZXJQYXJhbXMuY2lwaGVydGV4dFxyXG4gICAgICAgIHZhciBzYWx0ID0gY2lwaGVyUGFyYW1zLnNhbHRcclxuXHJcbiAgICAgICAgLy8gRm9ybWF0XHJcbiAgICAgICAgaWYgKHNhbHQpIHtcclxuICAgICAgICAgIHZhciB3b3JkQXJyYXkgPSBXb3JkQXJyYXkuY3JlYXRlKFsweDUzNjE2Yzc0LCAweDY1NjQ1ZjVmXSkuY29uY2F0KHNhbHQpLmNvbmNhdChjaXBoZXJ0ZXh0KVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2YXIgd29yZEFycmF5ID0gY2lwaGVydGV4dFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHdvcmRBcnJheS50b1N0cmluZyhCYXNlNjQpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogQ29udmVydHMgYW4gT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZyB0byBhIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gb3BlblNTTFN0ciBUaGUgT3BlblNTTC1jb21wYXRpYmxlIHN0cmluZy5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7Q2lwaGVyUGFyYW1zfSBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBjaXBoZXJQYXJhbXMgPSBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTC5wYXJzZShvcGVuU1NMU3RyaW5nKTtcclxuICAgICAgICovXHJcbiAgICAgIHBhcnNlOiBmdW5jdGlvbiAob3BlblNTTFN0cikge1xyXG4gICAgICAgIC8vIFBhcnNlIGJhc2U2NFxyXG4gICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gQmFzZTY0LnBhcnNlKG9wZW5TU0xTdHIpXHJcblxyXG4gICAgICAgIC8vIFNob3J0Y3V0XHJcbiAgICAgICAgdmFyIGNpcGhlcnRleHRXb3JkcyA9IGNpcGhlcnRleHQud29yZHNcclxuXHJcbiAgICAgICAgLy8gVGVzdCBmb3Igc2FsdFxyXG4gICAgICAgIGlmIChjaXBoZXJ0ZXh0V29yZHNbMF0gPT0gMHg1MzYxNmM3NCAmJiBjaXBoZXJ0ZXh0V29yZHNbMV0gPT0gMHg2NTY0NWY1Zikge1xyXG4gICAgICAgICAgLy8gRXh0cmFjdCBzYWx0XHJcbiAgICAgICAgICB2YXIgc2FsdCA9IFdvcmRBcnJheS5jcmVhdGUoY2lwaGVydGV4dFdvcmRzLnNsaWNlKDIsIDQpKVxyXG5cclxuICAgICAgICAgIC8vIFJlbW92ZSBzYWx0IGZyb20gY2lwaGVydGV4dFxyXG4gICAgICAgICAgY2lwaGVydGV4dFdvcmRzLnNwbGljZSgwLCA0KVxyXG4gICAgICAgICAgY2lwaGVydGV4dC5zaWdCeXRlcyAtPSAxNlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIENpcGhlclBhcmFtcy5jcmVhdGUoe1xyXG4gICAgICAgICAgY2lwaGVydGV4dDogY2lwaGVydGV4dCxcclxuICAgICAgICAgIHNhbHQ6IHNhbHRcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGNpcGhlciB3cmFwcGVyIHRoYXQgcmV0dXJucyBjaXBoZXJ0ZXh0IGFzIGEgc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICB2YXIgU2VyaWFsaXphYmxlQ2lwaGVyID0gQ19saWIuU2VyaWFsaXphYmxlQ2lwaGVyID0gQmFzZS5leHRlbmQoe1xyXG4gICAgICAvKipcclxuICAgICAgICogQ29uZmlndXJhdGlvbiBvcHRpb25zLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcHJvcGVydHkge0Zvcm1hdHRlcn0gZm9ybWF0IFRoZSBmb3JtYXR0aW5nIHN0cmF0ZWd5IHRvIGNvbnZlcnQgY2lwaGVyIHBhcmFtIG9iamVjdHMgdG8gYW5kIGZyb20gYSBzdHJpbmcuIERlZmF1bHQ6IE9wZW5TU0xcclxuICAgICAgICovXHJcbiAgICAgIGNmZzogQmFzZS5leHRlbmQoe1xyXG4gICAgICAgIGZvcm1hdDogT3BlblNTTEZvcm1hdHRlclxyXG4gICAgICB9KSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBFbmNyeXB0cyBhIG1lc3NhZ2UuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IG1lc3NhZ2UgVGhlIG1lc3NhZ2UgdG8gZW5jcnlwdC5cclxuICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxyXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IEEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5lbmNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBtZXNzYWdlLCBrZXkpO1xyXG4gICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsIGtleSwgeyBpdjogaXYgfSk7XHJcbiAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5TZXJpYWxpemFibGVDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwga2V5LCB7IGl2OiBpdiwgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcclxuICAgICAgICovXHJcbiAgICAgIGVuY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIG1lc3NhZ2UsIGtleSwgY2ZnKSB7XHJcbiAgICAgICAgLy8gQXBwbHkgY29uZmlnIGRlZmF1bHRzXHJcbiAgICAgICAgY2ZnID0gdGhpcy5jZmcuZXh0ZW5kKGNmZylcclxuXHJcbiAgICAgICAgLy8gRW5jcnlwdFxyXG4gICAgICAgIHZhciBlbmNyeXB0b3IgPSBjaXBoZXIuY3JlYXRlRW5jcnlwdG9yKGtleSwgY2ZnKVxyXG4gICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gZW5jcnlwdG9yLmZpbmFsaXplKG1lc3NhZ2UpXHJcblxyXG4gICAgICAgIC8vIFNob3J0Y3V0XHJcbiAgICAgICAgdmFyIGNpcGhlckNmZyA9IGVuY3J5cHRvci5jZmdcclxuXHJcbiAgICAgICAgLy8gQ3JlYXRlIGFuZCByZXR1cm4gc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXNcclxuICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7XHJcbiAgICAgICAgICBjaXBoZXJ0ZXh0OiBjaXBoZXJ0ZXh0LFxyXG4gICAgICAgICAga2V5OiBrZXksXHJcbiAgICAgICAgICBpdjogY2lwaGVyQ2ZnLml2LFxyXG4gICAgICAgICAgYWxnb3JpdGhtOiBjaXBoZXIsXHJcbiAgICAgICAgICBtb2RlOiBjaXBoZXJDZmcubW9kZSxcclxuICAgICAgICAgIHBhZGRpbmc6IGNpcGhlckNmZy5wYWRkaW5nLFxyXG4gICAgICAgICAgYmxvY2tTaXplOiBjaXBoZXIuYmxvY2tTaXplLFxyXG4gICAgICAgICAgZm9ybWF0dGVyOiBjZmcuZm9ybWF0XHJcbiAgICAgICAgfSlcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBEZWNyeXB0cyBzZXJpYWxpemVkIGNpcGhlcnRleHQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLlxyXG4gICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc3xzdHJpbmd9IGNpcGhlcnRleHQgVGhlIGNpcGhlcnRleHQgdG8gZGVjcnlwdC5cclxuICAgICAgICogQHBhcmFtIHtXb3JkQXJyYXl9IGtleSBUaGUga2V5LlxyXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtXb3JkQXJyYXl9IFRoZSBwbGFpbnRleHQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBwbGFpbnRleHQgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGZvcm1hdHRlZENpcGhlcnRleHQsIGtleSwgeyBpdjogaXYsIGZvcm1hdDogQ3J5cHRvSlMuZm9ybWF0Lk9wZW5TU0wgfSk7XHJcbiAgICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlNlcmlhbGl6YWJsZUNpcGhlci5kZWNyeXB0KENyeXB0b0pTLmFsZ28uQUVTLCBjaXBoZXJ0ZXh0UGFyYW1zLCBrZXksIHsgaXY6IGl2LCBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xyXG4gICAgICAgKi9cclxuICAgICAgZGVjcnlwdDogZnVuY3Rpb24gKGNpcGhlciwgY2lwaGVydGV4dCwga2V5LCBjZmcpIHtcclxuICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcclxuICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKVxyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBDaXBoZXJQYXJhbXNcclxuICAgICAgICBjaXBoZXJ0ZXh0ID0gdGhpcy5fcGFyc2UoY2lwaGVydGV4dCwgY2ZnLmZvcm1hdClcclxuXHJcbiAgICAgICAgLy8gRGVjcnlwdFxyXG4gICAgICAgIHZhciBwbGFpbnRleHQgPSBjaXBoZXIuY3JlYXRlRGVjcnlwdG9yKGtleSwgY2ZnKS5maW5hbGl6ZShjaXBoZXJ0ZXh0LmNpcGhlcnRleHQpXHJcblxyXG4gICAgICAgIHJldHVybiBwbGFpbnRleHRcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb252ZXJ0cyBzZXJpYWxpemVkIGNpcGhlcnRleHQgdG8gQ2lwaGVyUGFyYW1zLFxyXG4gICAgICAgKiBlbHNlIGFzc3VtZWQgQ2lwaGVyUGFyYW1zIGFscmVhZHkgYW5kIHJldHVybnMgY2lwaGVydGV4dCB1bmNoYW5nZWQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7Q2lwaGVyUGFyYW1zfHN0cmluZ30gY2lwaGVydGV4dCBUaGUgY2lwaGVydGV4dC5cclxuICAgICAgICogQHBhcmFtIHtGb3JtYXR0ZXJ9IGZvcm1hdCBUaGUgZm9ybWF0dGluZyBzdHJhdGVneSB0byB1c2UgdG8gcGFyc2Ugc2VyaWFsaXplZCBjaXBoZXJ0ZXh0LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IFRoZSB1bnNlcmlhbGl6ZWQgY2lwaGVydGV4dC5cclxuICAgICAgICpcclxuICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAZXhhbXBsZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiAgICAgdmFyIGNpcGhlcnRleHRQYXJhbXMgPSBDcnlwdG9KUy5saWIuU2VyaWFsaXphYmxlQ2lwaGVyLl9wYXJzZShjaXBoZXJ0ZXh0U3RyaW5nT3JQYXJhbXMsIGZvcm1hdCk7XHJcbiAgICAgICAqL1xyXG4gICAgICBfcGFyc2U6IGZ1bmN0aW9uIChjaXBoZXJ0ZXh0LCBmb3JtYXQpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNpcGhlcnRleHQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICByZXR1cm4gZm9ybWF0LnBhcnNlKGNpcGhlcnRleHQsIHRoaXMpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBjaXBoZXJ0ZXh0XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogS2V5IGRlcml2YXRpb24gZnVuY3Rpb24gbmFtZXNwYWNlLlxyXG4gICAgICovXHJcbiAgICB2YXIgQ19rZGYgPSBDLmtkZiA9IHt9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPcGVuU1NMIGtleSBkZXJpdmF0aW9uIGZ1bmN0aW9uLlxyXG4gICAgICovXHJcbiAgICB2YXIgT3BlblNTTEtkZiA9IENfa2RmLk9wZW5TU0wgPSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBEZXJpdmVzIGEga2V5IGFuZCBJViBmcm9tIGEgcGFzc3dvcmQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXNzd29yZCBUaGUgcGFzc3dvcmQgdG8gZGVyaXZlIGZyb20uXHJcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBrZXlTaXplIFRoZSBzaXplIGluIHdvcmRzIG9mIHRoZSBrZXkgdG8gZ2VuZXJhdGUuXHJcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBpdlNpemUgVGhlIHNpemUgaW4gd29yZHMgb2YgdGhlIElWIHRvIGdlbmVyYXRlLlxyXG4gICAgICAgKiBAcGFyYW0ge1dvcmRBcnJheXxzdHJpbmd9IHNhbHQgKE9wdGlvbmFsKSBBIDY0LWJpdCBzYWx0IHRvIHVzZS4gSWYgb21pdHRlZCwgYSBzYWx0IHdpbGwgYmUgZ2VuZXJhdGVkIHJhbmRvbWx5LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IEEgY2lwaGVyIHBhcmFtcyBvYmplY3Qgd2l0aCB0aGUga2V5LCBJViwgYW5kIHNhbHQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBkZXJpdmVkUGFyYW1zID0gQ3J5cHRvSlMua2RmLk9wZW5TU0wuZXhlY3V0ZSgnUGFzc3dvcmQnLCAyNTYvMzIsIDEyOC8zMik7XHJcbiAgICAgICAqICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IENyeXB0b0pTLmtkZi5PcGVuU1NMLmV4ZWN1dGUoJ1Bhc3N3b3JkJywgMjU2LzMyLCAxMjgvMzIsICdzYWx0c2FsdCcpO1xyXG4gICAgICAgKi9cclxuICAgICAgZXhlY3V0ZTogZnVuY3Rpb24gKHBhc3N3b3JkLCBrZXlTaXplLCBpdlNpemUsIHNhbHQpIHtcclxuICAgICAgICAvLyBHZW5lcmF0ZSByYW5kb20gc2FsdFxyXG4gICAgICAgIGlmICghc2FsdCkge1xyXG4gICAgICAgICAgc2FsdCA9IFdvcmRBcnJheS5yYW5kb20oNjQgLyA4KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgSVZcclxuICAgICAgICB2YXIga2V5ID0gRXZwS0RGLmNyZWF0ZSh7XHJcbiAgICAgICAgICBrZXlTaXplOiBrZXlTaXplICsgaXZTaXplXHJcbiAgICAgICAgfSkuY29tcHV0ZShwYXNzd29yZCwgc2FsdClcclxuXHJcbiAgICAgICAgLy8gU2VwYXJhdGUga2V5IGFuZCBJVlxyXG4gICAgICAgIHZhciBpdiA9IFdvcmRBcnJheS5jcmVhdGUoa2V5LndvcmRzLnNsaWNlKGtleVNpemUpLCBpdlNpemUgKiA0KVxyXG4gICAgICAgIGtleS5zaWdCeXRlcyA9IGtleVNpemUgKiA0XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBwYXJhbXNcclxuICAgICAgICByZXR1cm4gQ2lwaGVyUGFyYW1zLmNyZWF0ZSh7XHJcbiAgICAgICAgICBrZXk6IGtleSxcclxuICAgICAgICAgIGl2OiBpdixcclxuICAgICAgICAgIHNhbHQ6IHNhbHRcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIHNlcmlhbGl6YWJsZSBjaXBoZXIgd3JhcHBlciB0aGF0IGRlcml2ZXMgdGhlIGtleSBmcm9tIGEgcGFzc3dvcmQsXHJcbiAgICAgKiBhbmQgcmV0dXJucyBjaXBoZXJ0ZXh0IGFzIGEgc2VyaWFsaXphYmxlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxyXG4gICAgICovXHJcbiAgICB2YXIgUGFzc3dvcmRCYXNlZENpcGhlciA9IENfbGliLlBhc3N3b3JkQmFzZWRDaXBoZXIgPSBTZXJpYWxpemFibGVDaXBoZXIuZXh0ZW5kKHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cclxuICAgICAgICpcclxuICAgICAgICogQHByb3BlcnR5IHtLREZ9IGtkZiBUaGUga2V5IGRlcml2YXRpb24gZnVuY3Rpb24gdG8gdXNlIHRvIGdlbmVyYXRlIGEga2V5IGFuZCBJViBmcm9tIGEgcGFzc3dvcmQuIERlZmF1bHQ6IE9wZW5TU0xcclxuICAgICAgICovXHJcbiAgICAgIGNmZzogU2VyaWFsaXphYmxlQ2lwaGVyLmNmZy5leHRlbmQoe1xyXG4gICAgICAgIGtkZjogT3BlblNTTEtkZlxyXG4gICAgICB9KSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBFbmNyeXB0cyBhIG1lc3NhZ2UgdXNpbmcgYSBwYXNzd29yZC5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtDaXBoZXJ9IGNpcGhlciBUaGUgY2lwaGVyIGFsZ29yaXRobSB0byB1c2UuXHJcbiAgICAgICAqIEBwYXJhbSB7V29yZEFycmF5fHN0cmluZ30gbWVzc2FnZSBUaGUgbWVzc2FnZSB0byBlbmNyeXB0LlxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGFzc3dvcmQgVGhlIHBhc3N3b3JkLlxyXG4gICAgICAgKiBAcGFyYW0ge09iamVjdH0gY2ZnIChPcHRpb25hbCkgVGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyB0byB1c2UgZm9yIHRoaXMgb3BlcmF0aW9uLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcmV0dXJuIHtDaXBoZXJQYXJhbXN9IEEgY2lwaGVyIHBhcmFtcyBvYmplY3QuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBjaXBoZXJ0ZXh0UGFyYW1zID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZW5jcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgbWVzc2FnZSwgJ3Bhc3N3b3JkJyk7XHJcbiAgICAgICAqICAgICB2YXIgY2lwaGVydGV4dFBhcmFtcyA9IENyeXB0b0pTLmxpYi5QYXNzd29yZEJhc2VkQ2lwaGVyLmVuY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIG1lc3NhZ2UsICdwYXNzd29yZCcsIHsgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcclxuICAgICAgICovXHJcbiAgICAgIGVuY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIG1lc3NhZ2UsIHBhc3N3b3JkLCBjZmcpIHtcclxuICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcclxuICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKVxyXG5cclxuICAgICAgICAvLyBEZXJpdmUga2V5IGFuZCBvdGhlciBwYXJhbXNcclxuICAgICAgICB2YXIgZGVyaXZlZFBhcmFtcyA9IGNmZy5rZGYuZXhlY3V0ZShwYXNzd29yZCwgY2lwaGVyLmtleVNpemUsIGNpcGhlci5pdlNpemUpXHJcblxyXG4gICAgICAgIC8vIEFkZCBJViB0byBjb25maWdcclxuICAgICAgICBjZmcuaXYgPSBkZXJpdmVkUGFyYW1zLml2XHJcblxyXG4gICAgICAgIC8vIEVuY3J5cHRcclxuICAgICAgICB2YXIgY2lwaGVydGV4dCA9IFNlcmlhbGl6YWJsZUNpcGhlci5lbmNyeXB0LmNhbGwodGhpcywgY2lwaGVyLCBtZXNzYWdlLCBkZXJpdmVkUGFyYW1zLmtleSwgY2ZnKVxyXG5cclxuICAgICAgICAvLyBNaXggaW4gZGVyaXZlZCBwYXJhbXNcclxuICAgICAgICBjaXBoZXJ0ZXh0Lm1peEluKGRlcml2ZWRQYXJhbXMpXHJcblxyXG4gICAgICAgIHJldHVybiBjaXBoZXJ0ZXh0XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvKipcclxuICAgICAgICogRGVjcnlwdHMgc2VyaWFsaXplZCBjaXBoZXJ0ZXh0IHVzaW5nIGEgcGFzc3dvcmQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7Q2lwaGVyfSBjaXBoZXIgVGhlIGNpcGhlciBhbGdvcml0aG0gdG8gdXNlLlxyXG4gICAgICAgKiBAcGFyYW0ge0NpcGhlclBhcmFtc3xzdHJpbmd9IGNpcGhlcnRleHQgVGhlIGNpcGhlcnRleHQgdG8gZGVjcnlwdC5cclxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHBhc3N3b3JkIFRoZSBwYXNzd29yZC5cclxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IGNmZyAoT3B0aW9uYWwpIFRoZSBjb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gdXNlIGZvciB0aGlzIG9wZXJhdGlvbi5cclxuICAgICAgICpcclxuICAgICAgICogQHJldHVybiB7V29yZEFycmF5fSBUaGUgcGxhaW50ZXh0LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgcGxhaW50ZXh0ID0gQ3J5cHRvSlMubGliLlBhc3N3b3JkQmFzZWRDaXBoZXIuZGVjcnlwdChDcnlwdG9KUy5hbGdvLkFFUywgZm9ybWF0dGVkQ2lwaGVydGV4dCwgJ3Bhc3N3b3JkJywgeyBmb3JtYXQ6IENyeXB0b0pTLmZvcm1hdC5PcGVuU1NMIH0pO1xyXG4gICAgICAgKiAgICAgdmFyIHBsYWludGV4dCA9IENyeXB0b0pTLmxpYi5QYXNzd29yZEJhc2VkQ2lwaGVyLmRlY3J5cHQoQ3J5cHRvSlMuYWxnby5BRVMsIGNpcGhlcnRleHRQYXJhbXMsICdwYXNzd29yZCcsIHsgZm9ybWF0OiBDcnlwdG9KUy5mb3JtYXQuT3BlblNTTCB9KTtcclxuICAgICAgICovXHJcbiAgICAgIGRlY3J5cHQ6IGZ1bmN0aW9uIChjaXBoZXIsIGNpcGhlcnRleHQsIHBhc3N3b3JkLCBjZmcpIHtcclxuICAgICAgICAvLyBBcHBseSBjb25maWcgZGVmYXVsdHNcclxuICAgICAgICBjZmcgPSB0aGlzLmNmZy5leHRlbmQoY2ZnKVxyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBDaXBoZXJQYXJhbXNcclxuICAgICAgICBjaXBoZXJ0ZXh0ID0gdGhpcy5fcGFyc2UoY2lwaGVydGV4dCwgY2ZnLmZvcm1hdClcclxuXHJcbiAgICAgICAgLy8gRGVyaXZlIGtleSBhbmQgb3RoZXIgcGFyYW1zXHJcbiAgICAgICAgdmFyIGRlcml2ZWRQYXJhbXMgPSBjZmcua2RmLmV4ZWN1dGUocGFzc3dvcmQsIGNpcGhlci5rZXlTaXplLCBjaXBoZXIuaXZTaXplLCBjaXBoZXJ0ZXh0LnNhbHQpXHJcblxyXG4gICAgICAgIC8vIEFkZCBJViB0byBjb25maWdcclxuICAgICAgICBjZmcuaXYgPSBkZXJpdmVkUGFyYW1zLml2XHJcblxyXG4gICAgICAgIC8vIERlY3J5cHRcclxuICAgICAgICB2YXIgcGxhaW50ZXh0ID0gU2VyaWFsaXphYmxlQ2lwaGVyLmRlY3J5cHQuY2FsbCh0aGlzLCBjaXBoZXIsIGNpcGhlcnRleHQsIGRlcml2ZWRQYXJhbXMua2V5LCBjZmcpXHJcblxyXG4gICAgICAgIHJldHVybiBwbGFpbnRleHRcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9KCkpXHJcblxyXG5cclxuICAvKipcclxuICAgKiBDaXBoZXIgRmVlZGJhY2sgYmxvY2sgbW9kZS5cclxuICAgKi9cclxuICBDcnlwdG9KUy5tb2RlLkNGQiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgQ0ZCID0gQ3J5cHRvSlMubGliLkJsb2NrQ2lwaGVyTW9kZS5leHRlbmQoKVxyXG5cclxuICAgIENGQi5FbmNyeXB0b3IgPSBDRkIuZXh0ZW5kKHtcclxuICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXJcclxuICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZVxyXG5cclxuICAgICAgICBnZW5lcmF0ZUtleXN0cmVhbUFuZEVuY3J5cHQuY2FsbCh0aGlzLCB3b3Jkcywgb2Zmc2V0LCBibG9ja1NpemUsIGNpcGhlcilcclxuXHJcbiAgICAgICAgLy8gUmVtZW1iZXIgdGhpcyBibG9jayB0byB1c2Ugd2l0aCBuZXh0IGJsb2NrXHJcbiAgICAgICAgdGhpcy5fcHJldkJsb2NrID0gd29yZHMuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBibG9ja1NpemUpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgQ0ZCLkRlY3J5cHRvciA9IENGQi5leHRlbmQoe1xyXG4gICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlclxyXG4gICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplXHJcblxyXG4gICAgICAgIC8vIFJlbWVtYmVyIHRoaXMgYmxvY2sgdG8gdXNlIHdpdGggbmV4dCBibG9ja1xyXG4gICAgICAgIHZhciB0aGlzQmxvY2sgPSB3b3Jkcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGJsb2NrU2l6ZSlcclxuXHJcbiAgICAgICAgZ2VuZXJhdGVLZXlzdHJlYW1BbmRFbmNyeXB0LmNhbGwodGhpcywgd29yZHMsIG9mZnNldCwgYmxvY2tTaXplLCBjaXBoZXIpXHJcblxyXG4gICAgICAgIC8vIFRoaXMgYmxvY2sgYmVjb21lcyB0aGUgcHJldmlvdXMgYmxvY2tcclxuICAgICAgICB0aGlzLl9wcmV2QmxvY2sgPSB0aGlzQmxvY2tcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUtleXN0cmVhbUFuZEVuY3J5cHQod29yZHMsIG9mZnNldCwgYmxvY2tTaXplLCBjaXBoZXIpIHtcclxuICAgICAgLy8gU2hvcnRjdXRcclxuICAgICAgdmFyIGl2ID0gdGhpcy5faXZcclxuXHJcbiAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbVxyXG4gICAgICBpZiAoaXYpIHtcclxuICAgICAgICB2YXIga2V5c3RyZWFtID0gaXYuc2xpY2UoMClcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2Nrc1xyXG4gICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIGtleXN0cmVhbSA9IHRoaXMuX3ByZXZCbG9ja1xyXG4gICAgICB9XHJcbiAgICAgIGNpcGhlci5lbmNyeXB0QmxvY2soa2V5c3RyZWFtLCAwKVxyXG5cclxuICAgICAgLy8gRW5jcnlwdFxyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgd29yZHNbb2Zmc2V0ICsgaV0gXj0ga2V5c3RyZWFtW2ldXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gQ0ZCXHJcbiAgfSgpKVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogRWxlY3Ryb25pYyBDb2RlYm9vayBibG9jayBtb2RlLlxyXG4gICAqL1xyXG4gIENyeXB0b0pTLm1vZGUuRUNCID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBFQ0IgPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpXHJcblxyXG4gICAgRUNCLkVuY3J5cHRvciA9IEVDQi5leHRlbmQoe1xyXG4gICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XHJcbiAgICAgICAgdGhpcy5fY2lwaGVyLmVuY3J5cHRCbG9jayh3b3Jkcywgb2Zmc2V0KVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIEVDQi5EZWNyeXB0b3IgPSBFQ0IuZXh0ZW5kKHtcclxuICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xyXG4gICAgICAgIHRoaXMuX2NpcGhlci5kZWNyeXB0QmxvY2sod29yZHMsIG9mZnNldClcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICByZXR1cm4gRUNCXHJcbiAgfSgpKVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogQU5TSSBYLjkyMyBwYWRkaW5nIHN0cmF0ZWd5LlxyXG4gICAqL1xyXG4gIENyeXB0b0pTLnBhZC5BbnNpWDkyMyA9IHtcclxuICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkge1xyXG4gICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgdmFyIGRhdGFTaWdCeXRlcyA9IGRhdGEuc2lnQnl0ZXNcclxuICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNFxyXG5cclxuICAgICAgLy8gQ291bnQgcGFkZGluZyBieXRlc1xyXG4gICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YVNpZ0J5dGVzICUgYmxvY2tTaXplQnl0ZXNcclxuXHJcbiAgICAgIC8vIENvbXB1dGUgbGFzdCBieXRlIHBvc2l0aW9uXHJcbiAgICAgIHZhciBsYXN0Qnl0ZVBvcyA9IGRhdGFTaWdCeXRlcyArIG5QYWRkaW5nQnl0ZXMgLSAxXHJcblxyXG4gICAgICAvLyBQYWRcclxuICAgICAgZGF0YS5jbGFtcCgpXHJcbiAgICAgIGRhdGEud29yZHNbbGFzdEJ5dGVQb3MgPj4+IDJdIHw9IG5QYWRkaW5nQnl0ZXMgPDwgKDI0IC0gKGxhc3RCeXRlUG9zICUgNCkgKiA4KVxyXG4gICAgICBkYXRhLnNpZ0J5dGVzICs9IG5QYWRkaW5nQnl0ZXNcclxuICAgIH0sXHJcblxyXG4gICAgdW5wYWQ6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgIC8vIEdldCBudW1iZXIgb2YgcGFkZGluZyBieXRlcyBmcm9tIGxhc3QgYnl0ZVxyXG4gICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmXHJcblxyXG4gICAgICAvLyBSZW1vdmUgcGFkZGluZ1xyXG4gICAgICBkYXRhLnNpZ0J5dGVzIC09IG5QYWRkaW5nQnl0ZXNcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBJU08gMTAxMjYgcGFkZGluZyBzdHJhdGVneS5cclxuICAgKi9cclxuICBDcnlwdG9KUy5wYWQuSXNvMTAxMjYgPSB7XHJcbiAgICBwYWQ6IGZ1bmN0aW9uIChkYXRhLCBibG9ja1NpemUpIHtcclxuICAgICAgLy8gU2hvcnRjdXRcclxuICAgICAgdmFyIGJsb2NrU2l6ZUJ5dGVzID0gYmxvY2tTaXplICogNFxyXG5cclxuICAgICAgLy8gQ291bnQgcGFkZGluZyBieXRlc1xyXG4gICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGJsb2NrU2l6ZUJ5dGVzIC0gZGF0YS5zaWdCeXRlcyAlIGJsb2NrU2l6ZUJ5dGVzXHJcblxyXG4gICAgICAvLyBQYWRcclxuICAgICAgZGF0YS5jb25jYXQoQ3J5cHRvSlMubGliLldvcmRBcnJheS5yYW5kb20oblBhZGRpbmdCeXRlcyAtIDEpKVxyXG4gICAgICAgIC5jb25jYXQoQ3J5cHRvSlMubGliLldvcmRBcnJheS5jcmVhdGUoW25QYWRkaW5nQnl0ZXMgPDwgMjRdLCAxKSlcclxuICAgIH0sXHJcblxyXG4gICAgdW5wYWQ6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgIC8vIEdldCBudW1iZXIgb2YgcGFkZGluZyBieXRlcyBmcm9tIGxhc3QgYnl0ZVxyXG4gICAgICB2YXIgblBhZGRpbmdCeXRlcyA9IGRhdGEud29yZHNbKGRhdGEuc2lnQnl0ZXMgLSAxKSA+Pj4gMl0gJiAweGZmXHJcblxyXG4gICAgICAvLyBSZW1vdmUgcGFkZGluZ1xyXG4gICAgICBkYXRhLnNpZ0J5dGVzIC09IG5QYWRkaW5nQnl0ZXNcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiBJU08vSUVDIDk3OTctMSBQYWRkaW5nIE1ldGhvZCAyLlxyXG4gICAqL1xyXG4gIENyeXB0b0pTLnBhZC5Jc285Nzk3MSA9IHtcclxuICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkge1xyXG4gICAgICAvLyBBZGQgMHg4MCBieXRlXHJcbiAgICAgIGRhdGEuY29uY2F0KENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkuY3JlYXRlKFsweDgwMDAwMDAwXSwgMSkpXHJcblxyXG4gICAgICAvLyBaZXJvIHBhZCB0aGUgcmVzdFxyXG4gICAgICBDcnlwdG9KUy5wYWQuWmVyb1BhZGRpbmcucGFkKGRhdGEsIGJsb2NrU2l6ZSlcclxuICAgIH0sXHJcblxyXG4gICAgdW5wYWQ6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgIC8vIFJlbW92ZSB6ZXJvIHBhZGRpbmdcclxuICAgICAgQ3J5cHRvSlMucGFkLlplcm9QYWRkaW5nLnVucGFkKGRhdGEpXHJcblxyXG4gICAgICAvLyBSZW1vdmUgb25lIG1vcmUgYnl0ZSAtLSB0aGUgMHg4MCBieXRlXHJcbiAgICAgIGRhdGEuc2lnQnl0ZXMtLVxyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIE91dHB1dCBGZWVkYmFjayBibG9jayBtb2RlLlxyXG4gICAqL1xyXG4gIENyeXB0b0pTLm1vZGUuT0ZCID0gKGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBPRkIgPSBDcnlwdG9KUy5saWIuQmxvY2tDaXBoZXJNb2RlLmV4dGVuZCgpXHJcblxyXG4gICAgdmFyIEVuY3J5cHRvciA9IE9GQi5FbmNyeXB0b3IgPSBPRkIuZXh0ZW5kKHtcclxuICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXJcclxuICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZVxyXG4gICAgICAgIHZhciBpdiA9IHRoaXMuX2l2XHJcbiAgICAgICAgdmFyIGtleXN0cmVhbSA9IHRoaXMuX2tleXN0cmVhbVxyXG5cclxuICAgICAgICAvLyBHZW5lcmF0ZSBrZXlzdHJlYW1cclxuICAgICAgICBpZiAoaXYpIHtcclxuICAgICAgICAgIGtleXN0cmVhbSA9IHRoaXMuX2tleXN0cmVhbSA9IGl2LnNsaWNlKDApXHJcblxyXG4gICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2Nrc1xyXG4gICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWRcclxuICAgICAgICB9XHJcbiAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayhrZXlzdHJlYW0sIDApXHJcblxyXG4gICAgICAgIC8vIEVuY3J5cHRcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgT0ZCLkRlY3J5cHRvciA9IEVuY3J5cHRvclxyXG5cclxuICAgIHJldHVybiBPRkJcclxuICB9KCkpXHJcblxyXG5cclxuICAvKipcclxuICAgKiBBIG5vb3AgcGFkZGluZyBzdHJhdGVneS5cclxuICAgKi9cclxuICBDcnlwdG9KUy5wYWQuTm9QYWRkaW5nID0ge1xyXG4gICAgcGFkOiBmdW5jdGlvbiAoKSB7fSxcclxuXHJcbiAgICB1bnBhZDogZnVuY3Rpb24gKCkge31cclxuICB9O1xyXG5cclxuXHJcbiAgKGZ1bmN0aW9uICh1bmRlZmluZWQpIHtcclxuICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgdmFyIEMgPSBDcnlwdG9KU1xyXG4gICAgdmFyIENfbGliID0gQy5saWJcclxuICAgIHZhciBDaXBoZXJQYXJhbXMgPSBDX2xpYi5DaXBoZXJQYXJhbXNcclxuICAgIHZhciBDX2VuYyA9IEMuZW5jXHJcbiAgICB2YXIgSGV4ID0gQ19lbmMuSGV4XHJcbiAgICB2YXIgQ19mb3JtYXQgPSBDLmZvcm1hdFxyXG5cclxuICAgIHZhciBIZXhGb3JtYXR0ZXIgPSBDX2Zvcm1hdC5IZXggPSB7XHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb252ZXJ0cyB0aGUgY2lwaGVydGV4dCBvZiBhIGNpcGhlciBwYXJhbXMgb2JqZWN0IHRvIGEgaGV4YWRlY2ltYWxseSBlbmNvZGVkIHN0cmluZy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtDaXBoZXJQYXJhbXN9IGNpcGhlclBhcmFtcyBUaGUgY2lwaGVyIHBhcmFtcyBvYmplY3QuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICpcclxuICAgICAgICogQGV4YW1wbGVcclxuICAgICAgICpcclxuICAgICAgICogICAgIHZhciBoZXhTdHJpbmcgPSBDcnlwdG9KUy5mb3JtYXQuSGV4LnN0cmluZ2lmeShjaXBoZXJQYXJhbXMpO1xyXG4gICAgICAgKi9cclxuICAgICAgc3RyaW5naWZ5OiBmdW5jdGlvbiAoY2lwaGVyUGFyYW1zKSB7XHJcbiAgICAgICAgcmV0dXJuIGNpcGhlclBhcmFtcy5jaXBoZXJ0ZXh0LnRvU3RyaW5nKEhleClcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8qKlxyXG4gICAgICAgKiBDb252ZXJ0cyBhIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBjaXBoZXJ0ZXh0IHN0cmluZyB0byBhIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgVGhlIGhleGFkZWNpbWFsbHkgZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEByZXR1cm4ge0NpcGhlclBhcmFtc30gVGhlIGNpcGhlciBwYXJhbXMgb2JqZWN0LlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBleGFtcGxlXHJcbiAgICAgICAqXHJcbiAgICAgICAqICAgICB2YXIgY2lwaGVyUGFyYW1zID0gQ3J5cHRvSlMuZm9ybWF0LkhleC5wYXJzZShoZXhTdHJpbmcpO1xyXG4gICAgICAgKi9cclxuICAgICAgcGFyc2U6IGZ1bmN0aW9uIChpbnB1dCkge1xyXG4gICAgICAgIHZhciBjaXBoZXJ0ZXh0ID0gSGV4LnBhcnNlKGlucHV0KVxyXG4gICAgICAgIHJldHVybiBDaXBoZXJQYXJhbXMuY3JlYXRlKHtcclxuICAgICAgICAgIGNpcGhlcnRleHQ6IGNpcGhlcnRleHRcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSgpKTtcclxuXHJcblxyXG4gIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBTaG9ydGN1dHNcclxuICAgIHZhciBDID0gQ3J5cHRvSlNcclxuICAgIHZhciBDX2xpYiA9IEMubGliXHJcbiAgICB2YXIgQmxvY2tDaXBoZXIgPSBDX2xpYi5CbG9ja0NpcGhlclxyXG4gICAgdmFyIENfYWxnbyA9IEMuYWxnb1xyXG5cclxuICAgIC8vIExvb2t1cCB0YWJsZXNcclxuICAgIHZhciBTQk9YID0gW11cclxuICAgIHZhciBJTlZfU0JPWCA9IFtdXHJcbiAgICB2YXIgU1VCX01JWF8wID0gW11cclxuICAgIHZhciBTVUJfTUlYXzEgPSBbXVxyXG4gICAgdmFyIFNVQl9NSVhfMiA9IFtdXHJcbiAgICB2YXIgU1VCX01JWF8zID0gW11cclxuICAgIHZhciBJTlZfU1VCX01JWF8wID0gW11cclxuICAgIHZhciBJTlZfU1VCX01JWF8xID0gW11cclxuICAgIHZhciBJTlZfU1VCX01JWF8yID0gW11cclxuICAgIHZhciBJTlZfU1VCX01JWF8zID0gW107XHJcblxyXG4gICAgLy8gQ29tcHV0ZSBsb29rdXAgdGFibGVzXHJcbiAgICAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAvLyBDb21wdXRlIGRvdWJsZSB0YWJsZVxyXG4gICAgICB2YXIgZCA9IFtdXHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcclxuICAgICAgICBpZiAoaSA8IDEyOCkge1xyXG4gICAgICAgICAgZFtpXSA9IGkgPDwgMVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBkW2ldID0gKGkgPDwgMSkgXiAweDExYlxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gV2FsayBHRigyXjgpXHJcbiAgICAgIHZhciB4ID0gMFxyXG4gICAgICB2YXIgeGkgPSAwXHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcclxuICAgICAgICAvLyBDb21wdXRlIHNib3hcclxuICAgICAgICB2YXIgc3ggPSB4aSBeICh4aSA8PCAxKSBeICh4aSA8PCAyKSBeICh4aSA8PCAzKSBeICh4aSA8PCA0KVxyXG4gICAgICAgIHN4ID0gKHN4ID4+PiA4KSBeIChzeCAmIDB4ZmYpIF4gMHg2M1xyXG4gICAgICAgIFNCT1hbeF0gPSBzeFxyXG4gICAgICAgIElOVl9TQk9YW3N4XSA9IHhcclxuXHJcbiAgICAgICAgLy8gQ29tcHV0ZSBtdWx0aXBsaWNhdGlvblxyXG4gICAgICAgIHZhciB4MiA9IGRbeF1cclxuICAgICAgICB2YXIgeDQgPSBkW3gyXVxyXG4gICAgICAgIHZhciB4OCA9IGRbeDRdXHJcblxyXG4gICAgICAgIC8vIENvbXB1dGUgc3ViIGJ5dGVzLCBtaXggY29sdW1ucyB0YWJsZXNcclxuICAgICAgICB2YXIgdCA9IChkW3N4XSAqIDB4MTAxKSBeIChzeCAqIDB4MTAxMDEwMClcclxuICAgICAgICBTVUJfTUlYXzBbeF0gPSAodCA8PCAyNCkgfCAodCA+Pj4gOClcclxuICAgICAgICBTVUJfTUlYXzFbeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXHJcbiAgICAgICAgU1VCX01JWF8yW3hdID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXHJcbiAgICAgICAgU1VCX01JWF8zW3hdID0gdFxyXG5cclxuICAgICAgICAvLyBDb21wdXRlIGludiBzdWIgYnl0ZXMsIGludiBtaXggY29sdW1ucyB0YWJsZXNcclxuICAgICAgICB2YXIgdCA9ICh4OCAqIDB4MTAxMDEwMSkgXiAoeDQgKiAweDEwMDAxKSBeICh4MiAqIDB4MTAxKSBeICh4ICogMHgxMDEwMTAwKVxyXG4gICAgICAgIElOVl9TVUJfTUlYXzBbc3hdID0gKHQgPDwgMjQpIHwgKHQgPj4+IDgpXHJcbiAgICAgICAgSU5WX1NVQl9NSVhfMVtzeF0gPSAodCA8PCAxNikgfCAodCA+Pj4gMTYpXHJcbiAgICAgICAgSU5WX1NVQl9NSVhfMltzeF0gPSAodCA8PCA4KSB8ICh0ID4+PiAyNClcclxuICAgICAgICBJTlZfU1VCX01JWF8zW3N4XSA9IHRcclxuXHJcbiAgICAgICAgLy8gQ29tcHV0ZSBuZXh0IGNvdW50ZXJcclxuICAgICAgICBpZiAoIXgpIHtcclxuICAgICAgICAgIHggPSB4aSA9IDFcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgeCA9IHgyIF4gZFtkW2RbeDggXiB4Ml1dXVxyXG4gICAgICAgICAgeGkgXj0gZFtkW3hpXV1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0oKSlcclxuXHJcbiAgICAvLyBQcmVjb21wdXRlZCBSY29uIGxvb2t1cFxyXG4gICAgdmFyIFJDT04gPSBbMHgwMCwgMHgwMSwgMHgwMiwgMHgwNCwgMHgwOCwgMHgxMCwgMHgyMCwgMHg0MCwgMHg4MCwgMHgxYiwgMHgzNl1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFFUyBibG9jayBjaXBoZXIgYWxnb3JpdGhtLlxyXG4gICAgICovXHJcbiAgICB2YXIgQUVTID0gQ19hbGdvLkFFUyA9IEJsb2NrQ2lwaGVyLmV4dGVuZCh7XHJcbiAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gU2tpcCByZXNldCBvZiBuUm91bmRzIGhhcyBiZWVuIHNldCBiZWZvcmUgYW5kIGtleSBkaWQgbm90IGNoYW5nZVxyXG4gICAgICAgIGlmICh0aGlzLl9uUm91bmRzICYmIHRoaXMuX2tleVByaW9yUmVzZXQgPT09IHRoaXMuX2tleSkge1xyXG4gICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5UHJpb3JSZXNldCA9IHRoaXMuX2tleVxyXG4gICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3Jkc1xyXG4gICAgICAgIHZhciBrZXlTaXplID0ga2V5LnNpZ0J5dGVzIC8gNFxyXG5cclxuICAgICAgICAvLyBDb21wdXRlIG51bWJlciBvZiByb3VuZHNcclxuICAgICAgICB2YXIgblJvdW5kcyA9IHRoaXMuX25Sb3VuZHMgPSBrZXlTaXplICsgNlxyXG5cclxuICAgICAgICAvLyBDb21wdXRlIG51bWJlciBvZiBrZXkgc2NoZWR1bGUgcm93c1xyXG4gICAgICAgIHZhciBrc1Jvd3MgPSAoblJvdW5kcyArIDEpICogNFxyXG5cclxuICAgICAgICAvLyBDb21wdXRlIGtleSBzY2hlZHVsZVxyXG4gICAgICAgIHZhciBrZXlTY2hlZHVsZSA9IHRoaXMuX2tleVNjaGVkdWxlID0gW11cclxuICAgICAgICBmb3IgKHZhciBrc1JvdyA9IDA7IGtzUm93IDwga3NSb3dzOyBrc1JvdysrKSB7XHJcbiAgICAgICAgICBpZiAoa3NSb3cgPCBrZXlTaXplKSB7XHJcbiAgICAgICAgICAgIGtleVNjaGVkdWxlW2tzUm93XSA9IGtleVdvcmRzW2tzUm93XVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrc1JvdyAtIDFdXHJcblxyXG4gICAgICAgICAgICBpZiAoIShrc1JvdyAlIGtleVNpemUpKSB7XHJcbiAgICAgICAgICAgICAgLy8gUm90IHdvcmRcclxuICAgICAgICAgICAgICB0ID0gKHQgPDwgOCkgfCAodCA+Pj4gMjQpXHJcblxyXG4gICAgICAgICAgICAgIC8vIFN1YiB3b3JkXHJcbiAgICAgICAgICAgICAgdCA9IChTQk9YW3QgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsodCA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHQgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3QgJiAweGZmXVxyXG5cclxuICAgICAgICAgICAgICAvLyBNaXggUmNvblxyXG4gICAgICAgICAgICAgIHQgXj0gUkNPTlsoa3NSb3cgLyBrZXlTaXplKSB8IDBdIDw8IDI0XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5U2l6ZSA+IDYgJiYga3NSb3cgJSBrZXlTaXplID09IDQpIHtcclxuICAgICAgICAgICAgICAvLyBTdWIgd29yZFxyXG4gICAgICAgICAgICAgIHQgPSAoU0JPWFt0ID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHQgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyh0ID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFt0ICYgMHhmZl1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAga2V5U2NoZWR1bGVba3NSb3ddID0ga2V5U2NoZWR1bGVba3NSb3cgLSBrZXlTaXplXSBeIHRcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENvbXB1dGUgaW52IGtleSBzY2hlZHVsZVxyXG4gICAgICAgIHZhciBpbnZLZXlTY2hlZHVsZSA9IHRoaXMuX2ludktleVNjaGVkdWxlID0gW11cclxuICAgICAgICBmb3IgKHZhciBpbnZLc1JvdyA9IDA7IGludktzUm93IDwga3NSb3dzOyBpbnZLc1JvdysrKSB7XHJcbiAgICAgICAgICB2YXIga3NSb3cgPSBrc1Jvd3MgLSBpbnZLc1Jvd1xyXG5cclxuICAgICAgICAgIGlmIChpbnZLc1JvdyAlIDQpIHtcclxuICAgICAgICAgICAgdmFyIHQgPSBrZXlTY2hlZHVsZVtrc1Jvd11cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciB0ID0ga2V5U2NoZWR1bGVba3NSb3cgLSA0XVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGlmIChpbnZLc1JvdyA8IDQgfHwga3NSb3cgPD0gNCkge1xyXG4gICAgICAgICAgICBpbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPSB0XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbnZLZXlTY2hlZHVsZVtpbnZLc1Jvd10gPSBJTlZfU1VCX01JWF8wW1NCT1hbdCA+Pj4gMjRdXSBeIElOVl9TVUJfTUlYXzFbU0JPWFsodCA+Pj4gMTYpICYgMHhmZl1dIF5cclxuICAgICAgICAgICAgICBJTlZfU1VCX01JWF8yW1NCT1hbKHQgPj4+IDgpICYgMHhmZl1dIF4gSU5WX1NVQl9NSVhfM1tTQk9YW3QgJiAweGZmXV1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBlbmNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcclxuICAgICAgICB0aGlzLl9kb0NyeXB0QmxvY2soTSwgb2Zmc2V0LCB0aGlzLl9rZXlTY2hlZHVsZSwgU1VCX01JWF8wLCBTVUJfTUlYXzEsIFNVQl9NSVhfMiwgU1VCX01JWF8zLCBTQk9YKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgZGVjcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgLy8gU3dhcCAybmQgYW5kIDR0aCByb3dzXHJcbiAgICAgICAgdmFyIHQgPSBNW29mZnNldCArIDFdXHJcbiAgICAgICAgTVtvZmZzZXQgKyAxXSA9IE1bb2Zmc2V0ICsgM11cclxuICAgICAgICBNW29mZnNldCArIDNdID0gdFxyXG5cclxuICAgICAgICB0aGlzLl9kb0NyeXB0QmxvY2soTSwgb2Zmc2V0LCB0aGlzLl9pbnZLZXlTY2hlZHVsZSwgSU5WX1NVQl9NSVhfMCwgSU5WX1NVQl9NSVhfMSwgSU5WX1NVQl9NSVhfMiwgSU5WX1NVQl9NSVhfMywgSU5WX1NCT1gpXHJcblxyXG4gICAgICAgIC8vIEludiBzd2FwIDJuZCBhbmQgNHRoIHJvd3NcclxuICAgICAgICB2YXIgdCA9IE1bb2Zmc2V0ICsgMV1cclxuICAgICAgICBNW29mZnNldCArIDFdID0gTVtvZmZzZXQgKyAzXVxyXG4gICAgICAgIE1bb2Zmc2V0ICsgM10gPSB0XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBfZG9DcnlwdEJsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0LCBrZXlTY2hlZHVsZSwgU1VCX01JWF8wLCBTVUJfTUlYXzEsIFNVQl9NSVhfMiwgU1VCX01JWF8zLCBTQk9YKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRcclxuICAgICAgICB2YXIgblJvdW5kcyA9IHRoaXMuX25Sb3VuZHNcclxuXHJcbiAgICAgICAgLy8gR2V0IGlucHV0LCBhZGQgcm91bmQga2V5XHJcbiAgICAgICAgdmFyIHMwID0gTVtvZmZzZXRdIF4ga2V5U2NoZWR1bGVbMF1cclxuICAgICAgICB2YXIgczEgPSBNW29mZnNldCArIDFdIF4ga2V5U2NoZWR1bGVbMV1cclxuICAgICAgICB2YXIgczIgPSBNW29mZnNldCArIDJdIF4ga2V5U2NoZWR1bGVbMl1cclxuICAgICAgICB2YXIgczMgPSBNW29mZnNldCArIDNdIF4ga2V5U2NoZWR1bGVbM11cclxuXHJcbiAgICAgICAgLy8gS2V5IHNjaGVkdWxlIHJvdyBjb3VudGVyXHJcbiAgICAgICAgdmFyIGtzUm93ID0gNFxyXG5cclxuICAgICAgICAvLyBSb3VuZHNcclxuICAgICAgICBmb3IgKHZhciByb3VuZCA9IDE7IHJvdW5kIDwgblJvdW5kczsgcm91bmQrKykge1xyXG4gICAgICAgICAgLy8gU2hpZnQgcm93cywgc3ViIGJ5dGVzLCBtaXggY29sdW1ucywgYWRkIHJvdW5kIGtleVxyXG4gICAgICAgICAgdmFyIHQwID0gU1VCX01JWF8wW3MwID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMxID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczIgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczMgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXHJcbiAgICAgICAgICB2YXIgdDEgPSBTVUJfTUlYXzBbczEgPj4+IDI0XSBeIFNVQl9NSVhfMVsoczIgPj4+IDE2KSAmIDB4ZmZdIF4gU1VCX01JWF8yWyhzMyA+Pj4gOCkgJiAweGZmXSBeIFNVQl9NSVhfM1tzMCAmIDB4ZmZdIF4ga2V5U2NoZWR1bGVba3NSb3crK11cclxuICAgICAgICAgIHZhciB0MiA9IFNVQl9NSVhfMFtzMiA+Pj4gMjRdIF4gU1VCX01JWF8xWyhzMyA+Pj4gMTYpICYgMHhmZl0gXiBTVUJfTUlYXzJbKHMwID4+PiA4KSAmIDB4ZmZdIF4gU1VCX01JWF8zW3MxICYgMHhmZl0gXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxyXG4gICAgICAgICAgdmFyIHQzID0gU1VCX01JWF8wW3MzID4+PiAyNF0gXiBTVUJfTUlYXzFbKHMwID4+PiAxNikgJiAweGZmXSBeIFNVQl9NSVhfMlsoczEgPj4+IDgpICYgMHhmZl0gXiBTVUJfTUlYXzNbczIgJiAweGZmXSBeIGtleVNjaGVkdWxlW2tzUm93KytdXHJcblxyXG4gICAgICAgICAgLy8gVXBkYXRlIHN0YXRlXHJcbiAgICAgICAgICBzMCA9IHQwXHJcbiAgICAgICAgICBzMSA9IHQxXHJcbiAgICAgICAgICBzMiA9IHQyXHJcbiAgICAgICAgICBzMyA9IHQzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTaGlmdCByb3dzLCBzdWIgYnl0ZXMsIGFkZCByb3VuZCBrZXlcclxuICAgICAgICB2YXIgdDAgPSAoKFNCT1hbczAgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczEgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMiA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczMgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxyXG4gICAgICAgIHZhciB0MSA9ICgoU0JPWFtzMSA+Pj4gMjRdIDw8IDI0KSB8IChTQk9YWyhzMiA+Pj4gMTYpICYgMHhmZl0gPDwgMTYpIHwgKFNCT1hbKHMzID4+PiA4KSAmIDB4ZmZdIDw8IDgpIHwgU0JPWFtzMCAmIDB4ZmZdKSBeIGtleVNjaGVkdWxlW2tzUm93KytdXHJcbiAgICAgICAgdmFyIHQyID0gKChTQk9YW3MyID4+PiAyNF0gPDwgMjQpIHwgKFNCT1hbKHMzID4+PiAxNikgJiAweGZmXSA8PCAxNikgfCAoU0JPWFsoczAgPj4+IDgpICYgMHhmZl0gPDwgOCkgfCBTQk9YW3MxICYgMHhmZl0pIF4ga2V5U2NoZWR1bGVba3NSb3crK11cclxuICAgICAgICB2YXIgdDMgPSAoKFNCT1hbczMgPj4+IDI0XSA8PCAyNCkgfCAoU0JPWFsoczAgPj4+IDE2KSAmIDB4ZmZdIDw8IDE2KSB8IChTQk9YWyhzMSA+Pj4gOCkgJiAweGZmXSA8PCA4KSB8IFNCT1hbczIgJiAweGZmXSkgXiBrZXlTY2hlZHVsZVtrc1JvdysrXVxyXG5cclxuICAgICAgICAvLyBTZXQgb3V0cHV0XHJcbiAgICAgICAgTVtvZmZzZXRdID0gdDBcclxuICAgICAgICBNW29mZnNldCArIDFdID0gdDFcclxuICAgICAgICBNW29mZnNldCArIDJdID0gdDJcclxuICAgICAgICBNW29mZnNldCArIDNdID0gdDNcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGtleVNpemU6IDI1NiAvIDMyXHJcbiAgICB9KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKlxyXG4gICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuQUVTLmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xyXG4gICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuQUVTLmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xyXG4gICAgICovXHJcbiAgICBDLkFFUyA9IEJsb2NrQ2lwaGVyLl9jcmVhdGVIZWxwZXIoQUVTKVxyXG4gIH0oKSk7XHJcblxyXG5cclxuICAoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gU2hvcnRjdXRzXHJcbiAgICB2YXIgQyA9IENyeXB0b0pTXHJcbiAgICB2YXIgQ19saWIgPSBDLmxpYlxyXG4gICAgdmFyIFdvcmRBcnJheSA9IENfbGliLldvcmRBcnJheVxyXG4gICAgdmFyIEJsb2NrQ2lwaGVyID0gQ19saWIuQmxvY2tDaXBoZXJcclxuICAgIHZhciBDX2FsZ28gPSBDLmFsZ29cclxuXHJcbiAgICAvLyBQZXJtdXRlZCBDaG9pY2UgMSBjb25zdGFudHNcclxuICAgIHZhciBQQzEgPSBbXHJcbiAgICAgIDU3LCA0OSwgNDEsIDMzLCAyNSwgMTcsIDksIDEsXHJcbiAgICAgIDU4LCA1MCwgNDIsIDM0LCAyNiwgMTgsIDEwLCAyLFxyXG4gICAgICA1OSwgNTEsIDQzLCAzNSwgMjcsIDE5LCAxMSwgMyxcclxuICAgICAgNjAsIDUyLCA0NCwgMzYsIDYzLCA1NSwgNDcsIDM5LFxyXG4gICAgICAzMSwgMjMsIDE1LCA3LCA2MiwgNTQsIDQ2LCAzOCxcclxuICAgICAgMzAsIDIyLCAxNCwgNiwgNjEsIDUzLCA0NSwgMzcsXHJcbiAgICAgIDI5LCAyMSwgMTMsIDUsIDI4LCAyMCwgMTIsIDRcclxuICAgIF1cclxuXHJcbiAgICAvLyBQZXJtdXRlZCBDaG9pY2UgMiBjb25zdGFudHNcclxuICAgIHZhciBQQzIgPSBbXHJcbiAgICAgIDE0LCAxNywgMTEsIDI0LCAxLCA1LFxyXG4gICAgICAzLCAyOCwgMTUsIDYsIDIxLCAxMCxcclxuICAgICAgMjMsIDE5LCAxMiwgNCwgMjYsIDgsXHJcbiAgICAgIDE2LCA3LCAyNywgMjAsIDEzLCAyLFxyXG4gICAgICA0MSwgNTIsIDMxLCAzNywgNDcsIDU1LFxyXG4gICAgICAzMCwgNDAsIDUxLCA0NSwgMzMsIDQ4LFxyXG4gICAgICA0NCwgNDksIDM5LCA1NiwgMzQsIDUzLFxyXG4gICAgICA0NiwgNDIsIDUwLCAzNiwgMjksIDMyXHJcbiAgICBdXHJcblxyXG4gICAgLy8gQ3VtdWxhdGl2ZSBiaXQgc2hpZnQgY29uc3RhbnRzXHJcbiAgICB2YXIgQklUX1NISUZUUyA9IFsxLCAyLCA0LCA2LCA4LCAxMCwgMTIsIDE0LCAxNSwgMTcsIDE5LCAyMSwgMjMsIDI1LCAyNywgMjhdXHJcblxyXG4gICAgLy8gU0JPWGVzIGFuZCByb3VuZCBwZXJtdXRhdGlvbiBjb25zdGFudHNcclxuICAgIHZhciBTQk9YX1AgPSBbe1xyXG4gICAgICAgIDB4MDogMHg4MDgyMDAsXHJcbiAgICAgICAgMHgxMDAwMDAwMDogMHg4MDAwLFxyXG4gICAgICAgIDB4MjAwMDAwMDA6IDB4ODA4MDAyLFxyXG4gICAgICAgIDB4MzAwMDAwMDA6IDB4MixcclxuICAgICAgICAweDQwMDAwMDAwOiAweDIwMCxcclxuICAgICAgICAweDUwMDAwMDAwOiAweDgwODIwMixcclxuICAgICAgICAweDYwMDAwMDAwOiAweDgwMDIwMixcclxuICAgICAgICAweDcwMDAwMDAwOiAweDgwMDAwMCxcclxuICAgICAgICAweDgwMDAwMDAwOiAweDIwMixcclxuICAgICAgICAweDkwMDAwMDAwOiAweDgwMDIwMCxcclxuICAgICAgICAweGEwMDAwMDAwOiAweDgyMDAsXHJcbiAgICAgICAgMHhiMDAwMDAwMDogMHg4MDgwMDAsXHJcbiAgICAgICAgMHhjMDAwMDAwMDogMHg4MDAyLFxyXG4gICAgICAgIDB4ZDAwMDAwMDA6IDB4ODAwMDAyLFxyXG4gICAgICAgIDB4ZTAwMDAwMDA6IDB4MCxcclxuICAgICAgICAweGYwMDAwMDAwOiAweDgyMDIsXHJcbiAgICAgICAgMHg4MDAwMDAwOiAweDAsXHJcbiAgICAgICAgMHgxODAwMDAwMDogMHg4MDgyMDIsXHJcbiAgICAgICAgMHgyODAwMDAwMDogMHg4MjAyLFxyXG4gICAgICAgIDB4MzgwMDAwMDA6IDB4ODAwMCxcclxuICAgICAgICAweDQ4MDAwMDAwOiAweDgwODIwMCxcclxuICAgICAgICAweDU4MDAwMDAwOiAweDIwMCxcclxuICAgICAgICAweDY4MDAwMDAwOiAweDgwODAwMixcclxuICAgICAgICAweDc4MDAwMDAwOiAweDIsXHJcbiAgICAgICAgMHg4ODAwMDAwMDogMHg4MDAyMDAsXHJcbiAgICAgICAgMHg5ODAwMDAwMDogMHg4MjAwLFxyXG4gICAgICAgIDB4YTgwMDAwMDA6IDB4ODA4MDAwLFxyXG4gICAgICAgIDB4YjgwMDAwMDA6IDB4ODAwMjAyLFxyXG4gICAgICAgIDB4YzgwMDAwMDA6IDB4ODAwMDAyLFxyXG4gICAgICAgIDB4ZDgwMDAwMDA6IDB4ODAwMixcclxuICAgICAgICAweGU4MDAwMDAwOiAweDIwMixcclxuICAgICAgICAweGY4MDAwMDAwOiAweDgwMDAwMCxcclxuICAgICAgICAweDE6IDB4ODAwMCxcclxuICAgICAgICAweDEwMDAwMDAxOiAweDIsXHJcbiAgICAgICAgMHgyMDAwMDAwMTogMHg4MDgyMDAsXHJcbiAgICAgICAgMHgzMDAwMDAwMTogMHg4MDAwMDAsXHJcbiAgICAgICAgMHg0MDAwMDAwMTogMHg4MDgwMDIsXHJcbiAgICAgICAgMHg1MDAwMDAwMTogMHg4MjAwLFxyXG4gICAgICAgIDB4NjAwMDAwMDE6IDB4MjAwLFxyXG4gICAgICAgIDB4NzAwMDAwMDE6IDB4ODAwMjAyLFxyXG4gICAgICAgIDB4ODAwMDAwMDE6IDB4ODA4MjAyLFxyXG4gICAgICAgIDB4OTAwMDAwMDE6IDB4ODA4MDAwLFxyXG4gICAgICAgIDB4YTAwMDAwMDE6IDB4ODAwMDAyLFxyXG4gICAgICAgIDB4YjAwMDAwMDE6IDB4ODIwMixcclxuICAgICAgICAweGMwMDAwMDAxOiAweDIwMixcclxuICAgICAgICAweGQwMDAwMDAxOiAweDgwMDIwMCxcclxuICAgICAgICAweGUwMDAwMDAxOiAweDgwMDIsXHJcbiAgICAgICAgMHhmMDAwMDAwMTogMHgwLFxyXG4gICAgICAgIDB4ODAwMDAwMTogMHg4MDgyMDIsXHJcbiAgICAgICAgMHgxODAwMDAwMTogMHg4MDgwMDAsXHJcbiAgICAgICAgMHgyODAwMDAwMTogMHg4MDAwMDAsXHJcbiAgICAgICAgMHgzODAwMDAwMTogMHgyMDAsXHJcbiAgICAgICAgMHg0ODAwMDAwMTogMHg4MDAwLFxyXG4gICAgICAgIDB4NTgwMDAwMDE6IDB4ODAwMDAyLFxyXG4gICAgICAgIDB4NjgwMDAwMDE6IDB4MixcclxuICAgICAgICAweDc4MDAwMDAxOiAweDgyMDIsXHJcbiAgICAgICAgMHg4ODAwMDAwMTogMHg4MDAyLFxyXG4gICAgICAgIDB4OTgwMDAwMDE6IDB4ODAwMjAyLFxyXG4gICAgICAgIDB4YTgwMDAwMDE6IDB4MjAyLFxyXG4gICAgICAgIDB4YjgwMDAwMDE6IDB4ODA4MjAwLFxyXG4gICAgICAgIDB4YzgwMDAwMDE6IDB4ODAwMjAwLFxyXG4gICAgICAgIDB4ZDgwMDAwMDE6IDB4MCxcclxuICAgICAgICAweGU4MDAwMDAxOiAweDgyMDAsXHJcbiAgICAgICAgMHhmODAwMDAwMTogMHg4MDgwMDJcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIDB4MDogMHg0MDA4NDAxMCxcclxuICAgICAgICAweDEwMDAwMDA6IDB4NDAwMCxcclxuICAgICAgICAweDIwMDAwMDA6IDB4ODAwMDAsXHJcbiAgICAgICAgMHgzMDAwMDAwOiAweDQwMDgwMDEwLFxyXG4gICAgICAgIDB4NDAwMDAwMDogMHg0MDAwMDAxMCxcclxuICAgICAgICAweDUwMDAwMDA6IDB4NDAwODQwMDAsXHJcbiAgICAgICAgMHg2MDAwMDAwOiAweDQwMDA0MDAwLFxyXG4gICAgICAgIDB4NzAwMDAwMDogMHgxMCxcclxuICAgICAgICAweDgwMDAwMDA6IDB4ODQwMDAsXHJcbiAgICAgICAgMHg5MDAwMDAwOiAweDQwMDA0MDEwLFxyXG4gICAgICAgIDB4YTAwMDAwMDogMHg0MDAwMDAwMCxcclxuICAgICAgICAweGIwMDAwMDA6IDB4ODQwMTAsXHJcbiAgICAgICAgMHhjMDAwMDAwOiAweDgwMDEwLFxyXG4gICAgICAgIDB4ZDAwMDAwMDogMHgwLFxyXG4gICAgICAgIDB4ZTAwMDAwMDogMHg0MDEwLFxyXG4gICAgICAgIDB4ZjAwMDAwMDogMHg0MDA4MDAwMCxcclxuICAgICAgICAweDgwMDAwMDogMHg0MDAwNDAwMCxcclxuICAgICAgICAweDE4MDAwMDA6IDB4ODQwMTAsXHJcbiAgICAgICAgMHgyODAwMDAwOiAweDEwLFxyXG4gICAgICAgIDB4MzgwMDAwMDogMHg0MDAwNDAxMCxcclxuICAgICAgICAweDQ4MDAwMDA6IDB4NDAwODQwMTAsXHJcbiAgICAgICAgMHg1ODAwMDAwOiAweDQwMDAwMDAwLFxyXG4gICAgICAgIDB4NjgwMDAwMDogMHg4MDAwMCxcclxuICAgICAgICAweDc4MDAwMDA6IDB4NDAwODAwMTAsXHJcbiAgICAgICAgMHg4ODAwMDAwOiAweDgwMDEwLFxyXG4gICAgICAgIDB4OTgwMDAwMDogMHgwLFxyXG4gICAgICAgIDB4YTgwMDAwMDogMHg0MDAwLFxyXG4gICAgICAgIDB4YjgwMDAwMDogMHg0MDA4MDAwMCxcclxuICAgICAgICAweGM4MDAwMDA6IDB4NDAwMDAwMTAsXHJcbiAgICAgICAgMHhkODAwMDAwOiAweDg0MDAwLFxyXG4gICAgICAgIDB4ZTgwMDAwMDogMHg0MDA4NDAwMCxcclxuICAgICAgICAweGY4MDAwMDA6IDB4NDAxMCxcclxuICAgICAgICAweDEwMDAwMDAwOiAweDAsXHJcbiAgICAgICAgMHgxMTAwMDAwMDogMHg0MDA4MDAxMCxcclxuICAgICAgICAweDEyMDAwMDAwOiAweDQwMDA0MDEwLFxyXG4gICAgICAgIDB4MTMwMDAwMDA6IDB4NDAwODQwMDAsXHJcbiAgICAgICAgMHgxNDAwMDAwMDogMHg0MDA4MDAwMCxcclxuICAgICAgICAweDE1MDAwMDAwOiAweDEwLFxyXG4gICAgICAgIDB4MTYwMDAwMDA6IDB4ODQwMTAsXHJcbiAgICAgICAgMHgxNzAwMDAwMDogMHg0MDAwLFxyXG4gICAgICAgIDB4MTgwMDAwMDA6IDB4NDAxMCxcclxuICAgICAgICAweDE5MDAwMDAwOiAweDgwMDAwLFxyXG4gICAgICAgIDB4MWEwMDAwMDA6IDB4ODAwMTAsXHJcbiAgICAgICAgMHgxYjAwMDAwMDogMHg0MDAwMDAxMCxcclxuICAgICAgICAweDFjMDAwMDAwOiAweDg0MDAwLFxyXG4gICAgICAgIDB4MWQwMDAwMDA6IDB4NDAwMDQwMDAsXHJcbiAgICAgICAgMHgxZTAwMDAwMDogMHg0MDAwMDAwMCxcclxuICAgICAgICAweDFmMDAwMDAwOiAweDQwMDg0MDEwLFxyXG4gICAgICAgIDB4MTA4MDAwMDA6IDB4ODQwMTAsXHJcbiAgICAgICAgMHgxMTgwMDAwMDogMHg4MDAwMCxcclxuICAgICAgICAweDEyODAwMDAwOiAweDQwMDgwMDAwLFxyXG4gICAgICAgIDB4MTM4MDAwMDA6IDB4NDAwMCxcclxuICAgICAgICAweDE0ODAwMDAwOiAweDQwMDA0MDAwLFxyXG4gICAgICAgIDB4MTU4MDAwMDA6IDB4NDAwODQwMTAsXHJcbiAgICAgICAgMHgxNjgwMDAwMDogMHgxMCxcclxuICAgICAgICAweDE3ODAwMDAwOiAweDQwMDAwMDAwLFxyXG4gICAgICAgIDB4MTg4MDAwMDA6IDB4NDAwODQwMDAsXHJcbiAgICAgICAgMHgxOTgwMDAwMDogMHg0MDAwMDAxMCxcclxuICAgICAgICAweDFhODAwMDAwOiAweDQwMDA0MDEwLFxyXG4gICAgICAgIDB4MWI4MDAwMDA6IDB4ODAwMTAsXHJcbiAgICAgICAgMHgxYzgwMDAwMDogMHgwLFxyXG4gICAgICAgIDB4MWQ4MDAwMDA6IDB4NDAxMCxcclxuICAgICAgICAweDFlODAwMDAwOiAweDQwMDgwMDEwLFxyXG4gICAgICAgIDB4MWY4MDAwMDA6IDB4ODQwMDBcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIDB4MDogMHgxMDQsXHJcbiAgICAgICAgMHgxMDAwMDA6IDB4MCxcclxuICAgICAgICAweDIwMDAwMDogMHg0MDAwMTAwLFxyXG4gICAgICAgIDB4MzAwMDAwOiAweDEwMTA0LFxyXG4gICAgICAgIDB4NDAwMDAwOiAweDEwMDA0LFxyXG4gICAgICAgIDB4NTAwMDAwOiAweDQwMDAwMDQsXHJcbiAgICAgICAgMHg2MDAwMDA6IDB4NDAxMDEwNCxcclxuICAgICAgICAweDcwMDAwMDogMHg0MDEwMDAwLFxyXG4gICAgICAgIDB4ODAwMDAwOiAweDQwMDAwMDAsXHJcbiAgICAgICAgMHg5MDAwMDA6IDB4NDAxMDEwMCxcclxuICAgICAgICAweGEwMDAwMDogMHgxMDEwMCxcclxuICAgICAgICAweGIwMDAwMDogMHg0MDEwMDA0LFxyXG4gICAgICAgIDB4YzAwMDAwOiAweDQwMDAxMDQsXHJcbiAgICAgICAgMHhkMDAwMDA6IDB4MTAwMDAsXHJcbiAgICAgICAgMHhlMDAwMDA6IDB4NCxcclxuICAgICAgICAweGYwMDAwMDogMHgxMDAsXHJcbiAgICAgICAgMHg4MDAwMDogMHg0MDEwMTAwLFxyXG4gICAgICAgIDB4MTgwMDAwOiAweDQwMTAwMDQsXHJcbiAgICAgICAgMHgyODAwMDA6IDB4MCxcclxuICAgICAgICAweDM4MDAwMDogMHg0MDAwMTAwLFxyXG4gICAgICAgIDB4NDgwMDAwOiAweDQwMDAwMDQsXHJcbiAgICAgICAgMHg1ODAwMDA6IDB4MTAwMDAsXHJcbiAgICAgICAgMHg2ODAwMDA6IDB4MTAwMDQsXHJcbiAgICAgICAgMHg3ODAwMDA6IDB4MTA0LFxyXG4gICAgICAgIDB4ODgwMDAwOiAweDQsXHJcbiAgICAgICAgMHg5ODAwMDA6IDB4MTAwLFxyXG4gICAgICAgIDB4YTgwMDAwOiAweDQwMTAwMDAsXHJcbiAgICAgICAgMHhiODAwMDA6IDB4MTAxMDQsXHJcbiAgICAgICAgMHhjODAwMDA6IDB4MTAxMDAsXHJcbiAgICAgICAgMHhkODAwMDA6IDB4NDAwMDEwNCxcclxuICAgICAgICAweGU4MDAwMDogMHg0MDEwMTA0LFxyXG4gICAgICAgIDB4ZjgwMDAwOiAweDQwMDAwMDAsXHJcbiAgICAgICAgMHgxMDAwMDAwOiAweDQwMTAxMDAsXHJcbiAgICAgICAgMHgxMTAwMDAwOiAweDEwMDA0LFxyXG4gICAgICAgIDB4MTIwMDAwMDogMHgxMDAwMCxcclxuICAgICAgICAweDEzMDAwMDA6IDB4NDAwMDEwMCxcclxuICAgICAgICAweDE0MDAwMDA6IDB4MTAwLFxyXG4gICAgICAgIDB4MTUwMDAwMDogMHg0MDEwMTA0LFxyXG4gICAgICAgIDB4MTYwMDAwMDogMHg0MDAwMDA0LFxyXG4gICAgICAgIDB4MTcwMDAwMDogMHgwLFxyXG4gICAgICAgIDB4MTgwMDAwMDogMHg0MDAwMTA0LFxyXG4gICAgICAgIDB4MTkwMDAwMDogMHg0MDAwMDAwLFxyXG4gICAgICAgIDB4MWEwMDAwMDogMHg0LFxyXG4gICAgICAgIDB4MWIwMDAwMDogMHgxMDEwMCxcclxuICAgICAgICAweDFjMDAwMDA6IDB4NDAxMDAwMCxcclxuICAgICAgICAweDFkMDAwMDA6IDB4MTA0LFxyXG4gICAgICAgIDB4MWUwMDAwMDogMHgxMDEwNCxcclxuICAgICAgICAweDFmMDAwMDA6IDB4NDAxMDAwNCxcclxuICAgICAgICAweDEwODAwMDA6IDB4NDAwMDAwMCxcclxuICAgICAgICAweDExODAwMDA6IDB4MTA0LFxyXG4gICAgICAgIDB4MTI4MDAwMDogMHg0MDEwMTAwLFxyXG4gICAgICAgIDB4MTM4MDAwMDogMHgwLFxyXG4gICAgICAgIDB4MTQ4MDAwMDogMHgxMDAwNCxcclxuICAgICAgICAweDE1ODAwMDA6IDB4NDAwMDEwMCxcclxuICAgICAgICAweDE2ODAwMDA6IDB4MTAwLFxyXG4gICAgICAgIDB4MTc4MDAwMDogMHg0MDEwMDA0LFxyXG4gICAgICAgIDB4MTg4MDAwMDogMHgxMDAwMCxcclxuICAgICAgICAweDE5ODAwMDA6IDB4NDAxMDEwNCxcclxuICAgICAgICAweDFhODAwMDA6IDB4MTAxMDQsXHJcbiAgICAgICAgMHgxYjgwMDAwOiAweDQwMDAwMDQsXHJcbiAgICAgICAgMHgxYzgwMDAwOiAweDQwMDAxMDQsXHJcbiAgICAgICAgMHgxZDgwMDAwOiAweDQwMTAwMDAsXHJcbiAgICAgICAgMHgxZTgwMDAwOiAweDQsXHJcbiAgICAgICAgMHgxZjgwMDAwOiAweDEwMTAwXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICAweDA6IDB4ODA0MDEwMDAsXHJcbiAgICAgICAgMHgxMDAwMDogMHg4MDAwMTA0MCxcclxuICAgICAgICAweDIwMDAwOiAweDQwMTA0MCxcclxuICAgICAgICAweDMwMDAwOiAweDgwNDAwMDAwLFxyXG4gICAgICAgIDB4NDAwMDA6IDB4MCxcclxuICAgICAgICAweDUwMDAwOiAweDQwMTAwMCxcclxuICAgICAgICAweDYwMDAwOiAweDgwMDAwMDQwLFxyXG4gICAgICAgIDB4NzAwMDA6IDB4NDAwMDQwLFxyXG4gICAgICAgIDB4ODAwMDA6IDB4ODAwMDAwMDAsXHJcbiAgICAgICAgMHg5MDAwMDogMHg0MDAwMDAsXHJcbiAgICAgICAgMHhhMDAwMDogMHg0MCxcclxuICAgICAgICAweGIwMDAwOiAweDgwMDAxMDAwLFxyXG4gICAgICAgIDB4YzAwMDA6IDB4ODA0MDAwNDAsXHJcbiAgICAgICAgMHhkMDAwMDogMHgxMDQwLFxyXG4gICAgICAgIDB4ZTAwMDA6IDB4MTAwMCxcclxuICAgICAgICAweGYwMDAwOiAweDgwNDAxMDQwLFxyXG4gICAgICAgIDB4ODAwMDogMHg4MDAwMTA0MCxcclxuICAgICAgICAweDE4MDAwOiAweDQwLFxyXG4gICAgICAgIDB4MjgwMDA6IDB4ODA0MDAwNDAsXHJcbiAgICAgICAgMHgzODAwMDogMHg4MDAwMTAwMCxcclxuICAgICAgICAweDQ4MDAwOiAweDQwMTAwMCxcclxuICAgICAgICAweDU4MDAwOiAweDgwNDAxMDQwLFxyXG4gICAgICAgIDB4NjgwMDA6IDB4MCxcclxuICAgICAgICAweDc4MDAwOiAweDgwNDAwMDAwLFxyXG4gICAgICAgIDB4ODgwMDA6IDB4MTAwMCxcclxuICAgICAgICAweDk4MDAwOiAweDgwNDAxMDAwLFxyXG4gICAgICAgIDB4YTgwMDA6IDB4NDAwMDAwLFxyXG4gICAgICAgIDB4YjgwMDA6IDB4MTA0MCxcclxuICAgICAgICAweGM4MDAwOiAweDgwMDAwMDAwLFxyXG4gICAgICAgIDB4ZDgwMDA6IDB4NDAwMDQwLFxyXG4gICAgICAgIDB4ZTgwMDA6IDB4NDAxMDQwLFxyXG4gICAgICAgIDB4ZjgwMDA6IDB4ODAwMDAwNDAsXHJcbiAgICAgICAgMHgxMDAwMDA6IDB4NDAwMDQwLFxyXG4gICAgICAgIDB4MTEwMDAwOiAweDQwMTAwMCxcclxuICAgICAgICAweDEyMDAwMDogMHg4MDAwMDA0MCxcclxuICAgICAgICAweDEzMDAwMDogMHgwLFxyXG4gICAgICAgIDB4MTQwMDAwOiAweDEwNDAsXHJcbiAgICAgICAgMHgxNTAwMDA6IDB4ODA0MDAwNDAsXHJcbiAgICAgICAgMHgxNjAwMDA6IDB4ODA0MDEwMDAsXHJcbiAgICAgICAgMHgxNzAwMDA6IDB4ODAwMDEwNDAsXHJcbiAgICAgICAgMHgxODAwMDA6IDB4ODA0MDEwNDAsXHJcbiAgICAgICAgMHgxOTAwMDA6IDB4ODAwMDAwMDAsXHJcbiAgICAgICAgMHgxYTAwMDA6IDB4ODA0MDAwMDAsXHJcbiAgICAgICAgMHgxYjAwMDA6IDB4NDAxMDQwLFxyXG4gICAgICAgIDB4MWMwMDAwOiAweDgwMDAxMDAwLFxyXG4gICAgICAgIDB4MWQwMDAwOiAweDQwMDAwMCxcclxuICAgICAgICAweDFlMDAwMDogMHg0MCxcclxuICAgICAgICAweDFmMDAwMDogMHgxMDAwLFxyXG4gICAgICAgIDB4MTA4MDAwOiAweDgwNDAwMDAwLFxyXG4gICAgICAgIDB4MTE4MDAwOiAweDgwNDAxMDQwLFxyXG4gICAgICAgIDB4MTI4MDAwOiAweDAsXHJcbiAgICAgICAgMHgxMzgwMDA6IDB4NDAxMDAwLFxyXG4gICAgICAgIDB4MTQ4MDAwOiAweDQwMDA0MCxcclxuICAgICAgICAweDE1ODAwMDogMHg4MDAwMDAwMCxcclxuICAgICAgICAweDE2ODAwMDogMHg4MDAwMTA0MCxcclxuICAgICAgICAweDE3ODAwMDogMHg0MCxcclxuICAgICAgICAweDE4ODAwMDogMHg4MDAwMDA0MCxcclxuICAgICAgICAweDE5ODAwMDogMHgxMDAwLFxyXG4gICAgICAgIDB4MWE4MDAwOiAweDgwMDAxMDAwLFxyXG4gICAgICAgIDB4MWI4MDAwOiAweDgwNDAwMDQwLFxyXG4gICAgICAgIDB4MWM4MDAwOiAweDEwNDAsXHJcbiAgICAgICAgMHgxZDgwMDA6IDB4ODA0MDEwMDAsXHJcbiAgICAgICAgMHgxZTgwMDA6IDB4NDAwMDAwLFxyXG4gICAgICAgIDB4MWY4MDAwOiAweDQwMTA0MFxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgMHgwOiAweDgwLFxyXG4gICAgICAgIDB4MTAwMDogMHgxMDQwMDAwLFxyXG4gICAgICAgIDB4MjAwMDogMHg0MDAwMCxcclxuICAgICAgICAweDMwMDA6IDB4MjAwMDAwMDAsXHJcbiAgICAgICAgMHg0MDAwOiAweDIwMDQwMDgwLFxyXG4gICAgICAgIDB4NTAwMDogMHgxMDAwMDgwLFxyXG4gICAgICAgIDB4NjAwMDogMHgyMTAwMDA4MCxcclxuICAgICAgICAweDcwMDA6IDB4NDAwODAsXHJcbiAgICAgICAgMHg4MDAwOiAweDEwMDAwMDAsXHJcbiAgICAgICAgMHg5MDAwOiAweDIwMDQwMDAwLFxyXG4gICAgICAgIDB4YTAwMDogMHgyMDAwMDA4MCxcclxuICAgICAgICAweGIwMDA6IDB4MjEwNDAwODAsXHJcbiAgICAgICAgMHhjMDAwOiAweDIxMDQwMDAwLFxyXG4gICAgICAgIDB4ZDAwMDogMHgwLFxyXG4gICAgICAgIDB4ZTAwMDogMHgxMDQwMDgwLFxyXG4gICAgICAgIDB4ZjAwMDogMHgyMTAwMDAwMCxcclxuICAgICAgICAweDgwMDogMHgxMDQwMDgwLFxyXG4gICAgICAgIDB4MTgwMDogMHgyMTAwMDA4MCxcclxuICAgICAgICAweDI4MDA6IDB4ODAsXHJcbiAgICAgICAgMHgzODAwOiAweDEwNDAwMDAsXHJcbiAgICAgICAgMHg0ODAwOiAweDQwMDAwLFxyXG4gICAgICAgIDB4NTgwMDogMHgyMDA0MDA4MCxcclxuICAgICAgICAweDY4MDA6IDB4MjEwNDAwMDAsXHJcbiAgICAgICAgMHg3ODAwOiAweDIwMDAwMDAwLFxyXG4gICAgICAgIDB4ODgwMDogMHgyMDA0MDAwMCxcclxuICAgICAgICAweDk4MDA6IDB4MCxcclxuICAgICAgICAweGE4MDA6IDB4MjEwNDAwODAsXHJcbiAgICAgICAgMHhiODAwOiAweDEwMDAwODAsXHJcbiAgICAgICAgMHhjODAwOiAweDIwMDAwMDgwLFxyXG4gICAgICAgIDB4ZDgwMDogMHgyMTAwMDAwMCxcclxuICAgICAgICAweGU4MDA6IDB4MTAwMDAwMCxcclxuICAgICAgICAweGY4MDA6IDB4NDAwODAsXHJcbiAgICAgICAgMHgxMDAwMDogMHg0MDAwMCxcclxuICAgICAgICAweDExMDAwOiAweDgwLFxyXG4gICAgICAgIDB4MTIwMDA6IDB4MjAwMDAwMDAsXHJcbiAgICAgICAgMHgxMzAwMDogMHgyMTAwMDA4MCxcclxuICAgICAgICAweDE0MDAwOiAweDEwMDAwODAsXHJcbiAgICAgICAgMHgxNTAwMDogMHgyMTA0MDAwMCxcclxuICAgICAgICAweDE2MDAwOiAweDIwMDQwMDgwLFxyXG4gICAgICAgIDB4MTcwMDA6IDB4MTAwMDAwMCxcclxuICAgICAgICAweDE4MDAwOiAweDIxMDQwMDgwLFxyXG4gICAgICAgIDB4MTkwMDA6IDB4MjEwMDAwMDAsXHJcbiAgICAgICAgMHgxYTAwMDogMHgxMDQwMDAwLFxyXG4gICAgICAgIDB4MWIwMDA6IDB4MjAwNDAwMDAsXHJcbiAgICAgICAgMHgxYzAwMDogMHg0MDA4MCxcclxuICAgICAgICAweDFkMDAwOiAweDIwMDAwMDgwLFxyXG4gICAgICAgIDB4MWUwMDA6IDB4MCxcclxuICAgICAgICAweDFmMDAwOiAweDEwNDAwODAsXHJcbiAgICAgICAgMHgxMDgwMDogMHgyMTAwMDA4MCxcclxuICAgICAgICAweDExODAwOiAweDEwMDAwMDAsXHJcbiAgICAgICAgMHgxMjgwMDogMHgxMDQwMDAwLFxyXG4gICAgICAgIDB4MTM4MDA6IDB4MjAwNDAwODAsXHJcbiAgICAgICAgMHgxNDgwMDogMHgyMDAwMDAwMCxcclxuICAgICAgICAweDE1ODAwOiAweDEwNDAwODAsXHJcbiAgICAgICAgMHgxNjgwMDogMHg4MCxcclxuICAgICAgICAweDE3ODAwOiAweDIxMDQwMDAwLFxyXG4gICAgICAgIDB4MTg4MDA6IDB4NDAwODAsXHJcbiAgICAgICAgMHgxOTgwMDogMHgyMTA0MDA4MCxcclxuICAgICAgICAweDFhODAwOiAweDAsXHJcbiAgICAgICAgMHgxYjgwMDogMHgyMTAwMDAwMCxcclxuICAgICAgICAweDFjODAwOiAweDEwMDAwODAsXHJcbiAgICAgICAgMHgxZDgwMDogMHg0MDAwMCxcclxuICAgICAgICAweDFlODAwOiAweDIwMDQwMDAwLFxyXG4gICAgICAgIDB4MWY4MDA6IDB4MjAwMDAwODBcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIDB4MDogMHgxMDAwMDAwOCxcclxuICAgICAgICAweDEwMDogMHgyMDAwLFxyXG4gICAgICAgIDB4MjAwOiAweDEwMjAwMDAwLFxyXG4gICAgICAgIDB4MzAwOiAweDEwMjAyMDA4LFxyXG4gICAgICAgIDB4NDAwOiAweDEwMDAyMDAwLFxyXG4gICAgICAgIDB4NTAwOiAweDIwMDAwMCxcclxuICAgICAgICAweDYwMDogMHgyMDAwMDgsXHJcbiAgICAgICAgMHg3MDA6IDB4MTAwMDAwMDAsXHJcbiAgICAgICAgMHg4MDA6IDB4MCxcclxuICAgICAgICAweDkwMDogMHgxMDAwMjAwOCxcclxuICAgICAgICAweGEwMDogMHgyMDIwMDAsXHJcbiAgICAgICAgMHhiMDA6IDB4OCxcclxuICAgICAgICAweGMwMDogMHgxMDIwMDAwOCxcclxuICAgICAgICAweGQwMDogMHgyMDIwMDgsXHJcbiAgICAgICAgMHhlMDA6IDB4MjAwOCxcclxuICAgICAgICAweGYwMDogMHgxMDIwMjAwMCxcclxuICAgICAgICAweDgwOiAweDEwMjAwMDAwLFxyXG4gICAgICAgIDB4MTgwOiAweDEwMjAyMDA4LFxyXG4gICAgICAgIDB4MjgwOiAweDgsXHJcbiAgICAgICAgMHgzODA6IDB4MjAwMDAwLFxyXG4gICAgICAgIDB4NDgwOiAweDIwMjAwOCxcclxuICAgICAgICAweDU4MDogMHgxMDAwMDAwOCxcclxuICAgICAgICAweDY4MDogMHgxMDAwMjAwMCxcclxuICAgICAgICAweDc4MDogMHgyMDA4LFxyXG4gICAgICAgIDB4ODgwOiAweDIwMDAwOCxcclxuICAgICAgICAweDk4MDogMHgyMDAwLFxyXG4gICAgICAgIDB4YTgwOiAweDEwMDAyMDA4LFxyXG4gICAgICAgIDB4YjgwOiAweDEwMjAwMDA4LFxyXG4gICAgICAgIDB4YzgwOiAweDAsXHJcbiAgICAgICAgMHhkODA6IDB4MTAyMDIwMDAsXHJcbiAgICAgICAgMHhlODA6IDB4MjAyMDAwLFxyXG4gICAgICAgIDB4ZjgwOiAweDEwMDAwMDAwLFxyXG4gICAgICAgIDB4MTAwMDogMHgxMDAwMjAwMCxcclxuICAgICAgICAweDExMDA6IDB4MTAyMDAwMDgsXHJcbiAgICAgICAgMHgxMjAwOiAweDEwMjAyMDA4LFxyXG4gICAgICAgIDB4MTMwMDogMHgyMDA4LFxyXG4gICAgICAgIDB4MTQwMDogMHgyMDAwMDAsXHJcbiAgICAgICAgMHgxNTAwOiAweDEwMDAwMDAwLFxyXG4gICAgICAgIDB4MTYwMDogMHgxMDAwMDAwOCxcclxuICAgICAgICAweDE3MDA6IDB4MjAyMDAwLFxyXG4gICAgICAgIDB4MTgwMDogMHgyMDIwMDgsXHJcbiAgICAgICAgMHgxOTAwOiAweDAsXHJcbiAgICAgICAgMHgxYTAwOiAweDgsXHJcbiAgICAgICAgMHgxYjAwOiAweDEwMjAwMDAwLFxyXG4gICAgICAgIDB4MWMwMDogMHgyMDAwLFxyXG4gICAgICAgIDB4MWQwMDogMHgxMDAwMjAwOCxcclxuICAgICAgICAweDFlMDA6IDB4MTAyMDIwMDAsXHJcbiAgICAgICAgMHgxZjAwOiAweDIwMDAwOCxcclxuICAgICAgICAweDEwODA6IDB4OCxcclxuICAgICAgICAweDExODA6IDB4MjAyMDAwLFxyXG4gICAgICAgIDB4MTI4MDogMHgyMDAwMDAsXHJcbiAgICAgICAgMHgxMzgwOiAweDEwMDAwMDA4LFxyXG4gICAgICAgIDB4MTQ4MDogMHgxMDAwMjAwMCxcclxuICAgICAgICAweDE1ODA6IDB4MjAwOCxcclxuICAgICAgICAweDE2ODA6IDB4MTAyMDIwMDgsXHJcbiAgICAgICAgMHgxNzgwOiAweDEwMjAwMDAwLFxyXG4gICAgICAgIDB4MTg4MDogMHgxMDIwMjAwMCxcclxuICAgICAgICAweDE5ODA6IDB4MTAyMDAwMDgsXHJcbiAgICAgICAgMHgxYTgwOiAweDIwMDAsXHJcbiAgICAgICAgMHgxYjgwOiAweDIwMjAwOCxcclxuICAgICAgICAweDFjODA6IDB4MjAwMDA4LFxyXG4gICAgICAgIDB4MWQ4MDogMHgwLFxyXG4gICAgICAgIDB4MWU4MDogMHgxMDAwMDAwMCxcclxuICAgICAgICAweDFmODA6IDB4MTAwMDIwMDhcclxuICAgICAgfSxcclxuICAgICAge1xyXG4gICAgICAgIDB4MDogMHgxMDAwMDAsXHJcbiAgICAgICAgMHgxMDogMHgyMDAwNDAxLFxyXG4gICAgICAgIDB4MjA6IDB4NDAwLFxyXG4gICAgICAgIDB4MzA6IDB4MTAwNDAxLFxyXG4gICAgICAgIDB4NDA6IDB4MjEwMDQwMSxcclxuICAgICAgICAweDUwOiAweDAsXHJcbiAgICAgICAgMHg2MDogMHgxLFxyXG4gICAgICAgIDB4NzA6IDB4MjEwMDAwMSxcclxuICAgICAgICAweDgwOiAweDIwMDA0MDAsXHJcbiAgICAgICAgMHg5MDogMHgxMDAwMDEsXHJcbiAgICAgICAgMHhhMDogMHgyMDAwMDAxLFxyXG4gICAgICAgIDB4YjA6IDB4MjEwMDQwMCxcclxuICAgICAgICAweGMwOiAweDIxMDAwMDAsXHJcbiAgICAgICAgMHhkMDogMHg0MDEsXHJcbiAgICAgICAgMHhlMDogMHgxMDA0MDAsXHJcbiAgICAgICAgMHhmMDogMHgyMDAwMDAwLFxyXG4gICAgICAgIDB4ODogMHgyMTAwMDAxLFxyXG4gICAgICAgIDB4MTg6IDB4MCxcclxuICAgICAgICAweDI4OiAweDIwMDA0MDEsXHJcbiAgICAgICAgMHgzODogMHgyMTAwNDAwLFxyXG4gICAgICAgIDB4NDg6IDB4MTAwMDAwLFxyXG4gICAgICAgIDB4NTg6IDB4MjAwMDAwMSxcclxuICAgICAgICAweDY4OiAweDIwMDAwMDAsXHJcbiAgICAgICAgMHg3ODogMHg0MDEsXHJcbiAgICAgICAgMHg4ODogMHgxMDA0MDEsXHJcbiAgICAgICAgMHg5ODogMHgyMDAwNDAwLFxyXG4gICAgICAgIDB4YTg6IDB4MjEwMDAwMCxcclxuICAgICAgICAweGI4OiAweDEwMDAwMSxcclxuICAgICAgICAweGM4OiAweDQwMCxcclxuICAgICAgICAweGQ4OiAweDIxMDA0MDEsXHJcbiAgICAgICAgMHhlODogMHgxLFxyXG4gICAgICAgIDB4Zjg6IDB4MTAwNDAwLFxyXG4gICAgICAgIDB4MTAwOiAweDIwMDAwMDAsXHJcbiAgICAgICAgMHgxMTA6IDB4MTAwMDAwLFxyXG4gICAgICAgIDB4MTIwOiAweDIwMDA0MDEsXHJcbiAgICAgICAgMHgxMzA6IDB4MjEwMDAwMSxcclxuICAgICAgICAweDE0MDogMHgxMDAwMDEsXHJcbiAgICAgICAgMHgxNTA6IDB4MjAwMDQwMCxcclxuICAgICAgICAweDE2MDogMHgyMTAwNDAwLFxyXG4gICAgICAgIDB4MTcwOiAweDEwMDQwMSxcclxuICAgICAgICAweDE4MDogMHg0MDEsXHJcbiAgICAgICAgMHgxOTA6IDB4MjEwMDQwMSxcclxuICAgICAgICAweDFhMDogMHgxMDA0MDAsXHJcbiAgICAgICAgMHgxYjA6IDB4MSxcclxuICAgICAgICAweDFjMDogMHgwLFxyXG4gICAgICAgIDB4MWQwOiAweDIxMDAwMDAsXHJcbiAgICAgICAgMHgxZTA6IDB4MjAwMDAwMSxcclxuICAgICAgICAweDFmMDogMHg0MDAsXHJcbiAgICAgICAgMHgxMDg6IDB4MTAwNDAwLFxyXG4gICAgICAgIDB4MTE4OiAweDIwMDA0MDEsXHJcbiAgICAgICAgMHgxMjg6IDB4MjEwMDAwMSxcclxuICAgICAgICAweDEzODogMHgxLFxyXG4gICAgICAgIDB4MTQ4OiAweDIwMDAwMDAsXHJcbiAgICAgICAgMHgxNTg6IDB4MTAwMDAwLFxyXG4gICAgICAgIDB4MTY4OiAweDQwMSxcclxuICAgICAgICAweDE3ODogMHgyMTAwNDAwLFxyXG4gICAgICAgIDB4MTg4OiAweDIwMDAwMDEsXHJcbiAgICAgICAgMHgxOTg6IDB4MjEwMDAwMCxcclxuICAgICAgICAweDFhODogMHgwLFxyXG4gICAgICAgIDB4MWI4OiAweDIxMDA0MDEsXHJcbiAgICAgICAgMHgxYzg6IDB4MTAwNDAxLFxyXG4gICAgICAgIDB4MWQ4OiAweDQwMCxcclxuICAgICAgICAweDFlODogMHgyMDAwNDAwLFxyXG4gICAgICAgIDB4MWY4OiAweDEwMDAwMVxyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgMHgwOiAweDgwMDA4MjAsXHJcbiAgICAgICAgMHgxOiAweDIwMDAwLFxyXG4gICAgICAgIDB4MjogMHg4MDAwMDAwLFxyXG4gICAgICAgIDB4MzogMHgyMCxcclxuICAgICAgICAweDQ6IDB4MjAwMjAsXHJcbiAgICAgICAgMHg1OiAweDgwMjA4MjAsXHJcbiAgICAgICAgMHg2OiAweDgwMjA4MDAsXHJcbiAgICAgICAgMHg3OiAweDgwMCxcclxuICAgICAgICAweDg6IDB4ODAyMDAwMCxcclxuICAgICAgICAweDk6IDB4ODAwMDgwMCxcclxuICAgICAgICAweGE6IDB4MjA4MDAsXHJcbiAgICAgICAgMHhiOiAweDgwMjAwMjAsXHJcbiAgICAgICAgMHhjOiAweDgyMCxcclxuICAgICAgICAweGQ6IDB4MCxcclxuICAgICAgICAweGU6IDB4ODAwMDAyMCxcclxuICAgICAgICAweGY6IDB4MjA4MjAsXHJcbiAgICAgICAgMHg4MDAwMDAwMDogMHg4MDAsXHJcbiAgICAgICAgMHg4MDAwMDAwMTogMHg4MDIwODIwLFxyXG4gICAgICAgIDB4ODAwMDAwMDI6IDB4ODAwMDgyMCxcclxuICAgICAgICAweDgwMDAwMDAzOiAweDgwMDAwMDAsXHJcbiAgICAgICAgMHg4MDAwMDAwNDogMHg4MDIwMDAwLFxyXG4gICAgICAgIDB4ODAwMDAwMDU6IDB4MjA4MDAsXHJcbiAgICAgICAgMHg4MDAwMDAwNjogMHgyMDgyMCxcclxuICAgICAgICAweDgwMDAwMDA3OiAweDIwLFxyXG4gICAgICAgIDB4ODAwMDAwMDg6IDB4ODAwMDAyMCxcclxuICAgICAgICAweDgwMDAwMDA5OiAweDgyMCxcclxuICAgICAgICAweDgwMDAwMDBhOiAweDIwMDIwLFxyXG4gICAgICAgIDB4ODAwMDAwMGI6IDB4ODAyMDgwMCxcclxuICAgICAgICAweDgwMDAwMDBjOiAweDAsXHJcbiAgICAgICAgMHg4MDAwMDAwZDogMHg4MDIwMDIwLFxyXG4gICAgICAgIDB4ODAwMDAwMGU6IDB4ODAwMDgwMCxcclxuICAgICAgICAweDgwMDAwMDBmOiAweDIwMDAwLFxyXG4gICAgICAgIDB4MTA6IDB4MjA4MjAsXHJcbiAgICAgICAgMHgxMTogMHg4MDIwODAwLFxyXG4gICAgICAgIDB4MTI6IDB4MjAsXHJcbiAgICAgICAgMHgxMzogMHg4MDAsXHJcbiAgICAgICAgMHgxNDogMHg4MDAwODAwLFxyXG4gICAgICAgIDB4MTU6IDB4ODAwMDAyMCxcclxuICAgICAgICAweDE2OiAweDgwMjAwMjAsXHJcbiAgICAgICAgMHgxNzogMHgyMDAwMCxcclxuICAgICAgICAweDE4OiAweDAsXHJcbiAgICAgICAgMHgxOTogMHgyMDAyMCxcclxuICAgICAgICAweDFhOiAweDgwMjAwMDAsXHJcbiAgICAgICAgMHgxYjogMHg4MDAwODIwLFxyXG4gICAgICAgIDB4MWM6IDB4ODAyMDgyMCxcclxuICAgICAgICAweDFkOiAweDIwODAwLFxyXG4gICAgICAgIDB4MWU6IDB4ODIwLFxyXG4gICAgICAgIDB4MWY6IDB4ODAwMDAwMCxcclxuICAgICAgICAweDgwMDAwMDEwOiAweDIwMDAwLFxyXG4gICAgICAgIDB4ODAwMDAwMTE6IDB4ODAwLFxyXG4gICAgICAgIDB4ODAwMDAwMTI6IDB4ODAyMDAyMCxcclxuICAgICAgICAweDgwMDAwMDEzOiAweDIwODIwLFxyXG4gICAgICAgIDB4ODAwMDAwMTQ6IDB4MjAsXHJcbiAgICAgICAgMHg4MDAwMDAxNTogMHg4MDIwMDAwLFxyXG4gICAgICAgIDB4ODAwMDAwMTY6IDB4ODAwMDAwMCxcclxuICAgICAgICAweDgwMDAwMDE3OiAweDgwMDA4MjAsXHJcbiAgICAgICAgMHg4MDAwMDAxODogMHg4MDIwODIwLFxyXG4gICAgICAgIDB4ODAwMDAwMTk6IDB4ODAwMDAyMCxcclxuICAgICAgICAweDgwMDAwMDFhOiAweDgwMDA4MDAsXHJcbiAgICAgICAgMHg4MDAwMDAxYjogMHgwLFxyXG4gICAgICAgIDB4ODAwMDAwMWM6IDB4MjA4MDAsXHJcbiAgICAgICAgMHg4MDAwMDAxZDogMHg4MjAsXHJcbiAgICAgICAgMHg4MDAwMDAxZTogMHgyMDAyMCxcclxuICAgICAgICAweDgwMDAwMDFmOiAweDgwMjA4MDBcclxuICAgICAgfVxyXG4gICAgXVxyXG5cclxuICAgIC8vIE1hc2tzIHRoYXQgc2VsZWN0IHRoZSBTQk9YIGlucHV0XHJcbiAgICB2YXIgU0JPWF9NQVNLID0gW1xyXG4gICAgICAweGY4MDAwMDAxLCAweDFmODAwMDAwLCAweDAxZjgwMDAwLCAweDAwMWY4MDAwLFxyXG4gICAgICAweDAwMDFmODAwLCAweDAwMDAxZjgwLCAweDAwMDAwMWY4LCAweDgwMDAwMDFmXHJcbiAgICBdXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBERVMgYmxvY2sgY2lwaGVyIGFsZ29yaXRobS5cclxuICAgICAqL1xyXG4gICAgdmFyIERFUyA9IENfYWxnby5ERVMgPSBCbG9ja0NpcGhlci5leHRlbmQoe1xyXG4gICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgIHZhciBrZXkgPSB0aGlzLl9rZXlcclxuICAgICAgICB2YXIga2V5V29yZHMgPSBrZXkud29yZHNcclxuXHJcbiAgICAgICAgLy8gU2VsZWN0IDU2IGJpdHMgYWNjb3JkaW5nIHRvIFBDMVxyXG4gICAgICAgIHZhciBrZXlCaXRzID0gW11cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU2OyBpKyspIHtcclxuICAgICAgICAgIHZhciBrZXlCaXRQb3MgPSBQQzFbaV0gLSAxXHJcbiAgICAgICAgICBrZXlCaXRzW2ldID0gKGtleVdvcmRzW2tleUJpdFBvcyA+Pj4gNV0gPj4+ICgzMSAtIGtleUJpdFBvcyAlIDMyKSkgJiAxXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBc3NlbWJsZSAxNiBzdWJrZXlzXHJcbiAgICAgICAgdmFyIHN1YktleXMgPSB0aGlzLl9zdWJLZXlzID0gW11cclxuICAgICAgICBmb3IgKHZhciBuU3ViS2V5ID0gMDsgblN1YktleSA8IDE2OyBuU3ViS2V5KyspIHtcclxuICAgICAgICAgIC8vIENyZWF0ZSBzdWJrZXlcclxuICAgICAgICAgIHZhciBzdWJLZXkgPSBzdWJLZXlzW25TdWJLZXldID0gW11cclxuXHJcbiAgICAgICAgICAvLyBTaG9ydGN1dFxyXG4gICAgICAgICAgdmFyIGJpdFNoaWZ0ID0gQklUX1NISUZUU1tuU3ViS2V5XVxyXG5cclxuICAgICAgICAgIC8vIFNlbGVjdCA0OCBiaXRzIGFjY29yZGluZyB0byBQQzJcclxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjQ7IGkrKykge1xyXG4gICAgICAgICAgICAvLyBTZWxlY3QgZnJvbSB0aGUgbGVmdCAyOCBrZXkgYml0c1xyXG4gICAgICAgICAgICBzdWJLZXlbKGkgLyA2KSB8IDBdIHw9IGtleUJpdHNbKChQQzJbaV0gLSAxKSArIGJpdFNoaWZ0KSAlIDI4XSA8PCAoMzEgLSBpICUgNilcclxuXHJcbiAgICAgICAgICAgIC8vIFNlbGVjdCBmcm9tIHRoZSByaWdodCAyOCBrZXkgYml0c1xyXG4gICAgICAgICAgICBzdWJLZXlbNCArICgoaSAvIDYpIHwgMCldIHw9IGtleUJpdHNbMjggKyAoKChQQzJbaSArIDI0XSAtIDEpICsgYml0U2hpZnQpICUgMjgpXSA8PCAoMzEgLSBpICUgNilcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBTaW5jZSBlYWNoIHN1YmtleSBpcyBhcHBsaWVkIHRvIGFuIGV4cGFuZGVkIDMyLWJpdCBpbnB1dCxcclxuICAgICAgICAgIC8vIHRoZSBzdWJrZXkgY2FuIGJlIGJyb2tlbiBpbnRvIDggdmFsdWVzIHNjYWxlZCB0byAzMi1iaXRzLFxyXG4gICAgICAgICAgLy8gd2hpY2ggYWxsb3dzIHRoZSBrZXkgdG8gYmUgdXNlZCB3aXRob3V0IGV4cGFuc2lvblxyXG4gICAgICAgICAgc3ViS2V5WzBdID0gKHN1YktleVswXSA8PCAxKSB8IChzdWJLZXlbMF0gPj4+IDMxKVxyXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCA3OyBpKyspIHtcclxuICAgICAgICAgICAgc3ViS2V5W2ldID0gc3ViS2V5W2ldID4+PiAoKGkgLSAxKSAqIDQgKyAzKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgc3ViS2V5WzddID0gKHN1YktleVs3XSA8PCA1KSB8IChzdWJLZXlbN10gPj4+IDI3KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ29tcHV0ZSBpbnZlcnNlIHN1YmtleXNcclxuICAgICAgICB2YXIgaW52U3ViS2V5cyA9IHRoaXMuX2ludlN1YktleXMgPSBbXVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7IGkrKykge1xyXG4gICAgICAgICAgaW52U3ViS2V5c1tpXSA9IHN1YktleXNbMTUgLSBpXVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcbiAgICAgIGVuY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xyXG4gICAgICAgIHRoaXMuX2RvQ3J5cHRCbG9jayhNLCBvZmZzZXQsIHRoaXMuX3N1YktleXMpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBkZWNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcclxuICAgICAgICB0aGlzLl9kb0NyeXB0QmxvY2soTSwgb2Zmc2V0LCB0aGlzLl9pbnZTdWJLZXlzKVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgX2RvQ3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCwgc3ViS2V5cykge1xyXG4gICAgICAgIC8vIEdldCBpbnB1dFxyXG4gICAgICAgIHRoaXMuX2xCbG9jayA9IE1bb2Zmc2V0XVxyXG4gICAgICAgIHRoaXMuX3JCbG9jayA9IE1bb2Zmc2V0ICsgMV1cclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbCBwZXJtdXRhdGlvblxyXG4gICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCA0LCAweDBmMGYwZjBmKVxyXG4gICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxNiwgMHgwMDAwZmZmZilcclxuICAgICAgICBleGNoYW5nZVJMLmNhbGwodGhpcywgMiwgMHgzMzMzMzMzMylcclxuICAgICAgICBleGNoYW5nZVJMLmNhbGwodGhpcywgOCwgMHgwMGZmMDBmZilcclxuICAgICAgICBleGNoYW5nZUxSLmNhbGwodGhpcywgMSwgMHg1NTU1NTU1NSlcclxuXHJcbiAgICAgICAgLy8gUm91bmRzXHJcbiAgICAgICAgZm9yICh2YXIgcm91bmQgPSAwOyByb3VuZCA8IDE2OyByb3VuZCsrKSB7XHJcbiAgICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICAgIHZhciBzdWJLZXkgPSBzdWJLZXlzW3JvdW5kXVxyXG4gICAgICAgICAgdmFyIGxCbG9jayA9IHRoaXMuX2xCbG9ja1xyXG4gICAgICAgICAgdmFyIHJCbG9jayA9IHRoaXMuX3JCbG9ja1xyXG5cclxuICAgICAgICAgIC8vIEZlaXN0ZWwgZnVuY3Rpb25cclxuICAgICAgICAgIHZhciBmID0gMFxyXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuICAgICAgICAgICAgZiB8PSBTQk9YX1BbaV1bKChyQmxvY2sgXiBzdWJLZXlbaV0pICYgU0JPWF9NQVNLW2ldKSA+Pj4gMF1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHRoaXMuX2xCbG9jayA9IHJCbG9ja1xyXG4gICAgICAgICAgdGhpcy5fckJsb2NrID0gbEJsb2NrIF4gZlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVW5kbyBzd2FwIGZyb20gbGFzdCByb3VuZFxyXG4gICAgICAgIHZhciB0ID0gdGhpcy5fbEJsb2NrXHJcbiAgICAgICAgdGhpcy5fbEJsb2NrID0gdGhpcy5fckJsb2NrXHJcbiAgICAgICAgdGhpcy5fckJsb2NrID0gdFxyXG5cclxuICAgICAgICAvLyBGaW5hbCBwZXJtdXRhdGlvblxyXG4gICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxLCAweDU1NTU1NTU1KVxyXG4gICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCA4LCAweDAwZmYwMGZmKVxyXG4gICAgICAgIGV4Y2hhbmdlUkwuY2FsbCh0aGlzLCAyLCAweDMzMzMzMzMzKVxyXG4gICAgICAgIGV4Y2hhbmdlTFIuY2FsbCh0aGlzLCAxNiwgMHgwMDAwZmZmZilcclxuICAgICAgICBleGNoYW5nZUxSLmNhbGwodGhpcywgNCwgMHgwZjBmMGYwZilcclxuXHJcbiAgICAgICAgLy8gU2V0IG91dHB1dFxyXG4gICAgICAgIE1bb2Zmc2V0XSA9IHRoaXMuX2xCbG9ja1xyXG4gICAgICAgIE1bb2Zmc2V0ICsgMV0gPSB0aGlzLl9yQmxvY2tcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGtleVNpemU6IDY0IC8gMzIsXHJcblxyXG4gICAgICBpdlNpemU6IDY0IC8gMzIsXHJcblxyXG4gICAgICBibG9ja1NpemU6IDY0IC8gMzJcclxuICAgIH0pXHJcblxyXG4gICAgLy8gU3dhcCBiaXRzIGFjcm9zcyB0aGUgbGVmdCBhbmQgcmlnaHQgd29yZHNcclxuICAgIGZ1bmN0aW9uIGV4Y2hhbmdlTFIob2Zmc2V0LCBtYXNrKSB7XHJcbiAgICAgIHZhciB0ID0gKCh0aGlzLl9sQmxvY2sgPj4+IG9mZnNldCkgXiB0aGlzLl9yQmxvY2spICYgbWFza1xyXG4gICAgICB0aGlzLl9yQmxvY2sgXj0gdFxyXG4gICAgICB0aGlzLl9sQmxvY2sgXj0gdCA8PCBvZmZzZXRcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBleGNoYW5nZVJMKG9mZnNldCwgbWFzaykge1xyXG4gICAgICB2YXIgdCA9ICgodGhpcy5fckJsb2NrID4+PiBvZmZzZXQpIF4gdGhpcy5fbEJsb2NrKSAmIG1hc2tcclxuICAgICAgdGhpcy5fbEJsb2NrIF49IHRcclxuICAgICAgdGhpcy5fckJsb2NrIF49IHQgPDwgb2Zmc2V0XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqXHJcbiAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5ERVMuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XHJcbiAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5ERVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XHJcbiAgICAgKi9cclxuICAgIEMuREVTID0gQmxvY2tDaXBoZXIuX2NyZWF0ZUhlbHBlcihERVMpXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmlwbGUtREVTIGJsb2NrIGNpcGhlciBhbGdvcml0aG0uXHJcbiAgICAgKi9cclxuICAgIHZhciBUcmlwbGVERVMgPSBDX2FsZ28uVHJpcGxlREVTID0gQmxvY2tDaXBoZXIuZXh0ZW5kKHtcclxuICAgICAgX2RvUmVzZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgICB2YXIga2V5ID0gdGhpcy5fa2V5XHJcbiAgICAgICAgdmFyIGtleVdvcmRzID0ga2V5LndvcmRzXHJcblxyXG4gICAgICAgIC8vIENyZWF0ZSBERVMgaW5zdGFuY2VzXHJcbiAgICAgICAgdGhpcy5fZGVzMSA9IERFUy5jcmVhdGVFbmNyeXB0b3IoV29yZEFycmF5LmNyZWF0ZShrZXlXb3Jkcy5zbGljZSgwLCAyKSkpXHJcbiAgICAgICAgdGhpcy5fZGVzMiA9IERFUy5jcmVhdGVFbmNyeXB0b3IoV29yZEFycmF5LmNyZWF0ZShrZXlXb3Jkcy5zbGljZSgyLCA0KSkpXHJcbiAgICAgICAgdGhpcy5fZGVzMyA9IERFUy5jcmVhdGVFbmNyeXB0b3IoV29yZEFycmF5LmNyZWF0ZShrZXlXb3Jkcy5zbGljZSg0LCA2KSkpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBlbmNyeXB0QmxvY2s6IGZ1bmN0aW9uIChNLCBvZmZzZXQpIHtcclxuICAgICAgICB0aGlzLl9kZXMxLmVuY3J5cHRCbG9jayhNLCBvZmZzZXQpXHJcbiAgICAgICAgdGhpcy5fZGVzMi5kZWNyeXB0QmxvY2soTSwgb2Zmc2V0KVxyXG4gICAgICAgIHRoaXMuX2RlczMuZW5jcnlwdEJsb2NrKE0sIG9mZnNldClcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGRlY3J5cHRCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xyXG4gICAgICAgIHRoaXMuX2RlczMuZGVjcnlwdEJsb2NrKE0sIG9mZnNldClcclxuICAgICAgICB0aGlzLl9kZXMyLmVuY3J5cHRCbG9jayhNLCBvZmZzZXQpXHJcbiAgICAgICAgdGhpcy5fZGVzMS5kZWNyeXB0QmxvY2soTSwgb2Zmc2V0KVxyXG4gICAgICB9LFxyXG5cclxuICAgICAga2V5U2l6ZTogMTkyIC8gMzIsXHJcblxyXG4gICAgICBpdlNpemU6IDY0IC8gMzIsXHJcblxyXG4gICAgICBibG9ja1NpemU6IDY0IC8gMzJcclxuICAgIH0pXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG9ydGN1dCBmdW5jdGlvbnMgdG8gdGhlIGNpcGhlcidzIG9iamVjdCBpbnRlcmZhY2UuXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqXHJcbiAgICAgKiAgICAgdmFyIGNpcGhlcnRleHQgPSBDcnlwdG9KUy5UcmlwbGVERVMuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XHJcbiAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5UcmlwbGVERVMuZGVjcnlwdChjaXBoZXJ0ZXh0LCBrZXksIGNmZyk7XHJcbiAgICAgKi9cclxuICAgIEMuVHJpcGxlREVTID0gQmxvY2tDaXBoZXIuX2NyZWF0ZUhlbHBlcihUcmlwbGVERVMpXHJcbiAgfSgpKTtcclxuXHJcblxyXG4gIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBTaG9ydGN1dHNcclxuICAgIHZhciBDID0gQ3J5cHRvSlNcclxuICAgIHZhciBDX2xpYiA9IEMubGliXHJcbiAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyXHJcbiAgICB2YXIgQ19hbGdvID0gQy5hbGdvXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSQzQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG0uXHJcbiAgICAgKi9cclxuICAgIHZhciBSQzQgPSBDX2FsZ28uUkM0ID0gU3RyZWFtQ2lwaGVyLmV4dGVuZCh7XHJcbiAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIGtleSA9IHRoaXMuX2tleVxyXG4gICAgICAgIHZhciBrZXlXb3JkcyA9IGtleS53b3Jkc1xyXG4gICAgICAgIHZhciBrZXlTaWdCeXRlcyA9IGtleS5zaWdCeXRlc1xyXG5cclxuICAgICAgICAvLyBJbml0IHNib3hcclxuICAgICAgICB2YXIgUyA9IHRoaXMuX1MgPSBbXVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcclxuICAgICAgICAgIFNbaV0gPSBpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBLZXkgc2V0dXBcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IDA7IGkgPCAyNTY7IGkrKykge1xyXG4gICAgICAgICAgdmFyIGtleUJ5dGVJbmRleCA9IGkgJSBrZXlTaWdCeXRlc1xyXG4gICAgICAgICAgdmFyIGtleUJ5dGUgPSAoa2V5V29yZHNba2V5Qnl0ZUluZGV4ID4+PiAyXSA+Pj4gKDI0IC0gKGtleUJ5dGVJbmRleCAlIDQpICogOCkpICYgMHhmZlxyXG5cclxuICAgICAgICAgIGogPSAoaiArIFNbaV0gKyBrZXlCeXRlKSAlIDI1NlxyXG5cclxuICAgICAgICAgIC8vIFN3YXBcclxuICAgICAgICAgIHZhciB0ID0gU1tpXVxyXG4gICAgICAgICAgU1tpXSA9IFNbal1cclxuICAgICAgICAgIFNbal0gPSB0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDb3VudGVyc1xyXG4gICAgICAgIHRoaXMuX2kgPSB0aGlzLl9qID0gMFxyXG4gICAgICB9LFxyXG5cclxuICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgTVtvZmZzZXRdIF49IGdlbmVyYXRlS2V5c3RyZWFtV29yZC5jYWxsKHRoaXMpXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBrZXlTaXplOiAyNTYgLyAzMixcclxuXHJcbiAgICAgIGl2U2l6ZTogMFxyXG4gICAgfSlcclxuXHJcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUtleXN0cmVhbVdvcmQoKSB7XHJcbiAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICB2YXIgUyA9IHRoaXMuX1NcclxuICAgICAgdmFyIGkgPSB0aGlzLl9pXHJcbiAgICAgIHZhciBqID0gdGhpcy5falxyXG5cclxuICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtIHdvcmRcclxuICAgICAgdmFyIGtleXN0cmVhbVdvcmQgPSAwXHJcbiAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgNDsgbisrKSB7XHJcbiAgICAgICAgaSA9IChpICsgMSkgJSAyNTZcclxuICAgICAgICBqID0gKGogKyBTW2ldKSAlIDI1NlxyXG5cclxuICAgICAgICAvLyBTd2FwXHJcbiAgICAgICAgdmFyIHQgPSBTW2ldXHJcbiAgICAgICAgU1tpXSA9IFNbal1cclxuICAgICAgICBTW2pdID0gdFxyXG5cclxuICAgICAgICBrZXlzdHJlYW1Xb3JkIHw9IFNbKFNbaV0gKyBTW2pdKSAlIDI1Nl0gPDwgKDI0IC0gbiAqIDgpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFVwZGF0ZSBjb3VudGVyc1xyXG4gICAgICB0aGlzLl9pID0gaVxyXG4gICAgICB0aGlzLl9qID0galxyXG5cclxuICAgICAgcmV0dXJuIGtleXN0cmVhbVdvcmRcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICpcclxuICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlJDNC5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcclxuICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJDNC5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcclxuICAgICAqL1xyXG4gICAgQy5SQzQgPSBTdHJlYW1DaXBoZXIuX2NyZWF0ZUhlbHBlcihSQzQpXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNb2RpZmllZCBSQzQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG0uXHJcbiAgICAgKi9cclxuICAgIHZhciBSQzREcm9wID0gQ19hbGdvLlJDNERyb3AgPSBSQzQuZXh0ZW5kKHtcclxuICAgICAgLyoqXHJcbiAgICAgICAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucy5cclxuICAgICAgICpcclxuICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IGRyb3AgVGhlIG51bWJlciBvZiBrZXlzdHJlYW0gd29yZHMgdG8gZHJvcC4gRGVmYXVsdCAxOTJcclxuICAgICAgICovXHJcbiAgICAgIGNmZzogUkM0LmNmZy5leHRlbmQoe1xyXG4gICAgICAgIGRyb3A6IDE5MlxyXG4gICAgICB9KSxcclxuXHJcbiAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgUkM0Ll9kb1Jlc2V0LmNhbGwodGhpcylcclxuXHJcbiAgICAgICAgLy8gRHJvcFxyXG4gICAgICAgIGZvciAodmFyIGkgPSB0aGlzLmNmZy5kcm9wOyBpID4gMDsgaS0tKSB7XHJcbiAgICAgICAgICBnZW5lcmF0ZUtleXN0cmVhbVdvcmQuY2FsbCh0aGlzKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICpcclxuICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlJDNERyb3AuZW5jcnlwdChtZXNzYWdlLCBrZXksIGNmZyk7XHJcbiAgICAgKiAgICAgdmFyIHBsYWludGV4dCAgPSBDcnlwdG9KUy5SQzREcm9wLmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xyXG4gICAgICovXHJcbiAgICBDLlJDNERyb3AgPSBTdHJlYW1DaXBoZXIuX2NyZWF0ZUhlbHBlcihSQzREcm9wKVxyXG4gIH0oKSlcclxuXHJcblxyXG4gIC8qKiBAcHJlc2VydmVcclxuICAgKiBDb3VudGVyIGJsb2NrIG1vZGUgY29tcGF0aWJsZSB3aXRoICBEciBCcmlhbiBHbGFkbWFuIGZpbGVlbmMuY1xyXG4gICAqIGRlcml2ZWQgZnJvbSBDcnlwdG9KUy5tb2RlLkNUUlxyXG4gICAqIEphbiBIcnVieSBqaHJ1Ynkud2ViQGdtYWlsLmNvbVxyXG4gICAqL1xyXG4gIENyeXB0b0pTLm1vZGUuQ1RSR2xhZG1hbiA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgQ1RSR2xhZG1hbiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKClcclxuXHJcbiAgICBmdW5jdGlvbiBpbmNXb3JkKHdvcmQpIHtcclxuICAgICAgaWYgKCgod29yZCA+PiAyNCkgJiAweGZmKSA9PT0gMHhmZikgeyAvLyBvdmVyZmxvd1xyXG4gICAgICAgIHZhciBiMSA9ICh3b3JkID4+IDE2KSAmIDB4ZmZcclxuICAgICAgICB2YXIgYjIgPSAod29yZCA+PiA4KSAmIDB4ZmZcclxuICAgICAgICB2YXIgYjMgPSB3b3JkICYgMHhmZlxyXG5cclxuICAgICAgICBpZiAoYjEgPT09IDB4ZmYpIC8vIG92ZXJmbG93IGIxXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgYjEgPSAwXHJcbiAgICAgICAgICBpZiAoYjIgPT09IDB4ZmYpIHtcclxuICAgICAgICAgICAgYjIgPSAwXHJcbiAgICAgICAgICAgIGlmIChiMyA9PT0gMHhmZikge1xyXG4gICAgICAgICAgICAgIGIzID0gMFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICsrYjNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgKytiMlxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICArK2IxXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB3b3JkID0gMFxyXG4gICAgICAgIHdvcmQgKz0gKGIxIDw8IDE2KVxyXG4gICAgICAgIHdvcmQgKz0gKGIyIDw8IDgpXHJcbiAgICAgICAgd29yZCArPSBiM1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdvcmQgKz0gKDB4MDEgPDwgMjQpXHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHdvcmRcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBpbmNDb3VudGVyKGNvdW50ZXIpIHtcclxuICAgICAgaWYgKChjb3VudGVyWzBdID0gaW5jV29yZChjb3VudGVyWzBdKSkgPT09IDApIHtcclxuICAgICAgICAvLyBlbmNyX2RhdGEgaW4gZmlsZWVuYy5jIGZyb20gIERyIEJyaWFuIEdsYWRtYW4ncyBjb3VudHMgb25seSB3aXRoIERXT1JEIGogPCA4XHJcbiAgICAgICAgY291bnRlclsxXSA9IGluY1dvcmQoY291bnRlclsxXSlcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gY291bnRlclxyXG4gICAgfVxyXG5cclxuICAgIHZhciBFbmNyeXB0b3IgPSBDVFJHbGFkbWFuLkVuY3J5cHRvciA9IENUUkdsYWRtYW4uZXh0ZW5kKHtcclxuICAgICAgcHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAod29yZHMsIG9mZnNldCkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgIHZhciBjaXBoZXIgPSB0aGlzLl9jaXBoZXJcclxuICAgICAgICB2YXIgYmxvY2tTaXplID0gY2lwaGVyLmJsb2NrU2l6ZVxyXG4gICAgICAgIHZhciBpdiA9IHRoaXMuX2l2XHJcbiAgICAgICAgdmFyIGNvdW50ZXIgPSB0aGlzLl9jb3VudGVyXHJcblxyXG4gICAgICAgIC8vIEdlbmVyYXRlIGtleXN0cmVhbVxyXG4gICAgICAgIGlmIChpdikge1xyXG4gICAgICAgICAgY291bnRlciA9IHRoaXMuX2NvdW50ZXIgPSBpdi5zbGljZSgwKVxyXG5cclxuICAgICAgICAgIC8vIFJlbW92ZSBJViBmb3Igc3Vic2VxdWVudCBibG9ja3NcclxuICAgICAgICAgIHRoaXMuX2l2ID0gdW5kZWZpbmVkXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbmNDb3VudGVyKGNvdW50ZXIpXHJcblxyXG4gICAgICAgIHZhciBrZXlzdHJlYW0gPSBjb3VudGVyLnNsaWNlKDApXHJcbiAgICAgICAgY2lwaGVyLmVuY3J5cHRCbG9jayhrZXlzdHJlYW0sIDApXHJcblxyXG4gICAgICAgIC8vIEVuY3J5cHRcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJsb2NrU2l6ZTsgaSsrKSB7XHJcbiAgICAgICAgICB3b3Jkc1tvZmZzZXQgKyBpXSBePSBrZXlzdHJlYW1baV1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgQ1RSR2xhZG1hbi5EZWNyeXB0b3IgPSBFbmNyeXB0b3JcclxuXHJcbiAgICByZXR1cm4gQ1RSR2xhZG1hblxyXG4gIH0oKSk7XHJcblxyXG5cclxuXHJcblxyXG4gIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBTaG9ydGN1dHNcclxuICAgIHZhciBDID0gQ3J5cHRvSlNcclxuICAgIHZhciBDX2xpYiA9IEMubGliXHJcbiAgICB2YXIgU3RyZWFtQ2lwaGVyID0gQ19saWIuU3RyZWFtQ2lwaGVyXHJcbiAgICB2YXIgQ19hbGdvID0gQy5hbGdvXHJcblxyXG4gICAgLy8gUmV1c2FibGUgb2JqZWN0c1xyXG4gICAgdmFyIFMgPSBbXVxyXG4gICAgdmFyIENfID0gW11cclxuICAgIHZhciBHID0gW11cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJhYmJpdCBzdHJlYW0gY2lwaGVyIGFsZ29yaXRobVxyXG4gICAgICovXHJcbiAgICB2YXIgUmFiYml0ID0gQ19hbGdvLlJhYmJpdCA9IFN0cmVhbUNpcGhlci5leHRlbmQoe1xyXG4gICAgICBfZG9SZXNldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgIHZhciBLID0gdGhpcy5fa2V5LndvcmRzXHJcbiAgICAgICAgdmFyIGl2ID0gdGhpcy5jZmcuaXZcclxuXHJcbiAgICAgICAgLy8gU3dhcCBlbmRpYW5cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgS1tpXSA9ICgoKEtbaV0gPDwgOCkgfCAoS1tpXSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcclxuICAgICAgICAgICAgKCgoS1tpXSA8PCAyNCkgfCAoS1tpXSA+Pj4gOCkpICYgMHhmZjAwZmYwMClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEdlbmVyYXRlIGluaXRpYWwgc3RhdGUgdmFsdWVzXHJcbiAgICAgICAgdmFyIFggPSB0aGlzLl9YID0gW1xyXG4gICAgICAgICAgS1swXSwgKEtbM10gPDwgMTYpIHwgKEtbMl0gPj4+IDE2KSxcclxuICAgICAgICAgIEtbMV0sIChLWzBdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksXHJcbiAgICAgICAgICBLWzJdLCAoS1sxXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLFxyXG4gICAgICAgICAgS1szXSwgKEtbMl0gPDwgMTYpIHwgKEtbMV0gPj4+IDE2KVxyXG4gICAgICAgIF1cclxuXHJcbiAgICAgICAgLy8gR2VuZXJhdGUgaW5pdGlhbCBjb3VudGVyIHZhbHVlc1xyXG4gICAgICAgIHZhciBDID0gdGhpcy5fQyA9IFtcclxuICAgICAgICAgIChLWzJdIDw8IDE2KSB8IChLWzJdID4+PiAxNiksIChLWzBdICYgMHhmZmZmMDAwMCkgfCAoS1sxXSAmIDB4MDAwMGZmZmYpLFxyXG4gICAgICAgICAgKEtbM10gPDwgMTYpIHwgKEtbM10gPj4+IDE2KSwgKEtbMV0gJiAweGZmZmYwMDAwKSB8IChLWzJdICYgMHgwMDAwZmZmZiksXHJcbiAgICAgICAgICAoS1swXSA8PCAxNikgfCAoS1swXSA+Pj4gMTYpLCAoS1syXSAmIDB4ZmZmZjAwMDApIHwgKEtbM10gJiAweDAwMDBmZmZmKSxcclxuICAgICAgICAgIChLWzFdIDw8IDE2KSB8IChLWzFdID4+PiAxNiksIChLWzNdICYgMHhmZmZmMDAwMCkgfCAoS1swXSAmIDB4MDAwMGZmZmYpXHJcbiAgICAgICAgXVxyXG5cclxuICAgICAgICAvLyBDYXJyeSBiaXRcclxuICAgICAgICB0aGlzLl9iID0gMFxyXG5cclxuICAgICAgICAvLyBJdGVyYXRlIHRoZSBzeXN0ZW0gZm91ciB0aW1lc1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XHJcbiAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gTW9kaWZ5IHRoZSBjb3VudGVyc1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XHJcbiAgICAgICAgICBDW2ldIF49IFhbKGkgKyA0KSAmIDddXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBJViBzZXR1cFxyXG4gICAgICAgIGlmIChpdikge1xyXG4gICAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgICB2YXIgSVYgPSBpdi53b3Jkc1xyXG4gICAgICAgICAgdmFyIElWXzAgPSBJVlswXVxyXG4gICAgICAgICAgdmFyIElWXzEgPSBJVlsxXVxyXG5cclxuICAgICAgICAgIC8vIEdlbmVyYXRlIGZvdXIgc3VidmVjdG9yc1xyXG4gICAgICAgICAgdmFyIGkwID0gKCgoSVZfMCA8PCA4KSB8IChJVl8wID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfCAoKChJVl8wIDw8IDI0KSB8IChJVl8wID4+PiA4KSkgJiAweGZmMDBmZjAwKVxyXG4gICAgICAgICAgdmFyIGkyID0gKCgoSVZfMSA8PCA4KSB8IChJVl8xID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfCAoKChJVl8xIDw8IDI0KSB8IChJVl8xID4+PiA4KSkgJiAweGZmMDBmZjAwKVxyXG4gICAgICAgICAgdmFyIGkxID0gKGkwID4+PiAxNikgfCAoaTIgJiAweGZmZmYwMDAwKVxyXG4gICAgICAgICAgdmFyIGkzID0gKGkyIDw8IDE2KSB8IChpMCAmIDB4MDAwMGZmZmYpXHJcblxyXG4gICAgICAgICAgLy8gTW9kaWZ5IGNvdW50ZXIgdmFsdWVzXHJcbiAgICAgICAgICBDWzBdIF49IGkwXHJcbiAgICAgICAgICBDWzFdIF49IGkxXHJcbiAgICAgICAgICBDWzJdIF49IGkyXHJcbiAgICAgICAgICBDWzNdIF49IGkzXHJcbiAgICAgICAgICBDWzRdIF49IGkwXHJcbiAgICAgICAgICBDWzVdIF49IGkxXHJcbiAgICAgICAgICBDWzZdIF49IGkyXHJcbiAgICAgICAgICBDWzddIF49IGkzXHJcblxyXG4gICAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXNcclxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG5cclxuICAgICAgX2RvUHJvY2Vzc0Jsb2NrOiBmdW5jdGlvbiAoTSwgb2Zmc2V0KSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRcclxuICAgICAgICB2YXIgWCA9IHRoaXMuX1hcclxuXHJcbiAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtXHJcbiAgICAgICAgbmV4dFN0YXRlLmNhbGwodGhpcylcclxuXHJcbiAgICAgICAgLy8gR2VuZXJhdGUgZm91ciBrZXlzdHJlYW0gd29yZHNcclxuICAgICAgICBTWzBdID0gWFswXSBeIChYWzVdID4+PiAxNikgXiAoWFszXSA8PCAxNilcclxuICAgICAgICBTWzFdID0gWFsyXSBeIChYWzddID4+PiAxNikgXiAoWFs1XSA8PCAxNilcclxuICAgICAgICBTWzJdID0gWFs0XSBeIChYWzFdID4+PiAxNikgXiAoWFs3XSA8PCAxNilcclxuICAgICAgICBTWzNdID0gWFs2XSBeIChYWzNdID4+PiAxNikgXiAoWFsxXSA8PCAxNilcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA0OyBpKyspIHtcclxuICAgICAgICAgIC8vIFN3YXAgZW5kaWFuXHJcbiAgICAgICAgICBTW2ldID0gKCgoU1tpXSA8PCA4KSB8IChTW2ldID4+PiAyNCkpICYgMHgwMGZmMDBmZikgfFxyXG4gICAgICAgICAgICAoKChTW2ldIDw8IDI0KSB8IChTW2ldID4+PiA4KSkgJiAweGZmMDBmZjAwKVxyXG5cclxuICAgICAgICAgIC8vIEVuY3J5cHRcclxuICAgICAgICAgIE1bb2Zmc2V0ICsgaV0gXj0gU1tpXVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcbiAgICAgIGJsb2NrU2l6ZTogMTI4IC8gMzIsXHJcblxyXG4gICAgICBpdlNpemU6IDY0IC8gMzJcclxuICAgIH0pXHJcblxyXG4gICAgZnVuY3Rpb24gbmV4dFN0YXRlKCkge1xyXG4gICAgICAvLyBTaG9ydGN1dHNcclxuICAgICAgdmFyIFggPSB0aGlzLl9YXHJcbiAgICAgIHZhciBDID0gdGhpcy5fQ1xyXG5cclxuICAgICAgLy8gU2F2ZSBvbGQgY291bnRlciB2YWx1ZXNcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuICAgICAgICBDX1tpXSA9IENbaV1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBjb3VudGVyIHZhbHVlc1xyXG4gICAgICBDWzBdID0gKENbMF0gKyAweDRkMzRkMzRkICsgdGhpcy5fYikgfCAwXHJcbiAgICAgIENbMV0gPSAoQ1sxXSArIDB4ZDM0ZDM0ZDMgKyAoKENbMF0gPj4+IDApIDwgKENfWzBdID4+PiAwKSA/IDEgOiAwKSkgfCAwXHJcbiAgICAgIENbMl0gPSAoQ1syXSArIDB4MzRkMzRkMzQgKyAoKENbMV0gPj4+IDApIDwgKENfWzFdID4+PiAwKSA/IDEgOiAwKSkgfCAwXHJcbiAgICAgIENbM10gPSAoQ1szXSArIDB4NGQzNGQzNGQgKyAoKENbMl0gPj4+IDApIDwgKENfWzJdID4+PiAwKSA/IDEgOiAwKSkgfCAwXHJcbiAgICAgIENbNF0gPSAoQ1s0XSArIDB4ZDM0ZDM0ZDMgKyAoKENbM10gPj4+IDApIDwgKENfWzNdID4+PiAwKSA/IDEgOiAwKSkgfCAwXHJcbiAgICAgIENbNV0gPSAoQ1s1XSArIDB4MzRkMzRkMzQgKyAoKENbNF0gPj4+IDApIDwgKENfWzRdID4+PiAwKSA/IDEgOiAwKSkgfCAwXHJcbiAgICAgIENbNl0gPSAoQ1s2XSArIDB4NGQzNGQzNGQgKyAoKENbNV0gPj4+IDApIDwgKENfWzVdID4+PiAwKSA/IDEgOiAwKSkgfCAwXHJcbiAgICAgIENbN10gPSAoQ1s3XSArIDB4ZDM0ZDM0ZDMgKyAoKENbNl0gPj4+IDApIDwgKENfWzZdID4+PiAwKSA/IDEgOiAwKSkgfCAwXHJcbiAgICAgIHRoaXMuX2IgPSAoQ1s3XSA+Pj4gMCkgPCAoQ19bN10gPj4+IDApID8gMSA6IDBcclxuXHJcbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgZy12YWx1ZXNcclxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuICAgICAgICB2YXIgZ3ggPSBYW2ldICsgQ1tpXVxyXG5cclxuICAgICAgICAvLyBDb25zdHJ1Y3QgaGlnaCBhbmQgbG93IGFyZ3VtZW50IGZvciBzcXVhcmluZ1xyXG4gICAgICAgIHZhciBnYSA9IGd4ICYgMHhmZmZmXHJcbiAgICAgICAgdmFyIGdiID0gZ3ggPj4+IDE2XHJcblxyXG4gICAgICAgIC8vIENhbGN1bGF0ZSBoaWdoIGFuZCBsb3cgcmVzdWx0IG9mIHNxdWFyaW5nXHJcbiAgICAgICAgdmFyIGdoID0gKCgoKGdhICogZ2EpID4+PiAxNykgKyBnYSAqIGdiKSA+Pj4gMTUpICsgZ2IgKiBnYlxyXG4gICAgICAgIHZhciBnbCA9ICgoKGd4ICYgMHhmZmZmMDAwMCkgKiBneCkgfCAwKSArICgoKGd4ICYgMHgwMDAwZmZmZikgKiBneCkgfCAwKVxyXG5cclxuICAgICAgICAvLyBIaWdoIFhPUiBsb3dcclxuICAgICAgICBHW2ldID0gZ2ggXiBnbFxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBDYWxjdWxhdGUgbmV3IHN0YXRlIHZhbHVlc1xyXG4gICAgICBYWzBdID0gKEdbMF0gKyAoKEdbN10gPDwgMTYpIHwgKEdbN10gPj4+IDE2KSkgKyAoKEdbNl0gPDwgMTYpIHwgKEdbNl0gPj4+IDE2KSkpIHwgMFxyXG4gICAgICBYWzFdID0gKEdbMV0gKyAoKEdbMF0gPDwgOCkgfCAoR1swXSA+Pj4gMjQpKSArIEdbN10pIHwgMFxyXG4gICAgICBYWzJdID0gKEdbMl0gKyAoKEdbMV0gPDwgMTYpIHwgKEdbMV0gPj4+IDE2KSkgKyAoKEdbMF0gPDwgMTYpIHwgKEdbMF0gPj4+IDE2KSkpIHwgMFxyXG4gICAgICBYWzNdID0gKEdbM10gKyAoKEdbMl0gPDwgOCkgfCAoR1syXSA+Pj4gMjQpKSArIEdbMV0pIHwgMFxyXG4gICAgICBYWzRdID0gKEdbNF0gKyAoKEdbM10gPDwgMTYpIHwgKEdbM10gPj4+IDE2KSkgKyAoKEdbMl0gPDwgMTYpIHwgKEdbMl0gPj4+IDE2KSkpIHwgMFxyXG4gICAgICBYWzVdID0gKEdbNV0gKyAoKEdbNF0gPDwgOCkgfCAoR1s0XSA+Pj4gMjQpKSArIEdbM10pIHwgMFxyXG4gICAgICBYWzZdID0gKEdbNl0gKyAoKEdbNV0gPDwgMTYpIHwgKEdbNV0gPj4+IDE2KSkgKyAoKEdbNF0gPDwgMTYpIHwgKEdbNF0gPj4+IDE2KSkpIHwgMFxyXG4gICAgICBYWzddID0gKEdbN10gKyAoKEdbNl0gPDwgOCkgfCAoR1s2XSA+Pj4gMjQpKSArIEdbNV0pIHwgMFxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvcnRjdXQgZnVuY3Rpb25zIHRvIHRoZSBjaXBoZXIncyBvYmplY3QgaW50ZXJmYWNlLlxyXG4gICAgICpcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKlxyXG4gICAgICogICAgIHZhciBjaXBoZXJ0ZXh0ID0gQ3J5cHRvSlMuUmFiYml0LmVuY3J5cHQobWVzc2FnZSwga2V5LCBjZmcpO1xyXG4gICAgICogICAgIHZhciBwbGFpbnRleHQgID0gQ3J5cHRvSlMuUmFiYml0LmRlY3J5cHQoY2lwaGVydGV4dCwga2V5LCBjZmcpO1xyXG4gICAgICovXHJcbiAgICBDLlJhYmJpdCA9IFN0cmVhbUNpcGhlci5fY3JlYXRlSGVscGVyKFJhYmJpdClcclxuICB9KCkpXHJcblxyXG5cclxuICAvKipcclxuICAgKiBDb3VudGVyIGJsb2NrIG1vZGUuXHJcbiAgICovXHJcbiAgQ3J5cHRvSlMubW9kZS5DVFIgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIENUUiA9IENyeXB0b0pTLmxpYi5CbG9ja0NpcGhlck1vZGUuZXh0ZW5kKClcclxuXHJcbiAgICB2YXIgRW5jcnlwdG9yID0gQ1RSLkVuY3J5cHRvciA9IENUUi5leHRlbmQoe1xyXG4gICAgICBwcm9jZXNzQmxvY2s6IGZ1bmN0aW9uICh3b3Jkcywgb2Zmc2V0KSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIGNpcGhlciA9IHRoaXMuX2NpcGhlclxyXG4gICAgICAgIHZhciBibG9ja1NpemUgPSBjaXBoZXIuYmxvY2tTaXplXHJcbiAgICAgICAgdmFyIGl2ID0gdGhpcy5faXZcclxuICAgICAgICB2YXIgY291bnRlciA9IHRoaXMuX2NvdW50ZXJcclxuXHJcbiAgICAgICAgLy8gR2VuZXJhdGUga2V5c3RyZWFtXHJcbiAgICAgICAgaWYgKGl2KSB7XHJcbiAgICAgICAgICBjb3VudGVyID0gdGhpcy5fY291bnRlciA9IGl2LnNsaWNlKDApXHJcblxyXG4gICAgICAgICAgLy8gUmVtb3ZlIElWIGZvciBzdWJzZXF1ZW50IGJsb2Nrc1xyXG4gICAgICAgICAgdGhpcy5faXYgPSB1bmRlZmluZWRcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGtleXN0cmVhbSA9IGNvdW50ZXIuc2xpY2UoMClcclxuICAgICAgICBjaXBoZXIuZW5jcnlwdEJsb2NrKGtleXN0cmVhbSwgMClcclxuXHJcbiAgICAgICAgLy8gSW5jcmVtZW50IGNvdW50ZXJcclxuICAgICAgICBjb3VudGVyW2Jsb2NrU2l6ZSAtIDFdID0gKGNvdW50ZXJbYmxvY2tTaXplIC0gMV0gKyAxKSB8IDBcclxuXHJcbiAgICAgICAgLy8gRW5jcnlwdFxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYmxvY2tTaXplOyBpKyspIHtcclxuICAgICAgICAgIHdvcmRzW29mZnNldCArIGldIF49IGtleXN0cmVhbVtpXVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICBDVFIuRGVjcnlwdG9yID0gRW5jcnlwdG9yXHJcblxyXG4gICAgcmV0dXJuIENUUlxyXG4gIH0oKSk7XHJcblxyXG5cclxuICAoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gU2hvcnRjdXRzXHJcbiAgICB2YXIgQyA9IENyeXB0b0pTXHJcbiAgICB2YXIgQ19saWIgPSBDLmxpYlxyXG4gICAgdmFyIFN0cmVhbUNpcGhlciA9IENfbGliLlN0cmVhbUNpcGhlclxyXG4gICAgdmFyIENfYWxnbyA9IEMuYWxnb1xyXG5cclxuICAgIC8vIFJldXNhYmxlIG9iamVjdHNcclxuICAgIHZhciBTID0gW11cclxuICAgIHZhciBDXyA9IFtdXHJcbiAgICB2YXIgRyA9IFtdXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSYWJiaXQgc3RyZWFtIGNpcGhlciBhbGdvcml0aG0uXHJcbiAgICAgKlxyXG4gICAgICogVGhpcyBpcyBhIGxlZ2FjeSB2ZXJzaW9uIHRoYXQgbmVnbGVjdGVkIHRvIGNvbnZlcnQgdGhlIGtleSB0byBsaXR0bGUtZW5kaWFuLlxyXG4gICAgICogVGhpcyBlcnJvciBkb2Vzbid0IGFmZmVjdCB0aGUgY2lwaGVyJ3Mgc2VjdXJpdHksXHJcbiAgICAgKiBidXQgaXQgZG9lcyBhZmZlY3QgaXRzIGNvbXBhdGliaWxpdHkgd2l0aCBvdGhlciBpbXBsZW1lbnRhdGlvbnMuXHJcbiAgICAgKi9cclxuICAgIHZhciBSYWJiaXRMZWdhY3kgPSBDX2FsZ28uUmFiYml0TGVnYWN5ID0gU3RyZWFtQ2lwaGVyLmV4dGVuZCh7XHJcbiAgICAgIF9kb1Jlc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgICAgdmFyIEsgPSB0aGlzLl9rZXkud29yZHNcclxuICAgICAgICB2YXIgaXYgPSB0aGlzLmNmZy5pdlxyXG5cclxuICAgICAgICAvLyBHZW5lcmF0ZSBpbml0aWFsIHN0YXRlIHZhbHVlc1xyXG4gICAgICAgIHZhciBYID0gdGhpcy5fWCA9IFtcclxuICAgICAgICAgIEtbMF0sIChLWzNdIDw8IDE2KSB8IChLWzJdID4+PiAxNiksXHJcbiAgICAgICAgICBLWzFdLCAoS1swXSA8PCAxNikgfCAoS1szXSA+Pj4gMTYpLFxyXG4gICAgICAgICAgS1syXSwgKEtbMV0gPDwgMTYpIHwgKEtbMF0gPj4+IDE2KSxcclxuICAgICAgICAgIEtbM10sIChLWzJdIDw8IDE2KSB8IChLWzFdID4+PiAxNilcclxuICAgICAgICBdXHJcblxyXG4gICAgICAgIC8vIEdlbmVyYXRlIGluaXRpYWwgY291bnRlciB2YWx1ZXNcclxuICAgICAgICB2YXIgQyA9IHRoaXMuX0MgPSBbXHJcbiAgICAgICAgICAoS1syXSA8PCAxNikgfCAoS1syXSA+Pj4gMTYpLCAoS1swXSAmIDB4ZmZmZjAwMDApIHwgKEtbMV0gJiAweDAwMDBmZmZmKSxcclxuICAgICAgICAgIChLWzNdIDw8IDE2KSB8IChLWzNdID4+PiAxNiksIChLWzFdICYgMHhmZmZmMDAwMCkgfCAoS1syXSAmIDB4MDAwMGZmZmYpLFxyXG4gICAgICAgICAgKEtbMF0gPDwgMTYpIHwgKEtbMF0gPj4+IDE2KSwgKEtbMl0gJiAweGZmZmYwMDAwKSB8IChLWzNdICYgMHgwMDAwZmZmZiksXHJcbiAgICAgICAgICAoS1sxXSA8PCAxNikgfCAoS1sxXSA+Pj4gMTYpLCAoS1szXSAmIDB4ZmZmZjAwMDApIHwgKEtbMF0gJiAweDAwMDBmZmZmKVxyXG4gICAgICAgIF1cclxuXHJcbiAgICAgICAgLy8gQ2FycnkgYml0XHJcbiAgICAgICAgdGhpcy5fYiA9IDBcclxuXHJcbiAgICAgICAgLy8gSXRlcmF0ZSB0aGUgc3lzdGVtIGZvdXIgdGltZXNcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgbmV4dFN0YXRlLmNhbGwodGhpcylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE1vZGlmeSB0aGUgY291bnRlcnNcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDg7IGkrKykge1xyXG4gICAgICAgICAgQ1tpXSBePSBYWyhpICsgNCkgJiA3XVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gSVYgc2V0dXBcclxuICAgICAgICBpZiAoaXYpIHtcclxuICAgICAgICAgIC8vIFNob3J0Y3V0c1xyXG4gICAgICAgICAgdmFyIElWID0gaXYud29yZHNcclxuICAgICAgICAgIHZhciBJVl8wID0gSVZbMF1cclxuICAgICAgICAgIHZhciBJVl8xID0gSVZbMV1cclxuXHJcbiAgICAgICAgICAvLyBHZW5lcmF0ZSBmb3VyIHN1YnZlY3RvcnNcclxuICAgICAgICAgIHZhciBpMCA9ICgoKElWXzAgPDwgOCkgfCAoSVZfMCA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMCA8PCAyNCkgfCAoSVZfMCA+Pj4gOCkpICYgMHhmZjAwZmYwMClcclxuICAgICAgICAgIHZhciBpMiA9ICgoKElWXzEgPDwgOCkgfCAoSVZfMSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHwgKCgoSVZfMSA8PCAyNCkgfCAoSVZfMSA+Pj4gOCkpICYgMHhmZjAwZmYwMClcclxuICAgICAgICAgIHZhciBpMSA9IChpMCA+Pj4gMTYpIHwgKGkyICYgMHhmZmZmMDAwMClcclxuICAgICAgICAgIHZhciBpMyA9IChpMiA8PCAxNikgfCAoaTAgJiAweDAwMDBmZmZmKVxyXG5cclxuICAgICAgICAgIC8vIE1vZGlmeSBjb3VudGVyIHZhbHVlc1xyXG4gICAgICAgICAgQ1swXSBePSBpMFxyXG4gICAgICAgICAgQ1sxXSBePSBpMVxyXG4gICAgICAgICAgQ1syXSBePSBpMlxyXG4gICAgICAgICAgQ1szXSBePSBpM1xyXG4gICAgICAgICAgQ1s0XSBePSBpMFxyXG4gICAgICAgICAgQ1s1XSBePSBpMVxyXG4gICAgICAgICAgQ1s2XSBePSBpMlxyXG4gICAgICAgICAgQ1s3XSBePSBpM1xyXG5cclxuICAgICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbSBmb3VyIHRpbWVzXHJcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDQ7IGkrKykge1xyXG4gICAgICAgICAgICBuZXh0U3RhdGUuY2FsbCh0aGlzKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuXHJcbiAgICAgIF9kb1Byb2Nlc3NCbG9jazogZnVuY3Rpb24gKE0sIG9mZnNldCkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0XHJcbiAgICAgICAgdmFyIFggPSB0aGlzLl9YXHJcblxyXG4gICAgICAgIC8vIEl0ZXJhdGUgdGhlIHN5c3RlbVxyXG4gICAgICAgIG5leHRTdGF0ZS5jYWxsKHRoaXMpXHJcblxyXG4gICAgICAgIC8vIEdlbmVyYXRlIGZvdXIga2V5c3RyZWFtIHdvcmRzXHJcbiAgICAgICAgU1swXSA9IFhbMF0gXiAoWFs1XSA+Pj4gMTYpIF4gKFhbM10gPDwgMTYpXHJcbiAgICAgICAgU1sxXSA9IFhbMl0gXiAoWFs3XSA+Pj4gMTYpIF4gKFhbNV0gPDwgMTYpXHJcbiAgICAgICAgU1syXSA9IFhbNF0gXiAoWFsxXSA+Pj4gMTYpIF4gKFhbN10gPDwgMTYpXHJcbiAgICAgICAgU1szXSA9IFhbNl0gXiAoWFszXSA+Pj4gMTYpIF4gKFhbMV0gPDwgMTYpXHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDsgaSsrKSB7XHJcbiAgICAgICAgICAvLyBTd2FwIGVuZGlhblxyXG4gICAgICAgICAgU1tpXSA9ICgoKFNbaV0gPDwgOCkgfCAoU1tpXSA+Pj4gMjQpKSAmIDB4MDBmZjAwZmYpIHxcclxuICAgICAgICAgICAgKCgoU1tpXSA8PCAyNCkgfCAoU1tpXSA+Pj4gOCkpICYgMHhmZjAwZmYwMClcclxuXHJcbiAgICAgICAgICAvLyBFbmNyeXB0XHJcbiAgICAgICAgICBNW29mZnNldCArIGldIF49IFNbaV1cclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcblxyXG4gICAgICBibG9ja1NpemU6IDEyOCAvIDMyLFxyXG5cclxuICAgICAgaXZTaXplOiA2NCAvIDMyXHJcbiAgICB9KVxyXG5cclxuICAgIGZ1bmN0aW9uIG5leHRTdGF0ZSgpIHtcclxuICAgICAgLy8gU2hvcnRjdXRzXHJcbiAgICAgIHZhciBYID0gdGhpcy5fWFxyXG4gICAgICB2YXIgQyA9IHRoaXMuX0NcclxuXHJcbiAgICAgIC8vIFNhdmUgb2xkIGNvdW50ZXIgdmFsdWVzXHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XHJcbiAgICAgICAgQ19baV0gPSBDW2ldXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIENhbGN1bGF0ZSBuZXcgY291bnRlciB2YWx1ZXNcclxuICAgICAgQ1swXSA9IChDWzBdICsgMHg0ZDM0ZDM0ZCArIHRoaXMuX2IpIHwgMFxyXG4gICAgICBDWzFdID0gKENbMV0gKyAweGQzNGQzNGQzICsgKChDWzBdID4+PiAwKSA8IChDX1swXSA+Pj4gMCkgPyAxIDogMCkpIHwgMFxyXG4gICAgICBDWzJdID0gKENbMl0gKyAweDM0ZDM0ZDM0ICsgKChDWzFdID4+PiAwKSA8IChDX1sxXSA+Pj4gMCkgPyAxIDogMCkpIHwgMFxyXG4gICAgICBDWzNdID0gKENbM10gKyAweDRkMzRkMzRkICsgKChDWzJdID4+PiAwKSA8IChDX1syXSA+Pj4gMCkgPyAxIDogMCkpIHwgMFxyXG4gICAgICBDWzRdID0gKENbNF0gKyAweGQzNGQzNGQzICsgKChDWzNdID4+PiAwKSA8IChDX1szXSA+Pj4gMCkgPyAxIDogMCkpIHwgMFxyXG4gICAgICBDWzVdID0gKENbNV0gKyAweDM0ZDM0ZDM0ICsgKChDWzRdID4+PiAwKSA8IChDX1s0XSA+Pj4gMCkgPyAxIDogMCkpIHwgMFxyXG4gICAgICBDWzZdID0gKENbNl0gKyAweDRkMzRkMzRkICsgKChDWzVdID4+PiAwKSA8IChDX1s1XSA+Pj4gMCkgPyAxIDogMCkpIHwgMFxyXG4gICAgICBDWzddID0gKENbN10gKyAweGQzNGQzNGQzICsgKChDWzZdID4+PiAwKSA8IChDX1s2XSA+Pj4gMCkgPyAxIDogMCkpIHwgMFxyXG4gICAgICB0aGlzLl9iID0gKENbN10gPj4+IDApIDwgKENfWzddID4+PiAwKSA/IDEgOiAwXHJcblxyXG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIGctdmFsdWVzXHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgODsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGd4ID0gWFtpXSArIENbaV1cclxuXHJcbiAgICAgICAgLy8gQ29uc3RydWN0IGhpZ2ggYW5kIGxvdyBhcmd1bWVudCBmb3Igc3F1YXJpbmdcclxuICAgICAgICB2YXIgZ2EgPSBneCAmIDB4ZmZmZlxyXG4gICAgICAgIHZhciBnYiA9IGd4ID4+PiAxNlxyXG5cclxuICAgICAgICAvLyBDYWxjdWxhdGUgaGlnaCBhbmQgbG93IHJlc3VsdCBvZiBzcXVhcmluZ1xyXG4gICAgICAgIHZhciBnaCA9ICgoKChnYSAqIGdhKSA+Pj4gMTcpICsgZ2EgKiBnYikgPj4+IDE1KSArIGdiICogZ2JcclxuICAgICAgICB2YXIgZ2wgPSAoKChneCAmIDB4ZmZmZjAwMDApICogZ3gpIHwgMCkgKyAoKChneCAmIDB4MDAwMGZmZmYpICogZ3gpIHwgMClcclxuXHJcbiAgICAgICAgLy8gSGlnaCBYT1IgbG93XHJcbiAgICAgICAgR1tpXSA9IGdoIF4gZ2xcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBzdGF0ZSB2YWx1ZXNcclxuICAgICAgWFswXSA9IChHWzBdICsgKChHWzddIDw8IDE2KSB8IChHWzddID4+PiAxNikpICsgKChHWzZdIDw8IDE2KSB8IChHWzZdID4+PiAxNikpKSB8IDBcclxuICAgICAgWFsxXSA9IChHWzFdICsgKChHWzBdIDw8IDgpIHwgKEdbMF0gPj4+IDI0KSkgKyBHWzddKSB8IDBcclxuICAgICAgWFsyXSA9IChHWzJdICsgKChHWzFdIDw8IDE2KSB8IChHWzFdID4+PiAxNikpICsgKChHWzBdIDw8IDE2KSB8IChHWzBdID4+PiAxNikpKSB8IDBcclxuICAgICAgWFszXSA9IChHWzNdICsgKChHWzJdIDw8IDgpIHwgKEdbMl0gPj4+IDI0KSkgKyBHWzFdKSB8IDBcclxuICAgICAgWFs0XSA9IChHWzRdICsgKChHWzNdIDw8IDE2KSB8IChHWzNdID4+PiAxNikpICsgKChHWzJdIDw8IDE2KSB8IChHWzJdID4+PiAxNikpKSB8IDBcclxuICAgICAgWFs1XSA9IChHWzVdICsgKChHWzRdIDw8IDgpIHwgKEdbNF0gPj4+IDI0KSkgKyBHWzNdKSB8IDBcclxuICAgICAgWFs2XSA9IChHWzZdICsgKChHWzVdIDw8IDE2KSB8IChHWzVdID4+PiAxNikpICsgKChHWzRdIDw8IDE2KSB8IChHWzRdID4+PiAxNikpKSB8IDBcclxuICAgICAgWFs3XSA9IChHWzddICsgKChHWzZdIDw8IDgpIHwgKEdbNl0gPj4+IDI0KSkgKyBHWzVdKSB8IDBcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNob3J0Y3V0IGZ1bmN0aW9ucyB0byB0aGUgY2lwaGVyJ3Mgb2JqZWN0IGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICpcclxuICAgICAqICAgICB2YXIgY2lwaGVydGV4dCA9IENyeXB0b0pTLlJhYmJpdExlZ2FjeS5lbmNyeXB0KG1lc3NhZ2UsIGtleSwgY2ZnKTtcclxuICAgICAqICAgICB2YXIgcGxhaW50ZXh0ICA9IENyeXB0b0pTLlJhYmJpdExlZ2FjeS5kZWNyeXB0KGNpcGhlcnRleHQsIGtleSwgY2ZnKTtcclxuICAgICAqL1xyXG4gICAgQy5SYWJiaXRMZWdhY3kgPSBTdHJlYW1DaXBoZXIuX2NyZWF0ZUhlbHBlcihSYWJiaXRMZWdhY3kpXHJcbiAgfSgpKVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogWmVybyBwYWRkaW5nIHN0cmF0ZWd5LlxyXG4gICAqL1xyXG4gIENyeXB0b0pTLnBhZC5aZXJvUGFkZGluZyA9IHtcclxuICAgIHBhZDogZnVuY3Rpb24gKGRhdGEsIGJsb2NrU2l6ZSkge1xyXG4gICAgICAvLyBTaG9ydGN1dFxyXG4gICAgICB2YXIgYmxvY2tTaXplQnl0ZXMgPSBibG9ja1NpemUgKiA0XHJcblxyXG4gICAgICAvLyBQYWRcclxuICAgICAgZGF0YS5jbGFtcCgpXHJcbiAgICAgIGRhdGEuc2lnQnl0ZXMgKz0gYmxvY2tTaXplQnl0ZXMgLSAoKGRhdGEuc2lnQnl0ZXMgJSBibG9ja1NpemVCeXRlcykgfHwgYmxvY2tTaXplQnl0ZXMpXHJcbiAgICB9LFxyXG5cclxuICAgIHVucGFkOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAvLyBTaG9ydGN1dFxyXG4gICAgICB2YXIgZGF0YVdvcmRzID0gZGF0YS53b3Jkc1xyXG5cclxuICAgICAgLy8gVW5wYWRcclxuICAgICAgdmFyIGkgPSBkYXRhLnNpZ0J5dGVzIC0gMVxyXG4gICAgICB3aGlsZSAoISgoZGF0YVdvcmRzW2kgPj4+IDJdID4+PiAoMjQgLSAoaSAlIDQpICogOCkpICYgMHhmZikpIHtcclxuICAgICAgICBpLS1cclxuICAgICAgfVxyXG4gICAgICBkYXRhLnNpZ0J5dGVzID0gaSArIDFcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxuICByZXR1cm4gQ3J5cHRvSlNcclxufSkpXHJcbiIsImV4cG9ydCBmdW5jdGlvbiBsb2FkT3Blbih0aW1lID0gMCkge1xyXG4gIHJldHVybiBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgIHVuaS5zaG93TG9hZGluZyh7XHJcbiAgICAgIHRpdGxlOiAn5Yqg6L295LitLi4nXHJcbiAgICB9KVxyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICB1bmkuaGlkZUxvYWRpbmcoKVxyXG4gICAgfSwgdGltZSlcclxuICB9LCB0aW1lKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbG9hZENsb3NlKHRpbWVyKSB7XHJcbiAgdW5pLmhpZGVUb2FzdCgpXHJcbiAgdW5pLmhpZGVMb2FkaW5nKClcclxuICBjbGVhclRpbWVvdXQodGltZXIpXHJcbn1cclxuIiwiaW1wb3J0IGFsYSBmcm9tICdAL3NlcnZpY2UvYWxhJ1xyXG5jb25zdCBhbGxLZXlzID0gJ2xvY2FsU3RvcmFnZV9hbGxLZXlzJ1xyXG5cclxuLy8g6K6+572u5pys5Zyw57yT5a2YXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2NhbFNldChuYW1lLCBkYXRhKSB7XHJcbiAgaWYgKCFkYXRhIHx8ICFuYW1lKSB7XHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgdW5pLnNldFN0b3JhZ2VTeW5jKG5hbWUsIGRhdGEpXHJcbiAgc2V0S2V5cyhuYW1lKVxyXG59XHJcblxyXG4vKlxyXG4gKiDlhYjku47nvJPlrZjkuK3or7fmsYLmlbDmja7vvIzlpoLmnpzmsqHmnInliJnku45hcGnkuK3or7fmsYJcXFxyXG4gKiAgQHBhcmFtIG5hbWUg57yT5a2Y5ZCN56ew77yM5b+F6aG75ZSv5LiAXHJcbiAqICBAcGFyYW0gYXBpVXJsIGFwaeivt+axguaOpeWPo1xyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGxvY2FsSHR0cChuYW1lLCBhcGlVcmwpIHtcclxuICBpZiAoIW5hbWUgfHwgIWFwaVVybCkge1xyXG4gICAgcmV0dXJuXHJcbiAgfVxyXG4gIHZhciBkYXRhID0gYWxhLnZ1ZXhMb2NhbEdldChuYW1lKVxyXG4gIGlmIChkYXRhKSB7XHJcbiAgICByZXR1cm4gZGF0YVxyXG4gIH1cclxuICBpZiAoIWRhdGEpIHtcclxuICAgIHZhciByZXN1bHQgPSBhd2FpdCBhbGEuaHR0cEdldChhcGlVcmwpXHJcbiAgICBhbGEudnVleExvY2FsU2V0KG5hbWUsIHJlc3VsdClcclxuICAgIHJldHVybiByZXN1bHRcclxuICB9XHJcbn1cclxuXHJcbi8vIOiOt+WPluacrOWcsOe8k+WtmOaVsOaNrlxyXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxHZXQobmFtZSkge1xyXG4gIGlmICghbmFtZSkgcmV0dXJuXHJcbiAgdmFyIGRhdGEgPSB1bmkuZ2V0U3RvcmFnZVN5bmMobmFtZSlcclxuICB2YXIgZGF0YVxyXG4gIGlmIChkYXRhKSB7XHJcbiAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkICYmIGRhdGEgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgIHJldHVybiBkYXRhXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB1bmRlZmluZWRcclxufVxyXG5cclxuLy8g5Yig6Zmk5pys5Zyw57yT5a2YXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2NhbFJlbW92ZShuYW1lKSB7XHJcbiAgaWYgKCFuYW1lKSByZXR1cm5cclxuICB1bmkucmVtb3ZlU3RvcmFnZVN5bmMobmFtZSlcclxufVxyXG5cclxuLy8g5pys5Zyw57yT5a2Y5omA5pyJ6ZSuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2NhbENsZWFyKCkge1xyXG4gIHVuaS5zaG93TW9kYWwoe1xyXG4gICAgdGl0bGU6ICfmuIXnqbrnvJPlrZgnLFxyXG4gICAgY29udGVudDogJ+aCqOaYr+WQpuehruWumuimgea4heepuue8k+WtmD8nLFxyXG4gICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKSB7XHJcbiAgICAgIGlmIChyZXMuY29uZmlybSkge1xyXG4gICAgICAgIHZhciBrZXlzID0gbG9jYWxHZXQoYWxsS2V5cylcclxuICAgICAgICBpZiAoa2V5cykge1xyXG4gICAgICAgICAga2V5cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICBsb2NhbFJlbW92ZShlbGVtZW50KVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgbG9jYWxSZW1vdmUoYWxsS2V5cylcclxuICAgICAgICBhbGEudG9hc3RTdWNjZXNzKCfnvJPlrZjmuIXnkIbmiJDlip8nKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuLy8g5L+d5a2Y5omA5pyJ55qES2V5c1xyXG5mdW5jdGlvbiBzZXRLZXlzKG5hbWUpIHtcclxuICBpZiAobmFtZSA9PT0gJ3RlbmFudCcgfHwgbmFtZS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ3VzZXJfJykgPT09IDApIHtcclxuICAgIC8vIOenn+aIt+agh+ivhuS4jeiDveWIoOmZpCzlkoznmbvpmYbnlKjmiLfkuI3liKDpmaRcclxuICAgIHJldHVyblxyXG4gIH1cclxuICB2YXIga2V5cyA9IGxvY2FsR2V0KGFsbEtleXMpXHJcbiAgaWYgKGtleXMgPT09IHVuZGVmaW5lZCB8fCBrZXlzID09PSBudWxsKSB7XHJcbiAgICBrZXlzID0gW11cclxuICB9XHJcbiAgaWYgKGtleXMuaW5kZXhPZihuYW1lKSA8IDApIHtcclxuICAgIGtleXMucHVzaChuYW1lKVxyXG4gICAgdW5pLnNldFN0b3JhZ2VTeW5jKGFsbEtleXMsIGtleXMpXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCBhbGEgZnJvbSAnQC9zZXJ2aWNlL2FsYSdcclxuLy8g5re75Yqg5pel5b+XXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBsb2coKSB7XHJcbiAgdmFyIHBhcmEgPSB7XHJcbiAgICBtZXNzYWdlOiBKU09OLnN0cmluZ2lmeShhcmd1bWVudHMpXHJcbiAgfVxyXG4gIGF3YWl0IGFsYS5odHRwUG9zdCgnYXBpL2xvZ3MvYWRkJywgcGFyYSlcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluZm8oKSB7XHJcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XHJcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG4gICAgY29uc29sZS5pbmZvKGFyZ3VtZW50cylcclxuICB9XHJcbn1cclxuIiwiZnVuY3Rpb24gdHlwb2YgKHYpIHtcclxuICB2YXIgcyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KVxyXG4gIHJldHVybiBzLnN1YnN0cmluZyg4LCBzLmxlbmd0aCAtIDEpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzRGVidWdNb2RlICgpIHtcclxuICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xyXG4gIHJldHVybiB0eXBlb2YgX19jaGFubmVsSWRfXyA9PT0gJ3N0cmluZycgJiYgX19jaGFubmVsSWRfX1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2cgKCkge1xyXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xyXG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XVxyXG4gIH1cclxuICBjb25zdCB0eXBlID0gYXJncy5zaGlmdCgpXHJcbiAgaWYgKGlzRGVidWdNb2RlKCkpIHtcclxuICAgIGFyZ3MucHVzaChhcmdzLnBvcCgpLnJlcGxhY2UoJ2F0ICcsICd1bmktYXBwOi8vLycpKVxyXG4gICAgcmV0dXJuIGNvbnNvbGVbdHlwZV1bJ2FwcGx5J10oY29uc29sZSwgYXJncylcclxuICB9XHJcblxyXG4gIHZhciBtc2dzID0gYXJncy5tYXAoZnVuY3Rpb24gKHYpIHtcclxuICAgIHZhciB0eXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHYpXHJcblxyXG4gICAgaWYgKHR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ1tvYmplY3Qgb2JqZWN0XScpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB2ID0gJy0tLUJFR0lOOkpTT04tLS0nICsgSlNPTi5zdHJpbmdpZnkodikgKyAnLS0tRU5EOkpTT04tLS0nXHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB2ID0gJ1tvYmplY3Qgb2JqZWN0XSdcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHYgPT09IG51bGwpIHtcclxuICAgICAgICB2ID0gJy0tLU5VTEwtLS0nXHJcbiAgICAgIH0gZWxzZSBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgdiA9ICctLS1VTkRFRklORUQtLS0nXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIHZUeXBlID0gdHlwb2YodikudG9VcHBlckNhc2UoKVxyXG5cclxuICAgICAgICBpZiAodlR5cGUgPT09ICdOVU1CRVInIHx8IHZUeXBlID09PSAnQk9PTEVBTicpIHtcclxuICAgICAgICAgIHYgPSAnLS0tQkVHSU46JyArIHZUeXBlICsgJy0tLScgKyB2ICsgJy0tLUVORDonICsgdlR5cGUgKyAnLS0tJ1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB2ID0gU3RyaW5nKHYpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZcclxuICB9KVxyXG4gIHZhciBtc2cgPSAnJ1xyXG5cclxuICBpZiAobXNncy5sZW5ndGggPiAxKSB7XHJcbiAgICB2YXIgbGFzdE1zZyA9IG1zZ3MucG9wKClcclxuICAgIG1zZyA9IG1zZ3Muam9pbignLS0tQ09NTUEtLS0nKVxyXG5cclxuICAgIGlmIChsYXN0TXNnLmluZGV4T2YoJyBhdCAnKSA9PT0gMCkge1xyXG4gICAgICBtc2cgKz0gbGFzdE1zZ1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbXNnICs9ICctLS1DT01NQS0tLScgKyBsYXN0TXNnXHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIG1zZyA9IG1zZ3NbMF1cclxuICB9XHJcblxyXG4gIGNvbnNvbGVbdHlwZV0obXNnKVxyXG59XHJcbiIsImltcG9ydCBhbGEgZnJvbSAnQC9zZXJ2aWNlL2FsYSdcclxuLy8g5pSv5LuY57G75Z6LXHJcbi8vIGV4cG9ydCBmdW5jdGlvbiBwYXlUeXBlKCkge1xyXG4vLyAgICAgaWYgKGFsYS5jbGllbnQoKSA9PT0gJ1dhcEg1Jykge1xyXG4vLyAgICAgICAvLyDmiYvmnLpXYXBcclxuLy8gICAgICAgcmV0dXJuIDJcclxuLy8gICAgIH0gZWxzZSBpZiAoYWxhLmNsaWVudCgpID09PSAnV2VDaGF0Jykge1xyXG4vLyAgICAgICAvLyDlvq7kv6FcclxuLy8gICAgICAgcmV0dXJuIDVcclxuLy8gICAgIH0gZWxzZSBpZiAoYWxhLmNsaWVudCgpID09PSAnV2VDaGF0TGl0ZScpIHtcclxuLy8gICAgICAgLy8g5bCP56iL5bqPXHJcbi8vICAgICAgIHJldHVybiA2XHJcbi8vICAgICB9IGVsc2UgaWYgKFxyXG4vLyAgICAgICBhbGEuY2xpZW50KCkgPT09ICdBcHBQbHVzJyAmJlxyXG4vLyAgICAgICBhbGEuZ2V0U3lzdGVtSW5mb1N5bmMoKS5wbGF0Zm9ybSA9PT0gJ2lvcydcclxuLy8gICAgICkge1xyXG4vLyAgICAgICByZXR1cm4gM1xyXG4vLyAgICAgfSBlbHNlIGlmIChcclxuLy8gICAgICAgYWxhLmNsaWVudCgpID09PSAnQXBwUGx1cycgJiZcclxuLy8gICAgICAgYWxhLmdldFN5c3RlbUluZm9TeW5jKCkucGxhdGZvcm0gPT09ICdhbmRyb2lkJ1xyXG4vLyAgICAgKSB7XHJcbi8vICAgICAgIHJldHVybiA0XHJcbi8vICAgICB9XHJcbi8vICAgfVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBheVR5cGUoKSB7XHJcbiAgICB2YXIgdGVybWluYWxcclxuXHJcblxyXG5cclxuXHJcblx0XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHRpZiAoYWxhLmdldFN5c3RlbUluZm9TeW5jKCkucGxhdGZvcm0gPT09ICdpb3MnKSB7XHJcblx0XHR0ZXJtaW5hbCA9IDNcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuIDRcclxuXHR9XHJcblxyXG5cdHJldHVybiB0ZXJtaW5hbFxyXG4gIH0iLCJpbXBvcnQgYWxhIGZyb20gJ0Avc2VydmljZS9hbGEnXHJcblxyXG4vLyDlrozmlbTot6/lvoRcclxuZXhwb3J0IGZ1bmN0aW9uIHJvdXRlRnVsbFBhdGgoKSB7XHJcbiAgdmFyIHBhZ2VzID0gZ2V0Q3VycmVudFBhZ2VzKClcclxuICB2YXIgZnVsbFBhdGhcclxuICBpZiAoYWxhLmNsaWVudCgpID09PSAnV2VDaGF0TGl0ZScpIHtcclxuICAgIGZ1bGxQYXRoID0gcGFnZXNbcGFnZXMubGVuZ3RoIC0gMV0ucm91dGVcclxuICAgIHZhciBwYXRoID0gcGFyc2VQYXJhbXMocGFnZXNbcGFnZXMubGVuZ3RoIC0gMV0ub3B0aW9ucylcclxuICAgIGlmIChwYXRoKSB7XHJcbiAgICAgIGZ1bGxQYXRoID0gYCR7cGFnZXNbcGFnZXMubGVuZ3RoIC0gMV0ucm91dGV9PyR7cGF0aH1gXHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGZ1bGxQYXRoID0gcGFnZXNbMF0uJHJvdXRlLmZ1bGxQYXRoXHJcbiAgfVxyXG4gIHJldHVybiBmdWxsUGF0aFxyXG59XHJcblxyXG4vLyDlrp7pmYXpobXpnaLot6/lvoRcclxuZXhwb3J0IGZ1bmN0aW9uIHJvdXRlUGF0aChvcHRpb24pIHtcclxuICB2YXIgcGF0aCA9ICcvaW5kZXgnXHJcbiAgaWYgKCFvcHRpb24pIHtcclxuICAgIHJldHVybiBwYXRoXHJcbiAgfVxyXG4gIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbikgPT09IHRydWUpIHtcclxuICAgIHBhdGggPSBvcHRpb25bMF0ucGF0aFxyXG4gIH0gZWxzZSB7XHJcbiAgICBwYXRoID0gb3B0aW9uLnBhdGhcclxuICB9XHJcbiAgaWYgKCFwYXRoKSB7XHJcbiAgICBwYXRoID0gJy9pbmRleCdcclxuICB9XHJcblxyXG4gIHBhdGggPSBwYXRoLnJlcGxhY2UoJ18nLCAnLycpLnJlcGxhY2UoJ18nLCAnLycpXHJcbiAgaWYgKHBhdGguc3Vic3RyKDAsIDEpICE9PSAnLycpIHtcclxuICAgIHBhdGggPSAnLycgKyBwYXRoXHJcbiAgfVxyXG4gIGlmIChwYXRoID09PSAnLycpIHtcclxuICAgIHBhdGggPSAnL2luZGV4J1xyXG4gIH1cclxuXHJcbiAgcGF0aCA9IHBhdGhcclxuICAgIC5yZXBsYWNlKCdwYWdlcy8nLCAnJylcclxuICAgIC5yZXBsYWNlKCcvcGFnZXMnLCAnJylcclxuICAgIC5yZXBsYWNlKCcvdmlld3MnLCAnJylcclxuICAgIC5yZXBsYWNlKCd2aWV3cy8nLCAnJylcclxuICB2YXIgaW5kZXggPSBwYXRoLmluZGV4T2YoJz8nKVxyXG4gIGlmIChpbmRleCA+IDApIHtcclxuICAgIHBhdGggPSBwYXRoLnN1YnN0cigwLCBpbmRleClcclxuICB9XHJcbiAgcmV0dXJuIHBhdGhcclxufVxyXG5cclxuLy8g6I635Y+W5YWD57Sg6IqC54K5XHJcbmZ1bmN0aW9uIGdldFF1ZXJ5KGpzVGhpcywgdHlwZSkge1xyXG4gIGxldCBzZWxlY3RvclF1ZXJ5XHJcbiAgaWYgKGFsYS5jbGllbnQoKSAhPT0gJ1dhcEg1Jykge1xyXG4gICAgc2VsZWN0b3JRdWVyeSA9IHVuaS5jcmVhdGVTZWxlY3RvclF1ZXJ5KClcclxuICB9IGVsc2Uge1xyXG4gICAgc2VsZWN0b3JRdWVyeSA9IHVuaS5jcmVhdGVTZWxlY3RvclF1ZXJ5KCkuaW4oanNUaGlzKVxyXG4gIH1cclxuICBzZWxlY3RvclF1ZXJ5LnNlbGVjdEFsbCh0eXBlKS5ib3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gIHJldHVybiBzZWxlY3RvclF1ZXJ5LnNlbGVjdFZpZXdwb3J0KCkuc2Nyb2xsT2Zmc2V0KClcclxufVxyXG5cclxuLy8g5aSE55CG6Lev55Sx5ou85o6lXHJcbmZ1bmN0aW9uIHBhcnNlUGFyYW1zKGRhdGEpIHtcclxuICB0cnkge1xyXG4gICAgdmFyIHRlbXBBcnIgPSBbXVxyXG4gICAgZm9yICh2YXIgaSBpbiBkYXRhKSB7XHJcbiAgICAgIHZhciBrZXkgPSBlbmNvZGVVUklDb21wb25lbnQoaSlcclxuICAgICAgdmFyIHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KGRhdGFbaV0pXHJcbiAgICAgIHRlbXBBcnIucHVzaChrZXkgKyAnPScgKyB2YWx1ZSlcclxuICAgIH1cclxuICAgIHZhciB1cmxQYXJhbXNTdHIgPSB0ZW1wQXJyLmpvaW4oJyYnKVxyXG4gICAgcmV0dXJuIHVybFBhcmFtc1N0clxyXG4gIH0gY2F0Y2ggKGVycikge1xyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHN0b3JlIGZyb20gJ0Avc2VydmljZS9zdG9yZSdcclxuXHJcbi8vIOWxj+W5lemrmOW6plxyXG5leHBvcnQgZnVuY3Rpb24gc2NyZWVuSGVpZ2h0KCkge1xyXG4gIHJldHVybiB0aGlzLnNjcmVlbkluZm8oKS53aW5kb3dIZWlnaHRcclxufVxyXG4vLyDlsY/luZXlrr3luqZcclxuZXhwb3J0IGZ1bmN0aW9uIHNjcmVlbldpZHRoICgpIHtcclxuICB2YXIgd2luZG93V2lkdGggPSB0aGlzLnNjcmVlbkluZm8oKS53aW5kb3dXaWR0aFxyXG5cclxuXHR3aW5kb3dXaWR0aCA9IHdpbmRvd1dpZHRoICsgMVxyXG5cclxuICByZXR1cm4gd2luZG93V2lkdGhcclxufVxyXG4vLyDmiYvmnLrpga7lsY/pq5jluqZcclxuZXhwb3J0IGZ1bmN0aW9uIHN0YXR1c0hlaWdodCgpIHtcclxuXHRyZXR1cm4gdGhpcy5zY3JlZW5JbmZvKCkuc3RhdHVzQmFySGVpZ2h0XHJcbn1cclxuXHJcbi8vIOW9k+WJjeiOt+WPluezu+e7n+S/oeaBr1xyXG5leHBvcnQgZnVuY3Rpb24gc2NyZWVuSW5mbygpIHtcclxuICBpZiAoc3RvcmUuc3RhdGUuZ2V0U3lzdGVtSW5mb1N5bmMgPT09IG51bGwpIHtcclxuICAgIHN0b3JlLnN0YXRlLmdldFN5c3RlbUluZm9TeW5jID0gdW5pLmdldFN5c3RlbUluZm9TeW5jKClcclxuICAgIHJldHVybiBzdG9yZS5zdGF0ZS5nZXRTeXN0ZW1JbmZvU3luY1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gc3RvcmUuc3RhdGUuZ2V0U3lzdGVtSW5mb1N5bmNcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXHJcbmltcG9ydCBWdWV4IGZyb20gJ3Z1ZXgnXHJcblxyXG5WdWUudXNlKFZ1ZXgpXHJcblxyXG5jb25zdCBzdG9yZSA9IG5ldyBWdWV4LlN0b3JlKHtcclxuICBzdGF0ZToge1xyXG4gICAgaGFzTG9naW46IGZhbHNlLFxyXG4gICAgdXNlcjogJycsXHJcbiAgICBwaG9uZVZlcmlmaWNhdGlvbjogbnVsbCxcclxuICAgIHNob3dQcmljZTogZmFsc2UsXHJcbiAgICBnZXRTeXN0ZW1JbmZvU3luYzogbnVsbCxcclxuICAgIGluRGVmYXVsdDogMFxyXG4gIH0sXHJcbiAgbXV0YXRpb25zOiB7XHJcbiAgICBsb2dpbiAoc3RhdGUsIHVzZXIpIHtcclxuICAgICAgc3RhdGUudXNlciA9IHVzZXJcclxuICAgICAgc3RhdGUuaGFzTG9naW4gPSB0cnVlXHJcbiAgICB9LFxyXG4gICAgbG9nb3V0IChzdGF0ZSkge1xyXG4gICAgICBzdGF0ZS51c2VyID0gJydcclxuICAgICAgc3RhdGUuaGFzTG9naW4gPSBmYWxzZVxyXG4gICAgfVxyXG4gIH1cclxufSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHN0b3JlXHJcbiIsIm1vZHVsZS5leHBvcnRzID0gVnVlOyIsIi8qKlxuICogdnVleCB2My4xLjJcbiAqIChjKSAyMDE5IEV2YW4gWW91XG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuZnVuY3Rpb24gYXBwbHlNaXhpbiAoVnVlKSB7XG4gIHZhciB2ZXJzaW9uID0gTnVtYmVyKFZ1ZS52ZXJzaW9uLnNwbGl0KCcuJylbMF0pO1xuXG4gIGlmICh2ZXJzaW9uID49IDIpIHtcbiAgICBWdWUubWl4aW4oeyBiZWZvcmVDcmVhdGU6IHZ1ZXhJbml0IH0pO1xuICB9IGVsc2Uge1xuICAgIC8vIG92ZXJyaWRlIGluaXQgYW5kIGluamVjdCB2dWV4IGluaXQgcHJvY2VkdXJlXG4gICAgLy8gZm9yIDEueCBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS5cbiAgICB2YXIgX2luaXQgPSBWdWUucHJvdG90eXBlLl9pbml0O1xuICAgIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgICAgIG9wdGlvbnMuaW5pdCA9IG9wdGlvbnMuaW5pdFxuICAgICAgICA/IFt2dWV4SW5pdF0uY29uY2F0KG9wdGlvbnMuaW5pdClcbiAgICAgICAgOiB2dWV4SW5pdDtcbiAgICAgIF9pbml0LmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWdWV4IGluaXQgaG9vaywgaW5qZWN0ZWQgaW50byBlYWNoIGluc3RhbmNlcyBpbml0IGhvb2tzIGxpc3QuXG4gICAqL1xuXG4gIGZ1bmN0aW9uIHZ1ZXhJbml0ICgpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuJG9wdGlvbnM7XG4gICAgLy8gc3RvcmUgaW5qZWN0aW9uXG4gICAgaWYgKG9wdGlvbnMuc3RvcmUpIHtcbiAgICAgIHRoaXMuJHN0b3JlID0gdHlwZW9mIG9wdGlvbnMuc3RvcmUgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBvcHRpb25zLnN0b3JlKClcbiAgICAgICAgOiBvcHRpb25zLnN0b3JlO1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQuJHN0b3JlKSB7XG4gICAgICB0aGlzLiRzdG9yZSA9IG9wdGlvbnMucGFyZW50LiRzdG9yZTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHRhcmdldCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gID8gd2luZG93XG4gIDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IGdsb2JhbFxuICAgIDoge307XG52YXIgZGV2dG9vbEhvb2sgPSB0YXJnZXQuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuZnVuY3Rpb24gZGV2dG9vbFBsdWdpbiAoc3RvcmUpIHtcbiAgaWYgKCFkZXZ0b29sSG9vaykgeyByZXR1cm4gfVxuXG4gIHN0b3JlLl9kZXZ0b29sSG9vayA9IGRldnRvb2xIb29rO1xuXG4gIGRldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6aW5pdCcsIHN0b3JlKTtcblxuICBkZXZ0b29sSG9vay5vbigndnVleDp0cmF2ZWwtdG8tc3RhdGUnLCBmdW5jdGlvbiAodGFyZ2V0U3RhdGUpIHtcbiAgICBzdG9yZS5yZXBsYWNlU3RhdGUodGFyZ2V0U3RhdGUpO1xuICB9KTtcblxuICBzdG9yZS5zdWJzY3JpYmUoZnVuY3Rpb24gKG11dGF0aW9uLCBzdGF0ZSkge1xuICAgIGRldnRvb2xIb29rLmVtaXQoJ3Z1ZXg6bXV0YXRpb24nLCBtdXRhdGlvbiwgc3RhdGUpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZpcnN0IGl0ZW0gdGhhdCBwYXNzIHRoZSB0ZXN0XG4gKiBieSBzZWNvbmQgYXJndW1lbnQgZnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmXG4gKiBAcmV0dXJuIHsqfVxuICovXG5cbi8qKlxuICogZm9yRWFjaCBmb3Igb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hWYWx1ZSAob2JqLCBmbikge1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZm4ob2JqW2tleV0sIGtleSk7IH0pO1xufVxuXG5mdW5jdGlvbiBpc09iamVjdCAob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIHZhbCAmJiB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbidcbn1cblxuZnVuY3Rpb24gYXNzZXJ0IChjb25kaXRpb24sIG1zZykge1xuICBpZiAoIWNvbmRpdGlvbikgeyB0aHJvdyBuZXcgRXJyb3IoKFwiW3Z1ZXhdIFwiICsgbXNnKSkgfVxufVxuXG5mdW5jdGlvbiBwYXJ0aWFsIChmbiwgYXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZuKGFyZylcbiAgfVxufVxuXG4vLyBCYXNlIGRhdGEgc3RydWN0IGZvciBzdG9yZSdzIG1vZHVsZSwgcGFja2FnZSB3aXRoIHNvbWUgYXR0cmlidXRlIGFuZCBtZXRob2RcbnZhciBNb2R1bGUgPSBmdW5jdGlvbiBNb2R1bGUgKHJhd01vZHVsZSwgcnVudGltZSkge1xuICB0aGlzLnJ1bnRpbWUgPSBydW50aW1lO1xuICAvLyBTdG9yZSBzb21lIGNoaWxkcmVuIGl0ZW1cbiAgdGhpcy5fY2hpbGRyZW4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyBTdG9yZSB0aGUgb3JpZ2luIG1vZHVsZSBvYmplY3Qgd2hpY2ggcGFzc2VkIGJ5IHByb2dyYW1tZXJcbiAgdGhpcy5fcmF3TW9kdWxlID0gcmF3TW9kdWxlO1xuICB2YXIgcmF3U3RhdGUgPSByYXdNb2R1bGUuc3RhdGU7XG5cbiAgLy8gU3RvcmUgdGhlIG9yaWdpbiBtb2R1bGUncyBzdGF0ZVxuICB0aGlzLnN0YXRlID0gKHR5cGVvZiByYXdTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IHJhd1N0YXRlKCkgOiByYXdTdGF0ZSkgfHwge307XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBuYW1lc3BhY2VkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbnByb3RvdHlwZUFjY2Vzc29ycy5uYW1lc3BhY2VkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEhdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWRcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuYWRkQ2hpbGQgPSBmdW5jdGlvbiBhZGRDaGlsZCAoa2V5LCBtb2R1bGUpIHtcbiAgdGhpcy5fY2hpbGRyZW5ba2V5XSA9IG1vZHVsZTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQgPSBmdW5jdGlvbiByZW1vdmVDaGlsZCAoa2V5KSB7XG4gIGRlbGV0ZSB0aGlzLl9jaGlsZHJlbltrZXldO1xufTtcblxuTW9kdWxlLnByb3RvdHlwZS5nZXRDaGlsZCA9IGZ1bmN0aW9uIGdldENoaWxkIChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuW2tleV1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlIChyYXdNb2R1bGUpIHtcbiAgdGhpcy5fcmF3TW9kdWxlLm5hbWVzcGFjZWQgPSByYXdNb2R1bGUubmFtZXNwYWNlZDtcbiAgaWYgKHJhd01vZHVsZS5hY3Rpb25zKSB7XG4gICAgdGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMgPSByYXdNb2R1bGUuYWN0aW9ucztcbiAgfVxuICBpZiAocmF3TW9kdWxlLm11dGF0aW9ucykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMgPSByYXdNb2R1bGUubXV0YXRpb25zO1xuICB9XG4gIGlmIChyYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIHRoaXMuX3Jhd01vZHVsZS5nZXR0ZXJzID0gcmF3TW9kdWxlLmdldHRlcnM7XG4gIH1cbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaENoaWxkID0gZnVuY3Rpb24gZm9yRWFjaENoaWxkIChmbikge1xuICBmb3JFYWNoVmFsdWUodGhpcy5fY2hpbGRyZW4sIGZuKTtcbn07XG5cbk1vZHVsZS5wcm90b3R5cGUuZm9yRWFjaEdldHRlciA9IGZ1bmN0aW9uIGZvckVhY2hHZXR0ZXIgKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycykge1xuICAgIGZvckVhY2hWYWx1ZSh0aGlzLl9yYXdNb2R1bGUuZ2V0dGVycywgZm4pO1xuICB9XG59O1xuXG5Nb2R1bGUucHJvdG90eXBlLmZvckVhY2hBY3Rpb24gPSBmdW5jdGlvbiBmb3JFYWNoQWN0aW9uIChmbikge1xuICBpZiAodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMpIHtcbiAgICBmb3JFYWNoVmFsdWUodGhpcy5fcmF3TW9kdWxlLmFjdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuTW9kdWxlLnByb3RvdHlwZS5mb3JFYWNoTXV0YXRpb24gPSBmdW5jdGlvbiBmb3JFYWNoTXV0YXRpb24gKGZuKSB7XG4gIGlmICh0aGlzLl9yYXdNb2R1bGUubXV0YXRpb25zKSB7XG4gICAgZm9yRWFjaFZhbHVlKHRoaXMuX3Jhd01vZHVsZS5tdXRhdGlvbnMsIGZuKTtcbiAgfVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIE1vZHVsZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgTW9kdWxlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uIE1vZHVsZUNvbGxlY3Rpb24gKHJhd1Jvb3RNb2R1bGUpIHtcbiAgLy8gcmVnaXN0ZXIgcm9vdCBtb2R1bGUgKFZ1ZXguU3RvcmUgb3B0aW9ucylcbiAgdGhpcy5yZWdpc3RlcihbXSwgcmF3Um9vdE1vZHVsZSwgZmFsc2UpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0IChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobW9kdWxlLCBrZXkpIHtcbiAgICByZXR1cm4gbW9kdWxlLmdldENoaWxkKGtleSlcbiAgfSwgdGhpcy5yb290KVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUuZ2V0TmFtZXNwYWNlID0gZnVuY3Rpb24gZ2V0TmFtZXNwYWNlIChwYXRoKSB7XG4gIHZhciBtb2R1bGUgPSB0aGlzLnJvb3Q7XG4gIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAobmFtZXNwYWNlLCBrZXkpIHtcbiAgICBtb2R1bGUgPSBtb2R1bGUuZ2V0Q2hpbGQoa2V5KTtcbiAgICByZXR1cm4gbmFtZXNwYWNlICsgKG1vZHVsZS5uYW1lc3BhY2VkID8ga2V5ICsgJy8nIDogJycpXG4gIH0sICcnKVxufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlJDEgKHJhd1Jvb3RNb2R1bGUpIHtcbiAgdXBkYXRlKFtdLCB0aGlzLnJvb3QsIHJhd1Jvb3RNb2R1bGUpO1xufTtcblxuTW9kdWxlQ29sbGVjdGlvbi5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlciAocGF0aCwgcmF3TW9kdWxlLCBydW50aW1lKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG4gICAgaWYgKCBydW50aW1lID09PSB2b2lkIDAgKSBydW50aW1lID0gdHJ1ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFJhd01vZHVsZShwYXRoLCByYXdNb2R1bGUpO1xuICB9XG5cbiAgdmFyIG5ld01vZHVsZSA9IG5ldyBNb2R1bGUocmF3TW9kdWxlLCBydW50aW1lKTtcbiAgaWYgKHBhdGgubGVuZ3RoID09PSAwKSB7XG4gICAgdGhpcy5yb290ID0gbmV3TW9kdWxlO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gICAgcGFyZW50LmFkZENoaWxkKHBhdGhbcGF0aC5sZW5ndGggLSAxXSwgbmV3TW9kdWxlKTtcbiAgfVxuXG4gIC8vIHJlZ2lzdGVyIG5lc3RlZCBtb2R1bGVzXG4gIGlmIChyYXdNb2R1bGUubW9kdWxlcykge1xuICAgIGZvckVhY2hWYWx1ZShyYXdNb2R1bGUubW9kdWxlcywgZnVuY3Rpb24gKHJhd0NoaWxkTW9kdWxlLCBrZXkpIHtcbiAgICAgIHRoaXMkMS5yZWdpc3RlcihwYXRoLmNvbmNhdChrZXkpLCByYXdDaGlsZE1vZHVsZSwgcnVudGltZSk7XG4gICAgfSk7XG4gIH1cbn07XG5cbk1vZHVsZUNvbGxlY3Rpb24ucHJvdG90eXBlLnVucmVnaXN0ZXIgPSBmdW5jdGlvbiB1bnJlZ2lzdGVyIChwYXRoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLmdldChwYXRoLnNsaWNlKDAsIC0xKSk7XG4gIHZhciBrZXkgPSBwYXRoW3BhdGgubGVuZ3RoIC0gMV07XG4gIGlmICghcGFyZW50LmdldENoaWxkKGtleSkucnVudGltZSkgeyByZXR1cm4gfVxuXG4gIHBhcmVudC5yZW1vdmVDaGlsZChrZXkpO1xufTtcblxuZnVuY3Rpb24gdXBkYXRlIChwYXRoLCB0YXJnZXRNb2R1bGUsIG5ld01vZHVsZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydFJhd01vZHVsZShwYXRoLCBuZXdNb2R1bGUpO1xuICB9XG5cbiAgLy8gdXBkYXRlIHRhcmdldCBtb2R1bGVcbiAgdGFyZ2V0TW9kdWxlLnVwZGF0ZShuZXdNb2R1bGUpO1xuXG4gIC8vIHVwZGF0ZSBuZXN0ZWQgbW9kdWxlc1xuICBpZiAobmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gbmV3TW9kdWxlLm1vZHVsZXMpIHtcbiAgICAgIGlmICghdGFyZ2V0TW9kdWxlLmdldENoaWxkKGtleSkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIlt2dWV4XSB0cnlpbmcgdG8gYWRkIGEgbmV3IG1vZHVsZSAnXCIgKyBrZXkgKyBcIicgb24gaG90IHJlbG9hZGluZywgXCIgK1xuICAgICAgICAgICAgJ21hbnVhbCByZWxvYWQgaXMgbmVlZGVkJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB1cGRhdGUoXG4gICAgICAgIHBhdGguY29uY2F0KGtleSksXG4gICAgICAgIHRhcmdldE1vZHVsZS5nZXRDaGlsZChrZXkpLFxuICAgICAgICBuZXdNb2R1bGUubW9kdWxlc1trZXldXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgZnVuY3Rpb25Bc3NlcnQgPSB7XG4gIGFzc2VydDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7IH0sXG4gIGV4cGVjdGVkOiAnZnVuY3Rpb24nXG59O1xuXG52YXIgb2JqZWN0QXNzZXJ0ID0ge1xuICBhc3NlcnQ6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nIHx8XG4gICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLmhhbmRsZXIgPT09ICdmdW5jdGlvbicpOyB9LFxuICBleHBlY3RlZDogJ2Z1bmN0aW9uIG9yIG9iamVjdCB3aXRoIFwiaGFuZGxlclwiIGZ1bmN0aW9uJ1xufTtcblxudmFyIGFzc2VydFR5cGVzID0ge1xuICBnZXR0ZXJzOiBmdW5jdGlvbkFzc2VydCxcbiAgbXV0YXRpb25zOiBmdW5jdGlvbkFzc2VydCxcbiAgYWN0aW9uczogb2JqZWN0QXNzZXJ0XG59O1xuXG5mdW5jdGlvbiBhc3NlcnRSYXdNb2R1bGUgKHBhdGgsIHJhd01vZHVsZSkge1xuICBPYmplY3Qua2V5cyhhc3NlcnRUeXBlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFyYXdNb2R1bGVba2V5XSkgeyByZXR1cm4gfVxuXG4gICAgdmFyIGFzc2VydE9wdGlvbnMgPSBhc3NlcnRUeXBlc1trZXldO1xuXG4gICAgZm9yRWFjaFZhbHVlKHJhd01vZHVsZVtrZXldLCBmdW5jdGlvbiAodmFsdWUsIHR5cGUpIHtcbiAgICAgIGFzc2VydChcbiAgICAgICAgYXNzZXJ0T3B0aW9ucy5hc3NlcnQodmFsdWUpLFxuICAgICAgICBtYWtlQXNzZXJ0aW9uTWVzc2FnZShwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBhc3NlcnRPcHRpb25zLmV4cGVjdGVkKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG1ha2VBc3NlcnRpb25NZXNzYWdlIChwYXRoLCBrZXksIHR5cGUsIHZhbHVlLCBleHBlY3RlZCkge1xuICB2YXIgYnVmID0ga2V5ICsgXCIgc2hvdWxkIGJlIFwiICsgZXhwZWN0ZWQgKyBcIiBidXQgXFxcIlwiICsga2V5ICsgXCIuXCIgKyB0eXBlICsgXCJcXFwiXCI7XG4gIGlmIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICBidWYgKz0gXCIgaW4gbW9kdWxlIFxcXCJcIiArIChwYXRoLmpvaW4oJy4nKSkgKyBcIlxcXCJcIjtcbiAgfVxuICBidWYgKz0gXCIgaXMgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsdWUpKSArIFwiLlwiO1xuICByZXR1cm4gYnVmXG59XG5cbnZhciBWdWU7IC8vIGJpbmQgb24gaW5zdGFsbFxuXG52YXIgU3RvcmUgPSBmdW5jdGlvbiBTdG9yZSAob3B0aW9ucykge1xuICB2YXIgdGhpcyQxID0gdGhpcztcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgLy8gQXV0byBpbnN0YWxsIGlmIGl0IGlzIG5vdCBkb25lIHlldCBhbmQgYHdpbmRvd2AgaGFzIGBWdWVgLlxuICAvLyBUbyBhbGxvdyB1c2VycyB0byBhdm9pZCBhdXRvLWluc3RhbGxhdGlvbiBpbiBzb21lIGNhc2VzLFxuICAvLyB0aGlzIGNvZGUgc2hvdWxkIGJlIHBsYWNlZCBoZXJlLiBTZWUgIzczMVxuICBpZiAoIVZ1ZSAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuVnVlKSB7XG4gICAgaW5zdGFsbCh3aW5kb3cuVnVlKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KFZ1ZSwgXCJtdXN0IGNhbGwgVnVlLnVzZShWdWV4KSBiZWZvcmUgY3JlYXRpbmcgYSBzdG9yZSBpbnN0YW5jZS5cIik7XG4gICAgYXNzZXJ0KHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJywgXCJ2dWV4IHJlcXVpcmVzIGEgUHJvbWlzZSBwb2x5ZmlsbCBpbiB0aGlzIGJyb3dzZXIuXCIpO1xuICAgIGFzc2VydCh0aGlzIGluc3RhbmNlb2YgU3RvcmUsIFwic3RvcmUgbXVzdCBiZSBjYWxsZWQgd2l0aCB0aGUgbmV3IG9wZXJhdG9yLlwiKTtcbiAgfVxuXG4gIHZhciBwbHVnaW5zID0gb3B0aW9ucy5wbHVnaW5zOyBpZiAoIHBsdWdpbnMgPT09IHZvaWQgMCApIHBsdWdpbnMgPSBbXTtcbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0OyBpZiAoIHN0cmljdCA9PT0gdm9pZCAwICkgc3RyaWN0ID0gZmFsc2U7XG5cbiAgLy8gc3RvcmUgaW50ZXJuYWwgc3RhdGVcbiAgdGhpcy5fY29tbWl0dGluZyA9IGZhbHNlO1xuICB0aGlzLl9hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMgPSBbXTtcbiAgdGhpcy5fbXV0YXRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fd3JhcHBlZEdldHRlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9tb2R1bGVzID0gbmV3IE1vZHVsZUNvbGxlY3Rpb24ob3B0aW9ucyk7XG4gIHRoaXMuX21vZHVsZXNOYW1lc3BhY2VNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuICB0aGlzLl93YXRjaGVyVk0gPSBuZXcgVnVlKCk7XG4gIHRoaXMuX21ha2VMb2NhbEdldHRlcnNDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgLy8gYmluZCBjb21taXQgYW5kIGRpc3BhdGNoIHRvIHNlbGZcbiAgdmFyIHN0b3JlID0gdGhpcztcbiAgdmFyIHJlZiA9IHRoaXM7XG4gIHZhciBkaXNwYXRjaCA9IHJlZi5kaXNwYXRjaDtcbiAgdmFyIGNvbW1pdCA9IHJlZi5jb21taXQ7XG4gIHRoaXMuZGlzcGF0Y2ggPSBmdW5jdGlvbiBib3VuZERpc3BhdGNoICh0eXBlLCBwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoLmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQpXG4gIH07XG4gIHRoaXMuY29tbWl0ID0gZnVuY3Rpb24gYm91bmRDb21taXQgKHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gY29tbWl0LmNhbGwoc3RvcmUsIHR5cGUsIHBheWxvYWQsIG9wdGlvbnMpXG4gIH07XG5cbiAgLy8gc3RyaWN0IG1vZGVcbiAgdGhpcy5zdHJpY3QgPSBzdHJpY3Q7XG5cbiAgdmFyIHN0YXRlID0gdGhpcy5fbW9kdWxlcy5yb290LnN0YXRlO1xuXG4gIC8vIGluaXQgcm9vdCBtb2R1bGUuXG4gIC8vIHRoaXMgYWxzbyByZWN1cnNpdmVseSByZWdpc3RlcnMgYWxsIHN1Yi1tb2R1bGVzXG4gIC8vIGFuZCBjb2xsZWN0cyBhbGwgbW9kdWxlIGdldHRlcnMgaW5zaWRlIHRoaXMuX3dyYXBwZWRHZXR0ZXJzXG4gIGluc3RhbGxNb2R1bGUodGhpcywgc3RhdGUsIFtdLCB0aGlzLl9tb2R1bGVzLnJvb3QpO1xuXG4gIC8vIGluaXRpYWxpemUgdGhlIHN0b3JlIHZtLCB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgdGhlIHJlYWN0aXZpdHlcbiAgLy8gKGFsc28gcmVnaXN0ZXJzIF93cmFwcGVkR2V0dGVycyBhcyBjb21wdXRlZCBwcm9wZXJ0aWVzKVxuICByZXNldFN0b3JlVk0odGhpcywgc3RhdGUpO1xuXG4gIC8vIGFwcGx5IHBsdWdpbnNcbiAgcGx1Z2lucy5mb3JFYWNoKGZ1bmN0aW9uIChwbHVnaW4pIHsgcmV0dXJuIHBsdWdpbih0aGlzJDEpOyB9KTtcblxuICB2YXIgdXNlRGV2dG9vbHMgPSBvcHRpb25zLmRldnRvb2xzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmRldnRvb2xzIDogVnVlLmNvbmZpZy5kZXZ0b29scztcbiAgaWYgKHVzZURldnRvb2xzKSB7XG4gICAgZGV2dG9vbFBsdWdpbih0aGlzKTtcbiAgfVxufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyQxID0geyBzdGF0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl92bS5fZGF0YS4kJHN0YXRlXG59O1xuXG5wcm90b3R5cGVBY2Nlc3NvcnMkMS5zdGF0ZS5zZXQgPSBmdW5jdGlvbiAodikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChmYWxzZSwgXCJ1c2Ugc3RvcmUucmVwbGFjZVN0YXRlKCkgdG8gZXhwbGljaXQgcmVwbGFjZSBzdG9yZSBzdGF0ZS5cIik7XG4gIH1cbn07XG5cblN0b3JlLnByb3RvdHlwZS5jb21taXQgPSBmdW5jdGlvbiBjb21taXQgKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyBjaGVjayBvYmplY3Qtc3R5bGUgY29tbWl0XG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gICAgdmFyIHBheWxvYWQgPSByZWYucGF5bG9hZDtcbiAgICB2YXIgb3B0aW9ucyA9IHJlZi5vcHRpb25zO1xuXG4gIHZhciBtdXRhdGlvbiA9IHsgdHlwZTogdHlwZSwgcGF5bG9hZDogcGF5bG9hZCB9O1xuICB2YXIgZW50cnkgPSB0aGlzLl9tdXRhdGlvbnNbdHlwZV07XG4gIGlmICghZW50cnkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBtdXRhdGlvbiB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cbiAgdGhpcy5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgZW50cnkuZm9yRWFjaChmdW5jdGlvbiBjb21taXRJdGVyYXRvciAoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcihwYXlsb2FkKTtcbiAgICB9KTtcbiAgfSk7XG4gIHRoaXMuX3N1YnNjcmliZXJzLmZvckVhY2goZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViKG11dGF0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcblxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIG9wdGlvbnMgJiYgb3B0aW9ucy5zaWxlbnRcbiAgKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgXCJbdnVleF0gbXV0YXRpb24gdHlwZTogXCIgKyB0eXBlICsgXCIuIFNpbGVudCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZC4gXCIgK1xuICAgICAgJ1VzZSB0aGUgZmlsdGVyIGZ1bmN0aW9uYWxpdHkgaW4gdGhlIHZ1ZS1kZXZ0b29scydcbiAgICApO1xuICB9XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCAoX3R5cGUsIF9wYXlsb2FkKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgLy8gY2hlY2sgb2JqZWN0LXN0eWxlIGRpc3BhdGNoXG4gIHZhciByZWYgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgcGF5bG9hZCA9IHJlZi5wYXlsb2FkO1xuXG4gIHZhciBhY3Rpb24gPSB7IHR5cGU6IHR5cGUsIHBheWxvYWQ6IHBheWxvYWQgfTtcbiAgdmFyIGVudHJ5ID0gdGhpcy5fYWN0aW9uc1t0eXBlXTtcbiAgaWYgKCFlbnRyeSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGFjdGlvbiB0eXBlOiBcIiArIHR5cGUpKTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICB0cnkge1xuICAgIHRoaXMuX2FjdGlvblN1YnNjcmliZXJzXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uIChzdWIpIHsgcmV0dXJuIHN1Yi5iZWZvcmU7IH0pXG4gICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYmVmb3JlKGFjdGlvbiwgdGhpcyQxLnN0YXRlKTsgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS53YXJuKFwiW3Z1ZXhdIGVycm9yIGluIGJlZm9yZSBhY3Rpb24gc3Vic2NyaWJlcnM6IFwiKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlc3VsdCA9IGVudHJ5Lmxlbmd0aCA+IDFcbiAgICA/IFByb21pc2UuYWxsKGVudHJ5Lm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyByZXR1cm4gaGFuZGxlcihwYXlsb2FkKTsgfSkpXG4gICAgOiBlbnRyeVswXShwYXlsb2FkKTtcblxuICByZXR1cm4gcmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJlcykge1xuICAgIHRyeSB7XG4gICAgICB0aGlzJDEuX2FjdGlvblN1YnNjcmliZXJzXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHN1YikgeyByZXR1cm4gc3ViLmFmdGVyOyB9KVxuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc3ViKSB7IHJldHVybiBzdWIuYWZ0ZXIoYWN0aW9uLCB0aGlzJDEuc3RhdGUpOyB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbdnVleF0gZXJyb3IgaW4gYWZ0ZXIgYWN0aW9uIHN1YnNjcmliZXJzOiBcIik7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfSlcbn07XG5cblN0b3JlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUgKGZuKSB7XG4gIHJldHVybiBnZW5lcmljU3Vic2NyaWJlKGZuLCB0aGlzLl9zdWJzY3JpYmVycylcbn07XG5cblN0b3JlLnByb3RvdHlwZS5zdWJzY3JpYmVBY3Rpb24gPSBmdW5jdGlvbiBzdWJzY3JpYmVBY3Rpb24gKGZuKSB7XG4gIHZhciBzdWJzID0gdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nID8geyBiZWZvcmU6IGZuIH0gOiBmbjtcbiAgcmV0dXJuIGdlbmVyaWNTdWJzY3JpYmUoc3VicywgdGhpcy5fYWN0aW9uU3Vic2NyaWJlcnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUud2F0Y2ggPSBmdW5jdGlvbiB3YXRjaCAoZ2V0dGVyLCBjYiwgb3B0aW9ucykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHR5cGVvZiBnZXR0ZXIgPT09ICdmdW5jdGlvbicsIFwic3RvcmUud2F0Y2ggb25seSBhY2NlcHRzIGEgZnVuY3Rpb24uXCIpO1xuICB9XG4gIHJldHVybiB0aGlzLl93YXRjaGVyVk0uJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdldHRlcih0aGlzJDEuc3RhdGUsIHRoaXMkMS5nZXR0ZXJzKTsgfSwgY2IsIG9wdGlvbnMpXG59O1xuXG5TdG9yZS5wcm90b3R5cGUucmVwbGFjZVN0YXRlID0gZnVuY3Rpb24gcmVwbGFjZVN0YXRlIChzdGF0ZSkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHRoaXMuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgIHRoaXMkMS5fdm0uX2RhdGEuJCRzdGF0ZSA9IHN0YXRlO1xuICB9KTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHJlZ2lzdGVyTW9kdWxlIChwYXRoLCByYXdNb2R1bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAoIG9wdGlvbnMgPT09IHZvaWQgMCApIG9wdGlvbnMgPSB7fTtcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICAgIGFzc2VydChwYXRoLmxlbmd0aCA+IDAsICdjYW5ub3QgcmVnaXN0ZXIgdGhlIHJvb3QgbW9kdWxlIGJ5IHVzaW5nIHJlZ2lzdGVyTW9kdWxlLicpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy5yZWdpc3RlcihwYXRoLCByYXdNb2R1bGUpO1xuICBpbnN0YWxsTW9kdWxlKHRoaXMsIHRoaXMuc3RhdGUsIHBhdGgsIHRoaXMuX21vZHVsZXMuZ2V0KHBhdGgpLCBvcHRpb25zLnByZXNlcnZlU3RhdGUpO1xuICAvLyByZXNldCBzdG9yZSB0byB1cGRhdGUgZ2V0dGVycy4uLlxuICByZXNldFN0b3JlVk0odGhpcywgdGhpcy5zdGF0ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUudW5yZWdpc3Rlck1vZHVsZSA9IGZ1bmN0aW9uIHVucmVnaXN0ZXJNb2R1bGUgKHBhdGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBpZiAodHlwZW9mIHBhdGggPT09ICdzdHJpbmcnKSB7IHBhdGggPSBbcGF0aF07IH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHBhdGgpLCBcIm1vZHVsZSBwYXRoIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gQXJyYXkuXCIpO1xuICB9XG5cbiAgdGhpcy5fbW9kdWxlcy51bnJlZ2lzdGVyKHBhdGgpO1xuICB0aGlzLl93aXRoQ29tbWl0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50U3RhdGUgPSBnZXROZXN0ZWRTdGF0ZSh0aGlzJDEuc3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICBWdWUuZGVsZXRlKHBhcmVudFN0YXRlLCBwYXRoW3BhdGgubGVuZ3RoIC0gMV0pO1xuICB9KTtcbiAgcmVzZXRTdG9yZSh0aGlzKTtcbn07XG5cblN0b3JlLnByb3RvdHlwZS5ob3RVcGRhdGUgPSBmdW5jdGlvbiBob3RVcGRhdGUgKG5ld09wdGlvbnMpIHtcbiAgdGhpcy5fbW9kdWxlcy51cGRhdGUobmV3T3B0aW9ucyk7XG4gIHJlc2V0U3RvcmUodGhpcywgdHJ1ZSk7XG59O1xuXG5TdG9yZS5wcm90b3R5cGUuX3dpdGhDb21taXQgPSBmdW5jdGlvbiBfd2l0aENvbW1pdCAoZm4pIHtcbiAgdmFyIGNvbW1pdHRpbmcgPSB0aGlzLl9jb21taXR0aW5nO1xuICB0aGlzLl9jb21taXR0aW5nID0gdHJ1ZTtcbiAgZm4oKTtcbiAgdGhpcy5fY29tbWl0dGluZyA9IGNvbW1pdHRpbmc7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggU3RvcmUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMkMSApO1xuXG5mdW5jdGlvbiBnZW5lcmljU3Vic2NyaWJlIChmbiwgc3Vicykge1xuICBpZiAoc3Vicy5pbmRleE9mKGZuKSA8IDApIHtcbiAgICBzdWJzLnB1c2goZm4pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGkgPSBzdWJzLmluZGV4T2YoZm4pO1xuICAgIGlmIChpID4gLTEpIHtcbiAgICAgIHN1YnMuc3BsaWNlKGksIDEpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNldFN0b3JlIChzdG9yZSwgaG90KSB7XG4gIHN0b3JlLl9hY3Rpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgc3RvcmUuX211dGF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl93cmFwcGVkR2V0dGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHN0b3JlLl9tb2R1bGVzTmFtZXNwYWNlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHN0YXRlID0gc3RvcmUuc3RhdGU7XG4gIC8vIGluaXQgYWxsIG1vZHVsZXNcbiAgaW5zdGFsbE1vZHVsZShzdG9yZSwgc3RhdGUsIFtdLCBzdG9yZS5fbW9kdWxlcy5yb290LCB0cnVlKTtcbiAgLy8gcmVzZXQgdm1cbiAgcmVzZXRTdG9yZVZNKHN0b3JlLCBzdGF0ZSwgaG90KTtcbn1cblxuZnVuY3Rpb24gcmVzZXRTdG9yZVZNIChzdG9yZSwgc3RhdGUsIGhvdCkge1xuICB2YXIgb2xkVm0gPSBzdG9yZS5fdm07XG5cbiAgLy8gYmluZCBzdG9yZSBwdWJsaWMgZ2V0dGVyc1xuICBzdG9yZS5nZXR0ZXJzID0ge307XG4gIC8vIHJlc2V0IGxvY2FsIGdldHRlcnMgY2FjaGVcbiAgc3RvcmUuX21ha2VMb2NhbEdldHRlcnNDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciB3cmFwcGVkR2V0dGVycyA9IHN0b3JlLl93cmFwcGVkR2V0dGVycztcbiAgdmFyIGNvbXB1dGVkID0ge307XG4gIGZvckVhY2hWYWx1ZSh3cmFwcGVkR2V0dGVycywgZnVuY3Rpb24gKGZuLCBrZXkpIHtcbiAgICAvLyB1c2UgY29tcHV0ZWQgdG8gbGV2ZXJhZ2UgaXRzIGxhenktY2FjaGluZyBtZWNoYW5pc21cbiAgICAvLyBkaXJlY3QgaW5saW5lIGZ1bmN0aW9uIHVzZSB3aWxsIGxlYWQgdG8gY2xvc3VyZSBwcmVzZXJ2aW5nIG9sZFZtLlxuICAgIC8vIHVzaW5nIHBhcnRpYWwgdG8gcmV0dXJuIGZ1bmN0aW9uIHdpdGggb25seSBhcmd1bWVudHMgcHJlc2VydmVkIGluIGNsb3N1cmUgZW52aXJvbm1lbnQuXG4gICAgY29tcHV0ZWRba2V5XSA9IHBhcnRpYWwoZm4sIHN0b3JlKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3RvcmUuZ2V0dGVycywga2V5LCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLl92bVtrZXldOyB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSAvLyBmb3IgbG9jYWwgZ2V0dGVyc1xuICAgIH0pO1xuICB9KTtcblxuICAvLyB1c2UgYSBWdWUgaW5zdGFuY2UgdG8gc3RvcmUgdGhlIHN0YXRlIHRyZWVcbiAgLy8gc3VwcHJlc3Mgd2FybmluZ3MganVzdCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBhZGRlZFxuICAvLyBzb21lIGZ1bmt5IGdsb2JhbCBtaXhpbnNcbiAgdmFyIHNpbGVudCA9IFZ1ZS5jb25maWcuc2lsZW50O1xuICBWdWUuY29uZmlnLnNpbGVudCA9IHRydWU7XG4gIHN0b3JlLl92bSA9IG5ldyBWdWUoe1xuICAgIGRhdGE6IHtcbiAgICAgICQkc3RhdGU6IHN0YXRlXG4gICAgfSxcbiAgICBjb21wdXRlZDogY29tcHV0ZWRcbiAgfSk7XG4gIFZ1ZS5jb25maWcuc2lsZW50ID0gc2lsZW50O1xuXG4gIC8vIGVuYWJsZSBzdHJpY3QgbW9kZSBmb3IgbmV3IHZtXG4gIGlmIChzdG9yZS5zdHJpY3QpIHtcbiAgICBlbmFibGVTdHJpY3RNb2RlKHN0b3JlKTtcbiAgfVxuXG4gIGlmIChvbGRWbSkge1xuICAgIGlmIChob3QpIHtcbiAgICAgIC8vIGRpc3BhdGNoIGNoYW5nZXMgaW4gYWxsIHN1YnNjcmliZWQgd2F0Y2hlcnNcbiAgICAgIC8vIHRvIGZvcmNlIGdldHRlciByZS1ldmFsdWF0aW9uIGZvciBob3QgcmVsb2FkaW5nLlxuICAgICAgc3RvcmUuX3dpdGhDb21taXQoZnVuY3Rpb24gKCkge1xuICAgICAgICBvbGRWbS5fZGF0YS4kJHN0YXRlID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBWdWUubmV4dFRpY2soZnVuY3Rpb24gKCkgeyByZXR1cm4gb2xkVm0uJGRlc3Ryb3koKTsgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zdGFsbE1vZHVsZSAoc3RvcmUsIHJvb3RTdGF0ZSwgcGF0aCwgbW9kdWxlLCBob3QpIHtcbiAgdmFyIGlzUm9vdCA9ICFwYXRoLmxlbmd0aDtcbiAgdmFyIG5hbWVzcGFjZSA9IHN0b3JlLl9tb2R1bGVzLmdldE5hbWVzcGFjZShwYXRoKTtcblxuICAvLyByZWdpc3RlciBpbiBuYW1lc3BhY2UgbWFwXG4gIGlmIChtb2R1bGUubmFtZXNwYWNlZCkge1xuICAgIGlmIChzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIGR1cGxpY2F0ZSBuYW1lc3BhY2UgXCIgKyBuYW1lc3BhY2UgKyBcIiBmb3IgdGhlIG5hbWVzcGFjZWQgbW9kdWxlIFwiICsgKHBhdGguam9pbignLycpKSkpO1xuICAgIH1cbiAgICBzdG9yZS5fbW9kdWxlc05hbWVzcGFjZU1hcFtuYW1lc3BhY2VdID0gbW9kdWxlO1xuICB9XG5cbiAgLy8gc2V0IHN0YXRlXG4gIGlmICghaXNSb290ICYmICFob3QpIHtcbiAgICB2YXIgcGFyZW50U3RhdGUgPSBnZXROZXN0ZWRTdGF0ZShyb290U3RhdGUsIHBhdGguc2xpY2UoMCwgLTEpKTtcbiAgICB2YXIgbW9kdWxlTmFtZSA9IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgICBzdG9yZS5fd2l0aENvbW1pdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAobW9kdWxlTmFtZSBpbiBwYXJlbnRTdGF0ZSkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIChcIlt2dWV4XSBzdGF0ZSBmaWVsZCBcXFwiXCIgKyBtb2R1bGVOYW1lICsgXCJcXFwiIHdhcyBvdmVycmlkZGVuIGJ5IGEgbW9kdWxlIHdpdGggdGhlIHNhbWUgbmFtZSBhdCBcXFwiXCIgKyAocGF0aC5qb2luKCcuJykpICsgXCJcXFwiXCIpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgVnVlLnNldChwYXJlbnRTdGF0ZSwgbW9kdWxlTmFtZSwgbW9kdWxlLnN0YXRlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBsb2NhbCA9IG1vZHVsZS5jb250ZXh0ID0gbWFrZUxvY2FsQ29udGV4dChzdG9yZSwgbmFtZXNwYWNlLCBwYXRoKTtcblxuICBtb2R1bGUuZm9yRWFjaE11dGF0aW9uKGZ1bmN0aW9uIChtdXRhdGlvbiwga2V5KSB7XG4gICAgdmFyIG5hbWVzcGFjZWRUeXBlID0gbmFtZXNwYWNlICsga2V5O1xuICAgIHJlZ2lzdGVyTXV0YXRpb24oc3RvcmUsIG5hbWVzcGFjZWRUeXBlLCBtdXRhdGlvbiwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaEFjdGlvbihmdW5jdGlvbiAoYWN0aW9uLCBrZXkpIHtcbiAgICB2YXIgdHlwZSA9IGFjdGlvbi5yb290ID8ga2V5IDogbmFtZXNwYWNlICsga2V5O1xuICAgIHZhciBoYW5kbGVyID0gYWN0aW9uLmhhbmRsZXIgfHwgYWN0aW9uO1xuICAgIHJlZ2lzdGVyQWN0aW9uKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCk7XG4gIH0pO1xuXG4gIG1vZHVsZS5mb3JFYWNoR2V0dGVyKGZ1bmN0aW9uIChnZXR0ZXIsIGtleSkge1xuICAgIHZhciBuYW1lc3BhY2VkVHlwZSA9IG5hbWVzcGFjZSArIGtleTtcbiAgICByZWdpc3RlckdldHRlcihzdG9yZSwgbmFtZXNwYWNlZFR5cGUsIGdldHRlciwgbG9jYWwpO1xuICB9KTtcblxuICBtb2R1bGUuZm9yRWFjaENoaWxkKGZ1bmN0aW9uIChjaGlsZCwga2V5KSB7XG4gICAgaW5zdGFsbE1vZHVsZShzdG9yZSwgcm9vdFN0YXRlLCBwYXRoLmNvbmNhdChrZXkpLCBjaGlsZCwgaG90KTtcbiAgfSk7XG59XG5cbi8qKlxuICogbWFrZSBsb2NhbGl6ZWQgZGlzcGF0Y2gsIGNvbW1pdCwgZ2V0dGVycyBhbmQgc3RhdGVcbiAqIGlmIHRoZXJlIGlzIG5vIG5hbWVzcGFjZSwganVzdCB1c2Ugcm9vdCBvbmVzXG4gKi9cbmZ1bmN0aW9uIG1ha2VMb2NhbENvbnRleHQgKHN0b3JlLCBuYW1lc3BhY2UsIHBhdGgpIHtcbiAgdmFyIG5vTmFtZXNwYWNlID0gbmFtZXNwYWNlID09PSAnJztcblxuICB2YXIgbG9jYWwgPSB7XG4gICAgZGlzcGF0Y2g6IG5vTmFtZXNwYWNlID8gc3RvcmUuZGlzcGF0Y2ggOiBmdW5jdGlvbiAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgICAgdmFyIHBheWxvYWQgPSBhcmdzLnBheWxvYWQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciB0eXBlID0gYXJncy50eXBlO1xuXG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucm9vdCkge1xuICAgICAgICB0eXBlID0gbmFtZXNwYWNlICsgdHlwZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXN0b3JlLl9hY3Rpb25zW3R5cGVdKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBsb2NhbCBhY3Rpb24gdHlwZTogXCIgKyAoYXJncy50eXBlKSArIFwiLCBnbG9iYWwgdHlwZTogXCIgKyB0eXBlKSk7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKHR5cGUsIHBheWxvYWQpXG4gICAgfSxcblxuICAgIGNvbW1pdDogbm9OYW1lc3BhY2UgPyBzdG9yZS5jb21taXQgOiBmdW5jdGlvbiAoX3R5cGUsIF9wYXlsb2FkLCBfb3B0aW9ucykge1xuICAgICAgdmFyIGFyZ3MgPSB1bmlmeU9iamVjdFN0eWxlKF90eXBlLCBfcGF5bG9hZCwgX29wdGlvbnMpO1xuICAgICAgdmFyIHBheWxvYWQgPSBhcmdzLnBheWxvYWQ7XG4gICAgICB2YXIgb3B0aW9ucyA9IGFyZ3Mub3B0aW9ucztcbiAgICAgIHZhciB0eXBlID0gYXJncy50eXBlO1xuXG4gICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucm9vdCkge1xuICAgICAgICB0eXBlID0gbmFtZXNwYWNlICsgdHlwZTtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIXN0b3JlLl9tdXRhdGlvbnNbdHlwZV0pIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKChcIlt2dWV4XSB1bmtub3duIGxvY2FsIG11dGF0aW9uIHR5cGU6IFwiICsgKGFyZ3MudHlwZSkgKyBcIiwgZ2xvYmFsIHR5cGU6IFwiICsgdHlwZSkpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0b3JlLmNvbW1pdCh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKTtcbiAgICB9XG4gIH07XG5cbiAgLy8gZ2V0dGVycyBhbmQgc3RhdGUgb2JqZWN0IG11c3QgYmUgZ290dGVuIGxhemlseVxuICAvLyBiZWNhdXNlIHRoZXkgd2lsbCBiZSBjaGFuZ2VkIGJ5IHZtIHVwZGF0ZVxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhsb2NhbCwge1xuICAgIGdldHRlcnM6IHtcbiAgICAgIGdldDogbm9OYW1lc3BhY2VcbiAgICAgICAgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBzdG9yZS5nZXR0ZXJzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWFrZUxvY2FsR2V0dGVycyhzdG9yZSwgbmFtZXNwYWNlKTsgfVxuICAgIH0sXG4gICAgc3RhdGU6IHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0TmVzdGVkU3RhdGUoc3RvcmUuc3RhdGUsIHBhdGgpOyB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbG9jYWxcbn1cblxuZnVuY3Rpb24gbWFrZUxvY2FsR2V0dGVycyAoc3RvcmUsIG5hbWVzcGFjZSkge1xuICBpZiAoIXN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGVbbmFtZXNwYWNlXSkge1xuICAgIHZhciBnZXR0ZXJzUHJveHkgPSB7fTtcbiAgICB2YXIgc3BsaXRQb3MgPSBuYW1lc3BhY2UubGVuZ3RoO1xuICAgIE9iamVjdC5rZXlzKHN0b3JlLmdldHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIC8vIHNraXAgaWYgdGhlIHRhcmdldCBnZXR0ZXIgaXMgbm90IG1hdGNoIHRoaXMgbmFtZXNwYWNlXG4gICAgICBpZiAodHlwZS5zbGljZSgwLCBzcGxpdFBvcykgIT09IG5hbWVzcGFjZSkgeyByZXR1cm4gfVxuXG4gICAgICAvLyBleHRyYWN0IGxvY2FsIGdldHRlciB0eXBlXG4gICAgICB2YXIgbG9jYWxUeXBlID0gdHlwZS5zbGljZShzcGxpdFBvcyk7XG5cbiAgICAgIC8vIEFkZCBhIHBvcnQgdG8gdGhlIGdldHRlcnMgcHJveHkuXG4gICAgICAvLyBEZWZpbmUgYXMgZ2V0dGVyIHByb3BlcnR5IGJlY2F1c2VcbiAgICAgIC8vIHdlIGRvIG5vdCB3YW50IHRvIGV2YWx1YXRlIHRoZSBnZXR0ZXJzIGluIHRoaXMgdGltZS5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShnZXR0ZXJzUHJveHksIGxvY2FsVHlwZSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0b3JlLmdldHRlcnNbdHlwZV07IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHN0b3JlLl9tYWtlTG9jYWxHZXR0ZXJzQ2FjaGVbbmFtZXNwYWNlXSA9IGdldHRlcnNQcm94eTtcbiAgfVxuXG4gIHJldHVybiBzdG9yZS5fbWFrZUxvY2FsR2V0dGVyc0NhY2hlW25hbWVzcGFjZV1cbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJNdXRhdGlvbiAoc3RvcmUsIHR5cGUsIGhhbmRsZXIsIGxvY2FsKSB7XG4gIHZhciBlbnRyeSA9IHN0b3JlLl9tdXRhdGlvbnNbdHlwZV0gfHwgKHN0b3JlLl9tdXRhdGlvbnNbdHlwZV0gPSBbXSk7XG4gIGVudHJ5LnB1c2goZnVuY3Rpb24gd3JhcHBlZE11dGF0aW9uSGFuZGxlciAocGF5bG9hZCkge1xuICAgIGhhbmRsZXIuY2FsbChzdG9yZSwgbG9jYWwuc3RhdGUsIHBheWxvYWQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJBY3Rpb24gKHN0b3JlLCB0eXBlLCBoYW5kbGVyLCBsb2NhbCkge1xuICB2YXIgZW50cnkgPSBzdG9yZS5fYWN0aW9uc1t0eXBlXSB8fCAoc3RvcmUuX2FjdGlvbnNbdHlwZV0gPSBbXSk7XG4gIGVudHJ5LnB1c2goZnVuY3Rpb24gd3JhcHBlZEFjdGlvbkhhbmRsZXIgKHBheWxvYWQpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5jYWxsKHN0b3JlLCB7XG4gICAgICBkaXNwYXRjaDogbG9jYWwuZGlzcGF0Y2gsXG4gICAgICBjb21taXQ6IGxvY2FsLmNvbW1pdCxcbiAgICAgIGdldHRlcnM6IGxvY2FsLmdldHRlcnMsXG4gICAgICBzdGF0ZTogbG9jYWwuc3RhdGUsXG4gICAgICByb290R2V0dGVyczogc3RvcmUuZ2V0dGVycyxcbiAgICAgIHJvb3RTdGF0ZTogc3RvcmUuc3RhdGVcbiAgICB9LCBwYXlsb2FkKTtcbiAgICBpZiAoIWlzUHJvbWlzZShyZXMpKSB7XG4gICAgICByZXMgPSBQcm9taXNlLnJlc29sdmUocmVzKTtcbiAgICB9XG4gICAgaWYgKHN0b3JlLl9kZXZ0b29sSG9vaykge1xuICAgICAgcmV0dXJuIHJlcy5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHN0b3JlLl9kZXZ0b29sSG9vay5lbWl0KCd2dWV4OmVycm9yJywgZXJyKTtcbiAgICAgICAgdGhyb3cgZXJyXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXJHZXR0ZXIgKHN0b3JlLCB0eXBlLCByYXdHZXR0ZXIsIGxvY2FsKSB7XG4gIGlmIChzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0pIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gZHVwbGljYXRlIGdldHRlciBrZXk6IFwiICsgdHlwZSkpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuICBzdG9yZS5fd3JhcHBlZEdldHRlcnNbdHlwZV0gPSBmdW5jdGlvbiB3cmFwcGVkR2V0dGVyIChzdG9yZSkge1xuICAgIHJldHVybiByYXdHZXR0ZXIoXG4gICAgICBsb2NhbC5zdGF0ZSwgLy8gbG9jYWwgc3RhdGVcbiAgICAgIGxvY2FsLmdldHRlcnMsIC8vIGxvY2FsIGdldHRlcnNcbiAgICAgIHN0b3JlLnN0YXRlLCAvLyByb290IHN0YXRlXG4gICAgICBzdG9yZS5nZXR0ZXJzIC8vIHJvb3QgZ2V0dGVyc1xuICAgIClcbiAgfTtcbn1cblxuZnVuY3Rpb24gZW5hYmxlU3RyaWN0TW9kZSAoc3RvcmUpIHtcbiAgc3RvcmUuX3ZtLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhLiQkc3RhdGUgfSwgZnVuY3Rpb24gKCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBhc3NlcnQoc3RvcmUuX2NvbW1pdHRpbmcsIFwiZG8gbm90IG11dGF0ZSB2dWV4IHN0b3JlIHN0YXRlIG91dHNpZGUgbXV0YXRpb24gaGFuZGxlcnMuXCIpO1xuICAgIH1cbiAgfSwgeyBkZWVwOiB0cnVlLCBzeW5jOiB0cnVlIH0pO1xufVxuXG5mdW5jdGlvbiBnZXROZXN0ZWRTdGF0ZSAoc3RhdGUsIHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgubGVuZ3RoXG4gICAgPyBwYXRoLnJlZHVjZShmdW5jdGlvbiAoc3RhdGUsIGtleSkgeyByZXR1cm4gc3RhdGVba2V5XTsgfSwgc3RhdGUpXG4gICAgOiBzdGF0ZVxufVxuXG5mdW5jdGlvbiB1bmlmeU9iamVjdFN0eWxlICh0eXBlLCBwYXlsb2FkLCBvcHRpb25zKSB7XG4gIGlmIChpc09iamVjdCh0eXBlKSAmJiB0eXBlLnR5cGUpIHtcbiAgICBvcHRpb25zID0gcGF5bG9hZDtcbiAgICBwYXlsb2FkID0gdHlwZTtcbiAgICB0eXBlID0gdHlwZS50eXBlO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnLCAoXCJleHBlY3RzIHN0cmluZyBhcyB0aGUgdHlwZSwgYnV0IGZvdW5kIFwiICsgKHR5cGVvZiB0eXBlKSArIFwiLlwiKSk7XG4gIH1cblxuICByZXR1cm4geyB0eXBlOiB0eXBlLCBwYXlsb2FkOiBwYXlsb2FkLCBvcHRpb25zOiBvcHRpb25zIH1cbn1cblxuZnVuY3Rpb24gaW5zdGFsbCAoX1Z1ZSkge1xuICBpZiAoVnVlICYmIF9WdWUgPT09IFZ1ZSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAnW3Z1ZXhdIGFscmVhZHkgaW5zdGFsbGVkLiBWdWUudXNlKFZ1ZXgpIHNob3VsZCBiZSBjYWxsZWQgb25seSBvbmNlLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVyblxuICB9XG4gIFZ1ZSA9IF9WdWU7XG4gIGFwcGx5TWl4aW4oVnVlKTtcbn1cblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGdldHRpbmcgdGhlIHN0YXRlLlxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gc3RhdGVzICMgT2JqZWN0J3MgaXRlbSBjYW4gYmUgYSBmdW5jdGlvbiB3aGljaCBhY2NlcHQgc3RhdGUgYW5kIGdldHRlcnMgZm9yIHBhcmFtLCB5b3UgY2FuIGRvIHNvbWV0aGluZyBmb3Igc3RhdGUgYW5kIGdldHRlcnMgaW4gaXQuXG4gKiBAcGFyYW0ge09iamVjdH1cbiAqL1xudmFyIG1hcFN0YXRlID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIHN0YXRlcykge1xuICB2YXIgcmVzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkTWFwKHN0YXRlcykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbdnVleF0gbWFwU3RhdGU6IG1hcHBlciBwYXJhbWV0ZXIgbXVzdCBiZSBlaXRoZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0Jyk7XG4gIH1cbiAgbm9ybWFsaXplTWFwKHN0YXRlcykuZm9yRWFjaChmdW5jdGlvbiAocmVmKSB7XG4gICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgdmFyIHZhbCA9IHJlZi52YWw7XG5cbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZFN0YXRlICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IHRoaXMuJHN0b3JlLnN0YXRlO1xuICAgICAgdmFyIGdldHRlcnMgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzO1xuICAgICAgaWYgKG5hbWVzcGFjZSkge1xuICAgICAgICB2YXIgbW9kdWxlID0gZ2V0TW9kdWxlQnlOYW1lc3BhY2UodGhpcy4kc3RvcmUsICdtYXBTdGF0ZScsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUgPSBtb2R1bGUuY29udGV4dC5zdGF0ZTtcbiAgICAgICAgZ2V0dGVycyA9IG1vZHVsZS5jb250ZXh0LmdldHRlcnM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHZhbC5jYWxsKHRoaXMsIHN0YXRlLCBnZXR0ZXJzKVxuICAgICAgICA6IHN0YXRlW3ZhbF1cbiAgICB9O1xuICAgIC8vIG1hcmsgdnVleCBnZXR0ZXIgZm9yIGRldnRvb2xzXG4gICAgcmVzW2tleV0udnVleCA9IHRydWU7XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGNvbW1pdHRpbmcgdGhlIG11dGF0aW9uXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVzcGFjZV0gLSBNb2R1bGUncyBuYW1lc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBtdXRhdGlvbnMgIyBPYmplY3QncyBpdGVtIGNhbiBiZSBhIGZ1bmN0aW9uIHdoaWNoIGFjY2VwdCBgY29tbWl0YCBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgcGFyYW0sIGl0IGNhbiBhY2NlcHQgYW50aG9yIHBhcmFtcy4gWW91IGNhbiBjb21taXQgbXV0YXRpb24gYW5kIGRvIGFueSBvdGhlciB0aGluZ3MgaW4gdGhpcyBmdW5jdGlvbi4gc3BlY2lhbGx5LCBZb3UgbmVlZCB0byBwYXNzIGFudGhvciBwYXJhbXMgZnJvbSB0aGUgbWFwcGVkIGZ1bmN0aW9uLlxuICogQHJldHVybiB7T2JqZWN0fVxuICovXG52YXIgbWFwTXV0YXRpb25zID0gbm9ybWFsaXplTmFtZXNwYWNlKGZ1bmN0aW9uIChuYW1lc3BhY2UsIG11dGF0aW9ucykge1xuICB2YXIgcmVzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkTWFwKG11dGF0aW9ucykpIHtcbiAgICBjb25zb2xlLmVycm9yKCdbdnVleF0gbWFwTXV0YXRpb25zOiBtYXBwZXIgcGFyYW1ldGVyIG11c3QgYmUgZWl0aGVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCcpO1xuICB9XG4gIG5vcm1hbGl6ZU1hcChtdXRhdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRNdXRhdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgICAgLy8gR2V0IHRoZSBjb21taXQgbWV0aG9kIGZyb20gc3RvcmVcbiAgICAgIHZhciBjb21taXQgPSB0aGlzLiRzdG9yZS5jb21taXQ7XG4gICAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgICAgIHZhciBtb2R1bGUgPSBnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcE11dGF0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY29tbWl0ID0gbW9kdWxlLmNvbnRleHQuY29tbWl0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyB2YWwuYXBwbHkodGhpcywgW2NvbW1pdF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGNvbW1pdC5hcHBseSh0aGlzLiRzdG9yZSwgW3ZhbF0uY29uY2F0KGFyZ3MpKVxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLyoqXG4gKiBSZWR1Y2UgdGhlIGNvZGUgd2hpY2ggd3JpdHRlbiBpbiBWdWUuanMgZm9yIGdldHRpbmcgdGhlIGdldHRlcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBbbmFtZXNwYWNlXSAtIE1vZHVsZSdzIG5hbWVzcGFjZVxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IGdldHRlcnNcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcEdldHRlcnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgZ2V0dGVycykge1xuICB2YXIgcmVzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkTWFwKGdldHRlcnMpKSB7XG4gICAgY29uc29sZS5lcnJvcignW3Z1ZXhdIG1hcEdldHRlcnM6IG1hcHBlciBwYXJhbWV0ZXIgbXVzdCBiZSBlaXRoZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0Jyk7XG4gIH1cbiAgbm9ybWFsaXplTWFwKGdldHRlcnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgLy8gVGhlIG5hbWVzcGFjZSBoYXMgYmVlbiBtdXRhdGVkIGJ5IG5vcm1hbGl6ZU5hbWVzcGFjZVxuICAgIHZhbCA9IG5hbWVzcGFjZSArIHZhbDtcbiAgICByZXNba2V5XSA9IGZ1bmN0aW9uIG1hcHBlZEdldHRlciAoKSB7XG4gICAgICBpZiAobmFtZXNwYWNlICYmICFnZXRNb2R1bGVCeU5hbWVzcGFjZSh0aGlzLiRzdG9yZSwgJ21hcEdldHRlcnMnLCBuYW1lc3BhY2UpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgISh2YWwgaW4gdGhpcy4kc3RvcmUuZ2V0dGVycykpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcigoXCJbdnVleF0gdW5rbm93biBnZXR0ZXI6IFwiICsgdmFsKSk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnNbdmFsXVxuICAgIH07XG4gICAgLy8gbWFyayB2dWV4IGdldHRlciBmb3IgZGV2dG9vbHNcbiAgICByZXNba2V5XS52dWV4ID0gdHJ1ZTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlZHVjZSB0aGUgY29kZSB3aGljaCB3cml0dGVuIGluIFZ1ZS5qcyBmb3IgZGlzcGF0Y2ggdGhlIGFjdGlvblxuICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lc3BhY2VdIC0gTW9kdWxlJ3MgbmFtZXNwYWNlXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gYWN0aW9ucyAjIE9iamVjdCdzIGl0ZW0gY2FuIGJlIGEgZnVuY3Rpb24gd2hpY2ggYWNjZXB0IGBkaXNwYXRjaGAgZnVuY3Rpb24gYXMgdGhlIGZpcnN0IHBhcmFtLCBpdCBjYW4gYWNjZXB0IGFudGhvciBwYXJhbXMuIFlvdSBjYW4gZGlzcGF0Y2ggYWN0aW9uIGFuZCBkbyBhbnkgb3RoZXIgdGhpbmdzIGluIHRoaXMgZnVuY3Rpb24uIHNwZWNpYWxseSwgWW91IG5lZWQgdG8gcGFzcyBhbnRob3IgcGFyYW1zIGZyb20gdGhlIG1hcHBlZCBmdW5jdGlvbi5cbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIG1hcEFjdGlvbnMgPSBub3JtYWxpemVOYW1lc3BhY2UoZnVuY3Rpb24gKG5hbWVzcGFjZSwgYWN0aW9ucykge1xuICB2YXIgcmVzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFpc1ZhbGlkTWFwKGFjdGlvbnMpKSB7XG4gICAgY29uc29sZS5lcnJvcignW3Z1ZXhdIG1hcEFjdGlvbnM6IG1hcHBlciBwYXJhbWV0ZXIgbXVzdCBiZSBlaXRoZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0Jyk7XG4gIH1cbiAgbm9ybWFsaXplTWFwKGFjdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBrZXkgPSByZWYua2V5O1xuICAgIHZhciB2YWwgPSByZWYudmFsO1xuXG4gICAgcmVzW2tleV0gPSBmdW5jdGlvbiBtYXBwZWRBY3Rpb24gKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIC8vIGdldCBkaXNwYXRjaCBmdW5jdGlvbiBmcm9tIHN0b3JlXG4gICAgICB2YXIgZGlzcGF0Y2ggPSB0aGlzLiRzdG9yZS5kaXNwYXRjaDtcbiAgICAgIGlmIChuYW1lc3BhY2UpIHtcbiAgICAgICAgdmFyIG1vZHVsZSA9IGdldE1vZHVsZUJ5TmFtZXNwYWNlKHRoaXMuJHN0b3JlLCAnbWFwQWN0aW9ucycsIG5hbWVzcGFjZSk7XG4gICAgICAgIGlmICghbW9kdWxlKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgZGlzcGF0Y2ggPSBtb2R1bGUuY29udGV4dC5kaXNwYXRjaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdmFsLmFwcGx5KHRoaXMsIFtkaXNwYXRjaF0uY29uY2F0KGFyZ3MpKVxuICAgICAgICA6IGRpc3BhdGNoLmFwcGx5KHRoaXMuJHN0b3JlLCBbdmFsXS5jb25jYXQoYXJncykpXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vKipcbiAqIFJlYmluZGluZyBuYW1lc3BhY2UgcGFyYW0gZm9yIG1hcFhYWCBmdW5jdGlvbiBpbiBzcGVjaWFsIHNjb3BlZCwgYW5kIHJldHVybiB0aGVtIGJ5IHNpbXBsZSBvYmplY3RcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xudmFyIGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSkgeyByZXR1cm4gKHtcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycy5iaW5kKG51bGwsIG5hbWVzcGFjZSksXG4gIG1hcE11dGF0aW9uczogbWFwTXV0YXRpb25zLmJpbmQobnVsbCwgbmFtZXNwYWNlKSxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucy5iaW5kKG51bGwsIG5hbWVzcGFjZSlcbn0pOyB9O1xuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgbWFwXG4gKiBub3JtYWxpemVNYXAoWzEsIDIsIDNdKSA9PiBbIHsga2V5OiAxLCB2YWw6IDEgfSwgeyBrZXk6IDIsIHZhbDogMiB9LCB7IGtleTogMywgdmFsOiAzIH0gXVxuICogbm9ybWFsaXplTWFwKHthOiAxLCBiOiAyLCBjOiAzfSkgPT4gWyB7IGtleTogJ2EnLCB2YWw6IDEgfSwgeyBrZXk6ICdiJywgdmFsOiAyIH0sIHsga2V5OiAnYycsIHZhbDogMyB9IF1cbiAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBtYXBcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplTWFwIChtYXApIHtcbiAgaWYgKCFpc1ZhbGlkTWFwKG1hcCkpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuICByZXR1cm4gQXJyYXkuaXNBcnJheShtYXApXG4gICAgPyBtYXAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh7IGtleToga2V5LCB2YWw6IGtleSB9KTsgfSlcbiAgICA6IE9iamVjdC5rZXlzKG1hcCkubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICh7IGtleToga2V5LCB2YWw6IG1hcFtrZXldIH0pOyB9KVxufVxuXG4vKipcbiAqIFZhbGlkYXRlIHdoZXRoZXIgZ2l2ZW4gbWFwIGlzIHZhbGlkIG9yIG5vdFxuICogQHBhcmFtIHsqfSBtYXBcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRNYXAgKG1hcCkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShtYXApIHx8IGlzT2JqZWN0KG1hcClcbn1cblxuLyoqXG4gKiBSZXR1cm4gYSBmdW5jdGlvbiBleHBlY3QgdHdvIHBhcmFtIGNvbnRhaW5zIG5hbWVzcGFjZSBhbmQgbWFwLiBpdCB3aWxsIG5vcm1hbGl6ZSB0aGUgbmFtZXNwYWNlIGFuZCB0aGVuIHRoZSBwYXJhbSdzIGZ1bmN0aW9uIHdpbGwgaGFuZGxlIHRoZSBuZXcgbmFtZXNwYWNlIGFuZCB0aGUgbWFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lc3BhY2UgKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobmFtZXNwYWNlLCBtYXApIHtcbiAgICBpZiAodHlwZW9mIG5hbWVzcGFjZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG1hcCA9IG5hbWVzcGFjZTtcbiAgICAgIG5hbWVzcGFjZSA9ICcnO1xuICAgIH0gZWxzZSBpZiAobmFtZXNwYWNlLmNoYXJBdChuYW1lc3BhY2UubGVuZ3RoIC0gMSkgIT09ICcvJykge1xuICAgICAgbmFtZXNwYWNlICs9ICcvJztcbiAgICB9XG4gICAgcmV0dXJuIGZuKG5hbWVzcGFjZSwgbWFwKVxuICB9XG59XG5cbi8qKlxuICogU2VhcmNoIGEgc3BlY2lhbCBtb2R1bGUgZnJvbSBzdG9yZSBieSBuYW1lc3BhY2UuIGlmIG1vZHVsZSBub3QgZXhpc3QsIHByaW50IGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RvcmVcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWxwZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gZ2V0TW9kdWxlQnlOYW1lc3BhY2UgKHN0b3JlLCBoZWxwZXIsIG5hbWVzcGFjZSkge1xuICB2YXIgbW9kdWxlID0gc3RvcmUuX21vZHVsZXNOYW1lc3BhY2VNYXBbbmFtZXNwYWNlXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1vZHVsZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoKFwiW3Z1ZXhdIG1vZHVsZSBuYW1lc3BhY2Ugbm90IGZvdW5kIGluIFwiICsgaGVscGVyICsgXCIoKTogXCIgKyBuYW1lc3BhY2UpKTtcbiAgfVxuICByZXR1cm4gbW9kdWxlXG59XG5cbnZhciBpbmRleF9lc20gPSB7XG4gIFN0b3JlOiBTdG9yZSxcbiAgaW5zdGFsbDogaW5zdGFsbCxcbiAgdmVyc2lvbjogJzMuMS4yJyxcbiAgbWFwU3RhdGU6IG1hcFN0YXRlLFxuICBtYXBNdXRhdGlvbnM6IG1hcE11dGF0aW9ucyxcbiAgbWFwR2V0dGVyczogbWFwR2V0dGVycyxcbiAgbWFwQWN0aW9uczogbWFwQWN0aW9ucyxcbiAgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnM6IGNyZWF0ZU5hbWVzcGFjZWRIZWxwZXJzXG59O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleF9lc207XG5leHBvcnQgeyBTdG9yZSwgaW5zdGFsbCwgbWFwU3RhdGUsIG1hcE11dGF0aW9ucywgbWFwR2V0dGVycywgbWFwQWN0aW9ucywgY3JlYXRlTmFtZXNwYWNlZEhlbHBlcnMgfTtcbiIsIi8qXHJcbiAqIOi9rOaNouS4uuWwj+WGmVxyXG4gKiAgQHBhcmFtIHN0ciDlrZfnrKbkuLJcclxuICovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RyVG9Mb3dlcihzdHIpIHtcclxuICBpZiAoc3RyKSB7XHJcbiAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKClcclxuICB9XHJcbiAgcmV0dXJuIHN0clxyXG59XHJcblxyXG4vKlxyXG4gKiDovazmjaLkuLrlpKflhplcclxuICogIEBwYXJhbSBzdHIg5a2X56ym5LiyXHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0clRvVXBwZXIoc3RyKSB7XHJcbiAgaWYgKHN0cikge1xyXG4gICAgcmV0dXJuIHN0ci50b1VwcGVyQ2FzZSgpXHJcbiAgfVxyXG4gIHJldHVybiBzdHJcclxufVxyXG5cclxuLypcclxuICog5qC55o2u5byA5aeL5a2X56ym5Liy5oiq5Y+W5a2Q5a2X56ym5LiyXHJcbiAqICBAcGFyYW0gc3RyIOWtl+espuS4slxyXG4gKiBAcGFyYW0gc3RhcnRTdHIg5byA5aeL5a2X56ym5Liy77yM5b+F6aG75ZSv5LiAXHJcbiAqL1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0clN1YlN0YXJ0KHN0ciwgc3RyYXRTdHIpIHtcclxuICBpZiAoc3RyICYmIHN0cmF0U3RyKSB7XHJcbiAgICB2YXIgc3RhcnQgPSBzdHIuaW5kZXhPZihzdHJhdFN0cilcclxuICAgIGlmIChzdGFydCA+IC0xKSB7XHJcbiAgICAgIHZhciByZXN1bHQgPSBzdHIuc3Vic3RyaW5nKDAsIHN0YXJ0KVxyXG4gICAgICByZXR1cm4gcmVzdWx0XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBzdHJcclxufVxyXG5cclxuLypcclxuICog5Yik5pat5a2X56ym5Liy5piv5ZCm5Li656m65oiWbnVsbCx1bmRlZmluZWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzdHJJc0VtcHR5KHN0cikge1xyXG4gIGlmICghc3RyKSB7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuICBpZiAoc3RyID09PSAnbnVsbCcgfHwgc3RyID09PSAndW5kZWZpbmVkJyB8fCBzdHIgPT09ICcnKSB7XHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuICByZXR1cm4gZmFsc2VcclxufVxyXG5cclxuLypcclxuICog6aaW5a2X5q+N5bCP5YaZXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc3RyRmlyc3RMb3dlcihzdHIpIHtcclxuICB2YXIgc3RyVGVtcCA9ICcnIC8vIOaWsOWtl+espuS4slxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICBzdHJUZW1wICs9IHN0cltpXS50b0xvd2VyQ2FzZSgpIC8vIOesrOS4gOS4qlxyXG4gICAgICBjb250aW51ZVxyXG4gICAgfVxyXG4gICAgaWYgKHN0cltpXSA9PT0gJyAnICYmIGkgPCBzdHIubGVuZ3RoIC0gMSkge1xyXG4gICAgICAvLyDnqbrmoLzlkI5cclxuICAgICAgc3RyVGVtcCArPSAnICdcclxuICAgICAgc3RyVGVtcCArPSBzdHJbaSArIDFdLnRvTG93ZXJDYXNlKClcclxuICAgICAgaSsrXHJcbiAgICAgIGNvbnRpbnVlXHJcbiAgICB9XHJcbiAgICBzdHJUZW1wICs9IHN0cltpXVxyXG4gIH1cclxuICByZXR1cm4gc3RyVGVtcFxyXG59XHJcblxyXG4vLyDliKTmlq3lrZfnrKbkuLLplb/luqZcclxuZXhwb3J0IGZ1bmN0aW9uIHN0ckxlbmd0aChzdHIpIHtcclxuICBpZiAodGhpcy5zdHJJc0VtcHR5KHN0cikpIHtcclxuICAgIHJldHVybiAwXHJcbiAgfVxyXG4gIHZhciBsZW4gPSBzdHIubGVuZ3RoXHJcbiAgcmV0dXJuIGxlblxyXG59XHJcbiIsImltcG9ydCBjb25maWcgZnJvbSAnQC9zZXJ2aWNlL2NvbmZpZydcclxuaW1wb3J0IGFsYSBmcm9tICdAL3NlcnZpY2UvYWxhJ1xyXG5cclxuLy8g5b2T5YmN56ef5oi3XHJcbmV4cG9ydCBmdW5jdGlvbiB0ZW5hbnQoKSB7XHJcbiAgaWYgKGNvbmZpZy5pc1RlbmFudCA9PT0gdHJ1ZSkge1xyXG4gICAgdmFyIHRlbmFudCA9IHRoaXMudnVleExvY2FsR2V0KCd0ZW5hbnQnKVxyXG4gICAgcmV0dXJuIHRlbmFudFxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gJydcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGFsYSBmcm9tICdAL3NlcnZpY2UvYWxhJ1xyXG5cclxuLy8g6I635Y+W5b2T5YmN6aG16Z2i5L+h5oGvXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0aGVtZVBhZ2Uob3B0aW9uLCBhbGxQYWdlcykge1xyXG4gIHZhciBwYXRoID0gYWxhLnJvdXRlUGF0aChvcHRpb24pXHJcbiAgdmFyIHBhZ2VJbmZvID0gYXdhaXQgZ2V0UGFnZUluZm8ocGF0aCwgYWxsUGFnZXMpXHJcbiAgdmFyIHdpZGdldHMgPSBbXVxyXG4gIGlmIChwYWdlSW5mbyAhPT0gdW5kZWZpbmVkICYmIHBhZ2VJbmZvICE9PSBudWxsICYmIHBhZ2VJbmZvLndpZGdldHMpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFnZUluZm8ud2lkZ2V0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgd2lkZ2V0SXRlbSA9IHBhZ2VJbmZvLndpZGdldHNbaV1cclxuXHJcbiAgICAgIHdpZGdldEl0ZW0ucm91dGUgPSBvcHRpb25cclxuICAgICAgd2lkZ2V0SXRlbS5jbGllbnQgPSBhbGEuY2xpZW50KClcclxuICAgICAgd2lkZ2V0cy5wdXNoKHdpZGdldEl0ZW0pXHJcbiAgICB9XHJcbiAgICBwYWdlSW5mby53aWRnZXRzID0gd2lkZ2V0c1xyXG4gIH1cclxuICBwYWdlSW5mbyA9IGZpbGVyUGFnZUluZm8ocGFnZUluZm8pXHJcbiAgcmV0dXJuIHBhZ2VJbmZvXHJcbn1cclxuXHJcbi8vIOaooeWdl+S/oeaBr1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdGhlbWVXaWRnZXQod2lkZ2V0KSB7XHJcbiAgdmFyIHBhcmFtZXRlciA9IHtcclxuICAgIGFwaVVybDogJycsXHJcbiAgICB2YWx1ZTogbnVsbFxyXG4gIH1cclxuICBpZiAod2lkZ2V0ICE9PSBudWxsICYmIHdpZGdldCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBwYXJhbWV0ZXIuYXBpVXJsID0gd2lkZ2V0LmFwaVVybFxyXG4gICAgcGFyYW1ldGVyLnZhbHVlID0gd2lkZ2V0LnZhbHVlXHJcbiAgfVxyXG4gIHJldHVybiBwYXJhbWV0ZXJcclxufVxyXG5cclxuLy8g6L+H5ruk6aG16Z2i5L+h5oGvXHJcbmZ1bmN0aW9uIGZpbGVyUGFnZUluZm8ocGFnZUluZm8pIHtcclxuICBpZiAocGFnZUluZm8pIHtcclxuICAgIHBhZ2VJbmZvLndpZGdldHMgPSBmaWx0ZXJXaWRnZXRzKHBhZ2VJbmZvLndpZGdldHMpXHJcbiAgICB2YXIgc2V0dGluZyA9IHBhZ2VJbmZvLnNldHRpbmdcclxuICAgIC8vIOeZu+W9leS/oeaBr+WIpOaWrVxyXG4gICAgaWYgKHNldHRpbmcuaXNMb2dpbiAhPT0gZmFsc2UpIHtcclxuICAgICAgaWYgKCFhbGEudXNlcklzTG9naW4oKSkge1xyXG4gICAgICAgIGFsYS51c2VyQ2hlY2tMb2dpbigpXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYWxhLnVzZXJDaGVja0xvZ2luKClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcGFnZUluZm9cclxufVxyXG5cclxuLy8g5aSE55CGd2lkZ2V0c1xyXG5mdW5jdGlvbiBmaWx0ZXJXaWRnZXRzKHdpZGdldHMpIHtcclxuICBpZiAod2lkZ2V0cyA9PT0gbnVsbCkge1xyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcbiAgd2lkZ2V0cy5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgZWxlbWVudC5ib3JkZXIgPSBudWxsXHJcbiAgICBlbGVtZW50LmJvcmRlckNsYXNzID0gbnVsbFxyXG4gICAgaWYgKCFhbGEuc3RySXNFbXB0eShlbGVtZW50LnN0eWxlKSkge1xyXG4gICAgICBpZiAoIWFsYS5zdHJJc0VtcHR5KGVsZW1lbnQuc3R5bGUuYm9yZGVyKSkge1xyXG4gICAgICAgIHZhciBzdHlsZUJvcmRlciA9IEpTT04ucGFyc2UoZWxlbWVudC5zdHlsZS5ib3JkZXIpXHJcbiAgICAgICAgZWxlbWVudC5ib3JkZXIgPSBzdHlsZUJvcmRlclxyXG4gICAgICAgIC8vIGVsZW1lbnQuYm9yZGVyQ2xhc3MgPSAnd2lkZ2V0X2JvcmRlciAnICsgc3R5bGVCb3JkZXIubmFtZSArICcgJ1xyXG4gICAgICAgIGVsZW1lbnQuYm9yZGVyQ2xhc3MgPSBzdHlsZUJvcmRlci5jbGFzc1xyXG4gICAgICAgIGlmICghYWxhLnN0cklzRW1wdHkoc3R5bGVCb3JkZXIuY29sb3JOYW1lKSkge1xyXG4gICAgICAgICAgZWxlbWVudC5ib3JkZXJDbGFzcyArPSBzdHlsZUJvcmRlci5jb2xvck5hbWUgKyAnICdcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChhbGEuc3RySXNFbXB0eShlbGVtZW50LmxheW91dCkpIHtcclxuICAgICAgZWxlbWVudC5sYXlvdXQgPSBudWxsXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIWFsYS5zdHJJc0VtcHR5KGVsZW1lbnQudmFsdWUpKSB7XHJcbiAgICAgICAgdmFyIGxheW91dCA9IEpTT04ucGFyc2UoZWxlbWVudC52YWx1ZSlcclxuICAgICAgICBpZiAoIWFsYS5zdHJJc0VtcHR5KGxheW91dC5vcHRpb25zKSkge1xyXG4gICAgICAgICAgZWxlbWVudC5vcHRpb25zID0gSlNPTi5wYXJzZShsYXlvdXQub3B0aW9ucylcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxlbWVudC5vcHRpb25zID0gSlNPTi5wYXJzZShsYXlvdXQub3B0aW9ucylcclxuICAgICAgICBlbGVtZW50LmNvbHVtbnMgPSBsYXlvdXQuY29sdW1uc1xyXG4gICAgICAgIGlmICghYWxhLnN0cklzRW1wdHkoZWxlbWVudC5jb2x1bW5zKSkge1xyXG4gICAgICAgICAgZWxlbWVudC5jb2x1bW5zLmZvckVhY2goY29sID0+IHtcclxuICAgICAgICAgICAgY29sLm9wdGlvbiA9IEpTT04ucGFyc2UoY29sLm9wdGlvbilcclxuICAgICAgICAgICAgY29sLndpZGdldHMgPSB0aGlzLmZpbHRlcldpZGdldHMoY29sLndpZGdldHMpXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBlbGVtZW50LmNvbHVtbnMgPSBbXVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbGVtZW50LnZhbHVlID0gbnVsbFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoZWxlbWVudC52YWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGVsZW1lbnQudmFsdWUgPSBKU09OLnBhcnNlKGVsZW1lbnQudmFsdWUpXHJcbiAgICAgIH0gY2F0Y2ggKGVycikge31cclxuICAgIH1cclxuICB9KVxyXG4gIHJldHVybiB3aWRnZXRzXHJcbn1cclxuXHJcbi8vIOW9k+WJjeiuv+mXrueahOmhtemdolxyXG5hc3luYyBmdW5jdGlvbiBnZXRQYWdlSW5mbyhwYXRoLCBhbGxQYWdlSW5mbykge1xyXG4gIGlmICghYWxsUGFnZUluZm8pIHtcclxuICAgIGFsbFBhZ2VJbmZvID0gYXdhaXQgdGhlbWVBbGxQYWdlKClcclxuICB9XHJcbiAgdmFyIGZpbmRQYWdlSW5mbyA9IG51bGxcclxuICBpZiAoYWxsUGFnZUluZm8gIT09IHVuZGVmaW5lZCAmJiBhbGxQYWdlSW5mbyAhPSBudWxsKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbFBhZ2VJbmZvLnBhZ2VMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHZhciBlbGVtZW50ID0gYWxsUGFnZUluZm8ucGFnZUxpc3RbaV1cclxuICAgICAgaWYgKGVsZW1lbnQucGF0aCA9PT0gcGF0aCkge1xyXG4gICAgICAgIGZpbmRQYWdlSW5mbyA9IGVsZW1lbnRcclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBmaW5kUGFnZUluZm9cclxufVxyXG4vLyDmiYDmnInpobXpnaJcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRoZW1lQWxsUGFnZSgpIHtcclxuICB2YXIgcGFyYSA9IHtcclxuICAgIGNsaWVudFR5cGU6ICdXYXBINScsXHJcbiAgICBwYXRoOiAnL2luZGV4J1xyXG4gIH1cclxuICBpZiAoYWxhLmJhc2VDb25maWcoKS50aGVtZUlkKSB7XHJcbiAgICBwYXJhID0ge1xyXG4gICAgICAuLi5wYXJhLFxyXG4gICAgICB0aGVtZUlkOiBhbGEuYmFzZUNvbmZpZygpLnRoZW1lSWRcclxuICAgIH1cclxuICB9XHJcbiAgdmFyIGFsbFBhZ2VDYWNoZUtleSA9ICdpbml0X2FsbFBhZ2VJbmZvXycgKyBhbGEuYmFzZUNvbmZpZygpLnZlcnNpb25cclxuICB2YXIgYWxsUGFnZUluZm8gPSBhbGEubG9jYWxHZXQoYWxsUGFnZUNhY2hlS2V5KVxyXG4gIHZhciBpc1JlcXVlc3QgPSB0cnVlIC8vIOaYr+WQpuivt+axglxyXG4gIGlmIChhbGxQYWdlSW5mbykge1xyXG4gICAgbGV0IHRpbWVzdGFtcCA9IE1hdGgucm91bmQobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKVxyXG4gICAgaWYgKGFsbFBhZ2VJbmZvLmxhc3RVcGRhdGUgPiB0aW1lc3RhbXApIHtcclxuICAgICAgaXNSZXF1ZXN0ID0gZmFsc2VcclxuICAgIH1cclxuICB9XHJcbiAgaWYgKGlzUmVxdWVzdCkge1xyXG4gICAgdmFyIGFsbFBhZ2VJbmZvID0gYXdhaXQgYWxhLmh0dHBHZXQoJ0FwaS9UaGVtZS9HZXRBbGxDbGllbnRQYWdlcycsIHBhcmEpXHJcbiAgICBhbGEudnVleFNldChhbGxQYWdlQ2FjaGVLZXksIGFsbFBhZ2VJbmZvKVxyXG4gICAgYWxhLmxvY2FsU2V0KGFsbFBhZ2VDYWNoZUtleSwgYWxsUGFnZUluZm8pXHJcbiAgfVxyXG4gIHJldHVybiBhbGxQYWdlSW5mb1xyXG59XHJcbiIsIi8qXHJcbiAqIOaXtumXtOS4uuWImuWImuOAgeWHoOWIhumSn+WJjeOAgeWHoOWwj+aXtuWJjeOAgeWHoOWkqeWJjVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVBZ28odGltZURhdGUpIHtcclxuICB2YXIgZGF0ZVRpbWVTdGFtcCA9IHRvVGltZVNwYW4odGltZURhdGUpXHJcbiAgdmFyIG1pbnV0ZSA9IDEwMDAgKiA2MFxyXG4gIHZhciBob3VyID0gbWludXRlICogNjBcclxuICB2YXIgZGF5ID0gaG91ciAqIDI0XHJcbiAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpXHJcbiAgdmFyIGRpZmZWYWx1ZSA9IG5vdyAtIGRhdGVUaW1lU3RhbXBcclxuICBpZiAoZGlmZlZhbHVlIDwgMCkge1xyXG4gICAgcmV0dXJuIHRpbWVEYXRlXHJcbiAgfVxyXG4gIHZhciBtaW5DID0gZGlmZlZhbHVlIC8gbWludXRlXHJcbiAgdmFyIGhvdXJDID0gZGlmZlZhbHVlIC8gaG91clxyXG4gIHZhciBkYXlDID0gZGlmZlZhbHVlIC8gZGF5XHJcbiAgaWYgKGRheUMgPj0gMSAmJiBkYXlDIDw9IDYpIHtcclxuICAgIHJldHVybiAnICcgKyBwYXJzZUludChkYXlDKSArICflpKnliY0nXHJcbiAgfSBlbHNlIGlmIChob3VyQyA+PSAxICYmIGhvdXJDIDw9IDIzKSB7XHJcbiAgICByZXR1cm4gJyAnICsgcGFyc2VJbnQoaG91ckMpICsgJ+Wwj+aXtuWJjSdcclxuICB9IGVsc2UgaWYgKG1pbkMgPj0gMSAmJiBtaW5DIDw9IDU5KSB7XHJcbiAgICByZXR1cm4gJyAnICsgcGFyc2VJbnQobWluQykgKyAn5YiG6ZKf5YmNJ1xyXG4gIH0gZWxzZSBpZiAoZGlmZlZhbHVlID49IDAgJiYgZGlmZlZhbHVlIDw9IG1pbnV0ZSkge1xyXG4gICAgcmV0dXJuICfliJrliJonXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiB0aW1lRGF0ZVxyXG4gIH1cclxufVxyXG5cclxuLy8g5bCG5pe26Ze06L2s5Li65pe26Ze05oizXHJcbmZ1bmN0aW9uIHRvVGltZVNwYW4odGltZURhdGUpIHtcclxuICB2YXIgdGltZSA9IG5ldyBEYXRlKHRpbWVEYXRlKS5nZXRUaW1lKClcclxuICByZXR1cm4gdGltZVxyXG59IiwiaW1wb3J0IGFsYSBmcm9tICdAL3NlcnZpY2UvYWxhJ1xyXG4vKlxyXG4gKiDpobXpnaLot6/nlLHot7PovaxcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0byh1cmwpIHtcclxuICBpZiAodXJsID09PSAnLycgfHwgdXJsID09PSAnL2luZGV4JyB8fCB1cmwgPT09ICdpbmRleCcpIHtcclxuICAgIHRvSG9tZSgpXHJcbiAgfSBlbHNlIHtcclxuICAgIHVybCA9IGNvbnZlcnRVcmwodXJsKVxyXG4gICAgaWYgKHVybC5pbmRleE9mKCdwYWdlcy90YWJiYXInKSA+IC0xKSB7XHJcbiAgICAgIHVuaS5zd2l0Y2hUYWIoe1xyXG4gICAgICAgIHVybDogdXJsXHJcbiAgICAgIH0pXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB1bmkubmF2aWdhdGVUbyh7XHJcbiAgICAgICAgdXJsOiB1cmxcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8qXHJcbiAqICDot7PovazliLDpppbpobVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB0b0hvbWUoKSB7XHJcbiAgdW5pLnN3aXRjaFRhYih7XHJcbiAgICB1cmw6ICcvcGFnZXMvdGFiYmFyL2luZGV4J1xyXG4gIH0pXHJcbn1cclxuXHJcbi8vIHVybOWcqOS4jeWQjOeahOe7iOerr+i9rOaNolxyXG5mdW5jdGlvbiBjb252ZXJ0VXJsKHVybCkge1xyXG4gIC8vIOafpeaJvuWunumZhemhtemdolxyXG4gIHZhciByZWdQYWdlcyA9IHJlYWxQYWdlcygpXHJcbiAgdmFyIHBhdGggPSBhbGEuc3RyU3ViU3RhcnQodXJsLCAnPycpXHJcbiAgaWYgKHBhdGgpIHtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnUGFnZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIGVsZW1lbnQgPSByZWdQYWdlc1tpXVxyXG4gICAgICBpZiAoZWxlbWVudC5pbmRleE9mKHBhdGgpID4gLTEpIHtcclxuICAgICAgICBpZiAodXJsLmluZGV4T2YoJ3BhZ2VzLycpID09PSAtMSkge1xyXG4gICAgICAgICAgdXJsID0gJy9wYWdlcycgKyB1cmxcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHVybFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmICh1cmwuaW5kZXhPZignL3BhZ2VzLycpID4gLTEpIHtcclxuICAgIHJldHVybiB1cmxcclxuICB9XHJcbiAgaWYgKHVybC5pbmRleE9mKCdwYWdlcy8nKSA+IC0xKSB7XHJcbiAgICByZXR1cm4gJy8nICsgdXJsXHJcbiAgfVxyXG4gIGlmICh1cmwuaW5kZXhPZignL3RhYmJhcicpID4gLTEgfHwgdXJsLmluZGV4T2YoJy9wYWdlcy9pbmRleCcpID4gLTEpIHtcclxuICAgIHJldHVybiB1cmxcclxuICB9IGVsc2Uge1xyXG4gICAgdmFyIHNob3dTcGxpdFxyXG4gICAgdmFyIHRvUGFnZXNVcmwgPSB1cmxcclxuICAgIGlmICh1cmwuaW5kZXhPZignPycpID4gLTEpIHtcclxuICAgICAgdG9QYWdlc1VybCA9IHVybC5zcGxpdCgnPycpWzBdXHJcbiAgICAgIHNob3dTcGxpdCA9IHVybC5zcGxpdCgnPycpWzFdXHJcbiAgICB9XHJcbiAgICB2YXIgbGlua1NwbGl0ID0gdG9QYWdlc1VybC5zcGxpdCgnLycpXHJcbiAgICB1cmwgPSAnL3BhZ2VzL2luZGV4P3BhdGg9J1xyXG4gICAgaWYgKGxpbmtTcGxpdC5sZW5ndGggPT09IDIpIHtcclxuICAgICAgdXJsICs9IGxpbmtTcGxpdFsxXVxyXG4gICAgfSBlbHNlIGlmIChsaW5rU3BsaXQubGVuZ3RoID09PSAzKSB7XHJcbiAgICAgIHVybCArPSBsaW5rU3BsaXRbMV0gKyAnXycgKyBsaW5rU3BsaXRbMl1cclxuICAgIH0gZWxzZSBpZiAobGlua1NwbGl0Lmxlbmd0aCA9PT0gNCkge1xyXG4gICAgICB1cmwgKz0gbGlua1NwbGl0WzFdICsgJ18nICsgbGlua1NwbGl0WzJdICsgJ18nICsgbGlua1NwbGl0WzNdXHJcbiAgICB9XHJcbiAgICBpZiAoc2hvd1NwbGl0KSB7XHJcbiAgICAgIHVybCArPSBgJiR7c2hvd1NwbGl0fWBcclxuICAgIH1cclxuICAgIHJldHVybiB1cmxcclxuICB9XHJcbn1cclxuXHJcbi8qXHJcbiAqIOWunumZheWtmOWcqOeahOmhtemdoizlnKhwYWdlc+S4reacieazqOWGjCzpnIDopoHmiYvliqjnu7TmiqRcclxuICovXHJcblxyXG5mdW5jdGlvbiByZWFsUGFnZXMoKSB7XHJcbiAgdmFyIHBhZ2VzID0gWycvcGFnZXMvdXNlci9sb2dpbicsICcvcGFnZXMvdXNlci9yZWcnLCAnL3BhZ2VzL3Byb2R1Y3Qvc2hvdycsICcvcGFnZXMvYWRkcmVzcy9pbmRleCddXHJcbiAgcmV0dXJuIHBhZ2VzXHJcbn1cclxuIiwiZXhwb3J0IGZ1bmN0aW9uIHRvYXN0KG1lc3NhZ2UpIHtcclxuICB1bmkuc2hvd1RvYXN0KHtcclxuICAgIHRpdGxlOiBtZXNzYWdlLFxyXG4gICAgZHVyYXRpb246IDQwMDBcclxuICB9KVxyXG59XHJcblxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiB0b2FzdFN1Y2Nlc3MobWVzc2FnZSkge1xyXG4gIHVuaS5zaG93VG9hc3Qoe1xyXG4gICAgdGl0bGU6IG1lc3NhZ2UsXHJcbiAgICBkdXJhdGlvbjogNDAwMFxyXG4gIH0pXHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHRvYXN0V2FybihtZXNzYWdlKSB7XHJcbiAgdW5pLnNob3dUb2FzdCh7XHJcbiAgICB0aXRsZTogbWVzc2FnZSxcclxuICAgIGljb246ICdub25lJyxcclxuICAgIGR1cmF0aW9uOiA0MDAwXHJcbiAgfSlcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdG9hc3RCb3R0b24obWVzc2FnZSkge1xyXG4gIHVuaS5zaG93VG9hc3Qoe1xyXG4gICAgdGl0bGU6IG1lc3NhZ2UsXHJcbiAgICBkdXJhdGlvbjogNDAwMFxyXG4gIH0pXHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHRvYXN0Q2VudGVyKG1lc3NhZ2UpIHtcclxuICB1bmkuc2hvd1RvYXN0KHtcclxuICAgIHRpdGxlOiBtZXNzYWdlLFxyXG4gICAgZHVyYXRpb246IDQwMDBcclxuICB9KVxyXG59XHJcbiIsIi8qXHJcbiAqIOagueaNrklk6I635Y+Wc3ViTnZ1ZSzlnKjlupXlsYLov5vooYzlsIHoo4XvvIzlh4/lsJHmnaHku7bnvJbor5Hku6PnoIFcclxuICog5Y+q5pSv5oyBYXBwXHJcbiAqIOWKn+iDveWSjCB1bmkuZ2V0U3ViTlZ1ZUJ5SWTkuIDmoLdcclxuICovXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdW5pU3ViTlZ1ZShpZCkge1xyXG5cclxuICByZXR1cm4gdW5pLmdldFN1Yk5WdWVCeUlkKGlkKVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRlc3QoKSB7XHJcbiAgdmFyIHRlc3QgPSB7XHJcbiAgICBuYW1lOiAndGVzdCcsXHJcbiAgICBpZDogJ3NzcydcclxuICB9XHJcbiAgcmV0dXJuIHRlc3RcclxufVxyXG4iLCJpbXBvcnQgYWxhIGZyb20gJ0Avc2VydmljZS9hbGEnXHJcbi8vIOiOt+WPllVSTOS4reeahOWPguaVsFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXJsUXVlcnkobmFtZSkge1xyXG4gIGNvbnN0IHJlZyA9IG5ldyBSZWdFeHAoJyhefCYpJyArIG5hbWUgKyAnPShbXiZdKikoJnwkKScsICdpJylcclxuICBjb25zdCByID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHIoMSkubWF0Y2gocmVnKVxyXG4gIGlmIChyICE9IG51bGwpIHtcclxuICAgIHJldHVybiB1bmVzY2FwZShyWzJdKVxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gJydcclxuICB9XHJcbn1cclxuXHJcbi8vIOiOt+WPllVSTOS4reeahElEXHJcbmV4cG9ydCBmdW5jdGlvbiB1cmxJZChyb3V0ZSkge1xyXG4gIGlmIChyb3V0ZSAhPT0gdW5kZWZpbmVkICYmIHJvdXRlLmlkICE9PSB1bmRlZmluZWQpIHtcclxuICAgIHJldHVybiByb3V0ZS5pZFxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gMFxyXG4gIH1cclxufVxyXG5cclxuLy8g6I635Y+WVVJM5Lit55qE57G7XHJcbmV4cG9ydCBmdW5jdGlvbiB1cmxUeXBlKHJvdXRlKSB7XHJcbiAgaWYgKHJvdXRlKSB7XHJcbiAgICBpZiAocm91dGUuVHlwZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiByb3V0ZS5UeXBlXHJcbiAgICB9XHJcbiAgICBpZiAocm91dGUudHlwZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHJldHVybiByb3V0ZS50eXBlXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vLyDlm77niYflnLDlnYDlpITnkIZcclxuZXhwb3J0IGZ1bmN0aW9uIHVybEltYWdlKHNyYykge1xyXG4gIGlmIChzcmMpIHtcclxuICAgIGlmIChzcmMuaW5kZXhPZignOi8vJykgPT09IC0xKSB7XHJcbiAgICAgIHNyYyA9IGFsYS5ob3N0ICsgc3JjXHJcbiAgICAgIHNyYyA9IHNyYy5yZXBsYWNlKCcvL3d3d3Jvb3QnLCAnL3d3d3Jvb3QnKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3JjID0gc3JjLnJlcGxhY2UoJy8vd3d3cm9vdCcsICcvd3d3cm9vdCcpXHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBzcmNcclxufVxyXG5cclxuLy8g5bCGVVJM6L2s5o2i5oiQ5a+56LGhIOe7k+aenOagvOW8j++8mnRlc3Q9MjImd2V3ZT1xcXdcclxuZXhwb3J0IGZ1bmN0aW9uIHVybFRvUGFyYW1zKGRhdGEpIHtcclxuICBpZiAoIWRhdGEgfHwgIWRhdGEucXVlcnkpIHtcclxuICAgIHJldHVyblxyXG4gIH1cclxuICB2YXIgdGVtcEFyciA9IFtdXHJcbiAgZm9yICh2YXIgaSBpbiBkYXRhLnF1ZXJ5KSB7XHJcbiAgICB2YXIga2V5ID0gaVxyXG4gICAgdmFyIHZhbHVlID0gZGF0YS5xdWVyeVtpXVxyXG4gICAgLy8gZW5jb2RlVVJJQ29tcG9uZW50KGRhdGEucXVlcnlbaV0pXHJcbiAgICB0ZW1wQXJyLnB1c2goa2V5ICsgJz0nICsgdmFsdWUpXHJcbiAgfVxyXG4gIHZhciB1cmxQYXJhbXNTdHIgPSB0ZW1wQXJyLmpvaW4oJyYnKVxyXG4gIGlmICh1cmxQYXJhbXNTdHIpIHtcclxuICAgIHVybFBhcmFtc1N0ciA9ICc/JyArIHVybFBhcmFtc1N0clxyXG4gIH1cclxuICByZXR1cm4gdXJsUGFyYW1zU3RyXHJcbn1cclxuXHJcbi8vIOWwhnVybOWPguaVsOino+aekOS4uuS4gOS4quWvueixoVxyXG5leHBvcnQgZnVuY3Rpb24gdXJsVG9PYmplY3Qocm91dGUpIHtcclxuICBpZiAoYWxhLmNsaWVudCgpID09PSAnV2FwSDUnIHx8IGFsYS5jbGllbnQoKSA9PT0gJ1dlQ2hhdCcpIHtcclxuICAgIHZhciBzdHIgPSByb3V0ZS5mdWxsUGF0aFxyXG4gICAgdmFyIGluZGV4ID0gc3RyLmluZGV4T2YoJz8nLCAwKVxyXG4gICAgc3RyID0gc3RyLnN1YnN0cmluZyhpbmRleCArIDEsIHN0ci5sZW5ndGgpXHJcbiAgICB2YXIgcmVzdWx0ID0ge31cclxuICAgIHZhciB0ZW1wID0gc3RyLnNwbGl0KCcmJylcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGVtcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgdGVtcDIgPSB0ZW1wW2ldLnNwbGl0KCc9JylcclxuICAgICAgcmVzdWx0W3RlbXAyWzBdXSA9IHRlbXAyWzFdXHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIHZhciByZXN1bHQgPSB7fVxyXG4gICAgZm9yICh2YXIgaSBpbiByb3V0ZSkge1xyXG4gICAgICByZXN1bHRbaV0gPSByb3V0ZVtpXVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuIiwiaW1wb3J0IGFsYSBmcm9tICdAL3NlcnZpY2UvYWxhJ1xyXG5pbXBvcnQgY3J5cHRvIGZyb20gJ0Avc2VydmljZS91dGlscy9jcnlwdG8nXHJcblxyXG4vLyDnmbvpmYbnlKjmiLdcclxuZXhwb3J0IGZ1bmN0aW9uIHVzZXIgKCkge1xyXG4gIHJldHVybiB1c2VySW5mbygpXHJcbn1cclxuXHJcbi8vIOeZu+W9lVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXNlckxvZ2luIChtb2RlbCkge1xyXG4gIGlmIChtb2RlbC51c2VybmFtZSA9PT0gJycgfHwgbW9kZWwudXNlcm5hbWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgdW5pLnNob3dUb2FzdCh7XHJcbiAgICAgIGljb246ICdub25lJyxcclxuICAgICAgdGl0bGU6ICfotKblj7fkuI3og73kuLrnqbonXHJcbiAgICB9KVxyXG4gICAgcmV0dXJuXHJcbiAgfVxyXG4gIGlmIChtb2RlbC5wYXNzd29yZCA9PT0gJycgfHwgbW9kZWwucGFzc3dvcmQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgdW5pLnNob3dUb2FzdCh7XHJcbiAgICAgIGljb246ICdub25lJyxcclxuICAgICAgdGl0bGU6ICflr4bnoIHkuI3og73kuLrnqbonXHJcbiAgICB9KVxyXG4gICAgcmV0dXJuXHJcbiAgfVxyXG4gIGlmIChtb2RlbC51c2VybmFtZS5sZW5ndGggPCAzKSB7XHJcbiAgICB1bmkuc2hvd1RvYXN0KHtcclxuICAgICAgaWNvbjogJ25vbmUnLFxyXG4gICAgICB0aXRsZTogJ+i0puWPt+acgOefreS4uiAzIOS4quWtl+espidcclxuICAgIH0pXHJcbiAgICByZXR1cm5cclxuICB9XHJcbiAgaWYgKG1vZGVsLnBhc3N3b3JkLmxlbmd0aCA8IDYpIHtcclxuICAgIHVuaS5zaG93VG9hc3Qoe1xyXG4gICAgICBpY29uOiAnbm9uZScsXHJcbiAgICAgIHRpdGxlOiAn5a+G56CB5pyA55+t5Li65YWt5L2N5pWwJ1xyXG4gICAgfSlcclxuICAgIHJldHVyblxyXG4gIH1cclxuICBhbGEubG9jYWxSZW1vdmUodXNlcktleSgpKVxyXG4gIGlmIChhbGEubG9jYWxHZXQoJ3dlY2hhdF9vcGVuSWQnKSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBtb2RlbC5vcGVuSWQgPSBhbGEubG9jYWxHZXQoJ3dlY2hhdF9vcGVuSWQnKVxyXG4gIH1cclxuICB2YXIgcmVzcG9uc2UgPSBhd2FpdCBhbGEuaHR0cFBvc3QoJ0FwaS9NZW1iZXIvTG9naW4nLCBtb2RlbClcclxuICBpZiAocmVzcG9uc2UpIHtcclxuICAgIHZhciB1c2VySW5mbyA9IGNyeXB0by5lbmNyeXB0KFxyXG4gICAgICBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgdXNlck5hbWU6IG1vZGVsLnVzZXJuYW1lLFxyXG4gICAgICAgIHBhc3N3b3JkOiBtb2RlbC5wYXNzd29yZFxyXG4gICAgICB9KVxyXG4gICAgKVxyXG4gICAgYWxhLmxvY2FsU2V0KCd1c2VyX2luZm8nLCB1c2VySW5mbylcclxuICAgIGlmIChyZXNwb25zZSkge1xyXG4gICAgICBzZXRVc2VyKHJlc3BvbnNlKVxyXG4gICAgICBhbGEudG9hc3RTdWNjZXNzKCfnmbvlvZXmiJDlip8nKVxyXG4gICAgICB2YXIgb3BlbklkID0gcmVzcG9uc2Uub3BlbklkXHJcbiAgICAgIGlmIChhbGEuc3RyTGVuZ3RoKG9wZW5JZCkgPj0gMTIpIHtcclxuICAgICAgICBhbGEubG9jYWxTZXQoJ3dlY2hhdF9vcGVuSWQnLCBvcGVuSWQpXHJcbiAgICAgIH1cclxuICAgICAgdXNlckxvZ2luQWZ0ZXJUbygpXHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIGFsYS50b2FzdFdhcm4ocmVzcG9uc2UubWVzc2FnZSlcclxuICB9XHJcbiAgYWxhLmxvY2FsUmVtb3ZlKCd3ZWNoYXRfbG9naW5jb3VudCcpXHJcbn1cclxuLy8g5rOo5YaMXHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXNlclJlZyAobW9kZWwpIHtcclxuICBpZiAoIWFsYS5zdHJJc0VtcHR5KG1vZGVsLnBhc3N3b3JkKSAmJiBtb2RlbC5wYXNzd29yZC5sZW5ndGggPCA2KSB7XHJcbiAgICB1bmkuc2hvd1RvYXN0KHtcclxuICAgICAgaWNvbjogJ25vbmUnLFxyXG4gICAgICB0aXRsZTogJ+WvhueggeacgOefreS4uuWFreS9jeaVsCdcclxuICAgIH0pXHJcbiAgfVxyXG4gIGlmIChhbGEubG9jYWxHZXQoJ3dlY2hhdF9vcGVuSWQnKSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICBtb2RlbC5vcGVuSWQgPSBhbGEubG9jYWxHZXQoJ3dlY2hhdF9vcGVuSWQnKVxyXG4gIH1cclxuICB1bmkuc2hvd0xvYWRpbmcoe1xyXG4gICAgdGl0bGU6ICfliqDovb3kuK0uLidcclxuICB9KVxyXG4gIHZhciByZXNwb25zZSA9IGF3YWl0IGFsYS5odHRwUG9zdCgnYXBpL01lbWJlci9SZWcnLCBtb2RlbClcclxuICBpZiAocmVzcG9uc2UpIHtcclxuICAgIGFsYS50b2FzdFN1Y2Nlc3MoJ+azqOWGjOaIkOWKnycpXHJcbiAgICBzZXRVc2VyKHJlc3BvbnNlKVxyXG4gICAgdW5pLmhpZGVMb2FkaW5nKClcclxuICAgIGFsYS50bygnLycpXHJcbiAgfSBlbHNlIHtcclxuICAgIGFsYS50b2FzdFdhcm4ocmVzcG9uc2UubWVzc2FnZSlcclxuICB9XHJcbn1cclxuXHJcbi8vIOmAgOWHuueZu+W9lVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdXNlckxvZ291dCAoKSB7XHJcbiAgdW5pLnNob3dNb2RhbCh7XHJcbiAgICB0aXRsZTogJ+mAgOWHuueZu+W9lScsXHJcbiAgICBzaG93Q2FuY2VsOiB0cnVlLFxyXG4gICAgY29udGVudDogJ+aCqOehruWumuimgeehruiupOmAgOWHuueZu+W9lT8nLFxyXG4gICAgc3VjY2VzczogZnVuY3Rpb24gKHJlcykge1xyXG4gICAgICBpZiAocmVzLmNvbmZpcm0pIHtcclxuICAgICAgICBhbGEubG9jYWxSZW1vdmUodXNlcktleSgpKVxyXG4gICAgICAgIGFsYS5sb2NhbFJlbW92ZSgndXNlcl9pbmZvJylcclxuICAgICAgICBhbGEubG9jYWxSZW1vdmUoJ3VzZXJfdG9rZW4nKVxyXG4gICAgICAgIGFsYS5sb2NhbFJlbW92ZSgnc2hvcF9vcmRlcl9zZWxlY3RfYWRkcmVzcycpXHJcbiAgICAgICAgYWxhLnZ1ZXhTZXQoJ2xvZ2luVXNlcicsIG51bGwpXHJcbiAgICAgICAgYWxhLnRvKCcvcGFnZXMvdGFiYmFyL2luZGV4JylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pXHJcbn1cclxuXHJcbi8vIOaYr+WQpueZu+W9lVxyXG5leHBvcnQgZnVuY3Rpb24gdXNlcklzTG9naW4gKCkge1xyXG4gIHZhciB1c2VyID0gdXNlckluZm8oKVxyXG4gIGlmICghdXNlcikge1xyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiB0cnVlXHJcbiAgfVxyXG59XHJcbi8vIOeUqOaIt0lkXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VySWQgKCkge1xyXG4gIHZhciBsb2dpblVzZXIgPSB1c2VyKClcclxuICBpZiAobG9naW5Vc2VyID09PSB1bmRlZmluZWQgfHwgbG9naW5Vc2VyID09PSBudWxsKSB7XHJcbiAgICByZXR1cm4gMFxyXG4gIH1cclxuICByZXR1cm4gbG9naW5Vc2VyLmlkXHJcbn1cclxuLy8g55So5oi35ZCNXHJcbmV4cG9ydCBmdW5jdGlvbiB1c2VyTmFtZSAoKSB7XHJcbiAgaWYgKHVzZXJJbmZvKCkgPT09IG51bGwpIHtcclxuICAgIHJldHVybiAnJ1xyXG4gIH1cclxuICByZXR1cm4gdXNlckluZm8oKS51c2VyTmFtZVxyXG59XHJcbi8vIOW9k+WJjeeZu+W9leeUqOaIt1xyXG5cclxuLy8g5bCG55So5oi35L+h5oGv5YaZ5YWl57yT5a2YXHJcbmZ1bmN0aW9uIHNldFVzZXIgKHVzZXIpIHtcclxuICBpZiAoYWxhLnN0cklzRW1wdHkodXNlcikpIHtcclxuICAgIGFsYS50b2FzdFdhcm4oJ+eUqOaIt+eZu+W9leWksei0pScpXHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxuICBpZiAoYWxhLnN0cklzRW1wdHkodXNlci50b2tlbikpIHtcclxuICAgIGFsYS50b2FzdFdhcm4oJ+eUqOaIt+eZu+W9leWksei0pScpXHJcbiAgICByZXR1cm4gbnVsbFxyXG4gIH1cclxuICBpZiAodXNlci50b2tlbiA8IDEyKSB7XHJcbiAgICBhbGEudG9hc3RXYXJuKCfnlKjmiLfnmbvlvZXlpLHotKUnKVxyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcbiAgdmFyIHVzZXJUb2tlblxyXG4gIHVzZXJUb2tlbiA9IHVzZXIudG9rZW5cclxuICB1bmkuc2V0U3RvcmFnZVN5bmMoJ3VzZXJfdG9rZW4nLCB1c2VyLnRva2VuKVxyXG4gIGFsYS52dWV4U2V0KCdsb2dpblVzZXInLCB1c2VyKVxyXG4gIHZhciB1c2VyVGV4dCA9IGNyeXB0by5lbmNyeXB0KEpTT04uc3RyaW5naWZ5KHVzZXIpLCB1c2VyVG9rZW4pXHJcbiAgdW5pLnNldFN0b3JhZ2VTeW5jKHVzZXJLZXkoKSwgdXNlclRleHQpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHVzZXJLZXkgKCkge1xyXG4gIHJldHVybiBjcnlwdG8udXNlcktleSgpXHJcbn1cclxuXHJcbi8vIOi3s+i9rOWIsOeZu+W9lemhtemdolxyXG5leHBvcnQgZnVuY3Rpb24gdXNlclRvTG9naW5QYWdlICgpIHtcclxuICBhbGEudG9hc3RXYXJuKCfor7flhYjnmbvlvZUnKVxyXG4gIGFsYS50bygnL3VzZXIvbG9naW4nKVxyXG59XHJcblxyXG4vLyDnmbvlvZXmiJDlip/lkI7ot7PovaxcclxuZXhwb3J0IGZ1bmN0aW9uIHVzZXJMb2dpbkFmdGVyVG8gKCkge1xyXG4gIHZhciB1c2VySW5kZXggPSAnL3BhZ2VzL3RhYmJhci91c2VyJ1xyXG4gIGlmICh1c2VySXNMb2dpbigpKSB7XHJcbiAgICBhbGEudG8odXNlckluZGV4KVxyXG4gICAgLy8gLy8g6Lez6L2s5Yiw5LiK5LiA57qn6aG16Z2iXHJcbiAgICAvLyBpZiAoZ2V0Q3VycmVudFBhZ2VzKCkubGVuZ3RoID09PSAxKSB7XHJcbiAgICAvLyBcdC8vIOWmguaenOebtOaOpei/m+WFpeeZu+W9lemhtemdou+8jOi3s+i9rOWIsOS8muWRmOS4reW/g1xyXG4gICAgLy8gXHRhbGEudG8odXNlckluZGV4KVxyXG4gICAgLy8gfSBlbHNlIHtcclxuICAgIC8vIFx0YWxhLmJhY2soKVxyXG4gICAgLy8gfVxyXG4gIH1cclxufVxyXG4vLyDmo4Dmn6XmmK/lkKbpnIDopoHnmbvlvZXvvIzlpoLmnpzpnIDopoHnmbvlvZXliJnot7PovazliLDnmbvlvZXpobXpnaLvvIznmbvlvZXmiJDlip/ku6XlkI7vvIzov5Tlm57liLDkuIrkuIDnuqfpobXpnaJcclxuZXhwb3J0IGZ1bmN0aW9uIHVzZXJDaGVja0xvZ2luIChvcHRpb24pIHtcclxuICBpZiAoIXVzZXJJc0xvZ2luKCkpIHtcclxuICAgIGlmIChvcHRpb24pIHtcclxuICAgICAgdmFyIHVzZXJjb2RlID0gb3B0aW9uLnVzZXJjb2RlXHJcbiAgICAgIGlmICghYWxhLnN0cklzRW1wdHkodXNlcmNvZGUpKSB7XHJcbiAgICAgICAgLy8gdXJsIOWMheWQq+aOqOiNkOeggeaXtui3s+i9rFxyXG4gICAgICAgIGFsYS50bygnL3VzZXIvcmVnJylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdW5pLnNob3dNb2RhbCh7XHJcbiAgICAgIHRpdGxlOiAn5pyq55m75b2VJyxcclxuICAgICAgY29udGVudDogJ+ivt+WFiOeZu+W9lScsXHJcbiAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyZXMpIHtcclxuICAgICAgICBpZiAocmVzLmNvbmZpcm0pIHtcclxuICAgICAgICAgIGFsYS50bygnL3VzZXIvbG9naW4nKVxyXG4gICAgICAgIH0gZWxzZSBpZiAocmVzLmNhbmNlbCkge1xyXG4gICAgICAgICAgdW5pLnJlTGF1bmNoKHtcclxuICAgICAgICAgICAgdXJsOiAnL3BhZ2VzL3RhYmJhci9pbmRleCdcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH1cclxuICByZXR1cm4gdHJ1ZVxyXG59XHJcblxyXG5mdW5jdGlvbiB1c2VySW5mbyAoKSB7XHJcbiAgdmFyIHVzZXIgPSBhbGEudnVleExvY2FsR2V0KCdsb2dpblVzZXInKVxyXG4gIGlmICh1c2VyKSB7XHJcbiAgICByZXR1cm4gdXNlclxyXG4gIH0gZWxzZSB7XHJcbiAgICB2YXIgdXNlciA9IGFsYS5sb2NhbEdldCh1c2VyS2V5KCkpXHJcbiAgICBpZiAodXNlcikge1xyXG4gICAgICB2YXIgbG9naW5Vc2VyID0gSlNPTi5wYXJzZShjcnlwdG8uZGVjcnlwdCh1c2VyLCBhbGEubG9jYWxHZXQoJ3VzZXJfdG9rZW4nKSkpXHJcbiAgICAgIGFsYS52dWV4U2V0KCdsb2dpblVzZXInLCBsb2dpblVzZXIpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICB9XHJcbiAgaWYgKHVzZXIpIHtcclxuICAgIC8vIOWvueWKoOWvhuaVsOaNrui/m+ihjGJhc2U2NOWkhOeQhixcclxuICAgIC8vIOWwhuaVsOaNruWFiGJhc2U2NOi/mOWOn++8jOWGjei9rOS4unV0ZjjmlbDmja4s5YaN6Kej5a+G5pWw5o2uXHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShjcnlwdG8uZGVjcnlwdChjcnlwdG8udXRmOChjcnlwdG8uYmFzZTY0KHVzZXIpKSwgYWxhLmxvY2FsR2V0KCd1c2VyX3Rva2VuJykpKVxyXG4gIH1cclxuICBpZiAoIXVzZXIpIHtcclxuICAgIHJldHVybiBudWxsXHJcbiAgfVxyXG4gIHJldHVybiB1c2VyXHJcbn1cclxuLy8g5b6u5L+h5YWs5LyX5Y+355m75b2VXHJcbmZ1bmN0aW9uIHdlaXhpblB1YmxvZ2luIChkYXRhKSB7XHJcbiAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgdmFyIHNlc3Npb24gPSBkYXRhLnNlc3Npb25cclxuICAgIGlmIChzZXNzaW9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdmFyIG9wZW5JZCA9IGRhdGEuc2Vzc2lvbi5vcGVuaWRcclxuICAgICAgaWYgKG9wZW5JZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgYWxhLmxvY2FsU2V0KCd3ZWNoYXRfb3BlbklkJywgb3BlbklkKVxyXG4gICAgICAgIC8vIOeZu+W9lVxyXG4gICAgICAgIGlmIChkYXRhLnVzZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgLy8gc2V0VXNlcihkYXRhLnVzZXIpXHJcbiAgICAgICAgICAvLyAgYWxhLnRvYXN0U3VjY2Vzcygn55m75b2V5oiQ5YqfJylcclxuICAgICAgICAgIC8vIGFsYS5sb2coZGF0YS51c2VyLnVzZXJuYW1lICsgJ+mAmui/h+W+ruS/oeWFrOS8l+WPt+WPt+eZu+W9leaIkOWKnyxvcGVuSWQnICsgb3BlbklkKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgc3RvcmUgZnJvbSAnQC9zZXJ2aWNlL3N0b3JlJ1xyXG5pbXBvcnQgYWxhIGZyb20gJ0Avc2VydmljZS9hbGEnXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdnVleFNldChuYW1lLCB2YWx1ZSkge1xyXG4gIHN0b3JlLnN0YXRlW25hbWVdID0gdmFsdWVcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gdnVleEdldChuYW1lKSB7XHJcbiAgcmV0dXJuIHN0b3JlLnN0YXRlW25hbWVdXHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHZ1ZXhMb2NhbEdldChuYW1lKSB7XHJcbiAgdmFyIGRhdGEgPSB2dWV4R2V0KG5hbWUpXHJcbiAgaWYgKGRhdGEpIHtcclxuICAgIHJldHVybiBkYXRhXHJcbiAgfSBlbHNlIHtcclxuICAgIGRhdGEgPSBhbGEubG9jYWxHZXQobmFtZSlcclxuICAgIHZ1ZXhTZXQobmFtZSwgZGF0YSlcclxuICAgIHJldHVybiBkYXRhXHJcbiAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB2dWV4TG9jYWxTZXQobmFtZSwgdmFsdWUpIHtcclxuICB2dWV4U2V0KG5hbWUsIHZhbHVlKVxyXG4gIGFsYS5sb2NhbFNldChuYW1lLCB2YWx1ZSlcclxufVxyXG4iLCJ2YXIgbWFwID0ge1xuXHRcIi4vY29tbWVudC5hcGkuanNcIjogNjUsXG5cdFwiLi9mYXZvcml0ZS5hcGkuanNcIjogNjYsXG5cdFwiLi9xcmNvZGUuYXBpLmpzXCI6IDY3LFxuXHRcIi4vc2hhcmUuYXBpLmpzXCI6IDcxLFxuXHRcIi4vdGh1bWJzVXAuYXBpLmpzXCI6IDcyXG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSB7IC8vIGNoZWNrIGZvciBudW1iZXIgb3Igc3RyaW5nXG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBpZDtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSA2NDsiLCJpbXBvcnQgYWxhIGZyb20gJ0Avc2VydmljZS9hbGEuanMnXHJcblxyXG4vKiDor4Torrog5p+Q5Liq5a6e5L2TXHJcbiAqIHR5cGU657G75Z6LIOavlOWmgnByb2R1dCwgb3JkZXLnrYlcclxuICogIGNvbnRlbnQ6IOivhOiuuuWGheWuuVxyXG4gKiAgaWQ6IOW9k+WJjeWunuS9k+eahElk77yM5q+U5aaC5ZWG5ZOBSWTvvIzntKDmnZBJZOetiVxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbW1lbnQodHlwZSwgaWQsIGNvbnRlbnQpIHtcclxuICB2YXIgcGFyYSA9IHtcclxuICAgIGVudGl0eUlkOiBpZCxcclxuICAgIHR5cGU6IHR5cGUsXHJcbiAgICBjb250ZW50OiBjb250ZW50LFxyXG4gICAgdXNlcjogYWxhLnVzZXIoKVxyXG4gIH1cclxuICBpZiAoIXBhcmEudXNlcikge1xyXG4gICAgYWxhLnVzZXJUb0xvZ2luUGFnZSgpXHJcbiAgfVxyXG4gIHZhciByZXN1bHQgPSBhd2FpdCBhbGEuaHR0cFBvc3QoJ0FwaS9Db21tZW50cy9Db21tZW50JywgcGFyYSlcclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbi8qXHJcbiAq6K+E6K665Zue5aSNXHJcbiAqY29tbWVudGlkOuivhOiuumlkXHJcbiAqY29udGVudDrlm57lpI3lhoXlrrlcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21tZW50UmVwbHkodHlwZSwgY29tbWVudGlkLCBjb250ZW50KSB7XHJcbiAgdmFyIHBhcmEgPSB7XHJcbiAgICBjb21tZW50SWQ6IGNvbW1lbnRpZCxcclxuICAgIGNvbnRlbnQ6IGNvbnRlbnQsXHJcbiAgICB1c2VyOiBhbGEudXNlcigpXHJcbiAgfVxyXG4gIGlmICghcGFyYS51c2VyKSB7XHJcbiAgICBhbGEudXNlclRvTG9naW5QYWdlKClcclxuICB9XHJcbiAgdmFyIHJlc3BvbnNlID0gYXdhaXQgYWxhLmh0dHBQb3N0KCdBcGkvQ29tbWVudHMvQ29tbWVudFJlcGx5JywgcGFyYSlcclxuICByZXR1cm4gcmVzcG9uc2VcclxufVxyXG5cclxuLypcclxuICppZDrngrnotZ7nmoTor4TorrppZFxyXG4gKiBpc3VwOnRydWUg54K56LWeLGZhbHNlIOWPlua2iOeCuei1nlxyXG4gKi9cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbW1lbnRVcCh0eXBlLCBpZCwgaXN1cCkge1xyXG4gIHZhciBwYXJhID0ge1xyXG4gICAgZW50aXR5OiBpZCxcclxuICAgIGlzVXA6IGlzdXAsXHJcbiAgICB1c2VyOiBhbGEudXNlcigpXHJcbiAgfVxyXG4gIGlmICghcGFyYS51c2VyKCkpIHtcclxuICAgIGFsYS51c2VyVG9Mb2dpblBhZ2UoKVxyXG4gIH1cclxuICB2YXIgcmVzcG9uc2UgPSBhd2FpdCBhbGEuaHR0cFBvc3QoJ0FwaS9Db21tZW50cy9Db21tZW50VXAnLCBwYXJhKVxyXG4gIHJldHVybiByZXNwb25zZVxyXG59XHJcblxyXG4vKipcclxuICogaWQ654K56LWe55qE5Zue5aSNaWRcclxuICogaXN1cDp0cnVlIOeCuei1niBmYWxzZSDlj5bmtojngrnotZ5cclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjb21tZW50UmVwbHlVcCh0eXBlLCBpZCwgaXN1cCkge1xyXG4gIHZhciBwYXJhID0ge1xyXG4gICAgZW50aXR5OiB0eXBlLFxyXG4gICAgaWQsXHJcbiAgICBpc1VwOiBpc3VwLFxyXG4gICAgdXNlcjogYWxhLnVzZXIoKVxyXG4gIH1cclxuICBpZiAoIXBhcmEudXNlcikge1xyXG4gICAgYWxhLnVzZXJUb0xvZ2luUGFnZSgpXHJcbiAgfVxyXG4gIHZhciByZXNwb25zZSA9IGF3YWl0IGFsYS5odHRwUG9zdCgnQXBpL0NvbW1lbnRzL0NvbW1lbnRSZXBseVVwJywgcGFyYSlcclxuICByZXR1cm4gcmVzcG9uc2VcclxufVxyXG4iLCJpbXBvcnQgYWxhIGZyb20gJ0Avc2VydmljZS9hbGEuanMnXHJcblxyXG4vKlxyXG4gKiDmlLbol4/nirbmgIHvvIzlt7Lnu4/mlLbol4/ov5Tlm550cnVl77yM5rKh5pyJ5pS26JeP6L+U5ZueZmFsc2VcclxuICog55So5p2l5Yik5pat5pS26JeP5oyJ6ZKu55qE5pS26JeP6L2s5oCBXHJcbiAqIEBwYXJhIHR5cGXvvJrlrp7kvZPnsbvlnovvvJrmr5TlpoLllYblk4FQcm9kdWN0LOiuouWNlTpPcmRlciznlKjmiLc6VXNlclxyXG4gKiBAcGFyYSBpZCDlrp7kvZNJZO+8muavlOWmguWVhuWTgUlk77yM6K6i5Y2VSWTnrYlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmYXZvcml0ZVN0YXR1cyh0eXBlLCBpZCkge1xyXG4gIHZhciBwYXJhID0ge1xyXG4gICAga2V5OiB0eXBlLFxyXG4gICAgZW50aXR5SWQ6IGlkLFxyXG4gICAgdXNlcjogYWxhLnVzZXIoKVxyXG4gIH1cclxuICBpZiAoIXBhcmEudXNlcikge1xyXG4gICAgYWxhLnVzZXJUb0xvZ2luUGFnZSgpXHJcbiAgfVxyXG5cclxuICB2YXIgcmVzdWx0ID0gYWxhLmh0dHBHZXQoJ0FwaS9GYXZvcml0ZS9TdGF0dXMnLCBwYXJhKVxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuLypcclxuICog5re75Yqg5pS26JePXHJcbiAqIEBwYXJhIHR5cGXvvJrlrp7kvZPnsbvlnovvvJrmr5TlpoLllYblk4FQcm9kdWN0LOiuouWNlTpPcmRlciznlKjmiLc6VXNlclxyXG4gKiBAcGFyYSBpZCDlrp7kvZNJZO+8muavlOWmguWVhuWTgUlk77yM6K6i5Y2VSWTnrYlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmYXZvcml0ZUFkZCh0eXBlLCBpZCkge1xyXG4gIHZhciBwYXJhID0ge1xyXG4gICAga2V5OiB0eXBlLFxyXG4gICAgZW50aXR5SWQ6IGlkLFxyXG4gICAgdXNlcjogYWxhLnVzZXIoKVxyXG4gIH1cclxuICBpZiAoIXBhcmEudXNlcikge1xyXG4gICAgYWxhLnVzZXJUb0xvZ2luUGFnZSgpXHJcbiAgfVxyXG4gIHZhciByZXN1bHQgPSBhbGEuaHR0cFBvc3QoJ0FwaS9GYXZvcml0ZS9BZGQnLCBwYXJhKVxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG5cclxuLypcclxuICog5Y+W5raI5pS26JePXHJcbiAqIEBwYXJhIHR5cGXvvJrlrp7kvZPnsbvlnovvvJrmr5TlpoLllYblk4FQcm9kdWN0LOiuouWNlTpPcmRlciznlKjmiLc6VXNlclxyXG4gKiBAcGFyYSBpZCDlrp7kvZNJZO+8muavlOWmguWVhuWTgUlk77yM6K6i5Y2VSWTnrYlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmYXZvcml0ZUNhbmNlbCh0eXBlLCBpZCkge1xyXG4gIHZhciBwYXJhID0ge1xyXG4gICAga2V5OiB0eXBlLFxyXG4gICAgZW50aXR5SWQ6IGlkLFxyXG4gICAgdXNlcjogYWxhLnVzZXIoKVxyXG4gIH1cclxuICBpZiAoIXBhcmEudXNlcikge1xyXG4gICAgYWxhLnVzZXJUb0xvZ2luUGFnZSgpXHJcbiAgfVxyXG4gIHZhciByZXN1bHQgPSBhbGEuaHR0cFBvc3QoJ0FwaS9GYXZvcml0ZS9DYW5jZWwnLCBwYXJhKVxyXG4gIHJldHVybiByZXN1bHRcclxufSIsImltcG9ydCBhbGEgZnJvbSAnQC9zZXJ2aWNlL2FsYSdcclxuaW1wb3J0IHBvc3RlciBmcm9tICcuL3FyY29kZS9RUy1TaGFyZVBvc3Rlci5qcydcclxuLypcclxuICog5qC55o2u5LqM57u056CB6K6+572uSWTlkozlrp7kvZPlr7nosaFpZOeUn+aIkOS8muWRmOS4k+WxnuS6jOe7tOeggVxyXG4gKiBpZDog5LqM57u056CB6K6+572uSWRcclxuICogZW50aXR5SWQ6IOWunuS9k+WvueixoWlkLOavlOWmguWVhuWTgUlk77yM5Lya5ZGYSWTvvIzop4bpopFJZO+8jOaVmeeoi0lE77yM5paH56ugSURcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBxcmNvZGUgKGlkLCBlbnRpdHlJZCkge1xyXG4gIHZhciBwYXJhID0ge1xyXG4gICAgaWQ6IGlkLFxyXG4gICAgZW50aXR5SWQ6IGVudGl0eUlkXHJcbiAgfVxyXG4gIHZhciByZXN1bHQgPSBhd2FpdCBhbGEuaHR0cFBvc3QoJ0FwaS9RckNvZGUvR2V0JywgcGFyYSlcclxuICByZXR1cm4gcmVzdWx0XHJcbiAgLy8g5byA5aeL55Sf5oiQ5LqM57u056CBXHJcbiAgLy8gcmV0dXJuIGNyZWF0ZVFyQ29kZShqc1RoaXMsIEpTT04ucGFyc2UocmVzdWx0LnNldHRpbmcpKVxyXG59XHJcblxyXG4vKlxyXG4gKiDmoLnmja7mnI3liqHorr7nva7kv6Hmga/nlJ/miJDkuoznu7TnoIFcclxuICovXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjcmVhdGVRckNvZGUgKGpzVGhpcywgZGF0YSkge1xyXG4gIHZhciBsaXN0ID0gW11cclxuICBkYXRhLnFyY29kZUxpc3QuZm9yRWFjaChlbGVtZW50ID0+IHtcclxuICAgIGlmIChlbGVtZW50LlR5cGUgPT09IDEpIHtcclxuICAgICAgbGlzdC5wdXNoKGRyYXdRckNvZGUoZWxlbWVudCkpXHJcbiAgICB9XHJcbiAgICBpZiAoZWxlbWVudC5UeXBlID09PSAyKSB7XHJcbiAgICAgIGxpc3QucHVzaChkcmF3UXJUZXh0KGVsZW1lbnQpKVxyXG4gICAgfVxyXG4gICAgaWYgKGVsZW1lbnQuVHlwZSA9PT0gMykge1xyXG4gICAgICBkcmF3UXJJbWFnZShlbGVtZW50KVxyXG4gICAgfVxyXG4gIH0pXHJcblxyXG4gIHZhciBwYXJhID0gZ2V0Q2FudmFzKGpzVGhpcywgbGlzdCwgZGF0YSlcclxuICB2YXIgcmVzcG9uc2UgPSBhd2FpdCBwb3N0ZXIuZ2V0U2hhcmVQb3N0ZXIocGFyYSlcclxuICByZXR1cm4gcmVzcG9uc2VcclxufVxyXG4vKlxyXG4gKiDmoLnmja7orr7nva7nlLvkuoznu7TnoIFcclxuICovXHJcbmZ1bmN0aW9uIGRyYXdRckNvZGUgKHNldHRpbmcpIHtcclxuICByZXR1cm4ge1xyXG4gICAgdHlwZTogJ3FyY29kZScsXHJcbiAgICB0ZXh0OiBzZXR0aW5nLlRleHQsXHJcbiAgICBhbHBoYTogMSxcclxuICAgIGR4OiBzZXR0aW5nLlgsXHJcbiAgICBkeTogc2V0dGluZy5ZLFxyXG4gICAgc2l6ZTogc2V0dGluZy5TaXplXHJcbiAgfVxyXG59XHJcblxyXG4vKlxyXG4gKiDmoLnmja7orr7nva7nlLvlm77niYdcclxuICovXHJcbmZ1bmN0aW9uIGRyYXdRckltYWdlIChzZXR0aW5nKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGU6ICdpbWFnZScsXHJcbiAgICB1cmw6IHNldHRpbmcuUGF0aCwgLy8g5Zu+54mH5L2N572uXHJcbiAgICBhbHBoYTogMSxcclxuICAgIGR4OiBzZXR0aW5nLlgsXHJcbiAgICBkeTogc2V0dGluZy5ZLFxyXG4gICAgaW5mb0NhbGxCYWNrIChpbWFnZUluZm8pIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBkV2lkdGg6IHNldHRpbmcuV2lkdGgsXHJcbiAgICAgICAgZEhlaWdodDogc2V0dGluZy5IZWlnaHRcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLypcclxuICog5qC55o2u6K6+572u55S75paH5a2XXHJcbiAqL1xyXG5mdW5jdGlvbiBkcmF3UXJUZXh0IChzZXR0aW5nKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIHR5cGU6ICd0ZXh0JywgLy8g5paH5pys57G75Z6LXHJcbiAgICB0ZXh0OiBzZXR0aW5nLlRleHQsIC8vIOaWh+acrOWGheWuuVxyXG4gICAgYWxwaGE6IDEsIC8vIOiuvue9rumAj+aYjuW6plxyXG4gICAgZm9udFN0eWxlOiAnaXRhbGljJywgLy8g5a2X5L2T57G75Z6LXHJcbiAgICBzaXplOiBzZXR0aW5nLlNpemUsIC8vIOWtl+S9k+Wkp+Wwj1xyXG4gICAgY29sb3I6IHNldHRpbmcuQ29sb3IsIC8vIOWtl+S9k+minOiJslxyXG4gICAgdGV4dEFsaWduOiAnbGVmdCcsIC8vIOaWh+Wtl+aYvuekuuS9jee9rlxyXG4gICAgdGV4dEJhc2VsaW5lOiAnbWlkZGxlJywgLy8g5aSn5bCP6K6+572uXHJcbiAgICBkeDogc2V0dGluZy5YLCAvLyDkvY3nva7kv6Hmga9cclxuICAgIGR5OiBzZXR0aW5nLlkgLy8g5L2N572u5L+h5oGvXHJcbiAgfVxyXG59XHJcblxyXG4vKlxyXG4gKiDliJvlu7rnlLvluIPlrp7kvotcclxuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2FudmFzIChqc1RoaXMsIGxpc3QsIGRhdGEpIHtcclxuICByZXR1cm4ge1xyXG4gICAgX3RoaXM6IGpzVGhpcyxcclxuICAgIHR5cGU6ICd0ZXN0U2hhcmVUeXBlJyxcclxuICAgIHBvc3RlckNhbnZhc0lkOiAnZGVmYXVsdF9Qb3N0ZXJDYW52YXNJZCcsXHJcbiAgICBkZWxheVRpbWVTY2FsZTogMjAsXHJcbiAgICBiYWNrZ3JvdW5kSW1hZ2U6IGRhdGEuYmFja2dyb3VuZFVybCxcclxuICAgIGRyYXdBcnJheTogYXN5bmMgKHsgYmdPYmosIHR5cGUsIGJnU2NhbGUgfSkgPT4ge1xyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJzLCByaikgPT4ge1xyXG4gICAgICAgIHJzKFsuLi5saXN0XSlcclxuICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBzZXRDYW52YXNXSDogKHsgYmdPYmosIHR5cGUsIGJnU2NhbGUgfSkgPT4ge1xyXG4gICAgICBqc1RoaXMucG9zdGVyID0gYmdPYmpcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8vIHtcclxuLy8gICAgICAgICAgXHR0eXBlOiAncXJjb2RlJyxcclxuLy8gICAgICAgICAgXHR0ZXh0OiAn5oKo5aW977yM5oiR5piv5Y+W6IiNJyxcclxuLy8gICAgICAgICAgXHRzaXplOiBiZ09iai53aWR0aCAqIDAuMyxcclxuLy8gICAgICAgICAgXHRkeDogMTAsXHJcbi8vICAgICAgICAgIFx0ZHk6IDEwXHJcbi8vICAgICAgICAgIH0iLCIvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcclxuLyogZXNsaW50LWRpc2FibGUgKi9cclxuXHJcbmltcG9ydCBfYXBwIGZyb20gJy4vYXBwLmpzJ1xyXG5pbXBvcnQgUVJDb2RlQWxnIGZyb20gJy4vUVJDb2RlQWxnLmpzJ1xyXG5jb25zdCBTaHJlVXNlclBvc3RlckJhY2tncm91bmRLZXkgPSAnU2hyZVBvc3RlckJhY2tncm91bmRfJyAvLyDog4zmma/lm77niYfnvJPlrZjlkI3np7DliY3nvIBcclxuY29uc3QgaWRLZXkgPSAnUVNTSEFSRVBPU1RFUl9JREtFWScgLy8gZHJhd0FycmF56Ieq5Yqo55Sf5oiQ55qEaWRrZXlcclxudmFyIGlzTXAgPSBmYWxzZVxyXG5cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0U2hhcmVQb3N0ZXIob2JqKSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdDEgPSBhd2FpdCByZXR1cm5Qcm9taXNlKG9iailcclxuICAgICAgcmVzb2x2ZShyZXN1bHQxKVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZW1vdmVQb3N0ZXJTdG9yYWdlKG9iai50eXBlKVxyXG4gICAgICB0cnkge1xyXG4gICAgICAgIF9hcHAubG9nKCctLS0tLS0tLS0tLS3muIXpmaTnvJPlrZjlkI4sIOW8gOWni+esrOS6jOasoeWwneivlS0tLS0tLS0tLS0tLScpXHJcbiAgICAgICAgY29uc3QgcmVzdWx0MiA9IGF3YWl0IHJldHVyblByb21pc2Uob2JqKVxyXG4gICAgICAgIHJlc29sdmUocmVzdWx0MilcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHJlamVjdChlKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gcmV0dXJuUHJvbWlzZShvYmopIHtcclxuICBsZXQgeyB0eXBlLCBmb3JtRGF0YSwgYmFja2dyb3VuZCwgcG9zdGVyQ2FudmFzSWQsIGJhY2tncm91bmRJbWFnZSwgcmVzZXJ2ZSwgdGV4dEFycmF5LCBkcmF3QXJyYXksIHFyQ29kZUFycmF5LCBpbWFnZXNBcnJheSwgc2V0Q2FudmFzV0gsIHNldENhbnZhc1RvVGVtcEZpbGVQYXRoLCBzZXREcmF3LCBiZ1NjYWxlLCBDb250ZXh0LCBfdGhpcywgZGVsYXlUaW1lU2NhbGUsIGRyYXdEZWxheVRpbWUgfSA9IG9ialxyXG4gIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocnMsIHJqKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBfYXBwLnNob3dMb2FkaW5nKCfmraPlnKjlh4blpIfmtbfmiqXmlbDmja4nKVxyXG4gICAgICBpZiAoIUNvbnRleHQpIHtcclxuICAgICAgICBfYXBwLmxvZygn5rKh5pyJ55S75biD5a+56LGhLOWIm+W7uueUu+W4g+WvueixoScpXHJcbiAgICAgICAgQ29udGV4dCA9IHVuaS5jcmVhdGVDYW52YXNDb250ZXh0KHBvc3RlckNhbnZhc0lkLCBfdGhpcyB8fCBudWxsKVxyXG4gICAgICB9XHJcbiAgICAgIGxldCBiZ09ialxyXG4gICAgICBpZiAoYmFja2dyb3VuZCAmJiBiYWNrZ3JvdW5kLndpZHRoICYmIGJhY2tncm91bmQuaGVpZ2h0KSB7XHJcbiAgICAgICAgYmdPYmogPSBiYWNrZ3JvdW5kXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYmdPYmogPSBhd2FpdCBnZXRTaHJlVXNlclBvc3RlckJhY2tncm91bmQoe1xyXG4gICAgICAgICAgYmFja2dyb3VuZEltYWdlLFxyXG4gICAgICAgICAgdHlwZSxcclxuICAgICAgICAgIGZvcm1EYXRhXHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgICAvLyDkuLrkuoZpb3Mg57yp5pS+5LiA5LqbXHJcbiAgICAgIGJnU2NhbGUgPSBiZ1NjYWxlIHx8IDAuNzVcclxuICAgICAgYmdPYmoud2lkdGggPSBiZ09iai53aWR0aCAqIGJnU2NhbGVcclxuICAgICAgYmdPYmouaGVpZ2h0ID0gYmdPYmouaGVpZ2h0ICogYmdTY2FsZVxyXG5cclxuICAgICAgX2FwcC5sb2coJ+iOt+WPluiDjOaZr+WbvuS/oeaBr+WvueixoeaIkOWKnzonICsgSlNPTi5zdHJpbmdpZnkoYmdPYmopKVxyXG4gICAgICBjb25zdCBwYXJhbXMgPSB7XHJcbiAgICAgICAgYmdPYmosXHJcbiAgICAgICAgdHlwZSxcclxuICAgICAgICBiZ1NjYWxlXHJcbiAgICAgIH1cclxuICAgICAgaWYgKHNldENhbnZhc1dIICYmIHR5cGVvZiBzZXRDYW52YXNXSCA9PT0gJ2Z1bmN0aW9uJykgc2V0Q2FudmFzV0gocGFyYW1zKVxyXG4gICAgICBpZiAoaW1hZ2VzQXJyYXkpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGltYWdlc0FycmF5ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICBpbWFnZXNBcnJheSA9IGltYWdlc0FycmF5KHBhcmFtcylcclxuICAgICAgICB9XHJcbiAgICAgICAgX2FwcC5zaG93TG9hZGluZygn5q2j5Zyo55Sf5oiQ6ZyA57uY5Yi25Zu+54mH55qE5Li05pe26Lev5b6EJylcclxuICAgICAgICBfYXBwLmxvZygn5YeG5aSH6K6+572u5Zu+54mHJylcclxuICAgICAgICBpbWFnZXNBcnJheSA9IGF3YWl0IHNldEltYWdlKGltYWdlc0FycmF5KVxyXG4gICAgICAgIF9hcHAuaGlkZUxvYWRpbmcoKVxyXG4gICAgICB9XHJcbiAgICAgIGlmICh0ZXh0QXJyYXkpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRleHRBcnJheSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgdGV4dEFycmF5ID0gdGV4dEFycmF5KHBhcmFtcylcclxuICAgICAgICB9XHJcbiAgICAgICAgdGV4dEFycmF5ID0gc2V0VGV4dChDb250ZXh0LCB0ZXh0QXJyYXkpXHJcbiAgICAgIH1cclxuICAgICAgaWYgKHFyQ29kZUFycmF5KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBxckNvZGVBcnJheSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgcXJDb2RlQXJyYXkgPSBxckNvZGVBcnJheShwYXJhbXMpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9hcHAuc2hvd0xvYWRpbmcoJ+ato+WcqOeUn+aIkOmcgOe7mOWItuWbvueJh+eahOS4tOaXtui3r+W+hCcpXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxckNvZGVBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgX2FwcC5sb2coaSlcclxuICAgICAgICAgIGlmIChxckNvZGVBcnJheVtpXS5pbWFnZSkge1xyXG4gICAgICAgICAgICBxckNvZGVBcnJheVtpXS5pbWFnZSA9IGF3YWl0IF9hcHAuZG93bmxvYWRGaWxlX1Byb21pc2VGYyhxckNvZGVBcnJheVtpXS5pbWFnZSlcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgX2FwcC5oaWRlTG9hZGluZygpXHJcbiAgICAgIH1cclxuICAgICAgaWYgKGRyYXdBcnJheSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZHJhd0FycmF5ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICBkcmF3QXJyYXkgPSBkcmF3QXJyYXkocGFyYW1zKVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoX2FwcC5pc1Byb21pc2UoZHJhd0FycmF5KSkge1xyXG4gICAgICAgICAgZHJhd0FycmF5ID0gYXdhaXQgZHJhd0FycmF5XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoX2FwcC5pc0FycmF5KGRyYXdBcnJheSkgJiYgZHJhd0FycmF5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIGxldCBoYXNBbGxJbmZvQ2FsbGJhY2sgPSBmYWxzZVxyXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkcmF3QXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZHJhd0FycmF5SXRlbSA9IGRyYXdBcnJheVtpXVxyXG4gICAgICAgICAgICBpZiAoX2FwcC5pc0ZuKGRyYXdBcnJheUl0ZW0uYWxsSW5mb0NhbGxiYWNrKSAmJiAhaGFzQWxsSW5mb0NhbGxiYWNrKSBoYXNBbGxJbmZvQ2FsbGJhY2sgPSB0cnVlXHJcbiAgICAgICAgICAgIGRyYXdBcnJheUl0ZW1baWRLZXldID0gaVxyXG4gICAgICAgICAgICBsZXQgbmV3RGF0YVxyXG4gICAgICAgICAgICBzd2l0Y2ggKGRyYXdBcnJheUl0ZW0udHlwZSkge1xyXG4gICAgICAgICAgICAgIGNhc2UgJ2ltYWdlJzpcclxuICAgICAgICAgICAgICAgIG5ld0RhdGEgPSBhd2FpdCBzZXRJbWFnZShkcmF3QXJyYXlJdGVtKVxyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICBjYXNlICd0ZXh0JzpcclxuICAgICAgICAgICAgICAgIG5ld0RhdGEgPSBzZXRUZXh0KENvbnRleHQsIGRyYXdBcnJheUl0ZW0pXHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgIGNhc2UgJ3FyY29kZSc6XHJcbiAgICAgICAgICAgICAgICBpZiAoZHJhd0FycmF5SXRlbS5pbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgICBuZXdEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGltYWdlOiBhd2FpdCBfYXBwLmRvd25sb2FkRmlsZV9Qcm9taXNlRmMoZHJhd0FycmF5SXRlbS5pbWFnZSlcclxuICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICBjYXNlICdjdXN0b20nOlxyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgX2FwcC5sb2coJ+acquivhuWIq+eahOexu+WeiycpXHJcbiAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChuZXdEYXRhICYmIF9hcHAuaXNPYmplY3QobmV3RGF0YSkpIHtcclxuICAgICAgICAgICAgICBkcmF3QXJyYXlbaV0gPSB7IC4uLmRyYXdBcnJheUl0ZW0sIC4uLm5ld0RhdGEgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKGhhc0FsbEluZm9DYWxsYmFjaykge1xyXG4gICAgICAgICAgICBfYXBwLmxvZygnLS0tLS0tLS0tLS0tLS0tLWhhc0FsbEluZm9DYWxsYmFjay0tLS0tLS0tLS0tLS0tLS0nKVxyXG4gICAgICAgICAgICBjb25zdCBkcmF3QXJyYXlfY29weSA9IFsuLi5kcmF3QXJyYXldXHJcbiAgICAgICAgICAgIGRyYXdBcnJheV9jb3B5LnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgICBjb25zdCBhX3NlcmlhbE51bSA9ICFfYXBwLmlzVW5kZWYoYS5zZXJpYWxOdW0pICYmICFfYXBwLmlzTnVsbChhLnNlcmlhbE51bSkgPyBOdW1iZXIoYS5zZXJpYWxOdW0pIDogTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXHJcbiAgICAgICAgICAgICAgY29uc3QgYl9zZXJpYWxOdW0gPSAhX2FwcC5pc1VuZGVmKGIuc2VyaWFsTnVtKSAmJiAhX2FwcC5pc051bGwoYi5zZXJpYWxOdW0pID8gTnVtYmVyKGIuc2VyaWFsTnVtKSA6IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxyXG4gICAgICAgICAgICAgIHJldHVybiBhX3NlcmlhbE51bSAtIGJfc2VyaWFsTnVtXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRyYXdBcnJheV9jb3B5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgY29uc3QgaXRlbSA9IHsgLi4uZHJhd0FycmF5X2NvcHlbaV0gfVxyXG4gICAgICAgICAgICAgIGlmIChfYXBwLmlzRm4oaXRlbS5hbGxJbmZvQ2FsbGJhY2spKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmV3RGF0YSA9IGl0ZW0uYWxsSW5mb0NhbGxiYWNrKHtcclxuICAgICAgICAgICAgICAgICAgZHJhd0FycmF5OiBkcmF3QXJyYXlfY29weVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIGlmIChfYXBwLmlzUHJvbWlzZShuZXdEYXRhKSkgbmV3RGF0YSA9IGF3YWl0IG5ld0RhdGFcclxuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1faWRLZXkgPSBpdGVtW2lkS2V5XVxyXG4gICAgICAgICAgICAgICAgaWYgKCFfYXBwLmlzVW5kZWYoaXRlbV9pZEtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgZHJhd0FycmF5W2l0ZW1baWRLZXldXSA9IHsgLi4uaXRlbSwgLi4ubmV3RGF0YSB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBwb3N0ZXIgPSBhd2FpdCBkcmF3U2hhcmVJbWFnZSh7XHJcbiAgICAgICAgQ29udGV4dCxcclxuICAgICAgICB0eXBlLFxyXG4gICAgICAgIHBvc3RlckNhbnZhc0lkLFxyXG4gICAgICAgIHJlc2VydmUsXHJcbiAgICAgICAgZHJhd0FycmF5LFxyXG4gICAgICAgIHRleHRBcnJheSxcclxuICAgICAgICBpbWFnZXNBcnJheSxcclxuICAgICAgICBiZ09iaixcclxuICAgICAgICBxckNvZGVBcnJheSxcclxuICAgICAgICBzZXRDYW52YXNUb1RlbXBGaWxlUGF0aCxcclxuICAgICAgICBzZXREcmF3LFxyXG4gICAgICAgIGJnU2NhbGUsXHJcbiAgICAgICAgX3RoaXMsXHJcbiAgICAgICAgZGVsYXlUaW1lU2NhbGUsXHJcbiAgICAgICAgZHJhd0RlbGF5VGltZVxyXG4gICAgICB9KVxyXG4gICAgICBfYXBwLmhpZGVMb2FkaW5nKClcclxuICAgICAgcnMoe1xyXG4gICAgICAgIGJnT2JqLFxyXG4gICAgICAgIHBvc3RlcixcclxuICAgICAgICB0eXBlXHJcbiAgICAgIH0pXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIC8vIFRPRE8gaGFuZGxlIHRoZSBleGNlcHRpb25cclxuICAgICAgcmooZSlcclxuICAgIH1cclxuICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3U2hhcmVJbWFnZShvYmopIHtcclxuICAvLyDnu5jliLbmtbfmiqXmlrnms5VcclxuICBsZXQgeyBDb250ZXh0LCB0eXBlLCBwb3N0ZXJDYW52YXNJZCwgcmVzZXJ2ZSwgYmdPYmosIGRyYXdBcnJheSwgdGV4dEFycmF5LCBxckNvZGVBcnJheSwgaW1hZ2VzQXJyYXksIHNldENhbnZhc1RvVGVtcEZpbGVQYXRoLCBzZXREcmF3LCBiZ1NjYWxlLCBfdGhpcywgZGVsYXlUaW1lU2NhbGUsIGRyYXdEZWxheVRpbWUgfSA9IG9ialxyXG4gIGNvbnN0IHBhcmFtcyA9IHtcclxuICAgIENvbnRleHQsXHJcbiAgICBiZ09iaixcclxuICAgIHR5cGUsXHJcbiAgICBiZ1NjYWxlXHJcbiAgfVxyXG4gIGRlbGF5VGltZVNjYWxlID0gZGVsYXlUaW1lU2NhbGUgIT09IHVuZGVmaW5lZCA/IGRlbGF5VGltZVNjYWxlIDogMTVcclxuICBkcmF3RGVsYXlUaW1lID0gZHJhd0RlbGF5VGltZSAhPT0gdW5kZWZpbmVkID8gZHJhd0RlbGF5VGltZSA6IDEwMFxyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocnMsIHJqKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAvLyBfYXBwLnNob3dMb2FkaW5nKCfmraPlnKjnu5jliLbmtbfmiqUnKVxyXG4gICAgICBfYXBwLmxvZygn6IOM5pmv5a+56LGhOicgKyBKU09OLnN0cmluZ2lmeShiZ09iaikpXHJcbiAgICAgIGlmIChiZ09iaiAmJiBiZ09iai5wYXRoKSB7XHJcbiAgICAgICAgLy8gX2FwcC5sb2coJ+iDjOaZr+acieWbvueJh+i3r+W+hCcpXHJcbiAgICAgICAgQ29udGV4dC5kcmF3SW1hZ2UoYmdPYmoucGF0aCwgMCwgMCwgYmdPYmoud2lkdGgsIGJnT2JqLmhlaWdodClcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBfYXBwLmxvZygn6IOM5pmv5rKh5pyJ5Zu+54mH6Lev5b6EJylcclxuICAgICAgICBpZiAoYmdPYmouYmFja2dyb3VuZENvbG9yKSB7XHJcbiAgICAgICAgICAvLyBfYXBwLmxvZygn6IOM5pmv5pyJ6IOM5pmv6aKc6ImyOicgKyBiZ09iai5iYWNrZ3JvdW5kQ29sb3IpXHJcbiAgICAgICAgICBDb250ZXh0LnNldEZpbGxTdHlsZShiZ09iai5iYWNrZ3JvdW5kQ29sb3IpXHJcbiAgICAgICAgICBDb250ZXh0LmZpbGxSZWN0KDAsIDAsIGJnT2JqLndpZHRoLCBiZ09iai5oZWlnaHQpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIF9hcHAubG9nKCfog4zmma/msqHmnInog4zmma/popzoibInKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gX2FwcC5zaG93TG9hZGluZygn57uY5Yi25Zu+54mHJylcclxuICAgICAgaWYgKGltYWdlc0FycmF5ICYmIGltYWdlc0FycmF5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICBkcmF3SW1hZ2UoQ29udGV4dCwgaW1hZ2VzQXJyYXkpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIF9hcHAuc2hvd0xvYWRpbmcoJ+e7mOWItuiHquWumuS5ieWGheWuuScpXHJcbiAgICAgIGlmIChzZXREcmF3ICYmIHR5cGVvZiBzZXREcmF3ID09PSAnZnVuY3Rpb24nKSBzZXREcmF3KHBhcmFtcylcclxuXHJcbiAgICAgIC8vIF9hcHAuc2hvd0xvYWRpbmcoJ+e7mOWItuaWh+acrCcpXHJcbiAgICAgIGlmICh0ZXh0QXJyYXkgJiYgdGV4dEFycmF5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICBkcmF3VGV4dChDb250ZXh0LCB0ZXh0QXJyYXksIGJnT2JqKVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBfYXBwLnNob3dMb2FkaW5nKCfnu5jliLbkuoznu7TnoIEnKVxyXG4gICAgICBpZiAocXJDb2RlQXJyYXkgJiYgcXJDb2RlQXJyYXkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXJDb2RlQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGRyYXdRckNvZGUoQ29udGV4dCwgcXJDb2RlQXJyYXlbaV0pXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBfYXBwLnNob3dMb2FkaW5nKCfnu5jliLblj6/mjqflsYLnuqfluo/liJcnKVxyXG4gICAgICBpZiAoZHJhd0FycmF5ICYmIGRyYXdBcnJheS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkcmF3QXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGNvbnN0IGRyYXdBcnJheUl0ZW0gPSBkcmF3QXJyYXlbaV1cclxuICAgICAgICAgIC8vIF9hcHAubG9nKCfnu5jliLblj6/mjqflsYLnuqfluo/liJcsIGRyYXdBcnJheUl0ZW06JyArIEpTT04uc3RyaW5naWZ5KGRyYXdBcnJheUl0ZW0pKVxyXG4gICAgICAgICAgc3dpdGNoIChkcmF3QXJyYXlJdGVtLnR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnaW1hZ2UnOlxyXG4gICAgICAgICAgICAgIC8vIF9hcHAubG9nKCfnu5jliLblj6/mjqflsYLnuqfluo/liJcsIOe7mOWItuWbvueJhycpXHJcbiAgICAgICAgICAgICAgZHJhd0ltYWdlKENvbnRleHQsIGRyYXdBcnJheUl0ZW0pXHJcbiAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgY2FzZSAndGV4dCc6XHJcbiAgICAgICAgICAgICAgLy8gX2FwcC5sb2coJ+e7mOWItuWPr+aOp+Wxgue6p+W6j+WIlywg57uY5Yi25paH5pysJylcclxuICAgICAgICAgICAgICBkcmF3VGV4dChDb250ZXh0LCBkcmF3QXJyYXlJdGVtLCBiZ09iailcclxuICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICBjYXNlICdxcmNvZGUnOlxyXG4gICAgICAgICAgICAgIC8vIF9hcHAubG9nKCfnu5jliLblj6/mjqflsYLnuqfluo/liJcsIOe7mOWItuS6jOe7tOeggScpXHJcbiAgICAgICAgICAgICAgZHJhd1FyQ29kZShDb250ZXh0LCBkcmF3QXJyYXlJdGVtKVxyXG4gICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIGNhc2UgJ2N1c3RvbSc6XHJcbiAgICAgICAgICAgICAgLy8gX2FwcC5sb2coJ+e7mOWItuWPr+aOp+Wxgue6p+W6j+WIlywg57uY5Yi26Ieq5a6a5LmJ5YaF5a65JylcclxuICAgICAgICAgICAgICBpZiAoZHJhd0FycmF5SXRlbS5zZXREcmF3ICYmIHR5cGVvZiBkcmF3QXJyYXlJdGVtLnNldERyYXcgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGRyYXdBcnJheUl0ZW0uc2V0RHJhdyhDb250ZXh0KVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgIC8vIF9hcHAubG9nKCfmnKror4bliKvnmoTnsbvlnosnKVxyXG4gICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIF9hcHAuc2hvd0xvYWRpbmcoJ+e7mOWItuS4rScpXHJcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIENvbnRleHQuZHJhdyh0eXBlb2YgcmVzZXJ2ZSA9PT0gJ2Jvb2xlYW4nID8gcmVzZXJ2ZSA6IGZhbHNlLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGxldCBzZXRPYmogPSBzZXRDYW52YXNUb1RlbXBGaWxlUGF0aCB8fCB7fVxyXG4gICAgICAgICAgaWYgKHNldE9iaiAmJiB0eXBlb2Ygc2V0T2JqID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHNldE9iaiA9IHNldENhbnZhc1RvVGVtcEZpbGVQYXRoKGJnT2JqLCB0eXBlKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgbGV0IGNhbnZhc1RvVGVtcEZpbGVQYXRoRm5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgIHg6IDAsXHJcbiAgICAgICAgICAgIHk6IDAsXHJcbiAgICAgICAgICAgIHdpZHRoOiBiZ09iai53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBiZ09iai5oZWlnaHQsXHJcbiAgICAgICAgICAgIGRlc3RXaWR0aDogYmdPYmoud2lkdGggKiAyLCAvLyDoi6VINeS9v+eUqOi/memHjOivt+S4jeimgeS5mOS7peS6jFxyXG4gICAgICAgICAgICBkZXN0SGVpZ2h0OiBiZ09iai5oZWlnaHQgKiAyLCAvLyDoi6VINeS9v+eUqOi/memHjOivt+S4jeimgeS5mOS7peS6jFxyXG4gICAgICAgICAgICBxdWFsaXR5OiAwLjgsXHJcbiAgICAgICAgICAgIGZpbGVUeXBlOiAnanBnJyxcclxuICAgICAgICAgICAgLi4uc2V0T2JqXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBfYXBwLmxvZygnY2FudmFzVG9UZW1wRmlsZVBhdGjnmoRkYXRh5a+56LGhOicgKyBKU09OLnN0cmluZ2lmeShkYXRhKSlcclxuICAgICAgICAgIGNhbnZhc1RvVGVtcEZpbGVQYXRoRm4gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY29uc3QgdG9UZW1wRmlsZVBhdGhPYmogPSB7XHJcbiAgICAgICAgICAgICAgLy8g6L6T5Ye65Li65Zu+54mHXHJcbiAgICAgICAgICAgICAgLi4uZGF0YSxcclxuICAgICAgICAgICAgICBjYW52YXNJZDogcG9zdGVyQ2FudmFzSWQsXHJcbiAgICAgICAgICAgICAgc3VjY2VzcyhyZXMpIHtcclxuICAgICAgICAgICAgICAgIF9hcHAuaGlkZUxvYWRpbmcoKVxyXG4gICAgICAgICAgICAgICAgcnMocmVzKVxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgZmFpbChlcnIpIHtcclxuICAgICAgICAgICAgICAgIF9hcHAuaGlkZUxvYWRpbmcoKVxyXG4gICAgICAgICAgICAgICAgLy8gX2FwcC5sb2coJ+i+k+WHuuWbvueJh+Wksei0pTonICsgSlNPTi5zdHJpbmdpZnkoZXJyKSlcclxuICAgICAgICAgICAgICAgIHJqKCfovpPlh7rlm77niYflpLHotKU6JyArIEpTT04uc3RyaW5naWZ5KGVycikpXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHVuaS5jYW52YXNUb1RlbXBGaWxlUGF0aCh0b1RlbXBGaWxlUGF0aE9iaiwgX3RoaXMgfHwgbnVsbClcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBsZXQgZGVsYXlUaW1lID0gMFxyXG4gICAgICAgICAgaWYgKHFyQ29kZUFycmF5KSB7XHJcbiAgICAgICAgICAgIHFyQ29kZUFycmF5LmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgaWYgKGl0ZW0udGV4dCkge1xyXG4gICAgICAgICAgICAgICAgZGVsYXlUaW1lICs9IE51bWJlcihpdGVtLnRleHQubGVuZ3RoKVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChpbWFnZXNBcnJheSkge1xyXG4gICAgICAgICAgICBpbWFnZXNBcnJheS5mb3JFYWNoKCgpID0+IHtcclxuICAgICAgICAgICAgICBkZWxheVRpbWUgKz0gZGVsYXlUaW1lU2NhbGVcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICh0ZXh0QXJyYXkpIHtcclxuICAgICAgICAgICAgdGV4dEFycmF5LmZvckVhY2goKCkgPT4ge1xyXG4gICAgICAgICAgICAgIGRlbGF5VGltZSArPSBkZWxheVRpbWVTY2FsZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKGRyYXdBcnJheSkge1xyXG4gICAgICAgICAgICBkcmF3QXJyYXkuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICBzd2l0Y2ggKGl0ZW0udHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAndGV4dCc6XHJcbiAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxheVRpbWUgKz0gaXRlbS50ZXh0Lmxlbmd0aFxyXG4gICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICBkZWxheVRpbWUgKz0gZGVsYXlUaW1lU2NhbGVcclxuICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICAvLyBfYXBwLmxvZygn5bu25pe257O75pWwOicgKyBkZWxheVRpbWVTY2FsZSlcclxuICAgICAgICAgIC8vIF9hcHAubG9nKCfmgLvorqHlu7bml7Y6JyArIGRlbGF5VGltZSlcclxuICAgICAgICAgIHNldFRpbWVvdXQoY2FudmFzVG9UZW1wRmlsZVBhdGhGbiwgZGVsYXlUaW1lKVxyXG4gICAgICAgIH0pXHJcbiAgICAgIH0sIGRyYXdEZWxheVRpbWUpXHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIC8vIFRPRE8gaGFuZGxlIHRoZSBleGNlcHRpb25cclxuICAgICAgX2FwcC5oaWRlTG9hZGluZygpXHJcbiAgICAgIHJqKGUpXHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuLy8gZXhwb3J0XHJcbmZ1bmN0aW9uIHNldFRleHQoQ29udGV4dCwgdGV4dHMpIHtcclxuICAvLyDorr7nva7mlofmnKzmlbDmja5cclxuICAvLyBfYXBwLmxvZygn6L+b5YWl6K6+572u5paH5a2X5pa55rOVLCB0ZXh0czonICsgSlNPTi5zdHJpbmdpZnkodGV4dHMpKVxyXG4gIGlmICh0ZXh0cyAmJiBfYXBwLmlzQXJyYXkodGV4dHMpKSB7XHJcbiAgICAvLyBfYXBwLmxvZygndGV4dHPmmK/mlbDnu4QnKVxyXG4gICAgaWYgKHRleHRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0ZXh0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIC8vIF9hcHAubG9nKCflrZfnrKbkuLLkv6Hmga8t5Yid5aeL5YyW5LmL5YmNOicgKyBKU09OLnN0cmluZ2lmeSh0ZXh0c1tpXSkpXHJcbiAgICAgICAgdGV4dHNbaV0gPSBzZXRUZXh0Rm4oQ29udGV4dCwgdGV4dHNbaV0pXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgLy8gX2FwcC5sb2coJ3RleHRz5piv5a+56LGhJylcclxuICAgIHRleHRzID0gc2V0VGV4dEZuKENvbnRleHQsIHRleHRzKVxyXG4gIH1cclxuICAvLyBfYXBwLmxvZygn6L+U5ZuedGV4dHM6JyArIEpTT04uc3RyaW5naWZ5KHRleHRzKSlcclxuICByZXR1cm4gdGV4dHNcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0VGV4dEZuKENvbnRleHQsIHRleHRJdGVtKSB7XHJcbiAgLy8gX2FwcC5sb2coJ+i/m+WFpeiuvue9ruaWh+Wtl+aWueazlSwgdGV4dEl0ZW06JyArIEpTT04uc3RyaW5naWZ5KHRleHRJdGVtKSlcclxuICBpZiAoX2FwcC5pc05vdE51bGxfc3RyaW5nKHRleHRJdGVtLnRleHQpKSB7XHJcbiAgICB0ZXh0SXRlbS50ZXh0ID0gU3RyaW5nKHRleHRJdGVtLnRleHQpXHJcbiAgICB0ZXh0SXRlbS5hbHBoYSA9IHRleHRJdGVtLmFscGhhICE9PSB1bmRlZmluZWQgPyB0ZXh0SXRlbS5hbHBoYSA6IDFcclxuICAgIHRleHRJdGVtLmNvbG9yID0gdGV4dEl0ZW0uY29sb3IgfHwgJ2JsYWNrJ1xyXG4gICAgdGV4dEl0ZW0uc2l6ZSA9IHRleHRJdGVtLnNpemUgIT09IHVuZGVmaW5lZCA/IHRleHRJdGVtLnNpemUgOiAxMFxyXG4gICAgdGV4dEl0ZW0udGV4dEFsaWduID0gdGV4dEl0ZW0udGV4dEFsaWduIHx8ICdsZWZ0J1xyXG4gICAgdGV4dEl0ZW0udGV4dEJhc2VsaW5lID0gdGV4dEl0ZW0udGV4dEJhc2VsaW5lIHx8ICdtaWRkbGUnXHJcbiAgICB0ZXh0SXRlbS5keCA9IHRleHRJdGVtLmR4IHx8IDBcclxuICAgIHRleHRJdGVtLmR5ID0gdGV4dEl0ZW0uZHkgfHwgMFxyXG4gICAgdGV4dEl0ZW0uc2l6ZSA9IE1hdGguY2VpbChOdW1iZXIodGV4dEl0ZW0uc2l6ZSkpXHJcbiAgICAvLyBfYXBwLmxvZygn5a2X56ym5Liy5L+h5oGvLeWIneWni+WMlum7mOiupOWAvOWQjjonICsgSlNPTi5zdHJpbmdpZnkodGV4dEl0ZW0pKVxyXG4gICAgY29uc3QgdGV4dExlbmd0aCA9IGNvdW50VGV4dExlbmd0aChDb250ZXh0LCB7XHJcbiAgICAgIHRleHQ6IHRleHRJdGVtLnRleHQsXHJcbiAgICAgIHNpemU6IHRleHRJdGVtLnNpemVcclxuICAgIH0pXHJcbiAgICAvLyBfYXBwLmxvZygn5a2X56ym5Liy5L+h5oGvLeWIneWni+WMluaXtueahOaWh+acrOmVv+W6pjonICsgdGV4dExlbmd0aClcclxuICAgIGxldCBpbmZvQ2FsbEJhY2tPYmogPSB7fVxyXG4gICAgaWYgKHRleHRJdGVtLmluZm9DYWxsQmFjayAmJiB0eXBlb2YgdGV4dEl0ZW0uaW5mb0NhbGxCYWNrID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgIGluZm9DYWxsQmFja09iaiA9IHRleHRJdGVtLmluZm9DYWxsQmFjayh0ZXh0TGVuZ3RoKVxyXG4gICAgfVxyXG4gICAgdGV4dEl0ZW0gPSB7XHJcbiAgICAgIC4uLnRleHRJdGVtLFxyXG4gICAgICB0ZXh0TGVuZ3RoLFxyXG4gICAgICAuLi5pbmZvQ2FsbEJhY2tPYmpcclxuICAgIH1cclxuICAgIC8vIF9hcHAubG9nKCflrZfnrKbkuLLkv6Hmga8taW5mb0NhbGxCYWNr5ZCOOicgKyBKU09OLnN0cmluZ2lmeSh0ZXh0SXRlbSkpXHJcbiAgfVxyXG4gIHJldHVybiB0ZXh0SXRlbVxyXG59XHJcblxyXG5mdW5jdGlvbiBjb3VudFRleHRMZW5ndGgoQ29udGV4dCwgb2JqKSB7XHJcbiAgLy8gX2FwcC5sb2coJ+iuoeeul+aWh+Wtl+mVv+W6piwgb2JqOicgKyBKU09OLnN0cmluZ2lmeShvYmopKVxyXG4gIGNvbnN0IHsgdGV4dCwgc2l6ZSB9ID0gb2JqXHJcbiAgQ29udGV4dC5zZXRGb250U2l6ZShzaXplKVxyXG4gIGxldCB0ZXh0TGVuZ3RoXHJcbiAgLyogdHJ5e1xyXG5cdFx0dGV4dExlbmd0aCA9IENvbnRleHQubWVhc3VyZVRleHQodGV4dCk7IC8vIOWumOaWueaWh+aho+ivtCBBcHDnq6/oh6rlrprkuYnnu4Tku7bnvJbor5HmqKHlvI/mmoLml7bkuI3lj6/nlKhtZWFzdXJlVGV4dOaWueazlVxyXG5cdH1jYXRjaChlKXtcclxuXHRcdC8vVE9ETyBoYW5kbGUgdGhlIGV4Y2VwdGlvblxyXG5cdFx0dGV4dExlbmd0aCA9IHt9O1xyXG5cdH0gKi9cclxuICB0ZXh0TGVuZ3RoID0ge31cclxuICAvLyBfYXBwLmxvZygnbWVhc3VyZVRleHTorqHnrpfmloflrZfplb/luqYsIHRleHRMZW5ndGg6JyArIEpTT04uc3RyaW5naWZ5KHRleHRMZW5ndGgpKVxyXG4gIHRleHRMZW5ndGggPSB0ZXh0TGVuZ3RoICYmIHRleHRMZW5ndGgud2lkdGggPyB0ZXh0TGVuZ3RoLndpZHRoIDogMFxyXG4gIGlmICghdGV4dExlbmd0aCkge1xyXG4gICAgbGV0IGwgPSAwXHJcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRleHQubGVuZ3RoOyBqKyspIHtcclxuICAgICAgbGV0IHQgPSB0ZXh0LnN1YnN0cihqLCAxKVxyXG4gICAgICBjb25zdCBjb3VudEwgPSBjb3VudFN0ckxlbmd0aCh0KVxyXG4gICAgICAvLyBfYXBwLmxvZygn6K6h566X5paH5a2X5a695bqm57O75pWwOicgKyBjb3VudEwpXHJcbiAgICAgIGwgKz0gY291bnRMXHJcbiAgICB9XHJcbiAgICAvLyBfYXBwLmxvZygn5paH5a2X5a695bqm5oC757O75pWwOicgKyBsKVxyXG4gICAgdGV4dExlbmd0aCA9IGwgKiBzaXplXHJcbiAgfVxyXG4gIHJldHVybiB0ZXh0TGVuZ3RoXHJcbn1cclxuXHJcbi8vIOiuoeeul+Wtl+espumVv+W6puezu+aVsFxyXG5mdW5jdGlvbiBjb3VudFN0ckxlbmd0aCh0KSB7XHJcbiAgbGV0IGxcclxuICBpZiAoL2EvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjU1MjczNDM3NVxyXG4gIH0gZWxzZSBpZiAoL2IvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjYzODY3MTg3NVxyXG4gIH0gZWxzZSBpZiAoL2MvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjUwMTQ2NDg0Mzc1XHJcbiAgfSBlbHNlIGlmICgvZC8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuNjM5NjQ4NDM3NVxyXG4gIH0gZWxzZSBpZiAoL2UvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjU2NzM4MjgxMjVcclxuICB9IGVsc2UgaWYgKC9mLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC4zNDY2Nzk2ODc1XHJcbiAgfSBlbHNlIGlmICgvZy8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuNjM5NjQ4NDM3NVxyXG4gIH0gZWxzZSBpZiAoL2gvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjYxNTcyMjY1NjI1XHJcbiAgfSBlbHNlIGlmICgvaS8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuMjY2MTEzMjgxMjVcclxuICB9IGVsc2UgaWYgKC9qLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC4yNjcwODk4NDM3NVxyXG4gIH0gZWxzZSBpZiAoL2svLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjU0NDQzMzU5Mzc1XHJcbiAgfSBlbHNlIGlmICgvbC8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuMjY2MTEzMjgxMjVcclxuICB9IGVsc2UgaWYgKC9tLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC45MzcwMTE3MTg3NVxyXG4gIH0gZWxzZSBpZiAoL24vLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjYxNjIxMDkzNzVcclxuICB9IGVsc2UgaWYgKC9vLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC42MzU3NDIxODc1XHJcbiAgfSBlbHNlIGlmICgvcC8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuNjM4NjcxODc1XHJcbiAgfSBlbHNlIGlmICgvcS8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuNjM5NjQ4NDM3NVxyXG4gIH0gZWxzZSBpZiAoL3IvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjM4MTgzNTkzNzVcclxuICB9IGVsc2UgaWYgKC9zLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC40NjI4OTA2MjVcclxuICB9IGVsc2UgaWYgKC90Ly50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC4zNzI1NTg1OTM3NVxyXG4gIH0gZWxzZSBpZiAoL3UvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjYxNjIxMDkzNzVcclxuICB9IGVsc2UgaWYgKC92Ly50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC41MjQ5MDIzNDM3NVxyXG4gIH0gZWxzZSBpZiAoL3cvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjc4OTU1MDc4MTI1XHJcbiAgfSBlbHNlIGlmICgveC8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuNTA2ODM1OTM3NVxyXG4gIH0gZWxzZSBpZiAoL3kvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjUyOTI5Njg3NVxyXG4gIH0gZWxzZSBpZiAoL3ovLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjQ5MTY5OTIxODc1XHJcbiAgfSBlbHNlIGlmICgvQS8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuNzAzNjEzMjgxMjVcclxuICB9IGVsc2UgaWYgKC9CLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC42Mjc0NDE0MDYyNVxyXG4gIH0gZWxzZSBpZiAoL0MvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjY2ODk0NTMxMjVcclxuICB9IGVsc2UgaWYgKC9ELy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC43NjE3MTg3NVxyXG4gIH0gZWxzZSBpZiAoL0UvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjU0OTgwNDY4NzVcclxuICB9IGVsc2UgaWYgKC9GLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC41MzEyNVxyXG4gIH0gZWxzZSBpZiAoL0cvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjc0MzY1MjM0Mzc1XHJcbiAgfSBlbHNlIGlmICgvSC8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuNzczNDM3NVxyXG4gIH0gZWxzZSBpZiAoL0kvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjI5Mzk0NTMxMjVcclxuICB9IGVsc2UgaWYgKC9KLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC4zOTU5OTYwOTM3NVxyXG4gIH0gZWxzZSBpZiAoL0svLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjYzNDc2NTYyNVxyXG4gIH0gZWxzZSBpZiAoL0wvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjUxMzE4MzU5Mzc1XHJcbiAgfSBlbHNlIGlmICgvTS8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuOTc3MDUwNzgxMjVcclxuICB9IGVsc2UgaWYgKC9OLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC44MTI5ODgyODEyNVxyXG4gIH0gZWxzZSBpZiAoL08vLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjgxNDk0MTQwNjI1XHJcbiAgfSBlbHNlIGlmICgvUC8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuNjExODE2NDA2MjVcclxuICB9IGVsc2UgaWYgKC9RLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC44MTQ5NDE0MDYyNVxyXG4gIH0gZWxzZSBpZiAoL1IvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjY1MjgzMjAzMTI1XHJcbiAgfSBlbHNlIGlmICgvUy8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuNTc3MTQ4NDM3NVxyXG4gIH0gZWxzZSBpZiAoL1QvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjU3MzI0MjE4NzVcclxuICB9IGVsc2UgaWYgKC9VLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC43NDY1ODIwMzEyNVxyXG4gIH0gZWxzZSBpZiAoL1YvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjY3NjI2OTUzMTI1XHJcbiAgfSBlbHNlIGlmICgvVy8udGVzdCh0KSkge1xyXG4gICAgbCA9IDEuMDE3NTc4MTI1XHJcbiAgfSBlbHNlIGlmICgvWC8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuNjQ1MDE5NTMxMjVcclxuICB9IGVsc2UgaWYgKC9ZLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC42MDM1MTU2MjVcclxuICB9IGVsc2UgaWYgKC9aLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC42MjAxMTcxODc1XHJcbiAgfSBlbHNlIGlmICgvWzAtOV0vLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjU4NjQyNTc4MTI1XHJcbiAgfSBlbHNlIGlmICgvW1xcdTRlMDAtXFx1OWZhNV0vLnRlc3QodCkpIHtcclxuICAgIGwgPSAxXHJcbiAgfSBlbHNlIGlmICgvIC8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuMjk1ODk4NDM3NVxyXG4gIH0gZWxzZSBpZiAoL1xcYC8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuMjk0OTIxODc1XHJcbiAgfSBlbHNlIGlmICgvXFx+Ly50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC43NDE2OTkyMTg3NVxyXG4gIH0gZWxzZSBpZiAoL1xcIS8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuMzEyNVxyXG4gIH0gZWxzZSBpZiAoL1xcQC8udGVzdCh0KSkge1xyXG4gICAgbCA9IDEuMDMxMjVcclxuICB9IGVsc2UgaWYgKC9cXCMvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjYzODE4MzU5Mzc1XHJcbiAgfSBlbHNlIGlmICgvXFwkLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC41ODY0MjU3ODEyNVxyXG4gIH0gZWxzZSBpZiAoL1xcJS8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuODg5NjQ4NDM3NVxyXG4gIH0gZWxzZSBpZiAoL1xcXi8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuNzQxNjk5MjE4NzVcclxuICB9IGVsc2UgaWYgKC9cXCYvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjg3MDExNzE4NzVcclxuICB9IGVsc2UgaWYgKC9cXCovLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjQ1NTA3ODEyNVxyXG4gIH0gZWxzZSBpZiAoL1xcKC8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuMzMzOTg0Mzc1XHJcbiAgfSBlbHNlIGlmICgvXFwpLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC4zMzM5ODQzNzVcclxuICB9IGVsc2UgaWYgKC9cXF8vLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjQ0ODI0MjE4NzVcclxuICB9IGVsc2UgaWYgKC9cXC0vLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjQzMjYxNzE4NzVcclxuICB9IGVsc2UgaWYgKC9cXCsvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjc0MTY5OTIxODc1XHJcbiAgfSBlbHNlIGlmICgvXFw9Ly50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC43NDE2OTkyMTg3NVxyXG4gIH0gZWxzZSBpZiAoL1xcfC8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuMjY5MDQyOTY4NzVcclxuICB9IGVsc2UgaWYgKC9cXFxcLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC40MTYwMTU2MjVcclxuICB9IGVsc2UgaWYgKC9cXFsvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjMzMzk4NDM3NVxyXG4gIH0gZWxzZSBpZiAoL1xcXS8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuMzMzOTg0Mzc1XHJcbiAgfSBlbHNlIGlmICgvXFw7Ly50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC4yNDA3MjI2NTYyNVxyXG4gIH0gZWxzZSBpZiAoL1xcJy8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuMjU2MzQ3NjU2MjVcclxuICB9IGVsc2UgaWYgKC9cXCwvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjI0MDcyMjY1NjI1XHJcbiAgfSBlbHNlIGlmICgvXFwuLy50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC4yNDA3MjI2NTYyNVxyXG4gIH0gZWxzZSBpZiAoL1xcLy8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuNDI3MjQ2MDkzNzVcclxuICB9IGVsc2UgaWYgKC9cXHsvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjMzMzk4NDM3NVxyXG4gIH0gZWxzZSBpZiAoL1xcfS8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuMzMzOTg0Mzc1XHJcbiAgfSBlbHNlIGlmICgvXFw6Ly50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC4yNDA3MjI2NTYyNVxyXG4gIH0gZWxzZSBpZiAoL1xcXCIvLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjQzNTU0Njg3NVxyXG4gIH0gZWxzZSBpZiAoL1xcPC8udGVzdCh0KSkge1xyXG4gICAgbCA9IDAuNzQxNjk5MjE4NzVcclxuICB9IGVsc2UgaWYgKC9cXD4vLnRlc3QodCkpIHtcclxuICAgIGwgPSAwLjc0MTY5OTIxODc1XHJcbiAgfSBlbHNlIGlmICgvXFw/Ly50ZXN0KHQpKSB7XHJcbiAgICBsID0gMC40ODI5MTAxNTYyNVxyXG4gIH0gZWxzZSB7XHJcbiAgICBsID0gMVxyXG4gIH1cclxuICByZXR1cm4gbFxyXG59XHJcblxyXG4vLyBleHBvcnRcclxuZnVuY3Rpb24gc2V0SW1hZ2UoaW1hZ2VzKSB7XHJcbiAgLy8g6K6+572u5Zu+54mH5pWw5o2uXHJcbiAgX2FwcC5sb2coJ+i/m+WFpeiuvue9ruWbvueJh+aVsOaNruaWueazlScpXHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWpjZXQpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmIChpbWFnZXMgJiYgX2FwcC5pc0FycmF5KGltYWdlcykpIHtcclxuICAgICAgICBfYXBwLmxvZygnaW1hZ2Vz5piv5LiA5Liq5pWw57uEJylcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGltYWdlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgX2FwcC5sb2coJ+iuvue9ruWbvueJh+aVsOaNruW+queOr+S4rTonICsgaSlcclxuICAgICAgICAgIGltYWdlc1tpXSA9IGF3YWl0IHNldEltYWdlRm4oaW1hZ2VzW2ldKVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBfYXBwLmxvZygnaW1hZ2Vz5piv5LiA5Liq5a+56LGhJylcclxuICAgICAgICBpbWFnZXMgPSBhd2FpdCBzZXRJbWFnZUZuKGltYWdlcylcclxuICAgICAgfVxyXG4gICAgICByZXNvbHZlKGltYWdlcylcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgLy8gVE9ETyBoYW5kbGUgdGhlIGV4Y2VwdGlvblxyXG4gICAgICByZWpjZXQoZSlcclxuICAgIH1cclxuICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRJbWFnZUZuKGltYWdlKSB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGlmIChpbWFnZS51cmwpIHtcclxuICAgICAgbGV0IGltZ1VybCA9IGltYWdlLnVybFxyXG4gICAgICBpbWdVcmwgPSBhd2FpdCBfYXBwLmRvd25sb2FkRmlsZV9Qcm9taXNlRmMoaW1nVXJsKVxyXG4gICAgICBpbWFnZS51cmwgPSBpbWdVcmxcclxuICAgICAgY29uc3QgaGFzaW5mb0NhbGxCYWNrID0gaW1hZ2UuaW5mb0NhbGxCYWNrICYmIHR5cGVvZiBpbWFnZS5pbmZvQ2FsbEJhY2sgPT09ICdmdW5jdGlvbidcclxuICAgICAgbGV0IGltYWdlSW5mbyA9IHt9XHJcbiAgICAgIGltYWdlSW5mbyA9IGF3YWl0IF9hcHAuZ2V0SW1hZ2VJbmZvX1Byb21pc2VGYyhpbWdVcmwpXHJcbiAgICAgIGlmIChoYXNpbmZvQ2FsbEJhY2spIHtcclxuICAgICAgICBpbWFnZSA9IHtcclxuICAgICAgICAgIC4uLmltYWdlLFxyXG4gICAgICAgICAgLi4uaW1hZ2UuaW5mb0NhbGxCYWNrKGltYWdlSW5mbylcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaW1hZ2UuZHggPSBpbWFnZS5keCB8fCAwXHJcbiAgICAgIGltYWdlLmR5ID0gaW1hZ2UuZHkgfHwgMFxyXG4gICAgICBpbWFnZS5kV2lkdGggPSBpbWFnZS5kV2lkdGggfHwgaW1hZ2VJbmZvLndpZHRoXHJcbiAgICAgIGltYWdlLmRIZWlnaHQgPSBpbWFnZS5kSGVpZ2h0IHx8IGltYWdlSW5mby5oZWlnaHRcclxuICAgICAgaW1hZ2UgPSB7XHJcbiAgICAgICAgLi4uaW1hZ2UsXHJcbiAgICAgICAgaW1hZ2VJbmZvXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJlc29sdmUoaW1hZ2UpXHJcbiAgfSlcclxufVxyXG5cclxuLy8gZXhwb3J0XHJcbmZ1bmN0aW9uIGRyYXdUZXh0KENvbnRleHQsIHRleHRBcnJheSwgYmdPYmopIHtcclxuICAvLyDlhYjpgY3ljobmjaLooYzlho3nu5jliLZcclxuICBpZiAoIV9hcHAuaXNBcnJheSh0ZXh0QXJyYXkpKSB7XHJcbiAgICBfYXBwLmxvZygn6YGN5Y6G5paH5pys5pa55rOVLCDkuI3mmK/mlbDnu4QnKVxyXG4gICAgdGV4dEFycmF5ID0gW3RleHRBcnJheV1cclxuICB9IGVsc2Uge1xyXG4gICAgX2FwcC5sb2coJ+mBjeWOhuaWh+acrOaWueazlSwg5piv5pWw57uEJylcclxuICB9XHJcbiAgX2FwcC5sb2coJ+mBjeWOhuaWh+acrOaWueazlSwgdGV4dEFycmF5OicgKyBKU09OLnN0cmluZ2lmeSh0ZXh0QXJyYXkpKVxyXG4gIGNvbnN0IG5ld0FyciA9IFtdXHJcbiAgaWYgKHRleHRBcnJheSAmJiB0ZXh0QXJyYXkubGVuZ3RoID4gMCkge1xyXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB0ZXh0QXJyYXkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgY29uc3QgdGV4dEl0ZW0gPSB0ZXh0QXJyYXlbal1cclxuICAgICAgaWYgKHRleHRJdGVtLnRleHQgJiYgdGV4dEl0ZW0ubGluZUZlZWQpIHtcclxuICAgICAgICBsZXQgbGluZU51bSA9IC0xLFxyXG4gICAgICAgICAgbWF4V2lkdGggPSBiZ09iai53aWR0aCxcclxuICAgICAgICAgIGxpbmVIZWlnaHQgPSB0ZXh0SXRlbS5zaXplLFxyXG4gICAgICAgICAgZHggPSB0ZXh0SXRlbS5keFxyXG4gICAgICAgIGlmIChfYXBwLmlzT2JqZWN0KHRleHRJdGVtLmxpbmVGZWVkKSkge1xyXG4gICAgICAgICAgY29uc3QgbGluZUZlZWQgPSB0ZXh0SXRlbS5saW5lRmVlZFxyXG4gICAgICAgICAgbGluZU51bSA9IGxpbmVGZWVkLmxpbmVOdW0gIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgbGluZUZlZWQubGluZU51bSA9PT0gJ251bWJlcicgJiYgbGluZUZlZWQubGluZU51bSA+PSAwID8gbGluZUZlZWQubGluZU51bSA6IGxpbmVOdW1cclxuICAgICAgICAgIG1heFdpZHRoID0gbGluZUZlZWQubWF4V2lkdGggIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgbGluZUZlZWQubWF4V2lkdGggPT09ICdudW1iZXInID8gbGluZUZlZWQubWF4V2lkdGggOiBtYXhXaWR0aFxyXG4gICAgICAgICAgbGluZUhlaWdodCA9IGxpbmVGZWVkLmxpbmVIZWlnaHQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgbGluZUZlZWQubGluZUhlaWdodCA9PT0gJ251bWJlcicgPyBsaW5lRmVlZC5saW5lSGVpZ2h0IDogbGluZUhlaWdodFxyXG4gICAgICAgICAgZHggPSBsaW5lRmVlZC5keCAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBsaW5lRmVlZC5keCA9PT0gJ251bWJlcicgPyBsaW5lRmVlZC5keCA6IGR4XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGNociA9IHRleHRJdGVtLnRleHQuc3BsaXQoJycpXHJcbiAgICAgICAgbGV0IHRlbXAgPSAnJ1xyXG4gICAgICAgIGNvbnN0IHJvdyA9IFtdXHJcbiAgICAgICAgLy8g5b6q546v5Ye65Yeg6KGM5paH5a2X57uE5oiQ5pWw57uEXHJcbiAgICAgICAgZm9yIChsZXQgYSA9IDAsIGxlbiA9IGNoci5sZW5ndGg7IGEgPCBsZW47IGErKykge1xyXG4gICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICBjb3VudFRleHRMZW5ndGgoQ29udGV4dCwge1xyXG4gICAgICAgICAgICAgIHRleHQ6IHRlbXAsXHJcbiAgICAgICAgICAgICAgc2l6ZTogdGV4dEl0ZW0uc2l6ZVxyXG4gICAgICAgICAgICB9KSA8PSBtYXhXaWR0aCAmJlxyXG4gICAgICAgICAgICBjb3VudFRleHRMZW5ndGgoQ29udGV4dCwge1xyXG4gICAgICAgICAgICAgIHRleHQ6IHRlbXAgKyBjaHJbYV0sXHJcbiAgICAgICAgICAgICAgc2l6ZTogdGV4dEl0ZW0uc2l6ZVxyXG4gICAgICAgICAgICB9KSA8PSBtYXhXaWR0aFxyXG4gICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRlbXAgKz0gY2hyW2FdXHJcbiAgICAgICAgICAgIGlmIChhID09IGNoci5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgcm93LnB1c2godGVtcClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcm93LnB1c2godGVtcClcclxuICAgICAgICAgICAgdGVtcCA9IGNoclthXVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBfYXBwLmxvZygn5b6q546v5Ye655qE5paH5pys5pWw57uEOicgKyBKU09OLnN0cmluZ2lmeShyb3cpKVxyXG4gICAgICAgIC8vIOWPquaYvuekuuWHoOihjCDlj5jph4/pl7Tot51saW5lSGVpZ2h0ICDlj5jph4/ooYzmlbBsaW5lTnVtXHJcbiAgICAgICAgbGV0IGFsbE51bSA9IGxpbmVOdW0gPj0gMCAmJiBsaW5lTnVtIDwgcm93Lmxlbmd0aCA/IGxpbmVOdW0gOiByb3cubGVuZ3RoXHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsTnVtOyBpKyspIHtcclxuICAgICAgICAgIGxldCBzdHIgPSByb3dbaV1cclxuICAgICAgICAgIGlmIChpID09IGFsbE51bSAtIDEgJiYgYWxsTnVtIDwgcm93Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyaW5nKDAsIHN0ci5sZW5ndGggLSAxKSArICcuLi4nXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb25zdCBvYmogPSB7XHJcbiAgICAgICAgICAgIC4uLnRleHRJdGVtLFxyXG4gICAgICAgICAgICB0ZXh0OiBzdHIsXHJcbiAgICAgICAgICAgIGR4OiBpID09PSAwID8gdGV4dEl0ZW0uZHggOiBkeCA+PSAwID8gZHggOiB0ZXh0SXRlbS5keCxcclxuICAgICAgICAgICAgZHk6IHRleHRJdGVtLmR5ICsgaSAqIGxpbmVIZWlnaHQsXHJcbiAgICAgICAgICAgIHRleHRMZW5ndGg6IGNvdW50VGV4dExlbmd0aChDb250ZXh0LCB7XHJcbiAgICAgICAgICAgICAgdGV4dDogc3RyLFxyXG4gICAgICAgICAgICAgIHNpemU6IHRleHRJdGVtLnNpemVcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIF9hcHAubG9nKCfph43mlrDnu4TmiJDnmoTmlofmnKzlr7nosaE6JyArIEpTT04uc3RyaW5naWZ5KG9iaikpXHJcbiAgICAgICAgICBuZXdBcnIucHVzaChvYmopXHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG5ld0Fyci5wdXNoKHRleHRJdGVtKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIF9hcHAubG9nKCfnu5jliLbmlofmnKzmlrDmlbDnu4Q6JyArIEpTT04uc3RyaW5naWZ5KG5ld0FycikpXHJcbiAgZHJhd1RleHRzKENvbnRleHQsIG5ld0FycilcclxufVxyXG5cclxuZnVuY3Rpb24gc2V0Rm9udCh0ZXh0SXRlbSA9IHt9KSB7XHJcbiAgaWYgKHRleHRJdGVtLmZvbnQgJiYgdHlwZW9mIHRleHRJdGVtLmZvbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBfYXBwLmxvZyh0ZXh0SXRlbS5mb250KVxyXG4gICAgcmV0dXJuIHRleHRJdGVtLmZvbnRcclxuICB9IGVsc2Uge1xyXG4gICAgbGV0IGZvbnRTdHlsZSA9ICdub3JtYWwnXHJcbiAgICBsZXQgZm9udFZhcmlhbnQgPSAnbm9ybWFsJ1xyXG4gICAgbGV0IGZvbnRXZWlnaHQgPSAnbm9ybWFsJ1xyXG4gICAgbGV0IGZvbnRTaXplID0gdGV4dEl0ZW0uc2l6ZSB8fCAxMFxyXG4gICAgbGV0IGZvbnRGYW1pbHkgPSAnc2Fucy1zZXJpZidcclxuICAgIGZvbnRTaXplID0gTWF0aC5jZWlsKE51bWJlcihmb250U2l6ZSkpXHJcbiAgICBpZiAodGV4dEl0ZW0uZm9udFN0eWxlICYmIHR5cGVvZiB0ZXh0SXRlbS5mb250U3R5bGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGZvbnRTdHlsZSA9IHRleHRJdGVtLmZvbnRTdHlsZS50cmltKClcclxuICAgIH1cclxuICAgIGlmICh0ZXh0SXRlbS5mb250VmFyaWFudCAmJiB0eXBlb2YgdGV4dEl0ZW0uZm9udFZhcmlhbnQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIGZvbnRWYXJpYW50ID0gdGV4dEl0ZW0uZm9udFZhcmlhbnQudHJpbSgpXHJcbiAgICB9XHJcbiAgICBpZiAodGV4dEl0ZW0uZm9udFdlaWdodCAmJiAodHlwZW9mIHRleHRJdGVtLmZvbnRXZWlnaHQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB0ZXh0SXRlbS5mb250V2VpZ2h0ID09PSAnbnVtYmVyJykpIHtcclxuICAgICAgZm9udFdlaWdodCA9IHRleHRJdGVtLmZvbnRXZWlnaHQudHJpbSgpXHJcbiAgICB9XHJcbiAgICBpZiAodGV4dEl0ZW0uZm9udEZhbWlseSAmJiB0eXBlb2YgdGV4dEl0ZW0uZm9udEZhbWlseSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgZm9udEZhbWlseSA9IHRleHRJdGVtLmZvbnRGYW1pbHkudHJpbSgpXHJcbiAgICB9XHJcbiAgICByZXR1cm4gZm9udFN0eWxlICsgJyAnICsgZm9udFZhcmlhbnQgKyAnICcgKyBmb250V2VpZ2h0ICsgJyAnICsgZm9udFNpemUgKyAncHgnICsgJyAnICsgZm9udEZhbWlseVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1RleHRzKENvbnRleHQsIHRleHRzKSB7XHJcbiAgLy8g57uY5Yi25paH5pysXHJcbiAgX2FwcC5sb2coJ+WHhuWkh+e7mOWItuaWh+acrOaWueazlSwgdGV4dHM6JyArIEpTT04uc3RyaW5naWZ5KHRleHRzKSlcclxuICBpZiAodGV4dHMgJiYgX2FwcC5pc0FycmF5KHRleHRzKSkge1xyXG4gICAgX2FwcC5sb2coJ+WHhuWkh+e7mOWItuaWh+acrOaWueazlSwg5piv5pWw57uEJylcclxuICAgIGlmICh0ZXh0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBkcmF3VGV4dEZuKENvbnRleHQsIHRleHRzW2ldKVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSBlbHNlIHtcclxuICAgIF9hcHAubG9nKCflh4blpIfnu5jliLbmlofmnKzmlrnms5UsIOS4jeaYr+aVsOe7hCcpXHJcbiAgICBkcmF3VGV4dEZuKENvbnRleHQsIHRleHRzKVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1RleHRGbihDb250ZXh0LCB0ZXh0SXRlbSkge1xyXG4gIF9hcHAubG9nKCfov5vlhaXnu5jliLbmlofmnKzmlrnms5UsIHRleHRJdGVtOicgKyBKU09OLnN0cmluZ2lmeSh0ZXh0SXRlbSkpXHJcbiAgaWYgKHRleHRJdGVtICYmIF9hcHAuaXNPYmplY3QodGV4dEl0ZW0pICYmIHRleHRJdGVtLnRleHQpIHtcclxuICAgIENvbnRleHQuZm9udCA9IHNldEZvbnQodGV4dEl0ZW0pXHJcbiAgICBDb250ZXh0LnNldEZpbGxTdHlsZSh0ZXh0SXRlbS5jb2xvcilcclxuICAgIENvbnRleHQuc2V0R2xvYmFsQWxwaGEodGV4dEl0ZW0uYWxwaGEpXHJcbiAgICBDb250ZXh0LnNldFRleHRBbGlnbih0ZXh0SXRlbS50ZXh0QWxpZ24pXHJcbiAgICBDb250ZXh0LnNldFRleHRCYXNlbGluZSh0ZXh0SXRlbS50ZXh0QmFzZWxpbmUpXHJcbiAgICBDb250ZXh0LmZpbGxUZXh0KHRleHRJdGVtLnRleHQsIHRleHRJdGVtLmR4LCB0ZXh0SXRlbS5keSlcclxuICAgIGlmICh0ZXh0SXRlbS5saW5lVGhyb3VnaCAmJiBfYXBwLmlzT2JqZWN0KHRleHRJdGVtLmxpbmVUaHJvdWdoKSkge1xyXG4gICAgICBfYXBwLmxvZygn5pyJ5Yig6Zmk57q/JylcclxuICAgICAgbGV0IGxpbmVUaHJvdWdoID0gdGV4dEl0ZW0ubGluZVRocm91Z2hcclxuICAgICAgbGluZVRocm91Z2guYWxwaGEgPSBsaW5lVGhyb3VnaC5hbHBoYSAhPT0gdW5kZWZpbmVkID8gbGluZVRocm91Z2guYWxwaGEgOiB0ZXh0SXRlbS5hbHBoYVxyXG4gICAgICBsaW5lVGhyb3VnaC5zdHlsZSA9IGxpbmVUaHJvdWdoLnN0eWxlIHx8IHRleHRJdGVtLmNvbG9yXHJcbiAgICAgIGxpbmVUaHJvdWdoLndpZHRoID0gbGluZVRocm91Z2gud2lkdGggIT09IHVuZGVmaW5lZCA/IGxpbmVUaHJvdWdoLndpZHRoIDogdGV4dEl0ZW0uc2l6ZSAvIDEwXHJcbiAgICAgIGxpbmVUaHJvdWdoLmNhcCA9IGxpbmVUaHJvdWdoLmNhcCAhPT0gdW5kZWZpbmVkID8gbGluZVRocm91Z2guY2FwIDogJ2J1dHQnXHJcbiAgICAgIF9hcHAubG9nKCfliKDpmaTnur/lr7nosaE6JyArIEpTT04uc3RyaW5naWZ5KGxpbmVUaHJvdWdoKSlcclxuICAgICAgQ29udGV4dC5zZXRHbG9iYWxBbHBoYShsaW5lVGhyb3VnaC5hbHBoYSlcclxuICAgICAgQ29udGV4dC5zZXRTdHJva2VTdHlsZShsaW5lVGhyb3VnaC5zdHlsZSlcclxuICAgICAgQ29udGV4dC5zZXRMaW5lV2lkdGgobGluZVRocm91Z2gud2lkdGgpXHJcbiAgICAgIENvbnRleHQuc2V0TGluZUNhcChsaW5lVGhyb3VnaC5jYXApXHJcbiAgICAgIGxldCBteCwgbXlcclxuICAgICAgc3dpdGNoICh0ZXh0SXRlbS50ZXh0QWxpZ24pIHtcclxuICAgICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICAgIG14ID0gdGV4dEl0ZW0uZHhcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgY2FzZSAnY2VudGVyJzpcclxuICAgICAgICAgIG14ID0gdGV4dEl0ZW0uZHggLSB0ZXh0SXRlbS50ZXh0TGVuZ3RoIC8gMlxyXG4gICAgICAgICAgYnJlYWtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgbXggPSB0ZXh0SXRlbS5keCAtIHRleHRJdGVtLnRleHRMZW5ndGhcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgIH1cclxuICAgICAgc3dpdGNoICh0ZXh0SXRlbS50ZXh0QmFzZWxpbmUpIHtcclxuICAgICAgICBjYXNlICd0b3AnOlxyXG4gICAgICAgICAgbXkgPSB0ZXh0SXRlbS5keSArIHRleHRJdGVtLnNpemUgKiAwLjVcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgY2FzZSAnbWlkZGxlJzpcclxuICAgICAgICAgIG15ID0gdGV4dEl0ZW0uZHlcclxuICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIG15ID0gdGV4dEl0ZW0uZHkgLSB0ZXh0SXRlbS5zaXplICogMC41XHJcbiAgICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICAgIENvbnRleHQuYmVnaW5QYXRoKClcclxuICAgICAgQ29udGV4dC5tb3ZlVG8obXgsIG15KVxyXG4gICAgICBDb250ZXh0LmxpbmVUbyhteCArIHRleHRJdGVtLnRleHRMZW5ndGgsIG15KVxyXG4gICAgICBDb250ZXh0LnN0cm9rZSgpXHJcbiAgICAgIENvbnRleHQuY2xvc2VQYXRoKClcclxuICAgICAgX2FwcC5sb2coJ+WIoOmZpOe6v+WujOavlScpXHJcbiAgICB9XHJcbiAgICBDb250ZXh0LnNldEdsb2JhbEFscGhhKDEpXHJcbiAgICBDb250ZXh0LmZvbnQgPSAnMTBweCBzYW5zLXNlcmlmJ1xyXG4gIH1cclxufVxyXG4vLyBleHBvcnRcclxuZnVuY3Rpb24gZHJhd0ltYWdlKENvbnRleHQsIGltYWdlcykge1xyXG4gIC8vIOe7mOWItuWbvueJh1xyXG4gIF9hcHAubG9nKCfliKTmlq3lm77niYfmlbDmja7nsbvlnos6JyArIEpTT04uc3RyaW5naWZ5KGltYWdlcykpXHJcbiAgaWYgKGltYWdlcyAmJiBfYXBwLmlzQXJyYXkoaW1hZ2VzKSkge1xyXG4gICAgaWYgKGltYWdlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2VzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgcmVhZHlEcmF3SW1hZ2VGbihDb250ZXh0LCBpbWFnZXNbaV0pXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgcmVhZHlEcmF3SW1hZ2VGbihDb250ZXh0LCBpbWFnZXMpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiByZWFkeURyYXdJbWFnZUZuKENvbnRleHQsIGltZykge1xyXG4gIF9hcHAubG9nKCfliKTmlq3nu5jliLblm77niYflvaLnirYsIGltZzonICsgSlNPTi5zdHJpbmdpZnkoaW1nKSlcclxuICBpZiAoaW1nLnVybCkge1xyXG4gICAgaWYgKGltZy5jaXJjbGVTZXQpIHtcclxuICAgICAgZHJhd0NpcmNsZUltYWdlKENvbnRleHQsIGltZylcclxuICAgIH0gZWxzZSBpZiAoaW1nLnJvdW5kUmVjdFNldCkge1xyXG4gICAgICBkcmF3Um91bmRSZWN0SW1hZ2UoQ29udGV4dCwgaW1nKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZHJhd0ltYWdlRm4oQ29udGV4dCwgaW1nKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd0ltYWdlRm4oQ29udGV4dCwgaW1nKSB7XHJcbiAgX2FwcC5sb2coJ+i/m+WFpee7mOWItum7mOiupOWbvueJh+aWueazlSwgaW1nOicgKyBKU09OLnN0cmluZ2lmeShpbWcpKVxyXG4gIGlmIChpbWcudXJsKSB7XHJcbiAgICBjb25zdCBoYXNBbHBoYSA9ICFfYXBwLmlzVW5kZWYoaW1nLmFscGhhKVxyXG4gICAgaW1nLmFscGhhID0gTnVtYmVyKCFfYXBwLmlzVW5kZWYoaW1nLmFscGhhKSA/IGltZy5hbHBoYSA6IDEpXHJcbiAgICBDb250ZXh0LnNldEdsb2JhbEFscGhhKGltZy5hbHBoYSlcclxuICAgIF9hcHAubG9nKCfnu5jliLbpu5jorqTlm77niYfmlrnms5UsIOaciXVybCcpXHJcbiAgICBpZiAoaW1nLmRXaWR0aCAmJiBpbWcuZEhlaWdodCAmJiBpbWcuc3ggJiYgaW1nLnN5ICYmIGltZy5zV2lkdGggJiYgaW1nLnNIZWlnaHQpIHtcclxuICAgICAgX2FwcC5sb2coJ+e7mOWItum7mOiupOWbvueJh+aWueazlSwg57uY5Yi256ys5LiA56eN5pa55qGIJylcclxuICAgICAgQ29udGV4dC5kcmF3SW1hZ2UoaW1nLnVybCwgaW1nLmR4IHx8IDAsIGltZy5keSB8fCAwLCBpbWcuZFdpZHRoIHx8IGZhbHNlLCBpbWcuZEhlaWdodCB8fCBmYWxzZSwgaW1nLnN4IHx8IGZhbHNlLCBpbWcuc3kgfHwgZmFsc2UsIGltZy5zV2lkdGggfHwgZmFsc2UsIGltZy5zSGVpZ2h0IHx8IGZhbHNlKVxyXG4gICAgfSBlbHNlIGlmIChpbWcuZFdpZHRoICYmIGltZy5kSGVpZ2h0KSB7XHJcbiAgICAgIF9hcHAubG9nKCfnu5jliLbpu5jorqTlm77niYfmlrnms5UsIOe7mOWItuesrOS6jOenjeaWueahiCcpXHJcbiAgICAgIENvbnRleHQuZHJhd0ltYWdlKGltZy51cmwsIGltZy5keCB8fCAwLCBpbWcuZHkgfHwgMCwgaW1nLmRXaWR0aCB8fCBmYWxzZSwgaW1nLmRIZWlnaHQgfHwgZmFsc2UpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBfYXBwLmxvZygn57uY5Yi26buY6K6k5Zu+54mH5pa55rOVLCDnu5jliLbnrKzkuInnp43mlrnmoYgnKVxyXG4gICAgICBDb250ZXh0LmRyYXdJbWFnZShpbWcudXJsLCBpbWcuZHggfHwgMCwgaW1nLmR5IHx8IDApXHJcbiAgICB9XHJcbiAgICBpZiAoaGFzQWxwaGEpIHtcclxuICAgICAgQ29udGV4dC5zZXRHbG9iYWxBbHBoYSgxKVxyXG4gICAgfVxyXG4gIH1cclxuICBfYXBwLmxvZygn57uY5Yi26buY6K6k5Zu+54mH5pa55rOVLCDnu5jliLblrozmr5UnKVxyXG59XHJcblxyXG5mdW5jdGlvbiBkcmF3Q2lyY2xlSW1hZ2UoQ29udGV4dCwgb2JqKSB7XHJcbiAgX2FwcC5sb2coJ+i/m+WFpee7mOWItuWchuW9ouWbvueJh+aWueazlSwgb2JqOicgKyBKU09OLnN0cmluZ2lmeShvYmopKVxyXG4gIGxldCB7IGR4LCBkeSwgZFdpZHRoLCBkSGVpZ2h0LCBjaXJjbGVTZXQsIGltYWdlSW5mbyB9ID0gb2JqXHJcbiAgbGV0IHgsIHksIHJcclxuICBpZiAodHlwZW9mIGNpcmNsZVNldCA9PT0gJ29iamVjdCcpIHtcclxuICAgIHggPSBjaXJjbGVTZXQueFxyXG4gICAgeSA9IGNpcmNsZVNldC55XHJcbiAgICByID0gY2lyY2xlU2V0LnJcclxuICB9XHJcbiAgaWYgKCFyKSB7XHJcbiAgICBsZXQgZFxyXG4gICAgZCA9IGRXaWR0aCA+IGRIZWlnaHQgPyBkSGVpZ2h0IDogZFdpZHRoXHJcbiAgICByID0gZCAvIDJcclxuICB9XHJcblxyXG4gIHggPSB4ID8gZHggKyB4IDogKGR4IHx8IDApICsgclxyXG4gIHkgPSB5ID8gZHkgKyB5IDogKGR5IHx8IDApICsgclxyXG4gIENvbnRleHQuc2F2ZSgpXHJcbiAgQ29udGV4dC5iZWdpblBhdGgoKVxyXG4gIENvbnRleHQuYXJjKHgsIHksIHIsIDAsIDIgKiBNYXRoLlBJLCBmYWxzZSlcclxuICBDb250ZXh0LmNsb3NlUGF0aCgpXHJcbiAgQ29udGV4dC5zZXRHbG9iYWxBbHBoYSgwKVxyXG4gIENvbnRleHQuZmlsbFN0eWxlID0gJyNGRkZGRkYnXHJcbiAgQ29udGV4dC5maWxsKClcclxuICBDb250ZXh0LnNldEdsb2JhbEFscGhhKDEpXHJcbiAgQ29udGV4dC5jbGlwKClcclxuICBkcmF3SW1hZ2VGbihDb250ZXh0LCBvYmopXHJcbiAgX2FwcC5sb2coJ+m7mOiupOWbvueJh+e7mOWItuWujOavlScpXHJcbiAgQ29udGV4dC5yZXN0b3JlKClcclxufVxyXG5cclxuZnVuY3Rpb24gZHJhd1JvdW5kUmVjdEltYWdlKENvbnRleHQsIG9iaikge1xyXG4gIC8vIOe7mOWItuefqeW9olxyXG4gIF9hcHAubG9nKCfov5vlhaXnu5jliLbnn6nlvaLlm77niYfmlrnms5UsIG9iajonICsgSlNPTi5zdHJpbmdpZnkob2JqKSlcclxuICBDb250ZXh0LnNhdmUoKVxyXG4gIGxldCB7IGR4LCBkeSwgZFdpZHRoLCBkSGVpZ2h0LCByb3VuZFJlY3RTZXQsIGltYWdlSW5mbyB9ID0gb2JqXHJcbiAgbGV0IHJcclxuICBpZiAodHlwZW9mIHJvdW5kUmVjdFNldCA9PT0gJ29iamVjdCcpIHtcclxuICAgIHIgPSByb3VuZFJlY3RTZXQuclxyXG4gIH1cclxuICByID0gciB8fCBkV2lkdGggKiAwLjFcclxuXHJcbiAgaWYgKGRXaWR0aCA8IDIgKiByKSB7XHJcbiAgICByID0gZFdpZHRoIC8gMlxyXG4gIH1cclxuICBpZiAoZEhlaWdodCA8IDIgKiByKSB7XHJcbiAgICByID0gZEhlaWdodCAvIDJcclxuICB9XHJcbiAgQ29udGV4dC5iZWdpblBhdGgoKVxyXG4gIENvbnRleHQubW92ZVRvKGR4ICsgciwgZHkpXHJcbiAgQ29udGV4dC5hcmNUbyhkeCArIGRXaWR0aCwgZHksIGR4ICsgZFdpZHRoLCBkeSArIGRIZWlnaHQsIHIpXHJcbiAgQ29udGV4dC5hcmNUbyhkeCArIGRXaWR0aCwgZHkgKyBkSGVpZ2h0LCBkeCwgZHkgKyBkSGVpZ2h0LCByKVxyXG4gIENvbnRleHQuYXJjVG8oZHgsIGR5ICsgZEhlaWdodCwgZHgsIGR5LCByKVxyXG4gIENvbnRleHQuYXJjVG8oZHgsIGR5LCBkeCArIGRXaWR0aCwgZHksIHIpXHJcbiAgQ29udGV4dC5jbG9zZVBhdGgoKVxyXG4gIENvbnRleHQuc2V0R2xvYmFsQWxwaGEoMClcclxuICBDb250ZXh0LmZpbGxTdHlsZSA9ICcjRkZGRkZGJ1xyXG4gIENvbnRleHQuZmlsbCgpXHJcbiAgQ29udGV4dC5zZXRHbG9iYWxBbHBoYSgxKVxyXG4gIENvbnRleHQuY2xpcCgpXHJcbiAgZHJhd0ltYWdlRm4oQ29udGV4dCwgb2JqKVxyXG4gIENvbnRleHQucmVzdG9yZSgpXHJcbiAgX2FwcC5sb2coJ+i/m+WFpee7mOWItuefqeW9ouWbvueJh+aWueazlSwg57uY5Yi25a6M5q+VJylcclxufVxyXG5cclxuLy8gZXhwb3J0XHJcbmZ1bmN0aW9uIGRyYXdRckNvZGUoQ29udGV4dCwgcXJDb2RlT2JqKSB7XHJcbiAgLy8g55Sf5oiQ5LqM57u056CB5pa55rOV77yMIOWPguiAg+S6hiDor5flsI/mn5Ig55qE5LqM57u056CB55Sf5oiQ5Zmo5Luj56CBXHJcbiAgX2FwcC5sb2coJ+i/m+WFpee7mOWItuS6jOe7tOeggeaWueazlScpXHJcbiAgX2FwcC5zaG93TG9hZGluZygn5q2j5Zyo55Sf5oiQ5LqM57u056CBJylcclxuICBsZXQgcXJjb2RlQWxnT2JqQ2FjaGUgPSBbXVxyXG4gIGxldCBvcHRpb25zID0ge1xyXG4gICAgdGV4dDogU3RyaW5nKHFyQ29kZU9iai50ZXh0IHx8ICcnKSB8fCAnJywgLy8g55Sf5oiQ5YaF5a65XHJcbiAgICBzaXplOiBOdW1iZXIocXJDb2RlT2JqLnNpemUgfHwgMCkgfHwgMjAwLCAvLyDkuoznu7TnoIHlpKflsI9cclxuICAgIGJhY2tncm91bmQ6IFN0cmluZyhxckNvZGVPYmouYmFja2dyb3VuZCB8fCAnJykgfHwgJyNmZmZmZmYnLCAvLyDog4zmma/oibJcclxuICAgIGZvcmVncm91bmQ6IFN0cmluZyhxckNvZGVPYmouZm9yZWdyb3VuZCB8fCAnJykgfHwgJyMwMDAwMDAnLCAvLyDliY3mma/oibJcclxuICAgIHBkZ3JvdW5kOiBTdHJpbmcocXJDb2RlT2JqLnBkZ3JvdW5kIHx8ICcnKSB8fCAnIzAwMDAwMCcsIC8vIOWumuS9jeinkueCueminOiJslxyXG4gICAgY29ycmVjdExldmVsOiBOdW1iZXIocXJDb2RlT2JqLmNvcnJlY3RMZXZlbCB8fCAwKSB8fCAzLCAvLyDlrrnplJnnuqfliKtcclxuICAgIGltYWdlOiBTdHJpbmcocXJDb2RlT2JqLmltYWdlIHx8ICcnKSB8fCAnJywgLy8g5LqM57u056CB5Zu+5qCHXHJcbiAgICBpbWFnZVNpemU6IE51bWJlcihxckNvZGVPYmouaW1hZ2VTaXplIHx8IDApIHx8IDQwLCAvLyDkuoznu7TnoIHlm77moIflpKflsI9cclxuICAgIGR4OiBOdW1iZXIocXJDb2RlT2JqLmR4IHx8IDApIHx8IDAsIC8vIHjovbTot53nprtcclxuICAgIGR5OiBOdW1iZXIocXJDb2RlT2JqLmR5IHx8IDApIHx8IDAgLy8geei9tOi3neemu1xyXG4gIH1cclxuICBsZXQgcXJDb2RlQWxnID0gbnVsbFxyXG4gIGxldCBkID0gMFxyXG4gIGZvciAodmFyIGkgPSAwLCBsID0gcXJjb2RlQWxnT2JqQ2FjaGUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICBkID0gaVxyXG4gICAgaWYgKHFyY29kZUFsZ09iakNhY2hlW2ldLnRleHQgPT0gb3B0aW9ucy50ZXh0ICYmIHFyY29kZUFsZ09iakNhY2hlW2ldLnRleHQuY29ycmVjdExldmVsID09IG9wdGlvbnMuY29ycmVjdExldmVsKSB7XHJcbiAgICAgIHFyQ29kZUFsZyA9IHFyY29kZUFsZ09iakNhY2hlW2ldLm9ialxyXG4gICAgICBicmVha1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoZCA9PSBsKSB7XHJcbiAgICBxckNvZGVBbGcgPSBuZXcgUVJDb2RlQWxnKG9wdGlvbnMudGV4dCwgb3B0aW9ucy5jb3JyZWN0TGV2ZWwpXHJcbiAgICBxcmNvZGVBbGdPYmpDYWNoZS5wdXNoKHtcclxuICAgICAgdGV4dDogb3B0aW9ucy50ZXh0LFxyXG4gICAgICBjb3JyZWN0TGV2ZWw6IG9wdGlvbnMuY29ycmVjdExldmVsLFxyXG4gICAgICBvYmo6IHFyQ29kZUFsZ1xyXG4gICAgfSlcclxuICB9XHJcbiAgbGV0IGdldEZvcmVHcm91bmQgPSBmdW5jdGlvbihjb25maWcpIHtcclxuICAgIGxldCBvcHRpb25zID0gY29uZmlnLm9wdGlvbnNcclxuICAgIGlmIChvcHRpb25zLnBkZ3JvdW5kICYmICgoY29uZmlnLnJvdyA+IDEgJiYgY29uZmlnLnJvdyA8IDUgJiYgY29uZmlnLmNvbCA+IDEgJiYgY29uZmlnLmNvbCA8IDUpIHx8IChjb25maWcucm93ID4gY29uZmlnLmNvdW50IC0gNiAmJiBjb25maWcucm93IDwgY29uZmlnLmNvdW50IC0gMiAmJiBjb25maWcuY29sID4gMSAmJiBjb25maWcuY29sIDwgNSkgfHwgKGNvbmZpZy5yb3cgPiAxICYmIGNvbmZpZy5yb3cgPCA1ICYmIGNvbmZpZy5jb2wgPiBjb25maWcuY291bnQgLSA2ICYmIGNvbmZpZy5jb2wgPCBjb25maWcuY291bnQgLSAyKSkpIHtcclxuICAgICAgcmV0dXJuIG9wdGlvbnMucGRncm91bmRcclxuICAgIH1cclxuICAgIHJldHVybiBvcHRpb25zLmZvcmVncm91bmRcclxuICB9XHJcbiAgbGV0IGNvdW50ID0gcXJDb2RlQWxnLmdldE1vZHVsZUNvdW50KClcclxuICBsZXQgcmF0aW9TaXplID0gb3B0aW9ucy5zaXplXHJcbiAgbGV0IHJhdGlvSW1nU2l6ZSA9IG9wdGlvbnMuaW1hZ2VTaXplXHJcbiAgLy8g6K6h566X5q+P5Liq54K555qE6ZW/5a69XHJcbiAgbGV0IHRpbGVXID0gKHJhdGlvU2l6ZSAvIGNvdW50KS50b1ByZWNpc2lvbig0KVxyXG4gIGxldCB0aWxlSCA9IChyYXRpb1NpemUgLyBjb3VudCkudG9QcmVjaXNpb24oNClcclxuICAvLyDnu5jliLZcclxuICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBjb3VudDsgcm93KyspIHtcclxuICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IGNvdW50OyBjb2wrKykge1xyXG4gICAgICBsZXQgdyA9IE1hdGguY2VpbCgoY29sICsgMSkgKiB0aWxlVykgLSBNYXRoLmZsb29yKGNvbCAqIHRpbGVXKVxyXG4gICAgICBsZXQgaCA9IE1hdGguY2VpbCgocm93ICsgMSkgKiB0aWxlVykgLSBNYXRoLmZsb29yKHJvdyAqIHRpbGVXKVxyXG4gICAgICBsZXQgZm9yZWdyb3VuZCA9IGdldEZvcmVHcm91bmQoe1xyXG4gICAgICAgIHJvdzogcm93LFxyXG4gICAgICAgIGNvbDogY29sLFxyXG4gICAgICAgIGNvdW50OiBjb3VudCxcclxuICAgICAgICBvcHRpb25zOiBvcHRpb25zXHJcbiAgICAgIH0pXHJcbiAgICAgIENvbnRleHQuc2V0RmlsbFN0eWxlKHFyQ29kZUFsZy5tb2R1bGVzW3Jvd11bY29sXSA/IGZvcmVncm91bmQgOiBvcHRpb25zLmJhY2tncm91bmQpXHJcbiAgICAgIENvbnRleHQuZmlsbFJlY3Qob3B0aW9ucy5keCArIE1hdGgucm91bmQoY29sICogdGlsZVcpLCBvcHRpb25zLmR5ICsgTWF0aC5yb3VuZChyb3cgKiB0aWxlSCksIHcsIGgpXHJcbiAgICB9XHJcbiAgfVxyXG4gIGlmIChvcHRpb25zLmltYWdlKSB7XHJcbiAgICBsZXQgeCA9IG9wdGlvbnMuZHggKyBOdW1iZXIoKChyYXRpb1NpemUgLSByYXRpb0ltZ1NpemUpIC8gMikudG9GaXhlZCgyKSlcclxuICAgIGxldCB5ID0gb3B0aW9ucy5keSArIE51bWJlcigoKHJhdGlvU2l6ZSAtIHJhdGlvSW1nU2l6ZSkgLyAyKS50b0ZpeGVkKDIpKVxyXG4gICAgZHJhd1JvdW5kZWRSZWN0KENvbnRleHQsIHgsIHksIHJhdGlvSW1nU2l6ZSwgcmF0aW9JbWdTaXplLCAyLCA2LCB0cnVlLCB0cnVlKVxyXG4gICAgQ29udGV4dC5kcmF3SW1hZ2Uob3B0aW9ucy5pbWFnZSwgeCwgeSwgcmF0aW9JbWdTaXplLCByYXRpb0ltZ1NpemUpXHJcbiAgICAvLyDnlLvlnIbop5Lnn6nlvaJcclxuICAgIGZ1bmN0aW9uIGRyYXdSb3VuZGVkUmVjdChjdHhpLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCByLCBsaW5lV2lkdGgsIGZpbGwsIHN0cm9rZSkge1xyXG4gICAgICBjdHhpLnNldExpbmVXaWR0aChsaW5lV2lkdGgpXHJcbiAgICAgIGN0eGkuc2V0RmlsbFN0eWxlKG9wdGlvbnMuYmFja2dyb3VuZClcclxuICAgICAgY3R4aS5zZXRTdHJva2VTdHlsZShvcHRpb25zLmJhY2tncm91bmQpXHJcbiAgICAgIGN0eGkuYmVnaW5QYXRoKCkgLy8gZHJhdyB0b3AgYW5kIHRvcCByaWdodCBjb3JuZXJcclxuICAgICAgY3R4aS5tb3ZlVG8oeCArIHIsIHkpXHJcbiAgICAgIGN0eGkuYXJjVG8oeCArIHdpZHRoLCB5LCB4ICsgd2lkdGgsIHkgKyByLCByKSAvLyBkcmF3IHJpZ2h0IHNpZGUgYW5kIGJvdHRvbSByaWdodCBjb3JuZXJcclxuICAgICAgY3R4aS5hcmNUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQsIHggKyB3aWR0aCAtIHIsIHkgKyBoZWlnaHQsIHIpIC8vIGRyYXcgYm90dG9tIGFuZCBib3R0b20gbGVmdCBjb3JuZXJcclxuICAgICAgY3R4aS5hcmNUbyh4LCB5ICsgaGVpZ2h0LCB4LCB5ICsgaGVpZ2h0IC0gciwgcikgLy8gZHJhdyBsZWZ0IGFuZCB0b3AgbGVmdCBjb3JuZXJcclxuICAgICAgY3R4aS5hcmNUbyh4LCB5LCB4ICsgciwgeSwgcilcclxuICAgICAgY3R4aS5jbG9zZVBhdGgoKVxyXG4gICAgICBpZiAoZmlsbCkge1xyXG4gICAgICAgIGN0eGkuZmlsbCgpXHJcbiAgICAgIH1cclxuICAgICAgaWYgKHN0cm9rZSkge1xyXG4gICAgICAgIGN0eGkuc3Ryb2tlKClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBfYXBwLmhpZGVMb2FkaW5nKClcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U2hyZVVzZXJQb3N0ZXJCYWNrZ3JvdW5kKG9ianMpIHtcclxuICAvLyDmo4Dmn6Xog4zmma/lm77mmK/lkKblrZjlnKjkuo7mnKzlnLDvvIwg6Iul5a2Y5Zyo55u05o6l6L+U5Zue77yMIOWQpuWImeiwg+eUqGdldFNocmVVc2VyUG9zdGVyQmFja2dyb3VuZEZj5pa55rOVXHJcbiAgbGV0IHsgYmFja2dyb3VuZEltYWdlLCB0eXBlIH0gPSBvYmpzXHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIF9hcHAuc2hvd0xvYWRpbmcoJ+ato+WcqOiOt+WPlua1t+aKpeiDjOaZr+WbvicpXHJcbiAgICAgIGxldCBwYmdcclxuXHJcbiAgICAgIHBiZyA9IGdldFBvc3RlclN0b3JhZ2UodHlwZSlcclxuXHJcblxyXG5cclxuXHJcbiAgICAgIF9hcHAubG9nKCfojrflj5bnmoTnvJPlrZg6JyArIEpTT04uc3RyaW5naWZ5KHBiZykpXHJcbiAgICAgIGlmIChwYmcgJiYgcGJnLnBhdGggJiYgcGJnLm5hbWUpIHtcclxuICAgICAgICBfYXBwLmxvZygn5rW35oql5pyJ57yT5a2YLCDlh4blpIfojrflj5blkI7nq6/og4zmma/lm77ov5vooYzlr7nmr5QnKVxyXG4gICAgICAgIGNvbnN0IGltYWdlID0gYXdhaXQgX2FwcC5nZXRQb3N0ZXJVcmwob2JqcylcclxuICAgICAgICBfYXBwLmxvZygn5YeG5aSH5a+55q+UbmFtZeaYr+WQpuebuOWQjCcpXHJcbiAgICAgICAgaWYgKHBiZy5uYW1lID09PSBfYXBwLmZpbGVOYW1lSW5QYXRoKGltYWdlKSkge1xyXG4gICAgICAgICAgX2FwcC5sb2coJ25hbWXnm7jlkIwsIOWIpOaWreivpeiDjOaZr+WbvuaYr+WQpuWtmOWcqOS6juacrOWcsCcpXHJcbiAgICAgICAgICBjb25zdCBpbmRleCA9IGF3YWl0IF9hcHAuY2hlY2tGaWxlX1Byb21pc2VGYyhwYmcucGF0aClcclxuICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgIF9hcHAubG9nKCfmtbfmiqVzYXZl6Lev5b6E5a2Y5ZyoLCDlr7nmr5Tlrr3pq5jkv6Hmga8sIOWtmOWCqOW5tui+k+WHuicpXHJcbiAgICAgICAgICAgIGNvbnN0IGltYWdlT2JqID0gYXdhaXQgX2FwcC5nZXRJbWFnZUluZm9fUHJvbWlzZUZjKHBiZy5wYXRoKVxyXG4gICAgICAgICAgICBsZXQgb2JqID0geyAuLi5wYmcgfVxyXG4gICAgICAgICAgICBpZiAoIXBiZy53aWR0aCB8fCAhcGJnLmhlaWdodCB8fCBwYmcud2lkdGggIT09IGltYWdlT2JqLndpZHRoIHx8IHBiZy5oZWlnaHQgIT09IGltYWdlT2JqLmhlaWdodCkge1xyXG4gICAgICAgICAgICAgIF9hcHAubG9nKCflrr3pq5jlr7nmr5TkuI3pgJrov4fvvIwg6YeN5paw6I635Y+WJylcclxuICAgICAgICAgICAgICBjb25zdCBzYXZlZEZpbGVQYXRoID0gYXdhaXQgZ2V0U2hyZVVzZXJQb3N0ZXJCYWNrZ3JvdW5kRmMob2JqcywgaW1hZ2UpXHJcbiAgICAgICAgICAgICAgX2FwcC5oaWRlTG9hZGluZygpXHJcbiAgICAgICAgICAgICAgcmVzb2x2ZShzYXZlZEZpbGVQYXRoKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgIF9hcHAubG9nKCflrr3pq5jlr7nmr5TpgJrov4csIOWGjeasoeWtmOWCqCwg5bm26L+U5Zue6Lev5b6EJylcclxuICAgICAgICAgICAgICBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAuLi5wYmcsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogaW1hZ2VPYmoud2lkdGgsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGltYWdlT2JqLmhlaWdodFxyXG4gICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgc2V0UG9zdGVyU3RvcmFnZSh0eXBlLCB7IC4uLm9iaiB9KVxyXG5cclxuICAgICAgICAgICAgICBfYXBwLmhpZGVMb2FkaW5nKClcclxuICAgICAgICAgICAgICByZXNvbHZlKG9iailcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgX2FwcC5sb2coJ+a1t+aKpXNhdmXot6/lvoTkuI3lrZjlnKgsIOmHjeaWsOiOt+WPlua1t+aKpScpXHJcbiAgICAgICAgICAgIGNvbnN0IHNhdmVkRmlsZVBhdGggPSBhd2FpdCBnZXRTaHJlVXNlclBvc3RlckJhY2tncm91bmRGYyhvYmpzLCBpbWFnZSlcclxuICAgICAgICAgICAgX2FwcC5oaWRlTG9hZGluZygpXHJcbiAgICAgICAgICAgIHJlc29sdmUoc2F2ZWRGaWxlUGF0aClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgX2FwcC5sb2coJ25hbWXkuI3nm7jlkIwsIOmHjeaWsOiOt+WPlua1t+aKpScpXHJcbiAgICAgICAgICBjb25zdCBzYXZlZEZpbGVQYXRoID0gYXdhaXQgZ2V0U2hyZVVzZXJQb3N0ZXJCYWNrZ3JvdW5kRmMob2JqcywgaW1hZ2UpXHJcbiAgICAgICAgICBfYXBwLmhpZGVMb2FkaW5nKClcclxuICAgICAgICAgIHJlc29sdmUoc2F2ZWRGaWxlUGF0aClcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgX2FwcC5sb2coJ+a1t+aKpeiDjOaZr+Wbvuayoeaciee8k+WtmCwg5YeG5aSH6I635Y+W5rW35oql6IOM5pmv5Zu+JylcclxuICAgICAgICBjb25zdCBzYXZlZEZpbGVQYXRoID0gYXdhaXQgZ2V0U2hyZVVzZXJQb3N0ZXJCYWNrZ3JvdW5kRmMob2JqcylcclxuICAgICAgICBfYXBwLmhpZGVMb2FkaW5nKClcclxuICAgICAgICByZXNvbHZlKHNhdmVkRmlsZVBhdGgpXHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgX2FwcC5oaWRlTG9hZGluZygpXHJcbiAgICAgIF9hcHAuc2hvd1RvYXN0KCfojrflj5bliIbkuqvnlKjmiLfog4zmma/lm77lpLHotKU6JyArIEpTT04uc3RyaW5naWZ5KGUpKVxyXG4gICAgICBfYXBwLmxvZyhKU09OLnN0cmluZ2lmeShlKSlcclxuICAgICAgcmVqZWN0KGUpXHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0UG9zdGVyU3RvcmFnZSh0eXBlKSB7XHJcbiAgcmV0dXJuIF9hcHAuZ2V0U3RvcmFnZVN5bmMoZ2V0U3RvcmFnZUtleSh0eXBlKSlcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlUG9zdGVyU3RvcmFnZSh0eXBlKSB7XHJcbiAgY29uc3QgU2hyZVVzZXJQb3N0ZXJCYWNrZ3JvdW5kS2V5ID0gZ2V0U3RvcmFnZUtleSh0eXBlKVxyXG4gIGNvbnN0IHBiZyA9IF9hcHAuZ2V0U3RvcmFnZVN5bmMoU2hyZVVzZXJQb3N0ZXJCYWNrZ3JvdW5kS2V5KVxyXG4gIGlmIChwYmcgJiYgcGJnLnBhdGgpIHtcclxuICAgIF9hcHAucmVtb3ZlU2F2ZWRGaWxlKHBiZy5wYXRoKVxyXG4gICAgX2FwcC5yZW1vdmVTdG9yYWdlU3luYyhTaHJlVXNlclBvc3RlckJhY2tncm91bmRLZXkpXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRQb3N0ZXJTdG9yYWdlKHR5cGUsIGRhdGEpIHtcclxuICBfYXBwLnNldFN0b3JhZ2UoZ2V0U3RvcmFnZUtleSh0eXBlKSwgZGF0YSlcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U3RvcmFnZUtleSh0eXBlKSB7XHJcbiAgcmV0dXJuIFNocmVVc2VyUG9zdGVyQmFja2dyb3VuZEtleSArICh0eXBlIHx8ICdkZWZhdWx0JylcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0U2hyZVVzZXJQb3N0ZXJCYWNrZ3JvdW5kRmMob2JqcywgdXBpbWFnZSkge1xyXG4gIC8vIOS4i+i9veW5tuS/neWtmOiDjOaZr+WbvuaWueazlVxyXG4gIGxldCB7IGJhY2tncm91bmRJbWFnZSwgdHlwZSB9ID0gb2Jqc1xyXG4gIF9hcHAubG9nKCfojrflj5bliIbkuqvog4zmma/lm74sIOWwneivlea4heepuuacrOWcsOaVsOaNricpXHJcbiAgcmVtb3ZlUG9zdGVyU3RvcmFnZSh0eXBlKVxyXG4gIHJldHVybiBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBfYXBwLnNob3dMb2FkaW5nKCfmraPlnKjkuIvovb3mtbfmiqXog4zmma/lm74nKVxyXG4gICAgICBpZiAodXBpbWFnZSkge1xyXG4gICAgICAgIF9hcHAubG9nKCfmnInku47lkI7nq6/ojrflj5bnmoTog4zmma/lm77niYfot6/lvoQnKVxyXG4gICAgICAgIF9hcHAubG9nKCflsJ3or5XkuIvovb3lubbkv53lrZjog4zmma/lm74nKVxyXG4gICAgICAgIGNvbnN0IG5hbWUgPSBfYXBwLmZpbGVOYW1lSW5QYXRoKHVwaW1hZ2UpXHJcbiAgICAgICAgY29uc3Qgc2F2ZWRGaWxlUGF0aCA9IGF3YWl0IF9hcHAuZG93bkxvYWRBbmRTYXZlRmlsZV9Qcm9taXNlRmModXBpbWFnZSlcclxuICAgICAgICBpZiAoc2F2ZWRGaWxlUGF0aCkge1xyXG4gICAgICAgICAgX2FwcC5sb2coJ+S4i+i9veW5tuS/neWtmOiDjOaZr+WbvuaIkOWKnzonICsgc2F2ZWRGaWxlUGF0aClcclxuICAgICAgICAgIGNvbnN0IGltYWdlT2JqID0gYXdhaXQgX2FwcC5nZXRJbWFnZUluZm9fUHJvbWlzZUZjKHNhdmVkRmlsZVBhdGgpXHJcbiAgICAgICAgICBjb25zdCByZXR1cm5PYmogPSB7XHJcbiAgICAgICAgICAgIHBhdGg6IHNhdmVkRmlsZVBhdGgsXHJcbiAgICAgICAgICAgIHdpZHRoOiBpbWFnZU9iai53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiBpbWFnZU9iai5oZWlnaHQsXHJcbiAgICAgICAgICAgIG5hbWVcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBzZXRQb3N0ZXJTdG9yYWdlKHR5cGUsIHsgLi4ucmV0dXJuT2JqIH0pXHJcblxyXG4gICAgICAgICAgX2FwcC5oaWRlTG9hZGluZygpXHJcbiAgICAgICAgICByZXNvbHZlKHJldHVybk9iailcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgX2FwcC5oaWRlTG9hZGluZygpXHJcbiAgICAgICAgICByZWplY3QoJ25vdCBmaW5kIHNhdmVkRmlsZVBhdGgnKVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBfYXBwLmxvZygn5rKh5pyJ5LuO5ZCO56uv6I635Y+W55qE6IOM5pmv5Zu+54mH6Lev5b6ELCDlsJ3or5Xku47lkI7nq6/ojrflj5bog4zmma/lm77niYfot6/lvoQnKVxyXG4gICAgICAgIGNvbnN0IGltYWdlID0gYXdhaXQgX2FwcC5nZXRQb3N0ZXJVcmwob2JqcylcclxuICAgICAgICBfYXBwLmxvZygn5bCd6K+V5LiL6L295bm25L+d5a2Y6IOM5pmv5Zu+OicgKyBpbWFnZSlcclxuICAgICAgICBjb25zdCBzYXZlZEZpbGVQYXRoID0gYXdhaXQgX2FwcC5kb3duTG9hZEFuZFNhdmVGaWxlX1Byb21pc2VGYyhpbWFnZSlcclxuICAgICAgICBpZiAoc2F2ZWRGaWxlUGF0aCkge1xyXG4gICAgICAgICAgX2FwcC5sb2coJ+S4i+i9veW5tuS/neWtmOiDjOaZr+WbvuaIkOWKnzonICsgc2F2ZWRGaWxlUGF0aClcclxuICAgICAgICAgIGNvbnN0IGltYWdlT2JqID0gYXdhaXQgX2FwcC5nZXRJbWFnZUluZm9fUHJvbWlzZUZjKHNhdmVkRmlsZVBhdGgpXHJcbiAgICAgICAgICBfYXBwLmxvZygn6I635Y+W5Zu+54mH5L+h5oGv5oiQ5YqfJylcclxuICAgICAgICAgIGNvbnN0IHJldHVybk9iaiA9IHtcclxuICAgICAgICAgICAgcGF0aDogc2F2ZWRGaWxlUGF0aCxcclxuICAgICAgICAgICAgd2lkdGg6IGltYWdlT2JqLndpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IGltYWdlT2JqLmhlaWdodCxcclxuICAgICAgICAgICAgbmFtZTogX2FwcC5maWxlTmFtZUluUGF0aChpbWFnZSlcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIF9hcHAubG9nKCfmi7zmjqXog4zmma/lm77kv6Hmga/lr7nosaHmiJDlip86JyArIEpTT04uc3RyaW5naWZ5KHJldHVybk9iaikpXHJcblxyXG5cclxuICAgICAgICAgIHNldFBvc3RlclN0b3JhZ2UodHlwZSwgeyAuLi5yZXR1cm5PYmogfSlcclxuXHJcblxyXG4gICAgICAgICAgX2FwcC5oaWRlTG9hZGluZygpXHJcbiAgICAgICAgICBfYXBwLmxvZygn6L+U5Zue6IOM5pmv5Zu+5L+h5oGv5a+56LGhJylcclxuICAgICAgICAgIHJlc29sdmUoeyAuLi5yZXR1cm5PYmogfSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgX2FwcC5oaWRlTG9hZGluZygpXHJcbiAgICAgICAgICByZWplY3QoJ25vdCBmaW5kIHNhdmVkRmlsZVBhdGgnKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAvLyBUT0RPIGhhbmRsZSB0aGUgZXhjZXB0aW9uXHJcbiAgICAgIHJlamVjdChlKVxyXG4gICAgfVxyXG4gIH0pXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHRnZXRTaGFyZVBvc3RlcixcclxuXHRzZXRUZXh0LFxyXG5cdHNldEltYWdlLFxyXG5cdGRyYXdUZXh0LFxyXG5cdGRyYXdJbWFnZSxcclxuXHRkcmF3UXJDb2RlXHJcbn1cclxuLy8gbW9kdWxlLmV4cG9ydHMgPSB7XHJcbi8vICAgZ2V0U2hhcmVQb3N0ZXIsXHJcbi8vICAgc2V0VGV4dCxcclxuLy8gICBzZXRJbWFnZSxcclxuLy8gICBkcmF3VGV4dCxcclxuLy8gICBkcmF3SW1hZ2UsXHJcbi8vICAgZHJhd1FyQ29kZVxyXG4vLyB9XHJcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG5sZXQgbG9nID0gY29uc29sZS5sb2dcclxuXHJcbmxldCBfYXBwID0ge1xyXG5cdGxvZyh0KSB7XHJcblx0XHRsb2codClcclxuXHR9LCBcclxuICBzaG93TG9hZGluZyhtc2csIGlmbWFzaykge1xyXG4gICAgdW5pLnNob3dMb2FkaW5nKHtcclxuICAgICAgdGl0bGU6IG1zZyxcclxuICAgICAgbWFzazogaWZtYXNrIHx8IGZhbHNlXHJcbiAgICB9KVxyXG4gIH0sXHJcbiAgaGlkZUxvYWRpbmcoKSB7XHJcbiAgICB1bmkuaGlkZUxvYWRpbmcoKVxyXG4gIH0sXHJcbiAgc2hvd1RvYXN0KG1zZywgaWNvbikge1xyXG4gICAgdW5pLnNob3dUb2FzdCh7XHJcbiAgICAgIHRpdGxlOiBtc2csXHJcbiAgICAgIGljb246IGljb24gfHwgJ25vbmUnXHJcbiAgICB9KVxyXG4gIH0sXHJcbiAgLy8g6YeN54K55L+d5oqk5a+55LiL6YKj5LiqXHJcbiAgZ2V0UG9zdGVyVXJsKG9ianMpIHtcclxuICAgIC8vIOWQjuerr+iOt+WPluiDjOaZr+WbvueahHVybOi3r+W+hOaWueazlVxyXG4gICAgbGV0IHsgYmFja2dyb3VuZEltYWdlLCB0eXBlLCBmb3JtRGF0YSB9ID0gb2Jqc1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChycywgcmopID0+IHtcclxuICAgICAgbGV0IGltYWdlXHJcbiAgICAgIGlmIChiYWNrZ3JvdW5kSW1hZ2UpIHtcclxuICAgICAgICBpbWFnZSA9IGJhY2tncm91bmRJbWFnZVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN3aXRjaCAoXHJcbiAgICAgICAgICB0eXBlIC8vIOagueaNrnR5cGXojrflj5bog4zmma/lm74sIOS4gOiIrOimgeaUueaIkHJlcXVlc3Tojrflj5ZcclxuICAgICAgICApIHtcclxuICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgaW1hZ2UgPSAnJ1xyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgaW1hZ2UgPSAnaHR0cDovL2ItYXBpLmJhb2R1b2R1by5jbHViL3d3d3Jvb3QvdXBsb2Fkcy9hcGkvMjQyLTg3My01ODMvMjAyMC0wMi0xOC81ZTRiYTg3OGFlNTdhZTEzNThlMGUzZGQuanBnJ1xyXG4gICAgICAgICAgICBicmVha1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoaW1hZ2UpIHtcclxuICAgICAgICBycyhpbWFnZSkgLy8gcmVzb2x2ZeWbvueJh+eahOi3r+W+hFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJqKCfog4zmma/lm77niYfot6/lvoTkuI3lrZjlnKgnKVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH0sXHJcblxyXG4gIGlzQXJyYXkoYXJnKSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSdcclxuICB9LFxyXG4gIGlzT2JqZWN0KGFyZykge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpID09PSAnW29iamVjdCBPYmplY3RdJ1xyXG4gIH0sXHJcbiAgaXNQcm9taXNlKG9iaikge1xyXG4gICAgcmV0dXJuICEhb2JqICYmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSAmJiB0eXBlb2Ygb2JqLnRoZW4gPT09ICdmdW5jdGlvbidcclxuICB9LFxyXG4gIGlzTnVsbChhcmcpIHtcclxuICAgIHJldHVybiBhcmcgPT09IG51bGxcclxuICB9LFxyXG4gIGlzVW5kZWZpbmVkKGFyZykge1xyXG4gICAgcmV0dXJuIGFyZyA9PT0gdW5kZWZpbmVkXHJcbiAgfSxcclxuICBpc1VuZGVmKGFyZykge1xyXG4gICAgcmV0dXJuIGFyZyA9PT0gdW5kZWZpbmVkXHJcbiAgfSxcclxuICBpc05vdE51bGxfc3RyaW5nKGFyZykge1xyXG4gICAgcmV0dXJuIGFyZyAhPT0gbnVsbCAmJiBhcmcgIT09IHVuZGVmaW5lZCAmJiBhcmcgIT09ICcnXHJcbiAgfSxcclxuICBpc0ZuKGZuKSB7XHJcbiAgICByZXR1cm4gZm4gJiYgdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nXHJcbiAgfSxcclxuICBnZXRTdG9yYWdlKGtleSwgc2NiLCBmY2IpIHtcclxuICAgIHVuaS5nZXRTdG9yYWdlKHtcclxuICAgICAga2V5LFxyXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXMpIHtcclxuICAgICAgICBpZiAocmVzLmRhdGEgJiYgcmVzLmRhdGEgIT0gJycpIHtcclxuICAgICAgICAgIGlmIChzY2IpIHNjYihyZXMuZGF0YSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaWYgKGZjYikgZmNiKClcclxuICAgICAgICB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGZhaWw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIGlmIChmY2IpIGZjYigpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfSxcclxuICBzZXRTdG9yYWdlKGtleSwgZGF0YSkge1xyXG4gICAgdW5pLnNldFN0b3JhZ2Uoe1xyXG4gICAgICBrZXksXHJcbiAgICAgIGRhdGFcclxuICAgIH0pXHJcbiAgfSxcclxuICBzZXRTdG9yYWdlU3luYyhrZXksIGRhdGEpIHtcclxuICAgIHVuaS5zZXRTdG9yYWdlU3luYyhrZXksIGRhdGEpXHJcbiAgfSxcclxuICBnZXRTdG9yYWdlU3luYyhrZXkpIHtcclxuICAgIHJldHVybiB1bmkuZ2V0U3RvcmFnZVN5bmMoa2V5KVxyXG4gIH0sXHJcbiAgY2xlYXJTdG9yYWdlU3luYygpIHtcclxuICAgIHVuaS5jbGVhclN0b3JhZ2VTeW5jKClcclxuICB9LFxyXG4gIHJlbW92ZVN0b3JhZ2VTeW5jKGtleSkge1xyXG4gICAgdW5pLnJlbW92ZVN0b3JhZ2VTeW5jKGtleSlcclxuICB9LFxyXG4gIGdldEltYWdlSW5mbyh1cmwsIGNiLCBmY2IpIHtcclxuICAgIHVybCA9IGNoZWNrTVBVcmwodXJsKVxyXG4gICAgdW5pLmdldEltYWdlSW5mbyh7XHJcbiAgICAgIHNyYzogdXJsLFxyXG4gICAgICBzdWNjZXNzKHJlcykge1xyXG4gICAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIGNiKHJlcylcclxuICAgICAgfSxcclxuICAgICAgZmFpbChlcnIpIHtcclxuICAgICAgICBpZiAoZmNiICYmIHR5cGVvZiBmY2IgPT09ICdmdW5jdGlvbicpIGZjYihlcnIpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfSxcclxuICAvLyDkuIvovb3mlofku7ZcclxuICBkb3dubG9hZEZpbGUodXJsLCBjYikge1xyXG4gICAgdXJsID0gY2hlY2tNUFVybCh1cmwpXHJcbiAgICB1bmkuZG93bmxvYWRGaWxlKHtcclxuICAgICAgdXJsLFxyXG4gICAgICBzdWNjZXNzKHJlcykge1xyXG4gICAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIGNiKHJlcylcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9LFxyXG4gIGRvd25sb2FkRmlsZV9Qcm9taXNlRmModXJsKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJzLCByaikgPT4ge1xyXG4gICAgICBpZiAodXJsLnN1YnN0cmluZygwLCA0KSAhPT0gJ2h0dHAnKSB7XHJcbiAgICAgICAgcnModXJsKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHVybCA9IGNoZWNrTVBVcmwodXJsKVxyXG4gICAgICAgIHVuaS5kb3dubG9hZEZpbGUoe1xyXG4gICAgICAgICAgdXJsLFxyXG4gICAgICAgICAgc3VjY2VzcyhyZXMpIHtcclxuICAgICAgICAgICAgaWYgKHJlcyAmJiByZXMudGVtcEZpbGVQYXRoKSB7XHJcbiAgICAgICAgICAgICAgcnMocmVzLnRlbXBGaWxlUGF0aClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICByaignbm90IGZpbmQgdGVtcEZpbGVQYXRoJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGZhaWwoZXJyKSB7XHJcbiAgICAgICAgICAgIHJqKGVycilcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIH0sXHJcbiAgXHJcbiAgLy8g5L+d5a2YXHJcbiAgc2F2ZUZpbGUodXJsKSB7XHJcbiAgICB1bmkuc2F2ZUZpbGUoe1xyXG4gICAgICB0ZW1wRmlsZVBhdGg6IHVybCxcclxuICAgICAgc3VjY2VzcyhyZXMpIHtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9LFxyXG4gIGRvd25Mb2FkQW5kU2F2ZUZpbGVfUHJvbWlzZUZjKHVybCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChycywgcmopID0+IHtcclxuICAgICAgaWYgKHVybC5zdWJzdHJpbmcoMCwgNCkgPT09ICdodHRwJykge1xyXG4gICAgICAgIHVybCA9IGNoZWNrTVBVcmwodXJsKVxyXG4gICAgICAgIHVuaS5kb3dubG9hZEZpbGUoe1xyXG4gICAgICAgICAgdXJsLFxyXG4gICAgICAgICAgc3VjY2VzcyhkX3Jlcykge1xyXG4gICAgICAgICAgICBpZiAoZF9yZXMgJiYgZF9yZXMudGVtcEZpbGVQYXRoKSB7XHJcblxyXG5cclxuXHJcblxyXG5cclxuICAgICAgICAgICAgICB1bmkuc2F2ZUZpbGUoe1xyXG4gICAgICAgICAgICAgICAgdGVtcEZpbGVQYXRoOiBkX3Jlcy50ZW1wRmlsZVBhdGgsXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzKHNfcmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgIGlmIChzX3JlcyAmJiBzX3Jlcy5zYXZlZEZpbGVQYXRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcnMoc19yZXMuc2F2ZWRGaWxlUGF0aClcclxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBycyhkX3Jlcy50ZW1wRmlsZVBhdGgpXHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmYWlsKGVycikge1xyXG4gICAgICAgICAgICAgICAgICBycyhkX3Jlcy50ZW1wRmlsZVBhdGgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgcmooJ25vdCBmaW5kIHRlbXBGaWxlUGF0aCcpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBmYWlsKGVycikge1xyXG4gICAgICAgICAgICByaihlcnIpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBycyh1cmwpXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfSxcclxuICBjaGVja0ZpbGVfUHJvbWlzZUZjKHVybCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChycywgcmopID0+IHtcclxuICAgICAgdW5pLmdldFNhdmVkRmlsZUxpc3Qoe1xyXG4gICAgICAgIHN1Y2Nlc3MocmVzKSB7XHJcbiAgICAgICAgICBsZXQgZCA9IHJlcy5maWxlTGlzdFxyXG4gICAgICAgICAgbGV0IGluZGV4ID0gZC5maW5kSW5kZXgoaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtLmZpbGVQYXRoID09PSB1cmxcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICBycyhpbmRleClcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZhaWwoZXJyKSB7XHJcbiAgICAgICAgICByaihlcnIpXHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgfSlcclxuICB9LFxyXG4gIHJlbW92ZVNhdmVkRmlsZShwYXRoKSB7XHJcbiAgICB1bmkuZ2V0U2F2ZWRGaWxlTGlzdCh7XHJcbiAgICAgIHN1Y2Nlc3MocmVzKSB7XHJcbiAgICAgICAgbGV0IGQgPSByZXMuZmlsZUxpc3RcclxuICAgICAgICBsZXQgaW5kZXggPSBkLmZpbmRJbmRleChpdGVtID0+IHtcclxuICAgICAgICAgIHJldHVybiBpdGVtLmZpbGVQYXRoID09PSBwYXRoXHJcbiAgICAgICAgfSlcclxuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgdW5pLnJlbW92ZVNhdmVkRmlsZSh7XHJcbiAgICAgICAgICAgIGZpbGVQYXRoOiBwYXRoXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9LFxyXG4gIGZpbGVOYW1lSW5QYXRoKHBhdGgpIHtcclxuICAgIGxldCBzID0gcGF0aC5zcGxpdCgnLycpXHJcbiAgICByZXR1cm4gc1tzLmxlbmd0aCAtIDFdXHJcbiAgfSxcclxuICBcclxuICBnZXRJbWFnZUluZm9fUHJvbWlzZUZjKGltZ1BhdGgpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocnMsIHJqKSA9PiB7XHJcbiAgICAgIGltZ1BhdGggPSBjaGVja01QVXJsKGltZ1BhdGgpXHJcbiAgICAgIHVuaS5nZXRJbWFnZUluZm8oe1xyXG4gICAgICAgIHNyYzogaW1nUGF0aCxcclxuICAgICAgICBzdWNjZXNzOiByZXMgPT4ge1xyXG4gICAgICAgICAgcnMocmVzKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZmFpbDogZXJyID0+IHtcclxuICAgICAgICAgIHJqKGVycilcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9KVxyXG4gIH0sXHJcbiAgcHJldmlld0ltYWdlKHVybHMpIHtcclxuICAgIGlmICh0eXBlb2YgdXJscyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdXJscyA9IFt1cmxzXVxyXG4gICAgfVxyXG4gICAgdW5pLnByZXZpZXdJbWFnZSh7XHJcbiAgICAgIHVybHNcclxuICAgIH0pXHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja01QVXJsKHVybCkge1xyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgcmV0dXJuIHVybFxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IF9hcHBcclxuIiwiIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxyXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG5cclxuIC8qKlxyXG4gICAgICog6I635Y+W5Y2V5Liq5a2X56ym55qEdXRmOOe8lueggVxyXG4gICAgICogdW5pY29kZSBCTVDlubPpnaLnuqY2NTUzNeS4quWtl+esplxyXG4gICAgICogQHBhcmFtIHtudW19IGNvZGVcclxuICAgICAqIHJldHVybiB7YXJyYXl9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIHVuaWNvZGVGb3JtYXQ4KGNvZGUpIHtcclxuICAgICAgICAvLyAxIGJ5dGVcclxuICAgICAgICB2YXIgYzAsIGMxLCBjMlxyXG4gICAgICAgIGlmIChjb2RlIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbY29kZV1cclxuICAgICAgICAgICAgLy8gMiBieXRlc1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY29kZSA8IDIwNDgpIHtcclxuICAgICAgICAgICAgYzAgPSAxOTIgKyAoY29kZSA+PiA2KVxyXG4gICAgICAgICAgICBjMSA9IDEyOCArIChjb2RlICYgNjMpXHJcbiAgICAgICAgICAgIHJldHVybiBbYzAsIGMxXVxyXG4gICAgICAgICAgICAvLyAzIGJ5dGVzXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYzAgPSAyMjQgKyAoY29kZSA+PiAxMilcclxuICAgICAgICAgICAgYzEgPSAxMjggKyAoY29kZSA+PiA2ICYgNjMpXHJcbiAgICAgICAgICAgIGMyID0gMTI4ICsgKGNvZGUgJiA2MylcclxuICAgICAgICAgICAgcmV0dXJuIFtjMCwgYzEsIGMyXVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5a2X56ym5Liy55qEdXRmOOe8lueggeWtl+iKguS4slxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xyXG4gICAgICogQHJldHVybiB7YXJyYXl9XHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGdldFVURjhCeXRlcyhzdHJpbmcpIHtcclxuICAgICAgICB2YXIgdXRmOGNvZGVzID0gW11cclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB2YXIgY29kZSA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXHJcbiAgICAgICAgICAgIHZhciB1dGY4ID0gdW5pY29kZUZvcm1hdDgoY29kZSlcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB1dGY4Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICB1dGY4Y29kZXMucHVzaCh1dGY4W2pdKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB1dGY4Y29kZXNcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5LqM57u056CB566X5rOV5a6e546wXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YSAgICAgICAgICAgICAg6KaB57yW56CB55qE5L+h5oGv5a2X56ym5LiyXHJcbiAgICAgKiBAcGFyYW0ge251bX0gZXJyb3JDb3JyZWN0TGV2ZWwg57qg6ZSZ562J57qnXHJcbiAgICAgKi9cclxuICAgIGV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFFSQ29kZUFsZyhkYXRhLCBlcnJvckNvcnJlY3RMZXZlbCkge1xyXG4gICAgICAgIHRoaXMudHlwZU51bWJlciA9IC0xIC8vIOeJiOacrFxyXG4gICAgICAgIHRoaXMuZXJyb3JDb3JyZWN0TGV2ZWwgPSBlcnJvckNvcnJlY3RMZXZlbFxyXG4gICAgICAgIHRoaXMubW9kdWxlcyA9IG51bGwgLy8g5LqM57u055+p6Zi177yM5a2Y5pS+5pyA57uI57uT5p6cXHJcbiAgICAgICAgdGhpcy5tb2R1bGVDb3VudCA9IDAgLy8g55+p6Zi15aSn5bCPXHJcbiAgICAgICAgdGhpcy5kYXRhQ2FjaGUgPSBudWxsIC8vIOaVsOaNrue8k+WtmFxyXG4gICAgICAgIHRoaXMucnNCbG9ja3MgPSBudWxsIC8vIOeJiOacrOaVsOaNruS/oeaBr1xyXG4gICAgICAgIHRoaXMudG90YWxEYXRhQ291bnQgPSAtMSAvLyDlj6/kvb/nlKjnmoTmlbDmja7ph49cclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhXHJcbiAgICAgICAgdGhpcy51dGY4Ynl0ZXMgPSBnZXRVVEY4Qnl0ZXMoZGF0YSlcclxuICAgICAgICB0aGlzLm1ha2UoKVxyXG4gICAgfVxyXG4gICAgUVJDb2RlQWxnLnByb3RvdHlwZSA9IHtcclxuICAgICAgICBjb25zdHJ1Y3RvcjogUVJDb2RlQWxnLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiOt+WPluS6jOe7tOeggeefqemYteWkp+Wwj1xyXG4gICAgICAgICAqIEByZXR1cm4ge251bX0g55+p6Zi15aSn5bCPXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0TW9kdWxlQ291bnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kdWxlQ291bnRcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOe8lueggVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1ha2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRSaWdodFR5cGUoKVxyXG4gICAgICAgICAgICB0aGlzLmRhdGFDYWNoZSA9IHRoaXMuY3JlYXRlRGF0YSgpXHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUXJjb2RlKClcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiuvue9ruS6jOS9jeefqemYteWKn+iDveWbvuW9olxyXG4gICAgICAgICAqIEBwYXJhbSAge2Jvb2x9IHRlc3Qg6KGo56S65piv5ZCm5Zyo5a+75om+5pyA5aW95o6p6Iac6Zi25q61XHJcbiAgICAgICAgICogQHBhcmFtICB7bnVtfSBtYXNrUGF0dGVybiDmjqnohpznmoTniYjmnKxcclxuICAgICAgICAgKi9cclxuICAgICAgICBtYWtlSW1wbDogZnVuY3Rpb24gKG1hc2tQYXR0ZXJuKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9kdWxlQ291bnQgPSB0aGlzLnR5cGVOdW1iZXIgKiA0ICsgMTdcclxuICAgICAgICAgICAgdGhpcy5tb2R1bGVzID0gbmV3IEFycmF5KHRoaXMubW9kdWxlQ291bnQpXHJcbiAgICAgICAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IHRoaXMubW9kdWxlQ291bnQ7IHJvdysrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZHVsZXNbcm93XSA9IG5ldyBBcnJheSh0aGlzLm1vZHVsZUNvdW50KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBQb3NpdGlvblByb2JlUGF0dGVybigwLCAwKVxyXG4gICAgICAgICAgICB0aGlzLnNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm4odGhpcy5tb2R1bGVDb3VudCAtIDcsIDApXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBQb3NpdGlvblByb2JlUGF0dGVybigwLCB0aGlzLm1vZHVsZUNvdW50IC0gNylcclxuICAgICAgICAgICAgdGhpcy5zZXR1cFBvc2l0aW9uQWRqdXN0UGF0dGVybigpXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBUaW1pbmdQYXR0ZXJuKClcclxuICAgICAgICAgICAgdGhpcy5zZXR1cFR5cGVJbmZvKHRydWUsIG1hc2tQYXR0ZXJuKVxyXG4gICAgICAgICAgICBpZiAodGhpcy50eXBlTnVtYmVyID49IDcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0dXBUeXBlTnVtYmVyKHRydWUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tYXBEYXRhKHRoaXMuZGF0YUNhY2hlLCBtYXNrUGF0dGVybilcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiuvue9ruS6jOe7tOeggeeahOS9jee9ruaOoua1i+WbvuW9olxyXG4gICAgICAgICAqIEBwYXJhbSAge251bX0gcm93IOaOoua1i+WbvuW9oueahOS4reW/g+aoquWdkOagh1xyXG4gICAgICAgICAqIEBwYXJhbSAge251bX0gY29sIOaOoua1i+WbvuW9oueahOS4reW/g+e6teWdkOagh1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldHVwUG9zaXRpb25Qcm9iZVBhdHRlcm46IGZ1bmN0aW9uIChyb3csIGNvbCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciByID0gLTE7IHIgPD0gNzsgcisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocm93ICsgciA8PSAtMSB8fCB0aGlzLm1vZHVsZUNvdW50IDw9IHJvdyArIHIpIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBjID0gLTE7IGMgPD0gNzsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbCArIGMgPD0gLTEgfHwgdGhpcy5tb2R1bGVDb3VudCA8PSBjb2wgKyBjKSBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgociA+PSAwICYmIHIgPD0gNiAmJiAoYyA9PSAwIHx8IGMgPT0gNikpIHx8IChjID49IDAgJiYgYyA8PSA2ICYmIChyID09IDAgfHwgciA9PSA2KSkgfHwgKHIgPj0gMiAmJiByIDw9IDQgJiYgYyA+PSAyICYmIGMgPD0gNCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2R1bGVzW3JvdyArIHJdW2NvbCArIGNdID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kdWxlc1tyb3cgKyByXVtjb2wgKyBjXSA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDliJvlu7rkuoznu7TnoIFcclxuICAgICAgICAgKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cclxuICAgICAgICAgKi9cclxuICAgICAgICBjcmVhdGVRcmNvZGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG1pbkxvc3RQb2ludCA9IDBcclxuICAgICAgICAgICAgdmFyIHBhdHRlcm4gPSAwXHJcbiAgICAgICAgICAgIHZhciBiZXN0TW9kdWxlcyA9IG51bGxcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFrZUltcGwoaSlcclxuICAgICAgICAgICAgICAgIHZhciBsb3N0UG9pbnQgPSBRUlV0aWwuZ2V0TG9zdFBvaW50KHRoaXMpXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PSAwIHx8IG1pbkxvc3RQb2ludCA+IGxvc3RQb2ludCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbkxvc3RQb2ludCA9IGxvc3RQb2ludFxyXG4gICAgICAgICAgICAgICAgICAgIHBhdHRlcm4gPSBpXHJcbiAgICAgICAgICAgICAgICAgICAgYmVzdE1vZHVsZXMgPSB0aGlzLm1vZHVsZXNcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm1vZHVsZXMgPSBiZXN0TW9kdWxlc1xyXG4gICAgICAgICAgICB0aGlzLnNldHVwVHlwZUluZm8oZmFsc2UsIHBhdHRlcm4pXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnR5cGVOdW1iZXIgPj0gNykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR1cFR5cGVOdW1iZXIoZmFsc2UpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiuvue9ruWumuS9jeWbvuW9olxyXG4gICAgICAgICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldHVwVGltaW5nUGF0dGVybjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciByID0gODsgciA8IHRoaXMubW9kdWxlQ291bnQgLSA4OyByKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZHVsZXNbcl1bNl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZHVsZXNbcl1bNl0gPSAociAlIDIgPT0gMClcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZHVsZXNbNl1bcl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZHVsZXNbNl1bcl0gPSAociAlIDIgPT0gMClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog6K6+572u55+r5q2j5Zu+5b2iXHJcbiAgICAgICAgICogQHJldHVybiB7W3R5cGVdfSBbZGVzY3JpcHRpb25dXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgc2V0dXBQb3NpdGlvbkFkanVzdFBhdHRlcm46IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHBvcyA9IFFSVXRpbC5nZXRQYXR0ZXJuUG9zaXRpb24odGhpcy50eXBlTnVtYmVyKVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBwb3MubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcm93ID0gcG9zW2ldXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbCA9IHBvc1tqXVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZHVsZXNbcm93XVtjb2xdICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IC0yOyByIDw9IDI7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjID0gLTI7IGMgPD0gMjsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAociA9PSAtMiB8fCByID09IDIgfHwgYyA9PSAtMiB8fCBjID09IDIgfHwgKHIgPT0gMCAmJiBjID09IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2R1bGVzW3JvdyArIHJdW2NvbCArIGNdID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZHVsZXNbcm93ICsgcl1bY29sICsgY10gPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDorr7nva7niYjmnKzkv6Hmga/vvIg35Lul5LiK54mI5pys5omN5pyJ77yJXHJcbiAgICAgICAgICogQHBhcmFtICB7Ym9vbH0gdGVzdCDmmK/lkKblpITkuo7liKTmlq3mnIDkvbPmjqnohpzpmLbmrrVcclxuICAgICAgICAgKiBAcmV0dXJuIHtbdHlwZV19ICAgICAgW2Rlc2NyaXB0aW9uXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHNldHVwVHlwZU51bWJlcjogZnVuY3Rpb24gKHRlc3QpIHtcclxuICAgICAgICAgICAgdmFyIGJpdHMgPSBRUlV0aWwuZ2V0QkNIVHlwZU51bWJlcih0aGlzLnR5cGVOdW1iZXIpXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vZCA9ICghdGVzdCAmJiAoKGJpdHMgPj4gaSkgJiAxKSA9PSAxKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2R1bGVzW01hdGguZmxvb3IoaSAvIDMpXVtpICUgMyArIHRoaXMubW9kdWxlQ291bnQgLSA4IC0gM10gPSBtb2RcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kdWxlc1tpICUgMyArIHRoaXMubW9kdWxlQ291bnQgLSA4IC0gM11bTWF0aC5mbG9vcihpIC8gMyldID0gbW9kXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOiuvue9ruagvOW8j+S/oeaBr++8iOe6oOmUmeetiee6p+WSjOaOqeiGnOeJiOacrO+8iVxyXG4gICAgICAgICAqIEBwYXJhbSAge2Jvb2x9IHRlc3RcclxuICAgICAgICAgKiBAcGFyYW0gIHtudW19IG1hc2tQYXR0ZXJuIOaOqeiGnOeJiOacrFxyXG4gICAgICAgICAqIEByZXR1cm4ge31cclxuICAgICAgICAgKi9cclxuICAgICAgICBzZXR1cFR5cGVJbmZvOiBmdW5jdGlvbiAodGVzdCwgbWFza1BhdHRlcm4pIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSAoUVJFcnJvckNvcnJlY3RMZXZlbFt0aGlzLmVycm9yQ29ycmVjdExldmVsXSA8PCAzKSB8IG1hc2tQYXR0ZXJuXHJcbiAgICAgICAgICAgIHZhciBiaXRzID0gUVJVdGlsLmdldEJDSFR5cGVJbmZvKGRhdGEpXHJcbiAgICAgICAgICAgIC8vIHZlcnRpY2FsXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTU7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vZCA9ICghdGVzdCAmJiAoKGJpdHMgPj4gaSkgJiAxKSA9PSAxKVxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPCA2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2R1bGVzW2ldWzhdID0gbW9kXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPCA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2R1bGVzW2kgKyAxXVs4XSA9IG1vZFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZHVsZXNbdGhpcy5tb2R1bGVDb3VudCAtIDE1ICsgaV1bOF0gPSBtb2RcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGhvcml6b250YWxcclxuICAgICAgICAgICAgICAgIHZhciBtb2QgPSAoIXRlc3QgJiYgKChiaXRzID4+IGkpICYgMSkgPT0gMSlcclxuICAgICAgICAgICAgICAgIGlmIChpIDwgOCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kdWxlc1s4XVt0aGlzLm1vZHVsZUNvdW50IC0gaSAtIDFdID0gbW9kXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPCA5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2R1bGVzWzhdWzE1IC0gaSAtIDEgKyAxXSA9IG1vZFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZHVsZXNbOF1bMTUgLSBpIC0gMV0gPSBtb2RcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBmaXhlZCBtb2R1bGVcclxuICAgICAgICAgICAgdGhpcy5tb2R1bGVzW3RoaXMubW9kdWxlQ291bnQgLSA4XVs4XSA9ICghdGVzdClcclxuICAgICAgICB9LFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIOaVsOaNrue8lueggVxyXG4gICAgICAgICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNyZWF0ZURhdGE6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBRUkJpdEJ1ZmZlcigpXHJcbiAgICAgICAgICAgIHZhciBsZW5ndGhCaXRzID0gdGhpcy50eXBlTnVtYmVyID4gOSA/IDE2IDogOFxyXG4gICAgICAgICAgICBidWZmZXIucHV0KDQsIDQpIC8vIOa3u+WKoOaooeW8j1xyXG4gICAgICAgICAgICBidWZmZXIucHV0KHRoaXMudXRmOGJ5dGVzLmxlbmd0aCwgbGVuZ3RoQml0cylcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnV0ZjhieXRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlci5wdXQodGhpcy51dGY4Ynl0ZXNbaV0sIDgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggKyA0IDw9IHRoaXMudG90YWxEYXRhQ291bnQgKiA4KSB7XHJcbiAgICAgICAgICAgICAgICBidWZmZXIucHV0KDAsIDQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gcGFkZGluZ1xyXG4gICAgICAgICAgICB3aGlsZSAoYnVmZmVyLmxlbmd0aCAlIDggIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyLnB1dEJpdChmYWxzZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBwYWRkaW5nXHJcbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA+PSB0aGlzLnRvdGFsRGF0YUNvdW50ICogOCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBidWZmZXIucHV0KFFSQ29kZUFsZy5QQUQwLCA4KVxyXG4gICAgICAgICAgICAgICAgaWYgKGJ1ZmZlci5sZW5ndGggPj0gdGhpcy50b3RhbERhdGFDb3VudCAqIDgpIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnVmZmVyLnB1dChRUkNvZGVBbGcuUEFEMSwgOClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVCeXRlcyhidWZmZXIpXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDnuqDplJnnoIHnvJbnoIFcclxuICAgICAgICAgKiBAcGFyYW0gIHtidWZmZXJ9IGJ1ZmZlciDmlbDmja7nvJbnoIFcclxuICAgICAgICAgKiBAcmV0dXJuIHtbdHlwZV19XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY3JlYXRlQnl0ZXM6IGZ1bmN0aW9uIChidWZmZXIpIHtcclxuICAgICAgICAgICAgdmFyIG9mZnNldCA9IDBcclxuICAgICAgICAgICAgdmFyIG1heERjQ291bnQgPSAwXHJcbiAgICAgICAgICAgIHZhciBtYXhFY0NvdW50ID0gMFxyXG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5yc0Jsb2NrLmxlbmd0aCAvIDNcclxuICAgICAgICAgICAgdmFyIHJzQmxvY2tzID0gbmV3IEFycmF5KClcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5yc0Jsb2NrW2kgKiAzICsgMF1cclxuICAgICAgICAgICAgICAgIHZhciB0b3RhbENvdW50ID0gdGhpcy5yc0Jsb2NrW2kgKiAzICsgMV1cclxuICAgICAgICAgICAgICAgIHZhciBkYXRhQ291bnQgPSB0aGlzLnJzQmxvY2tbaSAqIDMgKyAyXVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcnNCbG9ja3MucHVzaChbZGF0YUNvdW50LCB0b3RhbENvdW50XSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZGNkYXRhID0gbmV3IEFycmF5KHJzQmxvY2tzLmxlbmd0aClcclxuICAgICAgICAgICAgdmFyIGVjZGF0YSA9IG5ldyBBcnJheShyc0Jsb2Nrcy5sZW5ndGgpXHJcbiAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgcnNCbG9ja3MubGVuZ3RoOyByKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBkY0NvdW50ID0gcnNCbG9ja3Nbcl1bMF1cclxuICAgICAgICAgICAgICAgIHZhciBlY0NvdW50ID0gcnNCbG9ja3Nbcl1bMV0gLSBkY0NvdW50XHJcbiAgICAgICAgICAgICAgICBtYXhEY0NvdW50ID0gTWF0aC5tYXgobWF4RGNDb3VudCwgZGNDb3VudClcclxuICAgICAgICAgICAgICAgIG1heEVjQ291bnQgPSBNYXRoLm1heChtYXhFY0NvdW50LCBlY0NvdW50KVxyXG4gICAgICAgICAgICAgICAgZGNkYXRhW3JdID0gbmV3IEFycmF5KGRjQ291bnQpXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRjZGF0YVtyXS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRjZGF0YVtyXVtpXSA9IDB4ZmYgJiBidWZmZXIuYnVmZmVyW2kgKyBvZmZzZXRdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gZGNDb3VudFxyXG4gICAgICAgICAgICAgICAgdmFyIHJzUG9seSA9IFFSVXRpbC5nZXRFcnJvckNvcnJlY3RQb2x5bm9taWFsKGVjQ291bnQpXHJcbiAgICAgICAgICAgICAgICB2YXIgcmF3UG9seSA9IG5ldyBRUlBvbHlub21pYWwoZGNkYXRhW3JdLCByc1BvbHkuZ2V0TGVuZ3RoKCkgLSAxKVxyXG4gICAgICAgICAgICAgICAgdmFyIG1vZFBvbHkgPSByYXdQb2x5Lm1vZChyc1BvbHkpXHJcbiAgICAgICAgICAgICAgICBlY2RhdGFbcl0gPSBuZXcgQXJyYXkocnNQb2x5LmdldExlbmd0aCgpIC0gMSlcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWNkYXRhW3JdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZEluZGV4ID0gaSArIG1vZFBvbHkuZ2V0TGVuZ3RoKCkgLSBlY2RhdGFbcl0ubGVuZ3RoXHJcbiAgICAgICAgICAgICAgICAgICAgZWNkYXRhW3JdW2ldID0gKG1vZEluZGV4ID49IDApID8gbW9kUG9seS5nZXQobW9kSW5kZXgpIDogMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBkYXRhID0gbmV3IEFycmF5KHRoaXMudG90YWxEYXRhQ291bnQpXHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IDBcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXhEY0NvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgcnNCbG9ja3MubGVuZ3RoOyByKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IGRjZGF0YVtyXS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtpbmRleCsrXSA9IGRjZGF0YVtyXVtpXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1heEVjQ291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCByc0Jsb2Nrcy5sZW5ndGg7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpIDwgZWNkYXRhW3JdLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhW2luZGV4KytdID0gZWNkYXRhW3JdW2ldXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDluIPnva7mqKHlnZfvvIzmnoTlu7rmnIDnu4jkv6Hmga9cclxuICAgICAgICAgKiBAcGFyYW0gIHt9IGRhdGFcclxuICAgICAgICAgKiBAcGFyYW0gIHt9IG1hc2tQYXR0ZXJuXHJcbiAgICAgICAgICogQHJldHVybiB7fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1hcERhdGE6IGZ1bmN0aW9uIChkYXRhLCBtYXNrUGF0dGVybikge1xyXG4gICAgICAgICAgICB2YXIgaW5jID0gLTFcclxuICAgICAgICAgICAgdmFyIHJvdyA9IHRoaXMubW9kdWxlQ291bnQgLSAxXHJcbiAgICAgICAgICAgIHZhciBiaXRJbmRleCA9IDdcclxuICAgICAgICAgICAgdmFyIGJ5dGVJbmRleCA9IDBcclxuICAgICAgICAgICAgZm9yICh2YXIgY29sID0gdGhpcy5tb2R1bGVDb3VudCAtIDE7IGNvbCA+IDA7IGNvbCAtPSAyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sID09IDYpIGNvbC0tXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgMjsgYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZHVsZXNbcm93XVtjb2wgLSBjXSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGFyayA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnl0ZUluZGV4IDwgZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXJrID0gKCgoZGF0YVtieXRlSW5kZXhdID4+PiBiaXRJbmRleCkgJiAxKSA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2sgPSBRUlV0aWwuZ2V0TWFzayhtYXNrUGF0dGVybiwgcm93LCBjb2wgLSBjKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXJrID0gIWRhcmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kdWxlc1tyb3ddW2NvbCAtIGNdID0gZGFya1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYml0SW5kZXgtLVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJpdEluZGV4ID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnl0ZUluZGV4KytcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaXRJbmRleCA9IDdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByb3cgKz0gaW5jXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvdyA8IDAgfHwgdGhpcy5tb2R1bGVDb3VudCA8PSByb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93IC09IGluY1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmMgPSAtaW5jXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDloavlhYXlrZfmrrVcclxuICAgICAqL1xyXG4gICAgUVJDb2RlQWxnLlBBRDAgPSAweEVDXHJcbiAgICBRUkNvZGVBbGcuUEFEMSA9IDB4MTFcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8g57qg6ZSZ562J57qn5a+55bqU55qE57yW56CBXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIHZhciBRUkVycm9yQ29ycmVjdExldmVsID0gWzEsIDAsIDMsIDJdXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8vIOaOqeiGnOeJiOacrFxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB2YXIgUVJNYXNrUGF0dGVybiA9IHtcclxuICAgICAgICBQQVRURVJOMDAwOiAwLFxyXG4gICAgICAgIFBBVFRFUk4wMDE6IDEsXHJcbiAgICAgICAgUEFUVEVSTjAxMDogMixcclxuICAgICAgICBQQVRURVJOMDExOiAzLFxyXG4gICAgICAgIFBBVFRFUk4xMDA6IDQsXHJcbiAgICAgICAgUEFUVEVSTjEwMTogNSxcclxuICAgICAgICBQQVRURVJOMTEwOiA2LFxyXG4gICAgICAgIFBBVFRFUk4xMTE6IDdcclxuICAgIH1cclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8g5bel5YW357G7XHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIHZhciBRUlV0aWwgPSB7XHJcbiAgICAgICAgLypcclxuICAgICAgICDmr4/kuKrniYjmnKznn6vmraPlm77lvaLnmoTkvY3nva5cclxuICAgICAgICAgKi9cclxuICAgICAgICBQQVRURVJOX1BPU0lUSU9OX1RBQkxFOiBbXHJcbiAgICAgICAgICAgIFtdLFxyXG4gICAgICAgICAgICBbNiwgMThdLFxyXG4gICAgICAgICAgICBbNiwgMjJdLFxyXG4gICAgICAgICAgICBbNiwgMjZdLFxyXG4gICAgICAgICAgICBbNiwgMzBdLFxyXG4gICAgICAgICAgICBbNiwgMzRdLFxyXG4gICAgICAgICAgICBbNiwgMjIsIDM4XSxcclxuICAgICAgICAgICAgWzYsIDI0LCA0Ml0sXHJcbiAgICAgICAgICAgIFs2LCAyNiwgNDZdLFxyXG4gICAgICAgICAgICBbNiwgMjgsIDUwXSxcclxuICAgICAgICAgICAgWzYsIDMwLCA1NF0sXHJcbiAgICAgICAgICAgIFs2LCAzMiwgNThdLFxyXG4gICAgICAgICAgICBbNiwgMzQsIDYyXSxcclxuICAgICAgICAgICAgWzYsIDI2LCA0NiwgNjZdLFxyXG4gICAgICAgICAgICBbNiwgMjYsIDQ4LCA3MF0sXHJcbiAgICAgICAgICAgIFs2LCAyNiwgNTAsIDc0XSxcclxuICAgICAgICAgICAgWzYsIDMwLCA1NCwgNzhdLFxyXG4gICAgICAgICAgICBbNiwgMzAsIDU2LCA4Ml0sXHJcbiAgICAgICAgICAgIFs2LCAzMCwgNTgsIDg2XSxcclxuICAgICAgICAgICAgWzYsIDM0LCA2MiwgOTBdLFxyXG4gICAgICAgICAgICBbNiwgMjgsIDUwLCA3MiwgOTRdLFxyXG4gICAgICAgICAgICBbNiwgMjYsIDUwLCA3NCwgOThdLFxyXG4gICAgICAgICAgICBbNiwgMzAsIDU0LCA3OCwgMTAyXSxcclxuICAgICAgICAgICAgWzYsIDI4LCA1NCwgODAsIDEwNl0sXHJcbiAgICAgICAgICAgIFs2LCAzMiwgNTgsIDg0LCAxMTBdLFxyXG4gICAgICAgICAgICBbNiwgMzAsIDU4LCA4NiwgMTE0XSxcclxuICAgICAgICAgICAgWzYsIDM0LCA2MiwgOTAsIDExOF0sXHJcbiAgICAgICAgICAgIFs2LCAyNiwgNTAsIDc0LCA5OCwgMTIyXSxcclxuICAgICAgICAgICAgWzYsIDMwLCA1NCwgNzgsIDEwMiwgMTI2XSxcclxuICAgICAgICAgICAgWzYsIDI2LCA1MiwgNzgsIDEwNCwgMTMwXSxcclxuICAgICAgICAgICAgWzYsIDMwLCA1NiwgODIsIDEwOCwgMTM0XSxcclxuICAgICAgICAgICAgWzYsIDM0LCA2MCwgODYsIDExMiwgMTM4XSxcclxuICAgICAgICAgICAgWzYsIDMwLCA1OCwgODYsIDExNCwgMTQyXSxcclxuICAgICAgICAgICAgWzYsIDM0LCA2MiwgOTAsIDExOCwgMTQ2XSxcclxuICAgICAgICAgICAgWzYsIDMwLCA1NCwgNzgsIDEwMiwgMTI2LCAxNTBdLFxyXG4gICAgICAgICAgICBbNiwgMjQsIDUwLCA3NiwgMTAyLCAxMjgsIDE1NF0sXHJcbiAgICAgICAgICAgIFs2LCAyOCwgNTQsIDgwLCAxMDYsIDEzMiwgMTU4XSxcclxuICAgICAgICAgICAgWzYsIDMyLCA1OCwgODQsIDExMCwgMTM2LCAxNjJdLFxyXG4gICAgICAgICAgICBbNiwgMjYsIDU0LCA4MiwgMTEwLCAxMzgsIDE2Nl0sXHJcbiAgICAgICAgICAgIFs2LCAzMCwgNTgsIDg2LCAxMTQsIDE0MiwgMTcwXVxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgRzE1OiAoMSA8PCAxMCkgfCAoMSA8PCA4KSB8ICgxIDw8IDUpIHwgKDEgPDwgNCkgfCAoMSA8PCAyKSB8ICgxIDw8IDEpIHwgKDEgPDwgMCksXHJcbiAgICAgICAgRzE4OiAoMSA8PCAxMikgfCAoMSA8PCAxMSkgfCAoMSA8PCAxMCkgfCAoMSA8PCA5KSB8ICgxIDw8IDgpIHwgKDEgPDwgNSkgfCAoMSA8PCAyKSB8ICgxIDw8IDApLFxyXG4gICAgICAgIEcxNV9NQVNLOiAoMSA8PCAxNCkgfCAoMSA8PCAxMikgfCAoMSA8PCAxMCkgfCAoMSA8PCA0KSB8ICgxIDw8IDEpLFxyXG4gICAgICAgIC8qXHJcbiAgICAgICAgQkNI57yW56CB5qC85byP5L+h5oGvXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0QkNIVHlwZUluZm86IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciBkID0gZGF0YSA8PCAxMFxyXG4gICAgICAgICAgICB3aGlsZSAoUVJVdGlsLmdldEJDSERpZ2l0KGQpIC0gUVJVdGlsLmdldEJDSERpZ2l0KFFSVXRpbC5HMTUpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGQgXj0gKFFSVXRpbC5HMTUgPDwgKFFSVXRpbC5nZXRCQ0hEaWdpdChkKSAtIFFSVXRpbC5nZXRCQ0hEaWdpdChRUlV0aWwuRzE1KSkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICgoZGF0YSA8PCAxMCkgfCBkKSBeIFFSVXRpbC5HMTVfTUFTS1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLypcclxuICAgICAgICBCQ0jnvJbnoIHniYjmnKzkv6Hmga9cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRCQ0hUeXBlTnVtYmVyOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgZCA9IGRhdGEgPDwgMTJcclxuICAgICAgICAgICAgd2hpbGUgKFFSVXRpbC5nZXRCQ0hEaWdpdChkKSAtIFFSVXRpbC5nZXRCQ0hEaWdpdChRUlV0aWwuRzE4KSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBkIF49IChRUlV0aWwuRzE4IDw8IChRUlV0aWwuZ2V0QkNIRGlnaXQoZCkgLSBRUlV0aWwuZ2V0QkNIRGlnaXQoUVJVdGlsLkcxOCkpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAoZGF0YSA8PCAxMikgfCBkXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKlxyXG4gICAgICAgIOiOt+WPlkJDSOS9jeS/oeaBr1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldEJDSERpZ2l0OiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgZGlnaXQgPSAwXHJcbiAgICAgICAgICAgIHdoaWxlIChkYXRhICE9IDApIHtcclxuICAgICAgICAgICAgICAgIGRpZ2l0KytcclxuICAgICAgICAgICAgICAgIGRhdGEgPj4+PSAxXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRpZ2l0XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKlxyXG4gICAgICAgIOiOt+WPlueJiOacrOWvueW6lOeahOefq+ato+WbvuW9ouS9jee9rlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldFBhdHRlcm5Qb3NpdGlvbjogZnVuY3Rpb24gKHR5cGVOdW1iZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFFSVXRpbC5QQVRURVJOX1BPU0lUSU9OX1RBQkxFW3R5cGVOdW1iZXIgLSAxXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLypcclxuICAgICAgICDmjqnohpznrpfms5VcclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXRNYXNrOiBmdW5jdGlvbiAobWFza1BhdHRlcm4sIGksIGopIHtcclxuICAgICAgICAgICAgc3dpdGNoIChtYXNrUGF0dGVybikge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBRUk1hc2tQYXR0ZXJuLlBBVFRFUk4wMDA6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChpICsgaikgJSAyID09IDBcclxuICAgICAgICAgICAgICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMDAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpICUgMiA9PSAwXHJcbiAgICAgICAgICAgICAgICBjYXNlIFFSTWFza1BhdHRlcm4uUEFUVEVSTjAxMDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaiAlIDMgPT0gMFxyXG4gICAgICAgICAgICAgICAgY2FzZSBRUk1hc2tQYXR0ZXJuLlBBVFRFUk4wMTE6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChpICsgaikgJSAzID09IDBcclxuICAgICAgICAgICAgICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMTAwOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoTWF0aC5mbG9vcihpIC8gMikgKyBNYXRoLmZsb29yKGogLyAzKSkgJSAyID09IDBcclxuICAgICAgICAgICAgICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMTAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoaSAqIGopICUgMiArIChpICogaikgJSAzID09IDBcclxuICAgICAgICAgICAgICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMTEwOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKGkgKiBqKSAlIDIgKyAoaSAqIGopICUgMykgJSAyID09IDBcclxuICAgICAgICAgICAgICAgIGNhc2UgUVJNYXNrUGF0dGVybi5QQVRURVJOMTExOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKGkgKiBqKSAlIDMgKyAoaSArIGopICUgMikgJSAyID09IDBcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdiYWQgbWFza1BhdHRlcm46JyArIG1hc2tQYXR0ZXJuKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKlxyXG4gICAgICAgIOiOt+WPllJT55qE57qg6ZSZ5aSa6aG55byPXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0RXJyb3JDb3JyZWN0UG9seW5vbWlhbDogZnVuY3Rpb24gKGVycm9yQ29ycmVjdExlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgYSA9IG5ldyBRUlBvbHlub21pYWwoWzFdLCAwKVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVycm9yQ29ycmVjdExlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBhID0gYS5tdWx0aXBseShuZXcgUVJQb2x5bm9taWFsKFsxLCBRUk1hdGguZ2V4cChpKV0sIDApKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKlxyXG4gICAgICAgIOiOt+WPluivhOS7t1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGdldExvc3RQb2ludDogZnVuY3Rpb24gKHFyQ29kZSkge1xyXG4gICAgICAgICAgICB2YXIgbW9kdWxlQ291bnQgPSBxckNvZGUuZ2V0TW9kdWxlQ291bnQoKSxcclxuICAgICAgICAgICAgICAgIGxvc3RQb2ludCA9IDAsXHJcbiAgICAgICAgICAgICAgICBkYXJrQ291bnQgPSAwXHJcbiAgICAgICAgICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IG1vZHVsZUNvdW50OyByb3crKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNhbWVDb3VudCA9IDBcclxuICAgICAgICAgICAgICAgIHZhciBoZWFkID0gcXJDb2RlLm1vZHVsZXNbcm93XVswXVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgY29sID0gMDsgY29sIDwgbW9kdWxlQ291bnQ7IGNvbCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBxckNvZGUubW9kdWxlc1tyb3ddW2NvbF1cclxuICAgICAgICAgICAgICAgICAgICAvLyBsZXZlbCAzIOivhOS7t1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2wgPCBtb2R1bGVDb3VudCAtIDYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgJiYgIXFyQ29kZS5tb2R1bGVzW3Jvd11bY29sICsgMV0gJiYgcXJDb2RlLm1vZHVsZXNbcm93XVtjb2wgKyAyXSAmJiBxckNvZGUubW9kdWxlc1tyb3ddW2NvbCArIDNdICYmIHFyQ29kZS5tb2R1bGVzW3Jvd11bY29sICsgNF0gJiYgIXFyQ29kZS5tb2R1bGVzW3Jvd11bY29sICsgNV0gJiYgcXJDb2RlLm1vZHVsZXNbcm93XVtjb2wgKyA2XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbCA8IG1vZHVsZUNvdW50IC0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXJDb2RlLm1vZHVsZXNbcm93XVtjb2wgKyA3XSAmJiBxckNvZGUubW9kdWxlc1tyb3ddW2NvbCArIDhdICYmIHFyQ29kZS5tb2R1bGVzW3Jvd11bY29sICsgOV0gJiYgcXJDb2RlLm1vZHVsZXNbcm93XVtjb2wgKyAxMF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9zdFBvaW50ICs9IDQwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2wgPiAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHFyQ29kZS5tb2R1bGVzW3Jvd11bY29sIC0gMV0gJiYgcXJDb2RlLm1vZHVsZXNbcm93XVtjb2wgLSAyXSAmJiBxckNvZGUubW9kdWxlc1tyb3ddW2NvbCAtIDNdICYmIHFyQ29kZS5tb2R1bGVzW3Jvd11bY29sIC0gNF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9zdFBvaW50ICs9IDQwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxldmVsIDIg6K+E5Lu3XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChyb3cgPCBtb2R1bGVDb3VudCAtIDEpICYmIChjb2wgPCBtb2R1bGVDb3VudCAtIDEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIGNvdW50KytcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHFyQ29kZS5tb2R1bGVzW3JvdyArIDFdW2NvbF0pIGNvdW50KytcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHFyQ29kZS5tb2R1bGVzW3Jvd11bY29sICsgMV0pIGNvdW50KytcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHFyQ29kZS5tb2R1bGVzW3JvdyArIDFdW2NvbCArIDFdKSBjb3VudCsrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3VudCA9PSAwIHx8IGNvdW50ID09IDQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvc3RQb2ludCArPSAzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbGV2ZWwgMSDor4Tku7dcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaGVhZCBeIGN1cnJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2FtZUNvdW50KytcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkID0gY3VycmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2FtZUNvdW50ID49IDUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvc3RQb2ludCArPSAoMyArIHNhbWVDb3VudCAtIDUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2FtZUNvdW50ID0gMVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBsZXZlbCA0IOivhOS7t1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhcmtDb3VudCsrXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGNvbCA9IDA7IGNvbCA8IG1vZHVsZUNvdW50OyBjb2wrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNhbWVDb3VudCA9IDBcclxuICAgICAgICAgICAgICAgIHZhciBoZWFkID0gcXJDb2RlLm1vZHVsZXNbMF1bY29sXVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgbW9kdWxlQ291bnQ7IHJvdysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBxckNvZGUubW9kdWxlc1tyb3ddW2NvbF1cclxuICAgICAgICAgICAgICAgICAgICAvLyBsZXZlbCAzIOivhOS7t1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3cgPCBtb2R1bGVDb3VudCAtIDYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgJiYgIXFyQ29kZS5tb2R1bGVzW3JvdyArIDFdW2NvbF0gJiYgcXJDb2RlLm1vZHVsZXNbcm93ICsgMl1bY29sXSAmJiBxckNvZGUubW9kdWxlc1tyb3cgKyAzXVtjb2xdICYmIHFyQ29kZS5tb2R1bGVzW3JvdyArIDRdW2NvbF0gJiYgIXFyQ29kZS5tb2R1bGVzW3JvdyArIDVdW2NvbF0gJiYgcXJDb2RlLm1vZHVsZXNbcm93ICsgNl1bY29sXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvdyA8IG1vZHVsZUNvdW50IC0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXJDb2RlLm1vZHVsZXNbcm93ICsgN11bY29sXSAmJiBxckNvZGUubW9kdWxlc1tyb3cgKyA4XVtjb2xdICYmIHFyQ29kZS5tb2R1bGVzW3JvdyArIDldW2NvbF0gJiYgcXJDb2RlLm1vZHVsZXNbcm93ICsgMTBdW2NvbF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9zdFBvaW50ICs9IDQwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyb3cgPiAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHFyQ29kZS5tb2R1bGVzW3JvdyAtIDFdW2NvbF0gJiYgcXJDb2RlLm1vZHVsZXNbcm93IC0gMl1bY29sXSAmJiBxckNvZGUubW9kdWxlc1tyb3cgLSAzXVtjb2xdICYmIHFyQ29kZS5tb2R1bGVzW3JvdyAtIDRdW2NvbF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9zdFBvaW50ICs9IDQwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxldmVsIDEg6K+E5Lu3XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWQgXiBjdXJyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVDb3VudCsrXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCA9IGN1cnJlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNhbWVDb3VudCA+PSA1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb3N0UG9pbnQgKz0gKDMgKyBzYW1lQ291bnQgLSA1KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbWVDb3VudCA9IDFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gTEVWRUw0XHJcbiAgICAgICAgICAgIHZhciByYXRpbyA9IE1hdGguYWJzKDEwMCAqIGRhcmtDb3VudCAvIG1vZHVsZUNvdW50IC8gbW9kdWxlQ291bnQgLSA1MCkgLyA1XHJcbiAgICAgICAgICAgIGxvc3RQb2ludCArPSByYXRpbyAqIDEwXHJcbiAgICAgICAgICAgIHJldHVybiBsb3N0UG9pbnRcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyBRUk1hdGjkvb/nlKjnmoTmlbDlrablt6XlhbdcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgdmFyIFFSTWF0aCA9IHtcclxuICAgICAgICAvKlxyXG4gICAgICAgIOWwhm7ovazljJbkuLphXm1cclxuICAgICAgICAgKi9cclxuICAgICAgICBnbG9nOiBmdW5jdGlvbiAobikge1xyXG4gICAgICAgICAgICBpZiAobiA8IDEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZ2xvZygnICsgbiArICcpJylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gUVJNYXRoLkxPR19UQUJMRVtuXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLypcclxuICAgICAgICDlsIZhXm3ovazljJbkuLpuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V4cDogZnVuY3Rpb24gKG4pIHtcclxuICAgICAgICAgICAgd2hpbGUgKG4gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBuICs9IDI1NVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdoaWxlIChuID49IDI1Nikge1xyXG4gICAgICAgICAgICAgICAgbiAtPSAyNTVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gUVJNYXRoLkVYUF9UQUJMRVtuXVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgRVhQX1RBQkxFOiBuZXcgQXJyYXkoMjU2KSxcclxuICAgICAgICBMT0dfVEFCTEU6IG5ldyBBcnJheSgyNTYpXHJcblxyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuICAgICAgICBRUk1hdGguRVhQX1RBQkxFW2ldID0gMSA8PCBpXHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gODsgaSA8IDI1NjsgaSsrKSB7XHJcbiAgICAgICAgUVJNYXRoLkVYUF9UQUJMRVtpXSA9IFFSTWF0aC5FWFBfVEFCTEVbaSAtIDRdIF4gUVJNYXRoLkVYUF9UQUJMRVtpIC0gNV0gXiBRUk1hdGguRVhQX1RBQkxFW2kgLSA2XSBeIFFSTWF0aC5FWFBfVEFCTEVbaSAtIDhdXHJcbiAgICB9XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NTsgaSsrKSB7XHJcbiAgICAgICAgUVJNYXRoLkxPR19UQUJMRVtRUk1hdGguRVhQX1RBQkxFW2ldXSA9IGlcclxuICAgIH1cclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8gUVJQb2x5bm9taWFsIOWkmumhueW8j1xyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvKipcclxuICAgICAqIOWkmumhueW8j+exu1xyXG4gICAgICogQHBhcmFtIHtBcnJheX0gbnVtICAg57O75pWwXHJcbiAgICAgKiBAcGFyYW0ge251bX0gc2hpZnQgYV5zaGlmdFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBRUlBvbHlub21pYWwobnVtLCBzaGlmdCkge1xyXG4gICAgICAgIGlmIChudW0ubGVuZ3RoID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobnVtLmxlbmd0aCArICcvJyArIHNoaWZ0KVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb2Zmc2V0ID0gMFxyXG4gICAgICAgIHdoaWxlIChvZmZzZXQgPCBudW0ubGVuZ3RoICYmIG51bVtvZmZzZXRdID09IDApIHtcclxuICAgICAgICAgICAgb2Zmc2V0KytcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5udW0gPSBuZXcgQXJyYXkobnVtLmxlbmd0aCAtIG9mZnNldCArIHNoaWZ0KVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtLmxlbmd0aCAtIG9mZnNldDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMubnVtW2ldID0gbnVtW2kgKyBvZmZzZXRdXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgUVJQb2x5bm9taWFsLnByb3RvdHlwZSA9IHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW1baW5kZXhdXHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRMZW5ndGg6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtLmxlbmd0aFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICog5aSa6aG55byP5LmY5rOVXHJcbiAgICAgICAgICogQHBhcmFtICB7UVJQb2x5bm9taWFsfSBlIOiiq+S5mOWkmumhueW8j1xyXG4gICAgICAgICAqIEByZXR1cm4ge1t0eXBlXX0gICBbZGVzY3JpcHRpb25dXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbXVsdGlwbHk6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciBudW0gPSBuZXcgQXJyYXkodGhpcy5nZXRMZW5ndGgoKSArIGUuZ2V0TGVuZ3RoKCkgLSAxKVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZ2V0TGVuZ3RoKCk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBlLmdldExlbmd0aCgpOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBudW1baSArIGpdIF49IFFSTWF0aC5nZXhwKFFSTWF0aC5nbG9nKHRoaXMuZ2V0KGkpKSArIFFSTWF0aC5nbG9nKGUuZ2V0KGopKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFFSUG9seW5vbWlhbChudW0sIDApXHJcbiAgICAgICAgfSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiDlpJrpobnlvI/mqKHov5DnrpdcclxuICAgICAgICAgKiBAcGFyYW0gIHtRUlBvbHlub21pYWx9IGUg5qih5aSa6aG55byPXHJcbiAgICAgICAgICogQHJldHVybiB7fVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1vZDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIHRsID0gdGhpcy5nZXRMZW5ndGgoKSxcclxuICAgICAgICAgICAgICAgIGVsID0gZS5nZXRMZW5ndGgoKVxyXG4gICAgICAgICAgICBpZiAodGwgLSBlbCA8IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG51bSA9IG5ldyBBcnJheSh0bClcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0bDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBudW1baV0gPSB0aGlzLmdldChpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHdoaWxlIChudW0ubGVuZ3RoID49IGVsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmF0aW8gPSBRUk1hdGguZ2xvZyhudW1bMF0pIC0gUVJNYXRoLmdsb2coZS5nZXQoMCkpXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlLmdldExlbmd0aCgpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBudW1baV0gXj0gUVJNYXRoLmdleHAoUVJNYXRoLmdsb2coZS5nZXQoaSkpICsgcmF0aW8pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobnVtWzBdID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBudW0uc2hpZnQoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUVJQb2x5bm9taWFsKG51bSwgMClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyBSU19CTE9DS19UQUJMRVxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvKlxyXG4gICAg5LqM57u056CB5ZCE5Liq54mI5pys5L+h5oGvW+Wdl+aVsCwg5q+P5Z2X5Lit55qE5pWw5o2u5Z2X5pWwLCDmr4/lnZfkuK3nmoTkv6Hmga/lnZfmlbBdXHJcbiAgICAgKi9cclxuICAgIHZhciBSU19CTE9DS19UQUJMRSA9IFtcclxuICAgICAgICAvLyBMXHJcbiAgICAgICAgLy8gTVxyXG4gICAgICAgIC8vIFFcclxuICAgICAgICAvLyBIXHJcbiAgICAgICAgLy8gMVxyXG4gICAgICAgIFsxLCAyNiwgMTldLFxyXG4gICAgICAgIFsxLCAyNiwgMTZdLFxyXG4gICAgICAgIFsxLCAyNiwgMTNdLFxyXG4gICAgICAgIFsxLCAyNiwgOV0sXHJcblxyXG4gICAgICAgIC8vIDJcclxuICAgICAgICBbMSwgNDQsIDM0XSxcclxuICAgICAgICBbMSwgNDQsIDI4XSxcclxuICAgICAgICBbMSwgNDQsIDIyXSxcclxuICAgICAgICBbMSwgNDQsIDE2XSxcclxuXHJcbiAgICAgICAgLy8gM1xyXG4gICAgICAgIFsxLCA3MCwgNTVdLFxyXG4gICAgICAgIFsxLCA3MCwgNDRdLFxyXG4gICAgICAgIFsyLCAzNSwgMTddLFxyXG4gICAgICAgIFsyLCAzNSwgMTNdLFxyXG5cclxuICAgICAgICAvLyA0XHJcbiAgICAgICAgWzEsIDEwMCwgODBdLFxyXG4gICAgICAgIFsyLCA1MCwgMzJdLFxyXG4gICAgICAgIFsyLCA1MCwgMjRdLFxyXG4gICAgICAgIFs0LCAyNSwgOV0sXHJcblxyXG4gICAgICAgIC8vIDVcclxuICAgICAgICBbMSwgMTM0LCAxMDhdLFxyXG4gICAgICAgIFsyLCA2NywgNDNdLFxyXG4gICAgICAgIFsyLCAzMywgMTUsIDIsIDM0LCAxNl0sXHJcbiAgICAgICAgWzIsIDMzLCAxMSwgMiwgMzQsIDEyXSxcclxuXHJcbiAgICAgICAgLy8gNlxyXG4gICAgICAgIFsyLCA4NiwgNjhdLFxyXG4gICAgICAgIFs0LCA0MywgMjddLFxyXG4gICAgICAgIFs0LCA0MywgMTldLFxyXG4gICAgICAgIFs0LCA0MywgMTVdLFxyXG5cclxuICAgICAgICAvLyA3XHJcbiAgICAgICAgWzIsIDk4LCA3OF0sXHJcbiAgICAgICAgWzQsIDQ5LCAzMV0sXHJcbiAgICAgICAgWzIsIDMyLCAxNCwgNCwgMzMsIDE1XSxcclxuICAgICAgICBbNCwgMzksIDEzLCAxLCA0MCwgMTRdLFxyXG5cclxuICAgICAgICAvLyA4XHJcbiAgICAgICAgWzIsIDEyMSwgOTddLFxyXG4gICAgICAgIFsyLCA2MCwgMzgsIDIsIDYxLCAzOV0sXHJcbiAgICAgICAgWzQsIDQwLCAxOCwgMiwgNDEsIDE5XSxcclxuICAgICAgICBbNCwgNDAsIDE0LCAyLCA0MSwgMTVdLFxyXG5cclxuICAgICAgICAvLyA5XHJcbiAgICAgICAgWzIsIDE0NiwgMTE2XSxcclxuICAgICAgICBbMywgNTgsIDM2LCAyLCA1OSwgMzddLFxyXG4gICAgICAgIFs0LCAzNiwgMTYsIDQsIDM3LCAxN10sXHJcbiAgICAgICAgWzQsIDM2LCAxMiwgNCwgMzcsIDEzXSxcclxuXHJcbiAgICAgICAgLy8gMTBcclxuICAgICAgICBbMiwgODYsIDY4LCAyLCA4NywgNjldLFxyXG4gICAgICAgIFs0LCA2OSwgNDMsIDEsIDcwLCA0NF0sXHJcbiAgICAgICAgWzYsIDQzLCAxOSwgMiwgNDQsIDIwXSxcclxuICAgICAgICBbNiwgNDMsIDE1LCAyLCA0NCwgMTZdLFxyXG5cclxuICAgICAgICAvLyAxMVxyXG4gICAgICAgIFs0LCAxMDEsIDgxXSxcclxuICAgICAgICBbMSwgODAsIDUwLCA0LCA4MSwgNTFdLFxyXG4gICAgICAgIFs0LCA1MCwgMjIsIDQsIDUxLCAyM10sXHJcbiAgICAgICAgWzMsIDM2LCAxMiwgOCwgMzcsIDEzXSxcclxuXHJcbiAgICAgICAgLy8gMTJcclxuICAgICAgICBbMiwgMTE2LCA5MiwgMiwgMTE3LCA5M10sXHJcbiAgICAgICAgWzYsIDU4LCAzNiwgMiwgNTksIDM3XSxcclxuICAgICAgICBbNCwgNDYsIDIwLCA2LCA0NywgMjFdLFxyXG4gICAgICAgIFs3LCA0MiwgMTQsIDQsIDQzLCAxNV0sXHJcblxyXG4gICAgICAgIC8vIDEzXHJcbiAgICAgICAgWzQsIDEzMywgMTA3XSxcclxuICAgICAgICBbOCwgNTksIDM3LCAxLCA2MCwgMzhdLFxyXG4gICAgICAgIFs4LCA0NCwgMjAsIDQsIDQ1LCAyMV0sXHJcbiAgICAgICAgWzEyLCAzMywgMTEsIDQsIDM0LCAxMl0sXHJcblxyXG4gICAgICAgIC8vIDE0XHJcbiAgICAgICAgWzMsIDE0NSwgMTE1LCAxLCAxNDYsIDExNl0sXHJcbiAgICAgICAgWzQsIDY0LCA0MCwgNSwgNjUsIDQxXSxcclxuICAgICAgICBbMTEsIDM2LCAxNiwgNSwgMzcsIDE3XSxcclxuICAgICAgICBbMTEsIDM2LCAxMiwgNSwgMzcsIDEzXSxcclxuXHJcbiAgICAgICAgLy8gMTVcclxuICAgICAgICBbNSwgMTA5LCA4NywgMSwgMTEwLCA4OF0sXHJcbiAgICAgICAgWzUsIDY1LCA0MSwgNSwgNjYsIDQyXSxcclxuICAgICAgICBbNSwgNTQsIDI0LCA3LCA1NSwgMjVdLFxyXG4gICAgICAgIFsxMSwgMzYsIDEyXSxcclxuXHJcbiAgICAgICAgLy8gMTZcclxuICAgICAgICBbNSwgMTIyLCA5OCwgMSwgMTIzLCA5OV0sXHJcbiAgICAgICAgWzcsIDczLCA0NSwgMywgNzQsIDQ2XSxcclxuICAgICAgICBbMTUsIDQzLCAxOSwgMiwgNDQsIDIwXSxcclxuICAgICAgICBbMywgNDUsIDE1LCAxMywgNDYsIDE2XSxcclxuXHJcbiAgICAgICAgLy8gMTdcclxuICAgICAgICBbMSwgMTM1LCAxMDcsIDUsIDEzNiwgMTA4XSxcclxuICAgICAgICBbMTAsIDc0LCA0NiwgMSwgNzUsIDQ3XSxcclxuICAgICAgICBbMSwgNTAsIDIyLCAxNSwgNTEsIDIzXSxcclxuICAgICAgICBbMiwgNDIsIDE0LCAxNywgNDMsIDE1XSxcclxuXHJcbiAgICAgICAgLy8gMThcclxuICAgICAgICBbNSwgMTUwLCAxMjAsIDEsIDE1MSwgMTIxXSxcclxuICAgICAgICBbOSwgNjksIDQzLCA0LCA3MCwgNDRdLFxyXG4gICAgICAgIFsxNywgNTAsIDIyLCAxLCA1MSwgMjNdLFxyXG4gICAgICAgIFsyLCA0MiwgMTQsIDE5LCA0MywgMTVdLFxyXG5cclxuICAgICAgICAvLyAxOVxyXG4gICAgICAgIFszLCAxNDEsIDExMywgNCwgMTQyLCAxMTRdLFxyXG4gICAgICAgIFszLCA3MCwgNDQsIDExLCA3MSwgNDVdLFxyXG4gICAgICAgIFsxNywgNDcsIDIxLCA0LCA0OCwgMjJdLFxyXG4gICAgICAgIFs5LCAzOSwgMTMsIDE2LCA0MCwgMTRdLFxyXG5cclxuICAgICAgICAvLyAyMFxyXG4gICAgICAgIFszLCAxMzUsIDEwNywgNSwgMTM2LCAxMDhdLFxyXG4gICAgICAgIFszLCA2NywgNDEsIDEzLCA2OCwgNDJdLFxyXG4gICAgICAgIFsxNSwgNTQsIDI0LCA1LCA1NSwgMjVdLFxyXG4gICAgICAgIFsxNSwgNDMsIDE1LCAxMCwgNDQsIDE2XSxcclxuXHJcbiAgICAgICAgLy8gMjFcclxuICAgICAgICBbNCwgMTQ0LCAxMTYsIDQsIDE0NSwgMTE3XSxcclxuICAgICAgICBbMTcsIDY4LCA0Ml0sXHJcbiAgICAgICAgWzE3LCA1MCwgMjIsIDYsIDUxLCAyM10sXHJcbiAgICAgICAgWzE5LCA0NiwgMTYsIDYsIDQ3LCAxN10sXHJcblxyXG4gICAgICAgIC8vIDIyXHJcbiAgICAgICAgWzIsIDEzOSwgMTExLCA3LCAxNDAsIDExMl0sXHJcbiAgICAgICAgWzE3LCA3NCwgNDZdLFxyXG4gICAgICAgIFs3LCA1NCwgMjQsIDE2LCA1NSwgMjVdLFxyXG4gICAgICAgIFszNCwgMzcsIDEzXSxcclxuXHJcbiAgICAgICAgLy8gMjNcclxuICAgICAgICBbNCwgMTUxLCAxMjEsIDUsIDE1MiwgMTIyXSxcclxuICAgICAgICBbNCwgNzUsIDQ3LCAxNCwgNzYsIDQ4XSxcclxuICAgICAgICBbMTEsIDU0LCAyNCwgMTQsIDU1LCAyNV0sXHJcbiAgICAgICAgWzE2LCA0NSwgMTUsIDE0LCA0NiwgMTZdLFxyXG5cclxuICAgICAgICAvLyAyNFxyXG4gICAgICAgIFs2LCAxNDcsIDExNywgNCwgMTQ4LCAxMThdLFxyXG4gICAgICAgIFs2LCA3MywgNDUsIDE0LCA3NCwgNDZdLFxyXG4gICAgICAgIFsxMSwgNTQsIDI0LCAxNiwgNTUsIDI1XSxcclxuICAgICAgICBbMzAsIDQ2LCAxNiwgMiwgNDcsIDE3XSxcclxuXHJcbiAgICAgICAgLy8gMjVcclxuICAgICAgICBbOCwgMTMyLCAxMDYsIDQsIDEzMywgMTA3XSxcclxuICAgICAgICBbOCwgNzUsIDQ3LCAxMywgNzYsIDQ4XSxcclxuICAgICAgICBbNywgNTQsIDI0LCAyMiwgNTUsIDI1XSxcclxuICAgICAgICBbMjIsIDQ1LCAxNSwgMTMsIDQ2LCAxNl0sXHJcblxyXG4gICAgICAgIC8vIDI2XHJcbiAgICAgICAgWzEwLCAxNDIsIDExNCwgMiwgMTQzLCAxMTVdLFxyXG4gICAgICAgIFsxOSwgNzQsIDQ2LCA0LCA3NSwgNDddLFxyXG4gICAgICAgIFsyOCwgNTAsIDIyLCA2LCA1MSwgMjNdLFxyXG4gICAgICAgIFszMywgNDYsIDE2LCA0LCA0NywgMTddLFxyXG5cclxuICAgICAgICAvLyAyN1xyXG4gICAgICAgIFs4LCAxNTIsIDEyMiwgNCwgMTUzLCAxMjNdLFxyXG4gICAgICAgIFsyMiwgNzMsIDQ1LCAzLCA3NCwgNDZdLFxyXG4gICAgICAgIFs4LCA1MywgMjMsIDI2LCA1NCwgMjRdLFxyXG4gICAgICAgIFsxMiwgNDUsIDE1LCAyOCwgNDYsIDE2XSxcclxuXHJcbiAgICAgICAgLy8gMjhcclxuICAgICAgICBbMywgMTQ3LCAxMTcsIDEwLCAxNDgsIDExOF0sXHJcbiAgICAgICAgWzMsIDczLCA0NSwgMjMsIDc0LCA0Nl0sXHJcbiAgICAgICAgWzQsIDU0LCAyNCwgMzEsIDU1LCAyNV0sXHJcbiAgICAgICAgWzExLCA0NSwgMTUsIDMxLCA0NiwgMTZdLFxyXG5cclxuICAgICAgICAvLyAyOVxyXG4gICAgICAgIFs3LCAxNDYsIDExNiwgNywgMTQ3LCAxMTddLFxyXG4gICAgICAgIFsyMSwgNzMsIDQ1LCA3LCA3NCwgNDZdLFxyXG4gICAgICAgIFsxLCA1MywgMjMsIDM3LCA1NCwgMjRdLFxyXG4gICAgICAgIFsxOSwgNDUsIDE1LCAyNiwgNDYsIDE2XSxcclxuXHJcbiAgICAgICAgLy8gMzBcclxuICAgICAgICBbNSwgMTQ1LCAxMTUsIDEwLCAxNDYsIDExNl0sXHJcbiAgICAgICAgWzE5LCA3NSwgNDcsIDEwLCA3NiwgNDhdLFxyXG4gICAgICAgIFsxNSwgNTQsIDI0LCAyNSwgNTUsIDI1XSxcclxuICAgICAgICBbMjMsIDQ1LCAxNSwgMjUsIDQ2LCAxNl0sXHJcblxyXG4gICAgICAgIC8vIDMxXHJcbiAgICAgICAgWzEzLCAxNDUsIDExNSwgMywgMTQ2LCAxMTZdLFxyXG4gICAgICAgIFsyLCA3NCwgNDYsIDI5LCA3NSwgNDddLFxyXG4gICAgICAgIFs0MiwgNTQsIDI0LCAxLCA1NSwgMjVdLFxyXG4gICAgICAgIFsyMywgNDUsIDE1LCAyOCwgNDYsIDE2XSxcclxuXHJcbiAgICAgICAgLy8gMzJcclxuICAgICAgICBbMTcsIDE0NSwgMTE1XSxcclxuICAgICAgICBbMTAsIDc0LCA0NiwgMjMsIDc1LCA0N10sXHJcbiAgICAgICAgWzEwLCA1NCwgMjQsIDM1LCA1NSwgMjVdLFxyXG4gICAgICAgIFsxOSwgNDUsIDE1LCAzNSwgNDYsIDE2XSxcclxuXHJcbiAgICAgICAgLy8gMzNcclxuICAgICAgICBbMTcsIDE0NSwgMTE1LCAxLCAxNDYsIDExNl0sXHJcbiAgICAgICAgWzE0LCA3NCwgNDYsIDIxLCA3NSwgNDddLFxyXG4gICAgICAgIFsyOSwgNTQsIDI0LCAxOSwgNTUsIDI1XSxcclxuICAgICAgICBbMTEsIDQ1LCAxNSwgNDYsIDQ2LCAxNl0sXHJcblxyXG4gICAgICAgIC8vIDM0XHJcbiAgICAgICAgWzEzLCAxNDUsIDExNSwgNiwgMTQ2LCAxMTZdLFxyXG4gICAgICAgIFsxNCwgNzQsIDQ2LCAyMywgNzUsIDQ3XSxcclxuICAgICAgICBbNDQsIDU0LCAyNCwgNywgNTUsIDI1XSxcclxuICAgICAgICBbNTksIDQ2LCAxNiwgMSwgNDcsIDE3XSxcclxuXHJcbiAgICAgICAgLy8gMzVcclxuICAgICAgICBbMTIsIDE1MSwgMTIxLCA3LCAxNTIsIDEyMl0sXHJcbiAgICAgICAgWzEyLCA3NSwgNDcsIDI2LCA3NiwgNDhdLFxyXG4gICAgICAgIFszOSwgNTQsIDI0LCAxNCwgNTUsIDI1XSxcclxuICAgICAgICBbMjIsIDQ1LCAxNSwgNDEsIDQ2LCAxNl0sXHJcblxyXG4gICAgICAgIC8vIDM2XHJcbiAgICAgICAgWzYsIDE1MSwgMTIxLCAxNCwgMTUyLCAxMjJdLFxyXG4gICAgICAgIFs2LCA3NSwgNDcsIDM0LCA3NiwgNDhdLFxyXG4gICAgICAgIFs0NiwgNTQsIDI0LCAxMCwgNTUsIDI1XSxcclxuICAgICAgICBbMiwgNDUsIDE1LCA2NCwgNDYsIDE2XSxcclxuXHJcbiAgICAgICAgLy8gMzdcclxuICAgICAgICBbMTcsIDE1MiwgMTIyLCA0LCAxNTMsIDEyM10sXHJcbiAgICAgICAgWzI5LCA3NCwgNDYsIDE0LCA3NSwgNDddLFxyXG4gICAgICAgIFs0OSwgNTQsIDI0LCAxMCwgNTUsIDI1XSxcclxuICAgICAgICBbMjQsIDQ1LCAxNSwgNDYsIDQ2LCAxNl0sXHJcblxyXG4gICAgICAgIC8vIDM4XHJcbiAgICAgICAgWzQsIDE1MiwgMTIyLCAxOCwgMTUzLCAxMjNdLFxyXG4gICAgICAgIFsxMywgNzQsIDQ2LCAzMiwgNzUsIDQ3XSxcclxuICAgICAgICBbNDgsIDU0LCAyNCwgMTQsIDU1LCAyNV0sXHJcbiAgICAgICAgWzQyLCA0NSwgMTUsIDMyLCA0NiwgMTZdLFxyXG5cclxuICAgICAgICAvLyAzOVxyXG4gICAgICAgIFsyMCwgMTQ3LCAxMTcsIDQsIDE0OCwgMTE4XSxcclxuICAgICAgICBbNDAsIDc1LCA0NywgNywgNzYsIDQ4XSxcclxuICAgICAgICBbNDMsIDU0LCAyNCwgMjIsIDU1LCAyNV0sXHJcbiAgICAgICAgWzEwLCA0NSwgMTUsIDY3LCA0NiwgMTZdLFxyXG5cclxuICAgICAgICAvLyA0MFxyXG4gICAgICAgIFsxOSwgMTQ4LCAxMTgsIDYsIDE0OSwgMTE5XSxcclxuICAgICAgICBbMTgsIDc1LCA0NywgMzEsIDc2LCA0OF0sXHJcbiAgICAgICAgWzM0LCA1NCwgMjQsIDM0LCA1NSwgMjVdLFxyXG4gICAgICAgIFsyMCwgNDUsIDE1LCA2MSwgNDYsIDE2XVxyXG4gICAgXVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5qC55o2u5pWw5o2u6I635Y+W5a+55bqU54mI5pysXHJcbiAgICAgKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cclxuICAgICAqL1xyXG4gICAgUVJDb2RlQWxnLnByb3RvdHlwZS5nZXRSaWdodFR5cGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgdHlwZU51bWJlciA9IDE7IHR5cGVOdW1iZXIgPCA0MTsgdHlwZU51bWJlcisrKSB7XHJcbiAgICAgICAgICAgIHZhciByc0Jsb2NrID0gUlNfQkxPQ0tfVEFCTEVbKHR5cGVOdW1iZXIgLSAxKSAqIDQgKyB0aGlzLmVycm9yQ29ycmVjdExldmVsXVxyXG4gICAgICAgICAgICBpZiAocnNCbG9jayA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYmFkIHJzIGJsb2NrIEAgdHlwZU51bWJlcjonICsgdHlwZU51bWJlciArICcvZXJyb3JDb3JyZWN0TGV2ZWw6JyArIHRoaXMuZXJyb3JDb3JyZWN0TGV2ZWwpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHJzQmxvY2subGVuZ3RoIC8gM1xyXG4gICAgICAgICAgICB2YXIgdG90YWxEYXRhQ291bnQgPSAwXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb3VudCA9IHJzQmxvY2tbaSAqIDMgKyAwXVxyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGFDb3VudCA9IHJzQmxvY2tbaSAqIDMgKyAyXVxyXG4gICAgICAgICAgICAgICAgdG90YWxEYXRhQ291bnQgKz0gZGF0YUNvdW50ICogY291bnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbGVuZ3RoQnl0ZXMgPSB0eXBlTnVtYmVyID4gOSA/IDIgOiAxXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnV0ZjhieXRlcy5sZW5ndGggKyBsZW5ndGhCeXRlcyA8IHRvdGFsRGF0YUNvdW50IHx8IHR5cGVOdW1iZXIgPT0gNDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHlwZU51bWJlciA9IHR5cGVOdW1iZXJcclxuICAgICAgICAgICAgICAgIHRoaXMucnNCbG9jayA9IHJzQmxvY2tcclxuICAgICAgICAgICAgICAgIHRoaXMudG90YWxEYXRhQ291bnQgPSB0b3RhbERhdGFDb3VudFxyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8vIFFSQml0QnVmZmVyXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIGZ1bmN0aW9uIFFSQml0QnVmZmVyKCkge1xyXG4gICAgICAgIHRoaXMuYnVmZmVyID0gbmV3IEFycmF5KClcclxuICAgICAgICB0aGlzLmxlbmd0aCA9IDBcclxuICAgIH1cclxuICAgIFFSQml0QnVmZmVyLnByb3RvdHlwZSA9IHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xyXG4gICAgICAgICAgICB2YXIgYnVmSW5kZXggPSBNYXRoLmZsb29yKGluZGV4IC8gOClcclxuICAgICAgICAgICAgcmV0dXJuICgodGhpcy5idWZmZXJbYnVmSW5kZXhdID4+PiAoNyAtIGluZGV4ICUgOCkpICYgMSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHB1dDogZnVuY3Rpb24gKG51bSwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHV0Qml0KCgobnVtID4+PiAobGVuZ3RoIC0gaSAtIDEpKSAmIDEpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwdXRCaXQ6IGZ1bmN0aW9uIChiaXQpIHtcclxuICAgICAgICAgICAgdmFyIGJ1ZkluZGV4ID0gTWF0aC5mbG9vcih0aGlzLmxlbmd0aCAvIDgpXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1ZmZlci5sZW5ndGggPD0gYnVmSW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyLnB1c2goMClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYml0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcltidWZJbmRleF0gfD0gKDB4ODAgPj4+ICh0aGlzLmxlbmd0aCAlIDgpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoKytcclxuICAgICAgICB9XHJcbiAgICB9IiwiaW1wb3J0IGFsYSBmcm9tICdAL3NlcnZpY2UvYWxhJ1xyXG4vKiAg5YiG5Lqr5Zu+5paHXHJcbiAqICBzY2VuZTrlnLrmma/kvKDlhaUgc2hhcmVTY2VuZeS4reeahOWAvDp3ZWl4aW7jgIF3ZXhpbkZyaWVuZOOAgXFx44CBd2VpYm/jgIFjb3B544CBc2F2ZeOAgeetiVxyXG4gKiAgdGl0bGU6IOagh+mimFxyXG4gKiAgc3VtbWFyeTog566A5LuLXHJcbiAqICB1cmw65Zu+54mH5Zyw5Z2A44CB6Z+z6aKR5Zyw5Z2A44CB6KeG6aKR5Zyw5Z2AXHJcbiAqICBocmVmOiDliIbkuqvpk77mjqVcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzaGFyZShkYXRhLCB0aXRsZSwgc3VtbWFyeSwgdXJsLCBocmVmKSB7XHJcbiAgdW5pLnNoYXJlKHtcclxuICAgIHByb3ZpZGVyOiBkYXRhLnByb3ZpZGVyLFxyXG4gICAgc2NlbmU6IGRhdGEuc2NlbmUsXHJcbiAgICB0eXBlOiAwLFxyXG4gICAgaHJlZjogaHJlZixcclxuICAgIHRpdGxlOiB0aXRsZSxcclxuICAgIHN1bW1hcnk6IHN1bW1hcnksXHJcbiAgICBpbWFnZVVybDogdXJsXHJcbiAgfSlcclxufVxyXG5cclxuLyogIOWIhuS6q+aWh+Wtl1xyXG4gKiAgc2NlbmU65Zy65pmv5Lyg5YWlIHNoYXJlU2NlbmXkuK3nmoTlgLw6d2VpeGlu44CBd2V4aW5GcmllbmTjgIFxceOAgXdlaWJv562JXHJcbiAqICB0ZXh0OiDmlofmnKzmloflrZdcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzaGFyZVRleHQoZGF0YSwgdGV4dCkge1xyXG4gIHVuaS5zaGFyZSh7XHJcbiAgICBwcm92aWRlcjogZGF0YS5wcm92aWRlcixcclxuICAgIHNjZW5lOiBkYXRhLnNjZW5lLFxyXG4gICAgdHlwZTogMSxcclxuICAgIHN1bW1hcnk6IHRleHQsXHJcbiAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXMpIHt9LFxyXG4gICAgZmFpbDogZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgIGFsYS50b2FzdChlcnIpXHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuLyogIOWIhuS6q+WbvueJh1xyXG4gKiAgc2NlbmU65Zy65pmv5Lyg5YWlIHNoYXJlU2NlbmXkuK3nmoTlgLw6d2VpeGlu44CBd2V4aW5GcmllbmTjgIFxceOAgXdlaWJv562JXHJcbiAqICBpbWFnZVVybDog5Zu+54mH5Zyw5Z2A77yM5Y+v5Lul5piv6L+c56iL5Zyw5Z2AXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2hhcmVJbWFnZShkYXRhLCBpbWFnZVVybCkge1xyXG4gIHVuaS5zaGFyZSh7XHJcbiAgICBwcm92aWRlcjogZGF0YS5wcm92aWRlcixcclxuICAgIHNjZW5lOiBkYXRhLnNjZW5lLFxyXG4gICAgdHlwZTogMixcclxuICAgIGltYWdlVXJsOiBpbWFnZVVybCxcclxuICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlcykge30sXHJcbiAgICBmYWlsOiBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgYWxhLnRvYXN0KGVycilcclxuICAgIH1cclxuICB9KVxyXG59XHJcblxyXG4vKlxyXG4gKiDojrflj5bliIbkuqvkuqflnLrmma9cclxuICovXHJcbmZ1bmN0aW9uIGdldFNjZW5lKHNjZW5lKSB7XHJcbiAgdmFyIHNoYXJlU2NlbmUgPSBzaGFyZVNjZW5lMltzY2VuZV1cclxuICAvLyB2YXIgc2hhcmVTY2VuZSA9ICd3ZWl4aW4nXHJcbiAgaWYgKCFzaGFyZVNjZW5lKSB7XHJcbiAgICBhbGEudG9hc3QoJ+ivt+i+k+WFpeato+ehruWIhuS6q+WcuuaZryzlnLrmma/lgLzvvJp3ZWl4aW7jgIF3ZXhpbkZyaWVuZOOAgXFx44CBd2VpYm/nrYknKVxyXG4gIH1cclxuICByZXR1cm4gc2hhcmVTY2VuZVxyXG59XHJcblxyXG4vKlxyXG4gKiDliIbkuqvlpI3liLZcclxuICpcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzaGFyZUNvcHkodGV4dCkge1xyXG4gIHVuaS5zZXRDbGlwYm9hcmREYXRhKHtcclxuICAgIGRhdGE6IHRleHQsXHJcbiAgICBjb21wbGV0ZSgpIHtcclxuICAgICAgdW5pLnNob3dUb2FzdCh7XHJcbiAgICAgICAgdGl0bGU6ICflt7LlpI3liLbliLDliarotLTmnb8nXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfSlcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiDkuIvovb3lm77niYfliLDmnKzlnLBcclxuICogXHJcbiAqICovIFxyXG5leHBvcnQgZnVuY3Rpb24gc2hhcmVEb3duKHVybCkge1xyXG5cdHVuaS5kb3dubG9hZEZpbGUoe1xyXG5cdCAgICB1cmw6IHVybCxcclxuXHQgICAgc3VjY2VzczogKHJlcykgPT4ge1xyXG5cdCAgICAgICAgaWYgKHJlcy5zdGF0dXNDb2RlID09PSAyMDApIHtcclxuXHRcdFx0XHR1bmkuc2F2ZUltYWdlVG9QaG90b3NBbGJ1bSh7XHJcblx0XHRcdFx0XHRmaWxlUGF0aDogcmVzLnRlbXBGaWxlUGF0aCxcclxuXHRcdFx0XHRcdHN1Y2Nlc3M6IHJlcyA9PiB7XHJcblx0XHRcdFx0XHRcdHVuaS5zaG93VG9hc3Qoe1xyXG5cdFx0XHRcdFx0XHRcdHRpdGxlOiAn5L+d5a2Y5Zu+54mH5oiQ5YqfJ1xyXG5cdFx0XHRcdFx0XHR9KVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pXHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHR9KVxyXG59XHJcblxyXG4vKlxyXG4gKiDliIbkuqvmm7TlpJpcclxuICpcclxuICovXHJcbmZ1bmN0aW9uIHNoYXJlTW9yZSgpIHt9XHJcbi8vIOWIhuS6q+WcuuaZr1xyXG5leHBvcnQgbGV0IHNoYXJlU2NlbmUyID0ge1xyXG4gIHdlaXhpbjoge1xyXG4gICAgbmFtZTogJ+W+ruS/oeWlveWPiycsXHJcbiAgICBwcm92aWRlcjogJ3dlaXhpbicsXHJcbiAgICBzY2VuZTogJ1dYU2NlbmVTZXNzaW9uJyxcclxuICAgIGljb246ICdpY29uLXdlaXhpbidcclxuICB9LFxyXG4gIHdlaXhpbkZyaWVuZDoge1xyXG4gICAgbmFtZTogJ+W+ruS/oeaci+WPi+WciCcsXHJcbiAgICBwcm92aWRlcjogJ3dlaXhpbicsXHJcbiAgICBzY2VuZTogJ1dYU2VuY2VUaW1lbGluZScsXHJcbiAgICBpY29uOiAnaWNvbi13ZWl4aW4tZnJpZW5kJ1xyXG4gIH0sXHJcbiAgcXE6IHtcclxuICAgIG5hbWU6ICdRUeWlveWPiycsXHJcbiAgICBwcm92aWRlcjogJ3FxJyxcclxuICAgIHNjZW5lOiAncXEnLFxyXG4gICAgaWNvbjogJ2ljb24tcXEnXHJcbiAgfSxcclxuICB3ZWlibzoge1xyXG4gICAgbmFtZTogJ+W+ruWNmicsXHJcbiAgICBwcm92aWRlcjogJ3NpbmF3ZWlibycsXHJcbiAgICBzY2VuZTogJ3NpbmF3ZWlibycsXHJcbiAgICBpY29uOiAnaWNvbi13ZWlibydcclxuICB9LFxyXG4gIHNhdmU6IHtcclxuICAgIG5hbWU6ICfkv53lrZjkuIvovb0nLFxyXG4gICAgcHJvdmlkZXI6ICdzYXZlJyxcclxuICAgIHNjZW5lOiAnc2F2ZScsXHJcbiAgICBpY29uOiAnaWNvbi1zYXZlJ1xyXG4gIH0sXHJcbiAgY29weToge1xyXG4gICAgbmFtZTogJ+WkjeWIticsXHJcbiAgICBwcm92aWRlcjogJ2NvcHknLFxyXG4gICAgc2NlbmU6ICdjb3B5JyxcclxuICAgIGljb246ICdpY29uLWNvcHknXHJcbiAgfSxcclxuICBtb3JlOiB7XHJcbiAgICBuYW1lOiAn5pu05aSaJyxcclxuICAgIHByb3ZpZGVyOiAnbW9yZScsXHJcbiAgICBzY2VuZTogJ21vcmUnLFxyXG4gICAgaWNvbjogJ2ljb24tbW9yZSdcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IGFsYSBmcm9tICdAL3NlcnZpY2UvYWxhLmpzJ1xyXG5cclxuLypcclxuICog54K56LWe54q25oCB77yM5bey57uP54K56LWe6L+U5ZuedHJ1Ze+8jOayoeacieeCuei1nui/lOWbnmZhbHNlXHJcbiAqIOeUqOadpeWIpOaWreeCuei1nuaMiemSrueahOeCuei1nui9rOaAgVxyXG4gKiBAcGFyYSB0eXBl77ya5a6e5L2T57G75Z6L77ya5q+U5aaC5ZWG5ZOBUHJvZHVjdCzorqLljZU6T3JkZXIs55So5oi3OlVzZXJcclxuICogQHBhcmEgaWQg5a6e5L2TSWTvvJrmr5TlpoLllYblk4FJZO+8jOiuouWNlUlk562JXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdGh1bWJzVXBTdGF0dXModHlwZSwgaWQpIHtcclxuICB2YXIgcGFyYSA9IHtcclxuICAgIHR5cGU6IHR5cGUsXHJcbiAgICBlbnRpdHlJZDogaWRcclxuICB9XHJcbiAgdmFyIHJlc3VsdCA9IGFsYS5odHRwR2V0KCdBcGkvdGh1bWJzVXAvU3RhdHVzJywgcGFyYSlcclxuICByZXR1cm4gcmVzdWx0XHJcbn1cclxuXHJcbi8qXHJcbiAqIOa3u+WKoOeCuei1nlxyXG4gKiBAcGFyYSB0eXBl77ya5a6e5L2T57G75Z6L77ya5q+U5aaC5ZWG5ZOBUHJvZHVjdCzorqLljZU6T3JkZXIs55So5oi3OlVzZXJcclxuICogQHBhcmEgaWQg5a6e5L2TSWTvvJrmr5TlpoLllYblk4FJZO+8jOiuouWNlUlk562JXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdGh1bWJzVXBBZGQodHlwZSwgaWQpIHtcclxuICB2YXIgcGFyYSA9IHtcclxuICAgIHR5cGU6IHR5cGUsXHJcbiAgICBlbnRpdHlJZDogaWRcclxuICB9XHJcbiAgdmFyIHJlc3VsdCA9IGFsYS5odHRwUG9zdCgnQXBpL3RodW1ic1VwL0FkZCcsIHBhcmEpXHJcbiAgcmV0dXJuIHJlc3VsdFxyXG59XHJcblxyXG4vKlxyXG4gKiDmt7vliqDngrnotZ5cclxuICogQHBhcmEgdHlwZe+8muWunuS9k+exu+Wei++8muavlOWmguWVhuWTgVByb2R1Y3Qs6K6i5Y2VOk9yZGVyLOeUqOaItzpVc2VyXHJcbiAqIEBwYXJhIGlkIOWunuS9k0lk77ya5q+U5aaC5ZWG5ZOBSWTvvIzorqLljZVJZOetiVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHRodW1ic1VwQ2FuY2VsKHR5cGUsIGlkKSB7XHJcbiAgdmFyIHBhcmEgPSB7XHJcbiAgICB0eXBlOiB0eXBlLFxyXG4gICAgZW50aXR5SWQ6IGlkXHJcbiAgfVxyXG4gIHZhciByZXN1bHQgPSBhbGEuaHR0cFBvc3QoJ0FwaS90aHVtYnNVcC9DYW5jZWwnLCBwYXJhKVxyXG4gIHJldHVybiByZXN1bHRcclxufVxyXG4iLCJcbiAgICAgICAgaW1wb3J0ICdAZGNsb3VkaW8vdW5pLXN0YXQnO1xuICAgICAgICBpbXBvcnQgJ3VuaS1hcHAtc3R5bGUnXG4gICAgICAgIGltcG9ydCBBcHAgZnJvbSAnLi9wYWdlcy9zdWJudnVlL21hbmFnZS90b3AubnZ1ZT9tcFR5cGU9cGFnZSdcbiAgICAgICAgQXBwLm1wVHlwZSA9ICdwYWdlJ1xuICAgICAgICBBcHAucm91dGUgPSAncGFnZXMvc3VibnZ1ZS9tYW5hZ2UvdG9wJ1xuICAgICAgICBBcHAuZWwgPSAnI3Jvb3QnXG4gICAgICAgIG5ldyBWdWUoQXBwKVxuICAgICAgICAiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucywgcmVjeWNsYWJsZVJlbmRlciwgY29tcG9uZW50cyB9IGZyb20gXCIuL3RvcC5udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTBjMWI4ZTQwJm1wVHlwZT1wYWdlXCJcbnZhciByZW5kZXJqc1xuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi90b3AubnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZtcFR5cGU9cGFnZVwiXG5leHBvcnQgKiBmcm9tIFwiLi90b3AubnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZtcFR5cGU9cGFnZVwiXG5mdW5jdGlvbiBpbmplY3RTdHlsZXMgKGNvbnRleHQpIHtcbiAgXG4gIGlmKCF0aGlzLm9wdGlvbnMuc3R5bGUpe1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5zdHlsZSA9IHt9XG4gICAgICB9XG4gICAgICBpZihWdWUucHJvdG90eXBlLl9fbWVyZ2Vfc3R5bGUgJiYgVnVlLnByb3RvdHlwZS5fXyRhcHBTdHlsZV9fKXtcbiAgICAgICAgVnVlLnByb3RvdHlwZS5fX21lcmdlX3N0eWxlKFZ1ZS5wcm90b3R5cGUuX18kYXBwU3R5bGVfXywgdGhpcy5vcHRpb25zLnN0eWxlKVxuICAgICAgfVxuICAgICAgaWYoVnVlLnByb3RvdHlwZS5fX21lcmdlX3N0eWxlKXtcbiAgICAgICAgICAgICAgICBWdWUucHJvdG90eXBlLl9fbWVyZ2Vfc3R5bGUocmVxdWlyZShcIi4vdG9wLm52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmbXBUeXBlPXBhZ2VcIikuZGVmYXVsdCwgdGhpcy5vcHRpb25zLnN0eWxlKVxuICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLm9wdGlvbnMuc3R5bGUscmVxdWlyZShcIi4vdG9wLm52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmbXBUeXBlPXBhZ2VcIikuZGVmYXVsdClcbiAgICAgICAgICAgIH1cblxufVxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIUQ6XFxcXOi9r+S7tlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXHJ1bnRpbWVcXFxcY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIFwiMzEyYTBlMjBcIixcbiAgZmFsc2UsXG4gIGNvbXBvbmVudHMsXG4gIHJlbmRlcmpzXG4pXG5cbmluamVjdFN0eWxlcy5jYWxsKGNvbXBvbmVudClcbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwiQzovVXNlcnMvYWEvRGVza3RvcC/lt6XkvZwvYmRkd2ViL3NyYy9wYWdlcy9zdWJudnVlL21hbmFnZS90b3AubnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImV4cG9ydCAqIGZyb20gXCItIUQ6XFxcXOi9r+S7tlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGxvYWRlcnNcXFxcdGVtcGxhdGVMb2FkZXIuanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyFEOlxcXFzova/ku7ZcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLWhidWlsZGVyeFxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXVuaS1udnVlLWxvYWRlclxcXFxsaWJcXFxcdGVtcGxhdGUuanMhRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay11bmktYXBwLWxvYWRlclxcXFxwYWdlLW1ldGEuanMhRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlclxcXFxpbmRleC5qcz8/cmVmLS03LTAhRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcdnVlLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3RvcC5udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTBjMWI4ZTQwJm1wVHlwZT1wYWdlXCIiLCJ2YXIgY29tcG9uZW50c1xudmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcInZpZXdcIiwgeyBzdGF0aWNDbGFzczogW1wiaW5kZXgtYmdcIl0gfSwgW1xuICAgIF9jKFxuICAgICAgXCJ2aWV3XCIsXG4gICAgICB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBbXCJpbmRleC1iZy1zaG93XCJdLFxuICAgICAgICBzdHlsZToge1xuICAgICAgICAgIHdpZHRoOiBfdm0uc2NyZWVuV2lkdGggKyBcInB4XCIsXG4gICAgICAgICAgaGVpZ2h0OiA0NSArIF92bS5zdGF0dXNIZWlnaHQgKyBcInB4XCJcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFtcbiAgICAgICAgX2MoXCJ1LWltYWdlXCIsIHtcbiAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgd2lkdGg6IF92bS5zY3JlZW5XaWR0aCArIFwicHhcIixcbiAgICAgICAgICAgIGhlaWdodDogNDUgKyBfdm0uc3RhdHVzSGVpZ2h0ICsgXCJweFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBhdHRyczogeyBzcmM6IFwiL3N0YXRpYy9pbWFnZS9ob21lL2luZGV4X25hdl9iZy5wbmdcIiB9XG4gICAgICAgIH0pXG4gICAgICBdLFxuICAgICAgMVxuICAgICksXG4gICAgX2MoXG4gICAgICBcInZpZXdcIixcbiAgICAgIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6IFtcImluZGV4LW5hdlwiXSxcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICB3aWR0aDogX3ZtLnNjcmVlbldpZHRoICsgXCJweFwiLFxuICAgICAgICAgIG1hcmdpblRvcDogX3ZtLnN0YXR1c0hlaWdodCArIFwicHhcIlxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcInZpZXdcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBbXCJpbmRleC1uYXYtbGVmdFwiXSB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwidS1pbWFnZVwiLCB7XG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBbXCJpbmRleC1uYXYtbGVmdC1pY29uXCJdLFxuICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IFwiL3N0YXRpYy9pbWFnZS9ob21lL2FkZHJlc3MucG5nXCIgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJ1LXRleHRcIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBbXCJpbmRleC1uYXYtbGVmdC10ZXh0XCJdLFxuICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uYWRkcmVzc0NsaWNrIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW192bS5fdihfdm0uX3MoX3ZtLmFkZHJlc3MpKV1cbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgXCJ1LXRleHRcIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBbXCJpbmRleC1uYXYtbGVmdC1jb250ZW50XCJdLFxuICAgICAgICAgICAgICAgIHN0eWxlOiB7IHdpZHRoOiBfdm0uc2NyZWVuV2lkdGggLSAyMDUgKyBcInB4XCIgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBbX3ZtLl92KFwi5bqX6ZO6566h55CGXCIpXVxuICAgICAgICAgICAgKVxuICAgICAgICAgIF0sXG4gICAgICAgICAgMVxuICAgICAgICApLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcInZpZXdcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBbXCJpbmRleC1uYXYtcmlnaHRcIl0gfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcInUtaW1hZ2VcIiwge1xuICAgICAgICAgICAgICBzdGF0aWNDbGFzczogW1wiaW5kZXgtbmF2LXJpZ2h0LWxlZnRcIl0sXG4gICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogXCIvc3RhdGljL2ltYWdlL2hvbWUvaG9uZ2Jhby5wbmdcIiB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF9jKFwidS1pbWFnZVwiLCB7XG4gICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBbXCJpbmRleC1uYXYtcmlnaHQtcmlnaHRcIl0sXG4gICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogXCIvc3RhdGljL2ltYWdlL2hvbWUvbXNnLnBuZ1wiIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgXSxcbiAgICAgICAgICAxXG4gICAgICAgIClcbiAgICAgIF1cbiAgICApXG4gIF0pXG59XG52YXIgcmVjeWNsYWJsZVJlbmRlciA9IGZhbHNlXG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucywgcmVjeWNsYWJsZVJlbmRlciwgY29tcG9uZW50cyB9IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSFEOlxcXFzova/ku7ZcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcYmFiZWwtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/cmVmLS00LTAhRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlclxcXFxpbmRleC5qcz8/cmVmLS00LTEhRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcdnVlLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3RvcC5udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJm1wVHlwZT1wYWdlXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXGJhYmVsLWxvYWRlclxcXFxsaWJcXFxcaW5kZXguanM/P3JlZi0tNC0wIUQ6XFxcXOi9r+S7tlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXJcXFxcaW5kZXguanM/P3JlZi0tNC0xIUQ6XFxcXOi9r+S7tlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi90b3AubnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZtcFR5cGU9cGFnZVwiIiwiPHRlbXBsYXRlPlxyXG4gPHZpZXcgY2xhc3M9XCJpbmRleC1iZ1wiPlxyXG4gICAgPHZpZXcgY2xhc3M9XCJpbmRleC1iZy1zaG93XCIgOnN0eWxlPVwieyB3aWR0aDogc2NyZWVuV2lkdGggKyAncHgnLCBoZWlnaHQ6IDQ1ICsgc3RhdHVzSGVpZ2h0ICsgJ3B4JyB9XCI+XHJcbiAgICAgIDxpbWFnZSBzcmM9XCIvc3RhdGljL2ltYWdlL2hvbWUvaW5kZXhfbmF2X2JnLnBuZ1wiIDpzdHlsZT1cInsgd2lkdGg6IHNjcmVlbldpZHRoICsgJ3B4JywgaGVpZ2h0OiA0NSArIHN0YXR1c0hlaWdodCArICdweCcgfVwiIC8+XHJcbiAgICA8L3ZpZXc+XHJcbiAgICA8dmlldyBjbGFzcz1cImluZGV4LW5hdlwiIDpzdHlsZT1cInsgd2lkdGg6IHNjcmVlbldpZHRoICsgJ3B4JywgbWFyZ2luVG9wOiBzdGF0dXNIZWlnaHQgKyAncHgnIH1cIj5cclxuICAgICAgPHZpZXcgY2xhc3M9XCJpbmRleC1uYXYtbGVmdFwiPlxyXG4gICAgICAgIDxpbWFnZSBzcmM9XCIvc3RhdGljL2ltYWdlL2hvbWUvYWRkcmVzcy5wbmdcIiBjbGFzcz1cImluZGV4LW5hdi1sZWZ0LWljb25cIiAvPlxyXG4gICAgICAgIDx0ZXh0IGNsYXNzPVwiaW5kZXgtbmF2LWxlZnQtdGV4dFwiIEBjbGljaz1cImFkZHJlc3NDbGlja1wiPnt7IGFkZHJlc3MgfX08L3RleHQ+XHJcbiAgICAgICAgPHRleHQgY2xhc3M9XCJpbmRleC1uYXYtbGVmdC1jb250ZW50XCIgOnN0eWxlPVwieyB3aWR0aDogc2NyZWVuV2lkdGggLSAyMDUgKyAncHgnIH1cIj7lupfpk7rnrqHnkIY8L3RleHQ+XHJcbiAgICAgIDwvdmlldz5cclxuICAgICAgPHZpZXcgY2xhc3M9XCJpbmRleC1uYXYtcmlnaHRcIj5cclxuICAgICAgICA8aW1hZ2Ugc3JjPVwiL3N0YXRpYy9pbWFnZS9ob21lL2hvbmdiYW8ucG5nXCIgY2xhc3M9XCJpbmRleC1uYXYtcmlnaHQtbGVmdFwiIC8+XHJcbiAgICAgICAgPGltYWdlIHNyYz1cIi9zdGF0aWMvaW1hZ2UvaG9tZS9tc2cucG5nXCIgY2xhc3M9XCJpbmRleC1uYXYtcmlnaHQtcmlnaHRcIiAvPlxyXG4gICAgICA8L3ZpZXc+XHJcbiAgICA8L3ZpZXc+XHJcbiAgPC92aWV3PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuaW1wb3J0IGFsYSBmcm9tICdAL3NlcnZpY2UvYWxhJ1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgZGF0YSgpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHNjcmVlbldpZHRoOiAwLFxyXG4gICAgICBzdGF0dXNIZWlnaHQ6IDAsXHJcbiAgICAgIGxpc3Q6IFsn5o6o6I2QJywgJ+aLm+WVhicsICfnm7Tmkq0nLCAn5L2T6aqMJywgJ+WfueiurScsICfph4fpm4YnXSxcclxuICAgICAgdGFiSW5kZXg6IDAsXHJcbiAgICAgIGFkZHJlc3M6ICcnXHJcbiAgICB9XHJcbiAgfSxcclxuICBtb3VudGVkKCkge1xyXG4gICAgdGhpcy5pbml0KClcclxuICB9LFxyXG4gIG1ldGhvZHM6IHtcclxuICAgIGFzeW5jIGluaXQoKSB7XHJcbiAgICAgIHRoaXMuc2NyZWVuV2lkdGggPSBhbGEuc2NyZWVuV2lkdGgoKVxyXG4gICAgICB0aGlzLnN0YXR1c0hlaWdodCA9IGFsYS5zdGF0dXNIZWlnaHQoKVxyXG4gICAgICB1bmkuJG9uKCdpbXRSZWNlbnRDaXR5JywgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFsYS5sb2NhbEdldCgnaW10UmVjZW50Q2l0eScpXHJcbiAgICAgIH0pXHJcbiAgICAgIHRoaXMuYWRkcmVzcyA9IGFsYS5sb2NhbEdldCgnaW10UmVjZW50Q2l0eScpXHJcblx0ICB0aGlzLmFkZHJlc3MgPSAn55Wq56a65Yy6J1xyXG4gICAgICAvLyAjaWZkZWYgQVBQLU5WVUVcclxuICAgICAgdGhpcy5hZGRyZXNzID0gYXdhaXQgYWxhLmFkZHJlc3NMb2NhdGlvbigpXHJcbiAgICAgIC8vICNlbmRpZlxyXG4gICAgfSxcclxuICAgIGFkZHJlc3NDbGljaygpIHtcclxuICAgICAgYWxhLnRvKCcvcGFnZXMvYWRkcmVzcy9pbmRleCcpXHJcbiAgICB9LFxyXG4gICAgdGFiQ2xpY2soaXRlbSwgaW5kZXgpIHtcclxuICAgICAgdGhpcy50YWJJbmRleCA9IGluZGV4XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIGxhbmc9XCJzY3NzXCI+XHJcbi5pbmRleC1uYXYge1xyXG4gIGhlaWdodDogNDVweDtcclxuICBwYWRkaW5nOiAwIDE0cHg7XHJcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICBcclxuICAmLWxlZnQge1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcblx0Ly9mbGV4LXNocmluazogMDtcclxuXHRcclxuICAgICYtaWNvbiB7XHJcbiAgICAgIHdpZHRoOiAxOHB4O1xyXG4gICAgICBoZWlnaHQ6IDE4cHg7XHJcbiAgICB9XHJcblxyXG4gICAgJi10ZXh0IHtcclxuICAgICAgd2lkdGg6IDUwcHg7XHJcbiAgICAgIGhlaWdodDogMjBweDtcclxuICAgICAgbGluZS1oZWlnaHQ6IDIwcHg7XHJcbiAgICAgIGZvbnQtc2l6ZTogMTNweDtcclxuICAgICAgZm9udC13ZWlnaHQ6IDYwMDtcclxuICAgICAgY29sb3I6ICNmZmZmZmY7XHJcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xyXG4gICAgICAvKiAjaWZkZWYgQVBQLVBMVVMtTlZVRSAqL1xyXG4gICAgICBsaW5lczogMTtcclxuICAgICAgLyogI2VuZGlmICovXHJcbiAgICAgIC8qICNpZmRlZiBNUCB8fCBINSAqL1xyXG4gICAgICAvLyB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG4gICAgICAvKiAjZW5kaWYgKi9cclxuICAgIH1cclxuXHJcbiAgICAmLWNvbnRlbnQge1xyXG5cdCAgaGVpZ2h0OiAyNXB4O1xyXG5cdCBjb2xvcjogI0ZGRkZGRjtcclxuXHQgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cdCBmb250LXNpemU6IDE2cHg7XHJcblx0IGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgfVxyXG5cclxuICAgICYtc2VhcmNoIHtcclxuICAgICAgd2lkdGg6IDIwcHg7XHJcbiAgICAgIGhlaWdodDogMjBweDtcclxuXHJcbiAgICAgICYtdGV4dCB7XHJcbiAgICAgICAgZm9udC1zaXplOiAxMnB4O1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiA1cHg7XHJcbiAgICAgICAgY29sb3I6ICNhM2EzYTM7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gICYtcmlnaHQge1xyXG4gICAgZmxleDogMTtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgJi1sZWZ0IHtcclxuICAgICAgaGVpZ2h0OiAzMHB4O1xyXG4gICAgICB3aWR0aDogMjdweDtcclxuXHQgIG1hcmdpbi1sZWZ0OiAxNXB4O1xyXG4gICAgfVxyXG5cdFxyXG4gICAgJi1yaWdodCB7XHQgIFxyXG4gICAgICBoZWlnaHQ6IDIwcHg7XHJcbiAgICAgIHdpZHRoOiAyMHB4O1xyXG5cdCAgbWFyZ2luOiAwIDRweDtcclxuICAgIH1cclxuXHRcclxuICAgICYtaWNvbiB7XHJcbiAgICAgIHdpZHRoOiAyNXB4O1xyXG4gICAgICBoZWlnaHQ6IDI1cHg7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbi5pbmRleC1iZyB7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIC8qICNpZm5kZWYgQVBQLU5WVUUgKi9cclxuICBwb3NpdGlvbjogZml4ZWQ7XHJcbiAgdG9wOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbiAgei1pbmRleDogMTAwO1xyXG4gIC8qICNlbmRpZiAqL1xyXG5cclxuICAvLyBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy9zdGF0aWMvaW1hZ2UvaG9tZS9pbmRleF9uYXZfYmcucG5nJyk7XHJcbiAgJi1zaG93IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGxlZnQ6IDA7XHJcbiAgfVxyXG59XHJcbjwvc3R5bGU+XHJcbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi1oYnVpbGRlcnhcXFxccGFja2FnZXNcXFxcd2VicGFjay11bmktbnZ1ZS1sb2FkZXJcXFxcbGliXFxcXHN0eWxlLmpzIUQ6XFxcXOi9r+S7tlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXJcXFxcaW5kZXguanM/P3JlZi0tOS1vbmVPZi0wLTEhRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXHBvc3Rjc3MtbG9hZGVyXFxcXHNyY1xcXFxpbmRleC5qcz8/cmVmLS05LW9uZU9mLTAtMiFEOlxcXFzova/ku7ZcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcc2Fzcy1sb2FkZXJcXFxcbGliXFxcXGxvYWRlci5qcz8/cmVmLS05LW9uZU9mLTAtMyFEOlxcXFzova/ku7ZcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXByZXByb2Nlc3MtbG9hZGVyXFxcXGluZGV4LmpzPz9yZWYtLTktb25lT2YtMC00IUQ6XFxcXOi9r+S7tlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4tdW5pXFxcXHBhY2thZ2VzXFxcXHZ1ZS1sb2FkZXJcXFxcbGliXFxcXGluZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi90b3AubnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9c2NzcyZtcFR5cGU9cGFnZVwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIUQ6XFxcXOi9r+S7tlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxAZGNsb3VkaW9cXFxcdnVlLWNsaS1wbHVnaW4taGJ1aWxkZXJ4XFxcXHBhY2thZ2VzXFxcXHdlYnBhY2stdW5pLW52dWUtbG9hZGVyXFxcXGxpYlxcXFxzdHlsZS5qcyFEOlxcXFzova/ku7ZcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx3ZWJwYWNrLXByZXByb2Nlc3MtbG9hZGVyXFxcXGluZGV4LmpzPz9yZWYtLTktb25lT2YtMC0xIUQ6XFxcXOi9r+S7tlxcXFxIQnVpbGRlclhcXFxccGx1Z2luc1xcXFx1bmlhcHAtY2xpXFxcXG5vZGVfbW9kdWxlc1xcXFxwb3N0Y3NzLWxvYWRlclxcXFxzcmNcXFxcaW5kZXguanM/P3JlZi0tOS1vbmVPZi0wLTIhRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXHNhc3MtbG9hZGVyXFxcXGxpYlxcXFxsb2FkZXIuanM/P3JlZi0tOS1vbmVPZi0wLTMhRDpcXFxc6L2v5Lu2XFxcXEhCdWlsZGVyWFxcXFxwbHVnaW5zXFxcXHVuaWFwcC1jbGlcXFxcbm9kZV9tb2R1bGVzXFxcXEBkY2xvdWRpb1xcXFx2dWUtY2xpLXBsdWdpbi11bmlcXFxccGFja2FnZXNcXFxcd2VicGFjay1wcmVwcm9jZXNzLWxvYWRlclxcXFxpbmRleC5qcz8/cmVmLS05LW9uZU9mLTAtNCFEOlxcXFzova/ku7ZcXFxcSEJ1aWxkZXJYXFxcXHBsdWdpbnNcXFxcdW5pYXBwLWNsaVxcXFxub2RlX21vZHVsZXNcXFxcQGRjbG91ZGlvXFxcXHZ1ZS1jbGktcGx1Z2luLXVuaVxcXFxwYWNrYWdlc1xcXFx2dWUtbG9hZGVyXFxcXGxpYlxcXFxpbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vdG9wLm52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPXNjc3MmbXBUeXBlPXBhZ2VcIiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBcImluZGV4LW5hdlwiOiB7XG4gICAgXCJoZWlnaHRcIjogXCI0NVwiLFxuICAgIFwicGFkZGluZ1RvcFwiOiAwLFxuICAgIFwicGFkZGluZ1JpZ2h0XCI6IFwiMTRcIixcbiAgICBcInBhZGRpbmdCb3R0b21cIjogMCxcbiAgICBcInBhZGRpbmdMZWZ0XCI6IFwiMTRcIixcbiAgICBcImZsZXhEaXJlY3Rpb25cIjogXCJyb3dcIixcbiAgICBcImFsaWduSXRlbXNcIjogXCJjZW50ZXJcIixcbiAgICBcImp1c3RpZnlDb250ZW50XCI6IFwic3BhY2UtYmV0d2VlblwiXG4gIH0sXG4gIFwiaW5kZXgtbmF2LWxlZnRcIjoge1xuICAgIFwiZmxleERpcmVjdGlvblwiOiBcInJvd1wiLFxuICAgIFwianVzdGlmeUNvbnRlbnRcIjogXCJmbGV4LXN0YXJ0XCIsXG4gICAgXCJhbGlnbkl0ZW1zXCI6IFwiY2VudGVyXCJcbiAgfSxcbiAgXCJpbmRleC1uYXYtbGVmdC1pY29uXCI6IHtcbiAgICBcIndpZHRoXCI6IFwiMThcIixcbiAgICBcImhlaWdodFwiOiBcIjE4XCJcbiAgfSxcbiAgXCJpbmRleC1uYXYtbGVmdC10ZXh0XCI6IHtcbiAgICBcIndpZHRoXCI6IFwiNTBcIixcbiAgICBcImhlaWdodFwiOiBcIjIwXCIsXG4gICAgXCJsaW5lSGVpZ2h0XCI6IFwiMjBcIixcbiAgICBcImZvbnRTaXplXCI6IFwiMTNcIixcbiAgICBcImZvbnRXZWlnaHRcIjogXCI2MDBcIixcbiAgICBcImNvbG9yXCI6IFwiI2ZmZmZmZlwiLFxuICAgIFwib3ZlcmZsb3dcIjogXCJoaWRkZW5cIixcbiAgICBcInRleHRPdmVyZmxvd1wiOiBcImVsbGlwc2lzXCIsXG4gICAgXCJsaW5lc1wiOiAxXG4gIH0sXG4gIFwiaW5kZXgtbmF2LWxlZnQtY29udGVudFwiOiB7XG4gICAgXCJoZWlnaHRcIjogXCIyNVwiLFxuICAgIFwiY29sb3JcIjogXCIjRkZGRkZGXCIsXG4gICAgXCJ0ZXh0QWxpZ25cIjogXCJjZW50ZXJcIixcbiAgICBcImZvbnRTaXplXCI6IFwiMTZcIixcbiAgICBcImZvbnRXZWlnaHRcIjogXCJib2xkXCJcbiAgfSxcbiAgXCJpbmRleC1uYXYtbGVmdC1zZWFyY2hcIjoge1xuICAgIFwid2lkdGhcIjogXCIyMFwiLFxuICAgIFwiaGVpZ2h0XCI6IFwiMjBcIlxuICB9LFxuICBcImluZGV4LW5hdi1sZWZ0LXNlYXJjaC10ZXh0XCI6IHtcbiAgICBcImZvbnRTaXplXCI6IFwiMTJcIixcbiAgICBcIm1hcmdpbkxlZnRcIjogXCI1XCIsXG4gICAgXCJjb2xvclwiOiBcIiNhM2EzYTNcIlxuICB9LFxuICBcImluZGV4LW5hdi1yaWdodFwiOiB7XG4gICAgXCJmbGV4XCI6IDEsXG4gICAgXCJmbGV4RGlyZWN0aW9uXCI6IFwicm93XCIsXG4gICAgXCJhbGlnbkl0ZW1zXCI6IFwiY2VudGVyXCIsXG4gICAgXCJqdXN0aWZ5Q29udGVudFwiOiBcInNwYWNlLWJldHdlZW5cIlxuICB9LFxuICBcImluZGV4LW5hdi1yaWdodC1sZWZ0XCI6IHtcbiAgICBcImhlaWdodFwiOiBcIjMwXCIsXG4gICAgXCJ3aWR0aFwiOiBcIjI3XCIsXG4gICAgXCJtYXJnaW5MZWZ0XCI6IFwiMTVcIlxuICB9LFxuICBcImluZGV4LW5hdi1yaWdodC1yaWdodFwiOiB7XG4gICAgXCJoZWlnaHRcIjogXCIyMFwiLFxuICAgIFwid2lkdGhcIjogXCIyMFwiLFxuICAgIFwibWFyZ2luVG9wXCI6IDAsXG4gICAgXCJtYXJnaW5SaWdodFwiOiBcIjRcIixcbiAgICBcIm1hcmdpbkJvdHRvbVwiOiAwLFxuICAgIFwibWFyZ2luTGVmdFwiOiBcIjRcIlxuICB9LFxuICBcImluZGV4LW5hdi1yaWdodC1pY29uXCI6IHtcbiAgICBcIndpZHRoXCI6IFwiMjVcIixcbiAgICBcImhlaWdodFwiOiBcIjI1XCJcbiAgfSxcbiAgXCJpbmRleC1iZ1wiOiB7XG4gICAgXCJwb3NpdGlvblwiOiBcInJlbGF0aXZlXCJcbiAgfSxcbiAgXCJpbmRleC1iZy1zaG93XCI6IHtcbiAgICBcInBvc2l0aW9uXCI6IFwiYWJzb2x1dGVcIixcbiAgICBcInRvcFwiOiAwLFxuICAgIFwibGVmdFwiOiAwXG4gIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9